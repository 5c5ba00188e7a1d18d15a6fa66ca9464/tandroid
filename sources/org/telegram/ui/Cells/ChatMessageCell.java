package org.telegram.ui.Cells;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.Keyframe;
import android.animation.ObjectAnimator;
import android.animation.PropertyValuesHolder;
import android.animation.ValueAnimator;
import android.app.Activity;
import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.LinearGradient;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Region;
import android.graphics.Shader;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.os.Build;
import android.os.Bundle;
import android.os.SystemClock;
import android.text.Layout;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.text.TextUtils;
import android.text.style.CharacterStyle;
import android.text.style.ClickableSpan;
import android.text.style.LeadingMarginSpan;
import android.text.style.URLSpan;
import android.util.Pair;
import android.util.Property;
import android.util.SparseArray;
import android.util.StateSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.ViewStructure;
import android.view.Window;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.accessibility.AccessibilityNodeProvider;
import android.view.animation.OvershootInterpolator;
import android.widget.Toast;
import androidx.core.content.ContextCompat;
import androidx.core.graphics.ColorUtils;
import androidx.core.math.MathUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.concurrent.atomic.AtomicReference;
import org.telegram.messenger.AccountInstance;
import org.telegram.messenger.AndroidUtilities;
import org.telegram.messenger.ApplicationLoader;
import org.telegram.messenger.ChatMessageSharedResources;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.DialogObject;
import org.telegram.messenger.DownloadController;
import org.telegram.messenger.Emoji;
import org.telegram.messenger.FileLoader;
import org.telegram.messenger.FileLog;
import org.telegram.messenger.FlagSecureReason;
import org.telegram.messenger.ImageLoader;
import org.telegram.messenger.ImageLocation;
import org.telegram.messenger.ImageReceiver;
import org.telegram.messenger.LiteMode;
import org.telegram.messenger.LocaleController;
import org.telegram.messenger.MediaController;
import org.telegram.messenger.MediaDataController;
import org.telegram.messenger.MessageObject;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.R;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.SharedConfig;
import org.telegram.messenger.UserConfig;
import org.telegram.messenger.UserObject;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.WebFile;
import org.telegram.messenger.browser.Browser;
import org.telegram.messenger.time.FastDateFormat;
import org.telegram.messenger.video.OldVideoPlayerRewinder;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC;
import org.telegram.tgnet.tl.TL_stories;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.AvatarSpan;
import org.telegram.ui.Cells.BaseCell;
import org.telegram.ui.Cells.ChatMessageCell;
import org.telegram.ui.Cells.DialogCell;
import org.telegram.ui.Cells.TextSelectionHelper;
import org.telegram.ui.ChatActivity;
import org.telegram.ui.Components.AnimatedEmojiDrawable;
import org.telegram.ui.Components.AnimatedEmojiSpan;
import org.telegram.ui.Components.AnimatedFileDrawable;
import org.telegram.ui.Components.AnimatedFloat;
import org.telegram.ui.Components.AnimatedNumberLayout;
import org.telegram.ui.Components.AnimationProperties;
import org.telegram.ui.Components.AudioVisualizerDrawable;
import org.telegram.ui.Components.AvatarDrawable;
import org.telegram.ui.Components.BackgroundGradientDrawable;
import org.telegram.ui.Components.ButtonBounce;
import org.telegram.ui.Components.CheckBoxBase;
import org.telegram.ui.Components.ColoredImageSpan;
import org.telegram.ui.Components.CubicBezierInterpolator;
import org.telegram.ui.Components.EmptyStubSpan;
import org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate;
import org.telegram.ui.Components.Forum.MessageTopicButton;
import org.telegram.ui.Components.ForwardBackground;
import org.telegram.ui.Components.InfiniteProgress;
import org.telegram.ui.Components.LinkPath;
import org.telegram.ui.Components.LinkSpanDrawable;
import org.telegram.ui.Components.LoadingDrawable;
import org.telegram.ui.Components.MessageBackgroundDrawable;
import org.telegram.ui.Components.MotionBackgroundDrawable;
import org.telegram.ui.Components.MsgClockDrawable;
import org.telegram.ui.Components.Point;
import org.telegram.ui.Components.Premium.boosts.BoostCounterSpan;
import org.telegram.ui.Components.Premium.boosts.cells.msg.GiveawayMessageCell;
import org.telegram.ui.Components.Premium.boosts.cells.msg.GiveawayResultsMessageCell;
import org.telegram.ui.Components.QuoteHighlight;
import org.telegram.ui.Components.QuoteSpan;
import org.telegram.ui.Components.RLottieDrawable;
import org.telegram.ui.Components.RadialProgress2;
import org.telegram.ui.Components.Reactions.ReactionsLayoutInBubble;
import org.telegram.ui.Components.RecyclerListView;
import org.telegram.ui.Components.ReplyMessageLine;
import org.telegram.ui.Components.RoundVideoPlayingDrawable;
import org.telegram.ui.Components.SeekBar;
import org.telegram.ui.Components.SeekBarAccessibilityDelegate;
import org.telegram.ui.Components.SeekBarWaveform;
import org.telegram.ui.Components.SizeNotifierFrameLayout;
import org.telegram.ui.Components.SlotsDrawable;
import org.telegram.ui.Components.StaticLayoutEx;
import org.telegram.ui.Components.StickerSetLinkIcon;
import org.telegram.ui.Components.Text;
import org.telegram.ui.Components.TextStyleSpan;
import org.telegram.ui.Components.TimerParticles;
import org.telegram.ui.Components.TranscribeButton;
import org.telegram.ui.Components.TypefaceSpan;
import org.telegram.ui.Components.URLSpanBotCommand;
import org.telegram.ui.Components.URLSpanBrowser;
import org.telegram.ui.Components.URLSpanMono;
import org.telegram.ui.Components.URLSpanNoUnderline;
import org.telegram.ui.Components.VideoForwardDrawable;
import org.telegram.ui.Components.VideoPlayer;
import org.telegram.ui.Components.spoilers.SpoilerEffect;
import org.telegram.ui.Components.spoilers.SpoilerEffect2;
import org.telegram.ui.GradientClip;
import org.telegram.ui.PhotoViewer;
import org.telegram.ui.PinchToZoomHelper;
import org.telegram.ui.SecretMediaViewer;
import org.telegram.ui.Stories.StoriesUtilities;
import org.telegram.ui.Stories.StoryViewer;
import org.telegram.ui.Stories.recorder.CaptionContainerView;
import org.telegram.ui.Stories.recorder.DominantColors;

/* loaded from: classes4.dex */
public class ChatMessageCell extends BaseCell implements SeekBar.SeekBarDelegate, ImageReceiver.ImageReceiverDelegate, DownloadController.FileDownloadProgressListener, TextSelectionHelper.SelectableView, NotificationCenter.NotificationCenterDelegate {
    private static float[] radii = new float[8];
    private final boolean ALPHA_PROPERTY_WORKAROUND;
    public Property ANIMATION_OFFSET_X;
    private int TAG;
    CharSequence accessibilityText;
    private boolean accessibilityTextContentUnread;
    private long accessibilityTextFileSize;
    private boolean accessibilityTextUnread;
    private SparseArray accessibilityVirtualViewBounds;
    private int[] adaptiveEmojiColor;
    private ColorFilter[] adaptiveEmojiColorFilter;
    private int addedCaptionHeight;
    private boolean addedForTest;
    private int additionalTimeOffsetY;
    private StaticLayout adminLayout;
    private boolean allowAssistant;
    private float alphaInternal;
    private int animateFromStatusDrawableParams;
    private boolean animatePollAnswer;
    private boolean animatePollAnswerAlpha;
    private boolean animatePollAvatars;
    private int animateToStatusDrawableParams;
    public AnimatedEmojiSpan.EmojiGroupedSpans animatedEmojiDescriptionStack;
    public AnimatedEmojiSpan.EmojiGroupedSpans animatedEmojiPollQuestion;
    public AnimatedEmojiSpan.EmojiGroupedSpans animatedEmojiReplyStack;
    public AnimatedEmojiSpan.EmojiGroupedSpans animatedEmojiStack;
    private int animatingDrawVideoImageButton;
    private float animatingDrawVideoImageButtonProgress;
    private float animatingLoadingProgressProgress;
    private int animatingNoSound;
    private boolean animatingNoSoundPlaying;
    private float animatingNoSoundProgress;
    private float animationOffsetX;
    private boolean animationRunning;
    private boolean attachedToWindow;
    private StaticLayout authorLayout;
    private int authorLayoutLeft;
    private int authorLayoutWidth;
    private boolean autoPlayingMedia;
    private int availableTimeWidth;
    protected AvatarDrawable avatarDrawable;
    private ImageReceiver avatarImage;
    private boolean avatarPressed;
    private Theme.MessageDrawable.PathDrawParams backgroundCacheParams;
    private MessageBackgroundDrawable backgroundDrawable;
    private int backgroundDrawableBottom;
    private int backgroundDrawableLeft;
    private int backgroundDrawableRight;
    private int backgroundDrawableTop;
    private int backgroundHeight;
    private int backgroundWidth;
    private ImageReceiver blurredPhotoImage;
    public int blurredViewBottomOffset;
    public int blurredViewTopOffset;
    private RectF boostCounterBounds;
    private Drawable boostCounterLayoutSelector;
    private boolean boostCounterPressed;
    private int boostCounterSelectorColor;
    private BoostCounterSpan boostCounterSpan;
    private Path botButtonPath;
    private float[] botButtonRadii;
    private ArrayList botButtons;
    private HashMap botButtonsByData;
    private HashMap botButtonsByPosition;
    private String botButtonsLayout;
    private boolean bottomNearToSet;
    private int buttonPressed;
    private int buttonState;
    private int buttonX;
    private int buttonY;
    private final boolean canDrawBackgroundInParent;
    private boolean canStreamVideo;
    public boolean captionAbove;
    private int captionFullWidth;
    private int captionHeight;
    public MessageObject.TextLayoutBlocks captionLayout;
    private int captionOffsetX;
    private int captionWidth;
    private float captionX;
    public float captionY;
    public ChannelRecommendationsCell channelRecommendationsCell;
    private CheckBoxBase checkBox;
    private boolean checkBoxAnimationInProgress;
    private float checkBoxAnimationProgress;
    public int checkBoxTranslation;
    private boolean checkBoxVisible;
    private boolean checkOnlyButtonPressed;
    public int childPosition;
    private GradientClip clip;
    private Paint clipPaint;
    public boolean clipToGroupBounds;
    private ButtonBounce closeSponsoredBounce;
    private RectF closeSponsoredBounds;
    private String closeTimeText;
    private int closeTimeWidth;
    private int commentArrowX;
    private AvatarDrawable[] commentAvatarDrawables;
    private ImageReceiver[] commentAvatarImages;
    private boolean[] commentAvatarImagesVisible;
    private boolean commentButtonPressed;
    private Rect commentButtonRect;
    private boolean commentDrawUnread;
    private StaticLayout commentLayout;
    private LoadingDrawable commentLoading;
    private AnimatedNumberLayout commentNumberLayout;
    private int commentNumberWidth;
    private InfiniteProgress commentProgress;
    private float commentProgressAlpha;
    private long commentProgressLastUpadteTime;
    private int commentUnreadX;
    private int commentWidth;
    private int commentX;
    public MessageObject.TextLayoutBlocks computedCaptionLayout;
    public int computedGroupCaptionY;
    private AvatarDrawable contactAvatarDrawable;
    public ButtonBounce contactBounce;
    private ArrayList contactButtons;
    public ReplyMessageLine contactLine;
    private boolean contactPressed;
    private RectF contactRect;
    private float controlsAlpha;
    public final int currentAccount;
    public Theme.MessageDrawable currentBackgroundDrawable;
    private Theme.MessageDrawable currentBackgroundSelectedDrawable;
    private CharSequence currentCaption;
    private TLRPC.Chat currentChat;
    private int currentFocusedVirtualView;
    private TLRPC.Chat currentForwardChannel;
    private String currentForwardName;
    private String currentForwardNameString;
    private TLRPC.User currentForwardUser;
    private int currentMapProvider;
    private MessageObject currentMessageObject;
    private MessageObject.GroupedMessages currentMessagesGroup;
    private long currentNameBotVerificationId;
    public AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable currentNameEmojiStatusDrawable;
    private Object currentNameStatus;
    public AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable currentNameStatusDrawable;
    private String currentNameString;
    private TLRPC.FileLocation currentPhoto;
    private String currentPhotoFilter;
    private String currentPhotoFilterThumb;
    private ImageLocation currentPhotoLocation;
    private TLRPC.PhotoSize currentPhotoObject;
    private TLRPC.PhotoSize currentPhotoObjectThumb;
    private BitmapDrawable currentPhotoObjectThumbStripped;
    private ImageLocation currentPhotoThumbLocation;
    private MessageObject.GroupedMessagePosition currentPosition;
    private String currentRepliesString;
    private TLRPC.PhotoSize currentReplyPhoto;
    private float currentSelectedBackgroundAlpha;
    private CharSequence currentTimeString;
    private String currentUnlockString;
    private String currentUrl;
    private TLRPC.User currentUser;
    private TLRPC.User currentViaBotUser;
    private String currentViewsString;
    private WebFile currentWebFile;
    private ChatMessageCellDelegate delegate;
    private RectF deleteProgressRect;
    private StaticLayout descriptionLayout;
    private int descriptionLayoutLeft;
    private int descriptionLayoutWidth;
    private int descriptionX;
    private int descriptionY;
    private Runnable diceFinishCallback;
    private boolean disallowLongPress;
    public boolean doNotDraw;
    private StaticLayout docTitleLayout;
    private int docTitleOffsetX;
    private int docTitleWidth;
    private TLRPC.Document documentAttach;
    private int documentAttachType;
    private boolean drawBackground;
    private boolean drawCommentButton;
    private boolean drawCommentNumber;
    private boolean drawContact;
    private boolean drawContactAdd;
    private boolean drawContactSendMessage;
    private boolean drawContactView;
    public boolean drawForBlur;
    private boolean drawForwardedName;
    public boolean drawFromPinchToZoom;
    private boolean drawImageButton;
    private boolean drawInstantView;
    public int drawInstantViewType;
    private boolean drawMediaCheckBox;
    private boolean drawName;
    private boolean drawNameLayout;
    public boolean drawPhotoImage;
    public boolean drawPinnedBottom;
    public boolean drawPinnedTop;
    private boolean drawRadialCheckBackground;
    private boolean drawSelectionBackground;
    private int drawSideButton;
    private int drawSideButton2;
    private boolean drawTime;
    private float drawTimeX;
    private float drawTimeY;
    private boolean drawTopic;
    private boolean drawVideoImageButton;
    private boolean drawVideoSize;
    public boolean drawingToBitmap;
    private int drawnContactButtonsFlag;
    private Paint drillHolePaint;
    private Path drillHolePath;
    private StaticLayout durationLayout;
    private int durationWidth;
    private boolean edited;
    private AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable effectDrawable;
    private ButtonBounce effectDrawableBounce;
    private long effectId;
    private int effectMessageId;
    boolean enterTransitionInProgress;
    public ExpiredStoryView expiredStoryView;
    private Drawable factCheckArrow;
    private int factCheckArrowColor;
    private ButtonBounce factCheckBounce;
    private int factCheckHeight;
    private boolean factCheckLarge;
    public ReplyMessageLine factCheckLine;
    private LinkSpanDrawable.LinkCollector factCheckLinks;
    private boolean factCheckPressed;
    private StaticLayout factCheckText2Layout;
    private int factCheckText2LayoutLeft;
    private StaticLayout factCheckTextLayout;
    private int factCheckTextLayoutHeight;
    private boolean factCheckTextLayoutLastLineEnd;
    private int factCheckTextLayoutLeft;
    private Text factCheckTitle;
    private Text factCheckWhat;
    private ButtonBounce factCheckWhatBounce;
    private boolean factCheckWhatPressed;
    private int factCheckWidth;
    private int factCheckY;
    private ColorMatrixColorFilter fancyBlurFilter;
    private boolean firstCircleLength;
    private int firstVisibleBlockNum;
    private boolean fitPhotoImage;
    private FlagSecureReason flagSecure;
    private boolean flipImage;
    private boolean forceNotDrawTime;
    private Drawable foreverDrawable;
    private int foreverDrawableColor;
    private AvatarSpan forwardAvatar;
    private ForwardBackground forwardBg;
    private boolean forwardBotPressed;
    private int forwardHeight;
    private int forwardNameCenterX;
    private final float[] forwardNameOffsetX;
    private boolean forwardNamePressed;
    private float forwardNameX;
    private int forwardNameY;
    private final StaticLayout[] forwardedNameLayout;
    private int forwardedNameWidth;
    private boolean frozen;
    private boolean fullyDraw;
    private boolean gamePreviewPressed;
    public final GiveawayMessageCell giveawayMessageCell;
    public final GiveawayResultsMessageCell giveawayResultsMessageCell;
    private Drawable gradientDrawable;
    private LinearGradient gradientShader;
    public GroupMedia groupMedia;
    private boolean groupPhotoInvisible;
    private MessageObject.GroupedMessages groupedMessagesToSet;
    private boolean hadLongPress;
    public boolean hasDiscussion;
    private boolean hasEmbed;
    private boolean hasFactCheck;
    private boolean hasGamePreview;
    private boolean hasInvoicePreview;
    private boolean hasInvoicePrice;
    private boolean hasLinkPreview;
    private int hasMiniProgress;
    private boolean hasNewLineForTime;
    private boolean hasOldCaptionPreview;
    private boolean hasPsaHint;
    public boolean hasReplyQuote;
    private int highlightCaptionToSetEnd;
    private int highlightCaptionToSetStart;
    private LinkPath highlightPath;
    private long highlightPathStart;
    private int highlightProgress;
    private boolean highlightedQuote;
    private float hintButtonProgress;
    private boolean hintButtonVisible;
    private int imageBackgroundColor;
    private int imageBackgroundGradientColor1;
    private int imageBackgroundGradientColor2;
    private int imageBackgroundGradientColor3;
    private int imageBackgroundGradientRotation;
    private float imageBackgroundIntensity;
    private int imageBackgroundSideColor;
    private int imageBackgroundSideWidth;
    private boolean imageDrawn;
    private boolean imagePressed;
    boolean imageReceiversAttachState;
    boolean imageReceiversVisibleState;
    private boolean inLayout;
    private StaticLayout infoLayout;
    private int infoWidth;
    private int infoX;
    private ButtonBounce instantButtonBounce;
    private LoadingDrawable instantButtonLoading;
    private boolean instantButtonPressed;
    private RectF instantButtonRect;
    public Drawable instantDrawable;
    public int instantDrawableColor;
    private Paint instantLinkArrowPaint;
    private Path instantLinkArrowPath;
    private boolean instantPressed;
    private int instantTextLeftX;
    private boolean instantTextNewLine;
    private int instantTextX;
    public String instantViewButtonText;
    private StaticLayout instantViewLayout;
    private float instantViewLayoutLeft;
    private float instantViewLayoutWidth;
    private int instantWidth;
    private Runnable invalidateListener;
    private Runnable invalidateRunnable;
    private boolean invalidateSpoilersParent;
    private boolean invalidatesParent;
    public boolean isAvatarVisible;
    public boolean isBlurred;
    public boolean isBot;
    public boolean isChat;
    private boolean isCheckPressed;
    public boolean isForum;
    public boolean isForumGeneral;
    private boolean isHighlighted;
    private boolean isHighlightedAnimated;
    private boolean isMedia;
    public boolean isMegagroup;
    public boolean isPinned;
    public boolean isPinnedChat;
    private boolean isPlayingRound;
    private boolean isPressed;
    public boolean isRepliesChat;
    public boolean isReplyQuote;
    private boolean isRoundVideo;
    public boolean isSavedChat;
    public boolean isSavedPreviewChat;
    private boolean isSmallImage;
    private boolean isSpoilerRevealing;
    public boolean isThreadChat;
    private boolean isThreadPost;
    private boolean isTitleLabelPressed;
    private boolean isUpdating;
    private int keyboardHeight;
    private long lastAnimationTime;
    private long lastCheckBoxAnimationTime;
    private long lastControlsAlphaChangeTime;
    private int lastDeleteDate;
    private float lastDrawingAudioProgress;
    private int lastHeight;
    private long lastHighlightProgressTime;
    private long lastLoadingSizeTotal;
    private long lastNamesAnimationTime;
    private TLRPC.Poll lastPoll;
    private long lastPollCloseTime;
    private ArrayList lastPollResults;
    private int lastPollResultsVoters;
    private String lastPostAuthor;
    private TLRPC.TL_messageReactions lastReactions;
    private int lastRepliesCount;
    private TLRPC.Message lastReplyMessage;
    private long lastSeekUpdateTime;
    private int lastSendState;
    int lastSize;
    private double lastTime;
    private float lastTouchX;
    private float lastTouchY;
    private boolean lastTranslated;
    private int lastViewsCount;
    private int lastVisibleBlockNum;
    private WebFile lastWebFile;
    private int lastWidth;
    private int layoutHeight;
    private int layoutWidth;
    public int linkBlockNum;
    public ReplyMessageLine linkLine;
    public boolean linkPreviewAbove;
    private ButtonBounce linkPreviewBounce;
    public int linkPreviewHeight;
    private boolean linkPreviewPressed;
    private Drawable linkPreviewSelector;
    public int linkPreviewSelectorColor;
    private int linkPreviewY;
    private int linkSelectionBlockNum;
    public long linkedChatId;
    public LinkSpanDrawable.LinkCollector links;
    private StaticLayout loadingProgressLayout;
    private long loadingProgressLayoutHash;
    private boolean locationExpired;
    private ImageReceiver locationImageReceiver;
    private Drawable locationLoadingThumb;
    public boolean makeVisibleAfterChange;
    private boolean mediaBackground;
    private CheckBoxBase mediaCheckBox;
    private int mediaOffsetY;
    private SpoilerEffect mediaSpoilerEffect;
    private SpoilerEffect2 mediaSpoilerEffect2;
    private Integer mediaSpoilerEffect2Index;
    private Path mediaSpoilerPath;
    private float[] mediaSpoilerRadii;
    private float mediaSpoilerRevealMaxRadius;
    private float mediaSpoilerRevealProgress;
    private float mediaSpoilerRevealX;
    private float mediaSpoilerRevealY;
    private boolean mediaWasInvisible;
    private MessageObject messageObjectToSet;
    private int miniButtonPressed;
    private int miniButtonState;
    private MotionBackgroundDrawable motionBackgroundDrawable;
    private StaticLayout nameLayout;
    private boolean nameLayoutPressed;
    private Drawable nameLayoutSelector;
    private int nameLayoutSelectorColor;
    private int nameLayoutWidth;
    private float nameOffsetX;
    private boolean nameStatusPressed;
    private Drawable nameStatusSelector;
    private int nameStatusSelectorColor;
    private String nameStatusSlug;
    private int nameWidth;
    private float nameX;
    private float nameY;
    public int namesOffset;
    private boolean needNewVisiblePart;
    public boolean needReplyImage;
    private int noSoundCenterX;
    private Paint onceClearPaint;
    private RLottieDrawable onceFire;
    private CaptionContainerView.PeriodDrawable oncePeriod;
    private Paint onceRadialCutPaint;
    private Paint onceRadialPaint;
    private Paint onceRadialStrokePaint;
    private boolean otherPressed;
    private int otherX;
    private int otherY;
    private int overideShouldDrawTimeOnMedia;
    private Runnable overrideInvalidate;
    private AudioVisualizerDrawable overridenAudioVisualizer;
    private long overridenDuration;
    public int parentBoundsBottom;
    public float parentBoundsTop;
    public int parentHeight;
    public float parentViewTopOffset;
    public int parentWidth;
    private StaticLayout performerLayout;
    private int performerX;
    private ImageReceiver photoImage;
    private Path photoImageClipPath;
    private float[] photoImageClipPathRadii;
    private boolean photoImageOutOfBounds;
    private boolean photoNotSet;
    private TLObject photoParentObject;
    private StaticLayout photosCountLayout;
    private int photosCountWidth;
    public boolean pinnedBottom;
    public boolean pinnedTop;
    private float pollAnimationProgress;
    private float pollAnimationProgressTime;
    private AvatarDrawable[] pollAvatarDrawables;
    private ImageReceiver[] pollAvatarImages;
    private boolean[] pollAvatarImagesVisible;
    private ArrayList pollButtons;
    private CheckBoxBase[] pollCheckBox;
    private boolean pollClosed;
    private boolean pollHintPressed;
    private int pollHintX;
    private int pollHintY;
    private boolean pollInstantViewTouchesBottom;
    private boolean pollUnvoteInProgress;
    private boolean pollVoteInProgress;
    private int pollVoteInProgressNum;
    private boolean pollVoted;
    private int pressedBlock;
    private int pressedBotButton;
    private MessageObject.TextLayoutBlock pressedCopyCode;
    private boolean pressedEffect;
    private AnimatedEmojiSpan pressedEmoji;
    private LinkSpanDrawable pressedFactCheckLink;
    private LinkSpanDrawable pressedLink;
    private int pressedLinkType;
    private int pressedSideButton;
    private int[] pressedState;
    private int pressedVoteButton;
    public MessageObject.TextLayoutBlocks prevCaptionLayout;
    private CharacterStyle progressLoadingLink;
    private LoadingDrawable progressLoadingLinkCurrentDrawable;
    private ArrayList progressLoadingLinkDrawables;
    private float psaButtonProgress;
    private boolean psaButtonVisible;
    private int psaHelpX;
    private int psaHelpY;
    private boolean psaHintPressed;
    public Drawable quoteArrow;
    public int quoteArrowColor;
    public Drawable[] quoteDrawable;
    public int[] quoteDrawableColor;
    public QuoteHighlight quoteHighlight;
    public ReplyMessageLine quoteLine;
    private RadialProgress2 radialProgress;
    protected float radialProgressAlpha;
    public final ReactionsLayoutInBubble reactionsLayoutInBubble;
    private RectF rect;
    private Path rectPath;
    private StaticLayout repliesLayout;
    private int repliesTextWidth;
    public ButtonBounce replyBounce;
    public float replyBounceX;
    public float replyBounceY;
    public float replyHeight;
    public ImageReceiver replyImageReceiver;
    public ReplyMessageLine replyLine;
    public StaticLayout replyNameLayout;
    private int replyNameOffset;
    private int replyNameWidth;
    private boolean replyPanelIsForward;
    private boolean replyPressed;
    private AnimatedFloat replyPressedFloat;
    public Drawable replyQuoteDrawable;
    public int replyQuoteDrawableColor;
    private Path replyRoundRectPath;
    public Drawable replySelector;
    private boolean replySelectorCanBePressed;
    public int replySelectorColor;
    private boolean replySelectorPressed;
    public float replySelectorRadLeft;
    public float replySelectorRadRight;
    public RectF replySelectorRect;
    public List replySpoilers;
    private final Stack replySpoilersPool;
    public int replyStartX;
    public int replyStartY;
    private int replyTextHeight;
    public StaticLayout replyTextLayout;
    public int replyTextOffset;
    public boolean replyTextRTL;
    private int replyTextWidth;
    private float replyTouchX;
    private float replyTouchY;
    private Theme.ResourcesProvider resourcesProvider;
    private float roundPlayingDrawableProgress;
    private float roundProgressAlpha;
    float roundSeekbarOutAlpha;
    float roundSeekbarOutProgress;
    int roundSeekbarTouched;
    private float roundToPauseProgress;
    private float roundToPauseProgress2;
    private AnimatedFloat roundVideoPlayPipFloat;
    private RoundVideoPlayingDrawable roundVideoPlayingDrawable;
    private final Path sPath;
    private boolean scheduledInvalidate;
    private Rect scrollRect;
    private SeekBar seekBar;
    private SeekBarAccessibilityDelegate seekBarAccessibilityDelegate;
    private int seekBarTranslateX;
    private SeekBarWaveform seekBarWaveform;
    private int seekBarWaveformTranslateX;
    private int seekBarX;
    private int seekBarY;
    float seekbarRoundX;
    float seekbarRoundY;
    private float selectedBackgroundProgress;
    private Paint selectionOverlayPaint;
    private final Drawable[] selectorDrawable;
    private int selectorDrawableColor;
    private int[] selectorDrawableMaskType;
    private final MaskDrawable[] selectorMaskDrawable;
    private Text sensitiveText;
    private Text sensitiveTextShort;
    private AnimatorSet shakeAnimation;
    private ChatMessageSharedResources sharedResources;
    public boolean shouldCheckVisibleOnScreen;
    private Path sideButtonPath1;
    private Path sideButtonPath2;
    private float[] sideButtonPathCorners1;
    private float[] sideButtonPathCorners2;
    private boolean sideButtonPressed;
    private boolean sideButtonVisible;
    private float sideStartX;
    private float sideStartY;
    public int signWidth;
    private StaticLayout siteNameLayout;
    private float siteNameLayoutWidth;
    private float siteNameLeft;
    private int siteNameWidth;
    private boolean skipFrameUpdate;
    private float slidingOffsetX;
    private StaticLayout songLayout;
    private int songX;
    private SpoilerEffect spoilerPressed;
    private AtomicReference spoilersPatchedReplyTextLayout;
    private boolean statusDrawableAnimationInProgress;
    private ValueAnimator statusDrawableAnimator;
    private float statusDrawableProgress;
    private StickerSetLinkIcon stickerSetIcons;
    private int substractBackgroundHeight;
    public int textX;
    public int textY;
    private float timeAlpha;
    private int timeAudioX;
    public StaticLayout timeLayout;
    private boolean timePressed;
    private int timeTextWidth;
    private boolean timeWasInvisible;
    public int timeWidth;
    private int timeWidthAudio;
    public int timeX;
    private TimerParticles timerParticles;
    private AnimatedFloat timerParticlesAlpha;
    private float timerTransitionProgress;
    private ButtonBounce titleLabelBounce;
    private StaticLayout titleLabelLayout;
    private float titleLabelLayoutHeight;
    private float titleLabelLayoutWidth;
    private float titleLabelX;
    private float titleLabelY;
    private StaticLayout titleLayout;
    private int titleLayoutLeft;
    private int titleLayoutWidth;
    private int titleX;
    private float toSeekBarProgress;
    private boolean topNearToSet;
    private MessageTopicButton topicButton;
    private long totalChangeTime;
    private int totalCommentWidth;
    public int totalHeight;
    private int totalVisibleBlocksCount;
    public TranscribeButton transcribeButton;
    private float transcribeX;
    private float transcribeY;
    public final TransitionParams transitionParams;
    public float transitionYOffsetForDrawables;
    private LoadingDrawable translationLoadingDrawable;
    private ArrayList translationLoadingDrawableText;
    private AnimatedFloat translationLoadingFloat;
    private LinkPath translationLoadingPath;
    private float unlockAlpha;
    private StaticLayout unlockLayout;
    private SpoilerEffect unlockSpoilerEffect;
    private Path unlockSpoilerPath;
    private float[] unlockSpoilerRadii;
    private int unlockTextWidth;
    private float unlockX;
    private float unlockY;
    private int unmovedTextX;
    private ArrayList urlPathCache;
    private ArrayList urlPathSelection;
    private boolean useSeekBarWaveform;
    private boolean useTranscribeButton;
    private int viaNameWidth;
    private boolean viaOnly;
    private TypefaceSpan viaSpan1;
    private TypefaceSpan viaSpan2;
    private int viaWidth;
    private boolean vibrateOnPollVote;
    private int videoButtonPressed;
    private int videoButtonX;
    private int videoButtonY;
    VideoForwardDrawable videoForwardDrawable;
    private StaticLayout videoInfoLayout;
    OldVideoPlayerRewinder videoPlayerRewinder;
    private RadialProgress2 videoRadialProgress;
    private float viewTop;
    private StaticLayout viewsLayout;
    private int viewsTextWidth;
    public int visibleHeight;
    private boolean visibleOnScreen;
    public int visibleParent;
    public float visibleParentOffset;
    public float visibleTop;
    private float voteCurrentCircleLength;
    private float voteCurrentProgressTime;
    private long voteLastUpdateTime;
    private float voteRadOffset;
    private boolean voteRisingCircleLength;
    private boolean wasLayout;
    private boolean wasPinned;
    private boolean wasSending;
    private boolean wasTranscriptionOpen;
    private int widthBeforeNewTimeLine;
    private int widthForButtons;
    private boolean willRemoved;
    private boolean wouldBeInPip;

    /* JADX INFO: Access modifiers changed from: private */
    class BotButton {
        private int angle;
        private TLRPC.KeyboardButton button;
        private int height;
        private boolean isInviteButton;
        private long lastUpdateTime;
        private LoadingDrawable loadingDrawable;
        private int positionFlags;
        private ValueAnimator pressAnimator;
        private float pressT;
        private boolean pressed;
        private float progressAlpha;
        private Drawable selectorDrawable;
        private Text title;
        private float width;
        private float x;
        private int y;

        private BotButton() {
        }

        static /* synthetic */ TLRPC.KeyboardButton access$1100(BotButton botButton) {
            return botButton.button;
        }

        static /* synthetic */ TLRPC.KeyboardButton access$1102(BotButton botButton, TLRPC.KeyboardButton keyboardButton) {
            botButton.button = keyboardButton;
            return keyboardButton;
        }

        static /* synthetic */ int access$1802(BotButton botButton, int i) {
            botButton.y = i;
            return i;
        }

        static /* synthetic */ float access$1900(BotButton botButton) {
            return botButton.x;
        }

        static /* synthetic */ float access$1902(BotButton botButton, float f) {
            botButton.x = f;
            return f;
        }

        static /* synthetic */ float access$2000(BotButton botButton) {
            return botButton.width;
        }

        static /* synthetic */ float access$2002(BotButton botButton, float f) {
            botButton.width = f;
            return f;
        }

        static /* synthetic */ int access$2102(BotButton botButton, int i) {
            botButton.height = i;
            return i;
        }

        static /* synthetic */ float access$3400(BotButton botButton) {
            return botButton.progressAlpha;
        }

        static /* synthetic */ float access$3402(BotButton botButton, float f) {
            botButton.progressAlpha = f;
            return f;
        }

        static /* synthetic */ int access$3500(BotButton botButton) {
            return botButton.angle;
        }

        static /* synthetic */ int access$3502(BotButton botButton, int i) {
            botButton.angle = i;
            return i;
        }

        static /* synthetic */ long access$3600(BotButton botButton) {
            return botButton.lastUpdateTime;
        }

        static /* synthetic */ long access$3602(BotButton botButton, long j) {
            botButton.lastUpdateTime = j;
            return j;
        }

        static /* synthetic */ int access$3776(BotButton botButton, int i) {
            int i2 = i | botButton.positionFlags;
            botButton.positionFlags = i2;
            return i2;
        }

        static /* synthetic */ Text access$3800(BotButton botButton) {
            return botButton.title;
        }

        static /* synthetic */ Text access$3802(BotButton botButton, Text text) {
            botButton.title = text;
            return text;
        }

        static /* synthetic */ boolean access$3902(BotButton botButton, boolean z) {
            botButton.isInviteButton = z;
            return z;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public float getPressScale() {
            if (this.pressed) {
                float f = this.pressT;
                if (f != 1.0f) {
                    float min = f + (Math.min(40.0f, 1000.0f / AndroidUtilities.screenRefreshRate) / 100.0f);
                    this.pressT = min;
                    this.pressT = Utilities.clamp(min, 1.0f, 0.0f);
                    ChatMessageCell.this.invalidateOutbounds();
                }
            }
            return ((1.0f - this.pressT) * 0.04f) + 0.96f;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$setPressed$0(ValueAnimator valueAnimator) {
            this.pressT = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatMessageCell.this.invalidateOutbounds();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void setPressed(boolean z) {
            ValueAnimator valueAnimator;
            if (this.pressed != z) {
                this.pressed = z;
                ChatMessageCell.this.invalidateOutbounds();
                if (z && (valueAnimator = this.pressAnimator) != null) {
                    valueAnimator.removeAllListeners();
                    this.pressAnimator.cancel();
                }
                if (z) {
                    return;
                }
                float f = this.pressT;
                if (f != 0.0f) {
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(f, 0.0f);
                    this.pressAnimator = ofFloat;
                    ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.Cells.ChatMessageCell$BotButton$$ExternalSyntheticLambda0
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                            ChatMessageCell.BotButton.this.lambda$setPressed$0(valueAnimator2);
                        }
                    });
                    this.pressAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.Cells.ChatMessageCell.BotButton.1
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animator) {
                            super.onAnimationEnd(animator);
                            BotButton.this.pressAnimator = null;
                        }
                    });
                    this.pressAnimator.setInterpolator(new OvershootInterpolator(2.0f));
                    this.pressAnimator.setDuration(350L);
                    this.pressAnimator.start();
                }
            }
        }

        public boolean hasPositionFlag(int i) {
            return (this.positionFlags & i) == i;
        }
    }

    public interface ChatMessageCellDelegate {

        public abstract /* synthetic */ class -CC {
            public static boolean $default$canDrawOutboundsContent(ChatMessageCellDelegate chatMessageCellDelegate) {
                return true;
            }

            public static boolean $default$canPerformActions(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static void $default$didLongPress(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, float f, float f2) {
            }

            public static void $default$didLongPressBotButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC.KeyboardButton keyboardButton) {
            }

            public static boolean $default$didLongPressChannelAvatar(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC.Chat chat, int i, float f, float f2) {
                return false;
            }

            public static boolean $default$didLongPressUserAvatar(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC.User user, float f, float f2) {
                return false;
            }

            public static void $default$didPressAboutRevenueSharingAds(ChatMessageCellDelegate chatMessageCellDelegate) {
            }

            public static boolean $default$didPressAnimatedEmoji(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, AnimatedEmojiSpan animatedEmojiSpan) {
                return false;
            }

            public static void $default$didPressBoostCounter(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressBotButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC.KeyboardButton keyboardButton) {
            }

            public static void $default$didPressCancelSendButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressChannelAvatar(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC.Chat chat, int i, float f, float f2, boolean z) {
            }

            public static void $default$didPressChannelRecommendation(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLObject tLObject, boolean z) {
            }

            public static void $default$didPressChannelRecommendationsClose(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressCodeCopy(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, MessageObject.TextLayoutBlock textLayoutBlock) {
            }

            public static void $default$didPressCommentButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressDialogButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressEffect(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressExtendedMediaPreview(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC.KeyboardButton keyboardButton) {
            }

            public static void $default$didPressFactCheck(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressFactCheckWhat(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i, int i2) {
            }

            public static void $default$didPressGiveawayChatButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i) {
            }

            public static void $default$didPressGroupImage(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, ImageReceiver imageReceiver, TLRPC.MessageExtendedMedia messageExtendedMedia, float f, float f2) {
            }

            public static void $default$didPressHiddenForward(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressHint(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i) {
            }

            public static void $default$didPressImage(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, float f, float f2, boolean z) {
            }

            public static void $default$didPressInstantButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i) {
            }

            public static void $default$didPressMoreChannelRecommendations(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressOther(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, float f, float f2) {
            }

            public static void $default$didPressReaction(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC.ReactionCount reactionCount, boolean z, float f, float f2) {
            }

            public static void $default$didPressReplyMessage(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i, float f, float f2, boolean z) {
            }

            public static void $default$didPressRevealSensitiveContent(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressSideButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressSponsoredClose(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressSponsoredInfo(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, float f, float f2) {
            }

            public static void $default$didPressTime(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressTopicButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
            }

            public static void $default$didPressUrl(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, CharacterStyle characterStyle, boolean z) {
            }

            public static void $default$didPressUserAvatar(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC.User user, float f, float f2, boolean z) {
            }

            public static void $default$didPressUserStatus(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, TLRPC.User user, TLRPC.Document document, String str) {
            }

            public static void $default$didPressViaBot(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, String str) {
            }

            public static void $default$didPressViaBotNotInline(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, long j) {
            }

            public static void $default$didPressVoteButtons(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, ArrayList arrayList, int i, int i2, int i3) {
            }

            public static void $default$didStartVideoStream(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject) {
            }

            public static boolean $default$doNotShowLoadingReply(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject) {
                return messageObject != null && messageObject.getDialogId() == UserObject.REPLY_BOT;
            }

            public static void $default$forceUpdate(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, boolean z) {
            }

            public static String $default$getAdminRank(ChatMessageCellDelegate chatMessageCellDelegate, long j) {
                return null;
            }

            public static PinchToZoomHelper $default$getPinchToZoomHelper(ChatMessageCellDelegate chatMessageCellDelegate) {
                return null;
            }

            public static String $default$getProgressLoadingBotButtonUrl(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
                return null;
            }

            public static CharacterStyle $default$getProgressLoadingLink(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
                return null;
            }

            public static TextSelectionHelper.ChatListTextSelectionHelper $default$getTextSelectionHelper(ChatMessageCellDelegate chatMessageCellDelegate) {
                return null;
            }

            public static boolean $default$hasSelectedMessages(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static void $default$invalidateBlur(ChatMessageCellDelegate chatMessageCellDelegate) {
            }

            public static boolean $default$isLandscape(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static boolean $default$isProgressLoading(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, int i) {
                return false;
            }

            public static boolean $default$isReplyOrSelf(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static boolean $default$keyboardIsOpened(ChatMessageCellDelegate chatMessageCellDelegate) {
                return false;
            }

            public static void $default$needOpenWebView(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject, String str, String str2, String str3, String str4, int i, int i2) {
            }

            public static boolean $default$needPlayMessage(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, MessageObject messageObject, boolean z) {
                return false;
            }

            public static void $default$needReloadPolls(ChatMessageCellDelegate chatMessageCellDelegate) {
            }

            public static void $default$needShowPremiumBulletin(ChatMessageCellDelegate chatMessageCellDelegate, int i) {
            }

            public static boolean $default$onAccessibilityAction(ChatMessageCellDelegate chatMessageCellDelegate, int i, Bundle bundle) {
                return false;
            }

            public static void $default$onDiceFinished(ChatMessageCellDelegate chatMessageCellDelegate) {
            }

            public static void $default$setShouldNotRepeatSticker(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject) {
            }

            public static boolean $default$shouldDrawThreadProgress(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell, boolean z) {
                return false;
            }

            public static boolean $default$shouldRepeatSticker(ChatMessageCellDelegate chatMessageCellDelegate, MessageObject messageObject) {
                return true;
            }

            public static boolean $default$shouldShowDialogButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
                return false;
            }

            public static boolean $default$shouldShowTopicButton(ChatMessageCellDelegate chatMessageCellDelegate, ChatMessageCell chatMessageCell) {
                return false;
            }

            public static void $default$videoTimerReached(ChatMessageCellDelegate chatMessageCellDelegate) {
            }
        }

        boolean canDrawOutboundsContent();

        boolean canPerformActions();

        boolean canPerformReply();

        void didLongPress(ChatMessageCell chatMessageCell, float f, float f2);

        void didLongPressBotButton(ChatMessageCell chatMessageCell, TLRPC.KeyboardButton keyboardButton);

        boolean didLongPressChannelAvatar(ChatMessageCell chatMessageCell, TLRPC.Chat chat, int i, float f, float f2);

        boolean didLongPressUserAvatar(ChatMessageCell chatMessageCell, TLRPC.User user, float f, float f2);

        void didPressAboutRevenueSharingAds();

        boolean didPressAnimatedEmoji(ChatMessageCell chatMessageCell, AnimatedEmojiSpan animatedEmojiSpan);

        void didPressBoostCounter(ChatMessageCell chatMessageCell);

        void didPressBotButton(ChatMessageCell chatMessageCell, TLRPC.KeyboardButton keyboardButton);

        void didPressCancelSendButton(ChatMessageCell chatMessageCell);

        void didPressChannelAvatar(ChatMessageCell chatMessageCell, TLRPC.Chat chat, int i, float f, float f2, boolean z);

        void didPressChannelRecommendation(ChatMessageCell chatMessageCell, TLObject tLObject, boolean z);

        void didPressChannelRecommendationsClose(ChatMessageCell chatMessageCell);

        void didPressCodeCopy(ChatMessageCell chatMessageCell, MessageObject.TextLayoutBlock textLayoutBlock);

        void didPressCommentButton(ChatMessageCell chatMessageCell);

        void didPressDialogButton(ChatMessageCell chatMessageCell);

        void didPressEffect(ChatMessageCell chatMessageCell);

        void didPressExtendedMediaPreview(ChatMessageCell chatMessageCell, TLRPC.KeyboardButton keyboardButton);

        void didPressFactCheck(ChatMessageCell chatMessageCell);

        void didPressFactCheckWhat(ChatMessageCell chatMessageCell, int i, int i2);

        void didPressGiveawayChatButton(ChatMessageCell chatMessageCell, int i);

        void didPressGroupImage(ChatMessageCell chatMessageCell, ImageReceiver imageReceiver, TLRPC.MessageExtendedMedia messageExtendedMedia, float f, float f2);

        void didPressHiddenForward(ChatMessageCell chatMessageCell);

        void didPressHint(ChatMessageCell chatMessageCell, int i);

        void didPressImage(ChatMessageCell chatMessageCell, float f, float f2, boolean z);

        void didPressInstantButton(ChatMessageCell chatMessageCell, int i);

        void didPressMoreChannelRecommendations(ChatMessageCell chatMessageCell);

        void didPressOther(ChatMessageCell chatMessageCell, float f, float f2);

        void didPressReaction(ChatMessageCell chatMessageCell, TLRPC.ReactionCount reactionCount, boolean z, float f, float f2);

        void didPressReplyMessage(ChatMessageCell chatMessageCell, int i, float f, float f2, boolean z);

        void didPressRevealSensitiveContent(ChatMessageCell chatMessageCell);

        void didPressSideButton(ChatMessageCell chatMessageCell);

        void didPressSponsoredClose(ChatMessageCell chatMessageCell);

        void didPressSponsoredInfo(ChatMessageCell chatMessageCell, float f, float f2);

        void didPressTime(ChatMessageCell chatMessageCell);

        void didPressTopicButton(ChatMessageCell chatMessageCell);

        void didPressUrl(ChatMessageCell chatMessageCell, CharacterStyle characterStyle, boolean z);

        void didPressUserAvatar(ChatMessageCell chatMessageCell, TLRPC.User user, float f, float f2, boolean z);

        void didPressUserStatus(ChatMessageCell chatMessageCell, TLRPC.User user, TLRPC.Document document, String str);

        void didPressViaBot(ChatMessageCell chatMessageCell, String str);

        void didPressViaBotNotInline(ChatMessageCell chatMessageCell, long j);

        void didPressVoteButtons(ChatMessageCell chatMessageCell, ArrayList arrayList, int i, int i2, int i3);

        void didPressWebPage(ChatMessageCell chatMessageCell, TLRPC.WebPage webPage, String str, boolean z);

        void didStartVideoStream(MessageObject messageObject);

        boolean doNotShowLoadingReply(MessageObject messageObject);

        void forceUpdate(ChatMessageCell chatMessageCell, boolean z);

        String getAdminRank(long j);

        PinchToZoomHelper getPinchToZoomHelper();

        String getProgressLoadingBotButtonUrl(ChatMessageCell chatMessageCell);

        CharacterStyle getProgressLoadingLink(ChatMessageCell chatMessageCell);

        TextSelectionHelper.ChatListTextSelectionHelper getTextSelectionHelper();

        boolean hasSelectedMessages();

        void invalidateBlur();

        boolean isLandscape();

        boolean isProgressLoading(ChatMessageCell chatMessageCell, int i);

        boolean isReplyOrSelf();

        boolean keyboardIsOpened();

        void needOpenWebView(MessageObject messageObject, String str, String str2, String str3, String str4, int i, int i2);

        boolean needPlayMessage(ChatMessageCell chatMessageCell, MessageObject messageObject, boolean z);

        void needReloadPolls();

        void needShowPremiumBulletin(int i);

        boolean onAccessibilityAction(int i, Bundle bundle);

        void onDiceFinished();

        void setShouldNotRepeatSticker(MessageObject messageObject);

        boolean shouldDrawThreadProgress(ChatMessageCell chatMessageCell, boolean z);

        boolean shouldRepeatSticker(MessageObject messageObject);

        boolean shouldShowDialogButton(ChatMessageCell chatMessageCell);

        boolean shouldShowTopicButton(ChatMessageCell chatMessageCell);

        void videoTimerReached();
    }

    private static class InstantViewButton {
        private ButtonBounce buttonBounce;
        private float buttonWidth;
        private StaticLayout layout;
        private final RectF rect;
        private Drawable selectorDrawable;
        private float textX;
        private int type;

        private InstantViewButton() {
            this.rect = new RectF();
        }

        static /* synthetic */ float access$5024(InstantViewButton instantViewButton, float f) {
            float f2 = instantViewButton.textX - f;
            instantViewButton.textX = f2;
            return f2;
        }
    }

    class LoadingDrawableLocation {
        int blockNum;
        LoadingDrawable drawable;

        LoadingDrawableLocation() {
        }
    }

    private static class MaskDrawable extends Drawable {
        protected final Paint maskPaint;
        public final Path path;
        public int pathX;
        public int pathY;
        public final RectF rect;

        private MaskDrawable() {
            Paint paint = new Paint(1);
            this.maskPaint = paint;
            paint.setColor(-1);
            this.rect = new RectF();
            this.path = new Path();
        }

        @Override // android.graphics.drawable.Drawable
        public void draw(Canvas canvas) {
            updatePath();
            canvas.drawPath(this.path, this.maskPaint);
        }

        @Override // android.graphics.drawable.Drawable
        public int getOpacity() {
            return -2;
        }

        @Override // android.graphics.drawable.Drawable
        public void setAlpha(int i) {
        }

        @Override // android.graphics.drawable.Drawable
        public void setColorFilter(ColorFilter colorFilter) {
        }

        public abstract void updatePath();
    }

    private class MessageAccessibilityNodeProvider extends AccessibilityNodeProvider {
        private Path linkPath;
        private Rect rect;
        private RectF rectF;

        private class ProfileSpan extends ClickableSpan {
            private TLRPC.User user;

            public ProfileSpan(TLRPC.User user) {
                this.user = user;
            }

            @Override // android.text.style.ClickableSpan
            public void onClick(View view) {
                if (ChatMessageCell.this.delegate != null) {
                    ChatMessageCell.this.delegate.didPressUserAvatar(ChatMessageCell.this, this.user, 0.0f, 0.0f, false);
                }
            }
        }

        private MessageAccessibilityNodeProvider() {
            this.linkPath = new Path();
            this.rectF = new RectF();
            this.rect = new Rect();
        }

        private ClickableSpan getLinkById(int i, boolean z) {
            if (i == 5000) {
                return null;
            }
            if (z) {
                int i2 = i - 3000;
                if (!(ChatMessageCell.this.currentMessageObject.caption instanceof Spannable) || i2 < 0) {
                    return null;
                }
                Spannable spannable = (Spannable) ChatMessageCell.this.currentMessageObject.caption;
                ClickableSpan[] clickableSpanArr = (ClickableSpan[]) spannable.getSpans(0, spannable.length(), ClickableSpan.class);
                if (clickableSpanArr.length <= i2) {
                    return null;
                }
                return clickableSpanArr[i2];
            }
            int i3 = i - 2000;
            if (!(ChatMessageCell.this.currentMessageObject.messageText instanceof Spannable) || i3 < 0) {
                return null;
            }
            Spannable spannable2 = (Spannable) ChatMessageCell.this.currentMessageObject.messageText;
            ClickableSpan[] clickableSpanArr2 = (ClickableSpan[]) spannable2.getSpans(0, spannable2.length(), ClickableSpan.class);
            if (clickableSpanArr2.length <= i3) {
                return null;
            }
            return clickableSpanArr2[i3];
        }

        /* JADX WARN: Removed duplicated region for block: B:254:0x02aa  */
        /* JADX WARN: Removed duplicated region for block: B:271:0x030b  */
        /* JADX WARN: Removed duplicated region for block: B:281:0x0358  */
        /* JADX WARN: Removed duplicated region for block: B:285:0x039d  */
        /* JADX WARN: Removed duplicated region for block: B:293:0x04a6  */
        /* JADX WARN: Removed duplicated region for block: B:298:0x04cf  */
        /* JADX WARN: Removed duplicated region for block: B:302:0x04f2  */
        /* JADX WARN: Removed duplicated region for block: B:325:0x05ab  */
        /* JADX WARN: Removed duplicated region for block: B:342:0x0622  */
        /* JADX WARN: Removed duplicated region for block: B:345:0x064e A[LOOP:7: B:344:0x064c->B:345:0x064e, LOOP_END] */
        /* JADX WARN: Removed duplicated region for block: B:348:0x063c  */
        /* JADX WARN: Removed duplicated region for block: B:362:0x046d  */
        /* JADX WARN: Removed duplicated region for block: B:363:0x0369  */
        /* JADX WARN: Removed duplicated region for block: B:54:0x073e  */
        @Override // android.view.accessibility.AccessibilityNodeProvider
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public AccessibilityNodeInfo createAccessibilityNodeInfo(int i) {
            Rect rect;
            int i2;
            boolean z;
            int i3;
            int i4;
            String str;
            String formatShortNumber;
            int i5;
            String str2;
            int i6;
            String str3;
            int i7;
            String str4;
            boolean z2;
            CharSequence charSequence;
            long j;
            String str5;
            AccessibilityNodeInfo accessibilityNodeInfo;
            long j2;
            CharSequence charSequence2;
            int i8;
            String str6;
            String string;
            CharSequence charSequence3;
            String formatString;
            int i9;
            String formatPluralString;
            boolean z3;
            TLRPC.MessagePeerReaction messagePeerReaction;
            int i10;
            String str7;
            int i11;
            String str8;
            AccessibilityNodeInfo accessibilityNodeInfo2;
            String str9;
            int i12;
            String str10;
            String string2;
            int i13;
            String str11;
            int[] iArr = {0, 0};
            ChatMessageCell.this.getLocationOnScreen(iArr);
            if (i != -1) {
                AccessibilityNodeInfo obtain = AccessibilityNodeInfo.obtain();
                obtain.setSource(ChatMessageCell.this, i);
                obtain.setParent(ChatMessageCell.this);
                obtain.setPackageName(ChatMessageCell.this.getContext().getPackageName());
                if (i != 5000) {
                    if (i >= 3000) {
                        if (!(ChatMessageCell.this.currentMessageObject.caption instanceof Spannable)) {
                            return null;
                        }
                        ChatMessageCell chatMessageCell = ChatMessageCell.this;
                        if (chatMessageCell.captionLayout == null) {
                            return null;
                        }
                        Spannable spannable = (Spannable) chatMessageCell.currentMessageObject.caption;
                        ClickableSpan linkById = getLinkById(i, false);
                        if (linkById == null) {
                            return null;
                        }
                        int[] realSpanStartAndEnd = ChatMessageCell.this.getRealSpanStartAndEnd(spannable, linkById);
                        obtain.setText(spannable.subSequence(realSpanStartAndEnd[0], realSpanStartAndEnd[1]).toString());
                        Iterator<MessageObject.TextLayoutBlock> it = ChatMessageCell.this.captionLayout.textLayoutBlocks.iterator();
                        while (true) {
                            if (!it.hasNext()) {
                                break;
                            }
                            MessageObject.TextLayoutBlock next = it.next();
                            int length = next.textLayout.getText().length();
                            int i14 = next.charactersOffset;
                            int i15 = realSpanStartAndEnd[0];
                            if (i14 <= i15) {
                                int i16 = length + i14;
                                int i17 = realSpanStartAndEnd[1];
                                if (i16 >= i17) {
                                    next.textLayout.getSelectionPath(i15 - i14, i17 - i14, this.linkPath);
                                    this.linkPath.computeBounds(this.rectF, true);
                                    Rect rect2 = this.rect;
                                    RectF rectF = this.rectF;
                                    rect2.set((int) rectF.left, (int) rectF.top, (int) rectF.right, (int) rectF.bottom);
                                    Rect rect3 = this.rect;
                                    ChatMessageCell chatMessageCell2 = ChatMessageCell.this;
                                    rect3.offset(0, (int) next.textYOffset(chatMessageCell2.captionLayout.textLayoutBlocks, chatMessageCell2.transitionParams));
                                    Rect rect4 = this.rect;
                                    ChatMessageCell chatMessageCell3 = ChatMessageCell.this;
                                    rect4.offset(chatMessageCell3.textX, chatMessageCell3.textY);
                                    obtain.setBoundsInParent(this.rect);
                                    if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                                        ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                                    }
                                    this.rect.offset(iArr[0], iArr[1]);
                                    obtain.setBoundsInScreen(this.rect);
                                }
                            }
                        }
                    } else {
                        if (i < 2000) {
                            if (i < 1000) {
                                if (i >= 500) {
                                    int i18 = i - 500;
                                    if (i18 >= ChatMessageCell.this.pollButtons.size()) {
                                        return null;
                                    }
                                    PollButton pollButton = (PollButton) ChatMessageCell.this.pollButtons.get(i18);
                                    StringBuilder sb = new StringBuilder(pollButton.title.getText());
                                    if (ChatMessageCell.this.pollVoted) {
                                        obtain.setSelected(pollButton.chosen);
                                        sb.append(", ");
                                        sb.append(pollButton.percent);
                                        sb.append("%");
                                        if (ChatMessageCell.this.lastPoll != null && ChatMessageCell.this.lastPoll.quiz && (pollButton.chosen || pollButton.correct)) {
                                            sb.append(", ");
                                            if (pollButton.correct) {
                                                i7 = R.string.AccDescrQuizCorrectAnswer;
                                                str4 = "AccDescrQuizCorrectAnswer";
                                            } else {
                                                i7 = R.string.AccDescrQuizIncorrectAnswer;
                                                str4 = "AccDescrQuizIncorrectAnswer";
                                            }
                                            sb.append(LocaleController.getString(str4, i7));
                                        }
                                    } else {
                                        obtain.setClassName("android.widget.Button");
                                    }
                                    obtain.setText(sb);
                                    obtain.setEnabled(true);
                                    obtain.addAction(16);
                                    int i19 = pollButton.y;
                                    ChatMessageCell chatMessageCell4 = ChatMessageCell.this;
                                    int i20 = i19 + chatMessageCell4.namesOffset;
                                    int dp = chatMessageCell4.backgroundWidth - AndroidUtilities.dp(76.0f);
                                    Rect rect5 = this.rect;
                                    int i21 = pollButton.x;
                                    rect5.set(i21, i20, dp + i21, pollButton.height + i20);
                                    obtain.setBoundsInParent(this.rect);
                                    if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                                        ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                                    }
                                    rect = this.rect;
                                    i2 = iArr[0];
                                    z = true;
                                    i3 = iArr[1];
                                } else if (i == 495) {
                                    obtain.setClassName("android.widget.Button");
                                    obtain.setEnabled(true);
                                    obtain.setText(LocaleController.getString("AccDescrQuizExplanation", R.string.AccDescrQuizExplanation));
                                    obtain.addAction(16);
                                    this.rect.set(ChatMessageCell.this.pollHintX - AndroidUtilities.dp(8.0f), ChatMessageCell.this.pollHintY - AndroidUtilities.dp(8.0f), ChatMessageCell.this.pollHintX + AndroidUtilities.dp(32.0f), ChatMessageCell.this.pollHintY + AndroidUtilities.dp(32.0f));
                                    obtain.setBoundsInParent(this.rect);
                                    if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                                        ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                                    }
                                    rect = this.rect;
                                    i2 = iArr[0];
                                    z = true;
                                    i3 = iArr[1];
                                } else if (i == 499) {
                                    obtain.setClassName("android.widget.Button");
                                    obtain.setEnabled(true);
                                    if (ChatMessageCell.this.instantViewLayout != null) {
                                        obtain.setText(ChatMessageCell.this.instantViewLayout.getText());
                                    }
                                    obtain.addAction(16);
                                    ChatMessageCell.this.instantButtonRect.round(this.rect);
                                    obtain.setBoundsInParent(this.rect);
                                    if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                                        ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                                    }
                                    rect = this.rect;
                                    i2 = iArr[0];
                                    z = true;
                                    i3 = iArr[1];
                                } else {
                                    if (i != 492) {
                                        if (i == 491 || i == 490 || i == 489) {
                                            int i22 = i != 491 ? i == 490 ? 31 : 30 : 5;
                                            for (int i23 = 0; i23 < ChatMessageCell.this.contactButtons.size(); i23++) {
                                                InstantViewButton instantViewButton = (InstantViewButton) ChatMessageCell.this.contactButtons.get(i23);
                                                if (instantViewButton.type == i22) {
                                                    obtain.setClassName("android.widget.Button");
                                                    obtain.setEnabled(true);
                                                    if (instantViewButton.layout != null) {
                                                        obtain.setText(instantViewButton.layout.getText());
                                                    }
                                                    obtain.addAction(16);
                                                    instantViewButton.rect.round(this.rect);
                                                    obtain.setBoundsInParent(this.rect);
                                                    if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                                                        ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                                                    }
                                                    rect = this.rect;
                                                    i2 = iArr[0];
                                                    z = true;
                                                    i3 = iArr[1];
                                                }
                                            }
                                        } else {
                                            if (i == 498) {
                                                obtain.setClassName("android.widget.ImageButton");
                                                obtain.setEnabled(true);
                                                ChatMessageCell chatMessageCell5 = ChatMessageCell.this;
                                                if (chatMessageCell5.isOpenChatByShare(chatMessageCell5.currentMessageObject)) {
                                                    i6 = R.string.AccDescrOpenChat;
                                                    str3 = "AccDescrOpenChat";
                                                } else {
                                                    i6 = R.string.ShareFile;
                                                    str3 = "ShareFile";
                                                }
                                                obtain.setContentDescription(LocaleController.getString(str3, i6));
                                                obtain.addAction(16);
                                                this.rect.set((int) ChatMessageCell.this.sideStartX, (int) ChatMessageCell.this.sideStartY, ((int) ChatMessageCell.this.sideStartX) + AndroidUtilities.dp(40.0f), ((int) ChatMessageCell.this.sideStartY) + AndroidUtilities.dp(32.0f));
                                                obtain.setBoundsInParent(this.rect);
                                                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                                                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                                                }
                                                rect = this.rect;
                                                i2 = iArr[0];
                                                i3 = iArr[1];
                                            } else if (i == 497) {
                                                obtain.setEnabled(true);
                                                StringBuilder sb2 = new StringBuilder();
                                                sb2.append(LocaleController.getString("Reply", R.string.Reply));
                                                sb2.append(", ");
                                                StaticLayout staticLayout = ChatMessageCell.this.replyNameLayout;
                                                if (staticLayout != null) {
                                                    sb2.append(staticLayout.getText());
                                                    sb2.append(", ");
                                                }
                                                StaticLayout staticLayout2 = ChatMessageCell.this.replyTextLayout;
                                                if (staticLayout2 != null) {
                                                    sb2.append(staticLayout2.getText());
                                                }
                                                obtain.setContentDescription(sb2.toString());
                                                obtain.addAction(16);
                                                Rect rect6 = this.rect;
                                                ChatMessageCell chatMessageCell6 = ChatMessageCell.this;
                                                int i24 = chatMessageCell6.replyStartX;
                                                int i25 = chatMessageCell6.replyStartY;
                                                int max = Math.max(chatMessageCell6.replyNameWidth, ChatMessageCell.this.replyTextWidth) + i24;
                                                ChatMessageCell chatMessageCell7 = ChatMessageCell.this;
                                                rect6.set(i24, i25, max, chatMessageCell7.replyStartY + ((int) chatMessageCell7.replyHeight));
                                                obtain.setBoundsInParent(this.rect);
                                                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                                                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                                                }
                                                rect = this.rect;
                                                i2 = iArr[0];
                                                i3 = iArr[1];
                                            } else if (i == 494) {
                                                obtain.setEnabled(true);
                                                StringBuilder sb3 = new StringBuilder();
                                                if (ChatMessageCell.this.forwardedNameLayout[0] != null && ChatMessageCell.this.forwardedNameLayout[1] != null) {
                                                    int i26 = 0;
                                                    while (i26 < 2) {
                                                        sb3.append(ChatMessageCell.this.forwardedNameLayout[i26].getText());
                                                        sb3.append(i26 == 0 ? " " : "\n");
                                                        i26++;
                                                    }
                                                }
                                                obtain.setContentDescription(sb3.toString());
                                                obtain.addAction(16);
                                                int min = (int) Math.min(ChatMessageCell.this.forwardNameX - ChatMessageCell.this.forwardNameOffsetX[0], ChatMessageCell.this.forwardNameX - ChatMessageCell.this.forwardNameOffsetX[1]);
                                                this.rect.set(min, ChatMessageCell.this.forwardNameY, ChatMessageCell.this.forwardedNameWidth + min, ChatMessageCell.this.forwardNameY + ChatMessageCell.this.forwardHeight);
                                                obtain.setBoundsInParent(this.rect);
                                                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                                                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                                                }
                                                rect = this.rect;
                                                i2 = iArr[0];
                                                i3 = iArr[1];
                                            } else if (i == 496) {
                                                obtain.setClassName("android.widget.Button");
                                                obtain.setEnabled(true);
                                                int repliesCount = ChatMessageCell.this.getRepliesCount();
                                                if (ChatMessageCell.this.currentMessageObject == null || ChatMessageCell.this.currentMessageObject.shouldDrawWithoutBackground() || ChatMessageCell.this.currentMessageObject.isAnimatedEmoji()) {
                                                    formatShortNumber = (ChatMessageCell.this.isRepliesChat || repliesCount <= 0) ? null : LocaleController.formatShortNumber(repliesCount, null);
                                                } else {
                                                    if (ChatMessageCell.this.isRepliesChat) {
                                                        i5 = R.string.ViewInChat;
                                                        str2 = "ViewInChat";
                                                    } else if (repliesCount == 0) {
                                                        i5 = R.string.LeaveAComment;
                                                        str2 = "LeaveAComment";
                                                    } else {
                                                        formatShortNumber = LocaleController.formatPluralString("CommentsCount", repliesCount, new Object[0]);
                                                    }
                                                    formatShortNumber = LocaleController.getString(str2, i5);
                                                }
                                                if (formatShortNumber != null) {
                                                    obtain.setText(formatShortNumber);
                                                }
                                                obtain.addAction(16);
                                                this.rect.set(ChatMessageCell.this.commentButtonRect);
                                                obtain.setBoundsInParent(this.rect);
                                                if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                                                    ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                                                }
                                                rect = this.rect;
                                                i2 = iArr[0];
                                                i3 = iArr[1];
                                            } else if (i == 493) {
                                                obtain.setClassName("android.widget.Button");
                                                obtain.setEnabled(true);
                                                if (ChatMessageCell.this.currentMessageObject.isVoiceTranscriptionOpen()) {
                                                    i4 = R.string.AccActionCloseTranscription;
                                                    str = "AccActionCloseTranscription";
                                                } else {
                                                    i4 = R.string.AccActionOpenTranscription;
                                                    str = "AccActionOpenTranscription";
                                                }
                                                obtain.setText(LocaleController.getString(str, i4));
                                                obtain.addAction(16);
                                                ChatMessageCell chatMessageCell8 = ChatMessageCell.this;
                                                if (chatMessageCell8.transcribeButton != null) {
                                                    this.rect.set((int) chatMessageCell8.transcribeX, (int) ChatMessageCell.this.transcribeY, (int) (ChatMessageCell.this.transcribeX + ChatMessageCell.this.transcribeButton.width()), (int) (ChatMessageCell.this.transcribeY + ChatMessageCell.this.transcribeButton.height()));
                                                }
                                                obtain.setBoundsInParent(this.rect);
                                                rect = this.rect;
                                                i2 = iArr[0];
                                                i3 = iArr[1];
                                            }
                                            z = true;
                                        }
                                        obtain.setFocusable(z);
                                        obtain.setVisibleToUser(z);
                                        return obtain;
                                    }
                                    obtain.setClassName("android.widget.Button");
                                    obtain.setEnabled(true);
                                    if (ChatMessageCell.this.titleLayout != null) {
                                        obtain.setText(ChatMessageCell.this.titleLayout.getText());
                                    }
                                    obtain.addAction(16);
                                    ChatMessageCell.this.contactRect.round(this.rect);
                                    if (ChatMessageCell.this.contactButtons != null && ChatMessageCell.this.contactButtons.size() > 1) {
                                        InstantViewButton instantViewButton2 = (InstantViewButton) ChatMessageCell.this.contactButtons.get(0);
                                        if (!instantViewButton2.rect.isEmpty()) {
                                            Rect rect7 = this.rect;
                                            rect7.set(rect7.left, rect7.top, rect7.right, (int) (rect7.bottom - instantViewButton2.rect.height()));
                                        }
                                    }
                                    obtain.setBoundsInParent(this.rect);
                                    if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null || !((Rect) ChatMessageCell.this.accessibilityVirtualViewBounds.get(i)).equals(this.rect)) {
                                        ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                                    }
                                    rect = this.rect;
                                    i2 = iArr[0];
                                    z = true;
                                    i3 = iArr[1];
                                }
                                rect.offset(i2, i3);
                                obtain.setBoundsInScreen(this.rect);
                                obtain.setClickable(z);
                                obtain.setFocusable(z);
                                obtain.setVisibleToUser(z);
                                return obtain;
                            }
                            int i27 = i - 1000;
                            if (i27 >= ChatMessageCell.this.botButtons.size()) {
                                return null;
                            }
                            BotButton botButton = (BotButton) ChatMessageCell.this.botButtons.get(i27);
                            obtain.setText(botButton.title.getText());
                            obtain.setClassName("android.widget.Button");
                            obtain.setEnabled(true);
                            obtain.setClickable(true);
                            obtain.addAction(16);
                            this.rect.set((int) (botButton.x * ChatMessageCell.this.widthForButtons), botButton.y, (int) ((botButton.x + botButton.width) * ChatMessageCell.this.widthForButtons), botButton.y + botButton.height);
                            this.rect.offset(ChatMessageCell.this.currentMessageObject.isOutOwner() ? (ChatMessageCell.this.getMeasuredWidth() - ChatMessageCell.this.getWidthForButtons()) - AndroidUtilities.dp(10.0f) : ChatMessageCell.this.backgroundDrawableLeft + AndroidUtilities.dp(ChatMessageCell.this.mediaBackground ? 1.0f : 7.0f), ChatMessageCell.this.layoutHeight);
                            obtain.setBoundsInParent(this.rect);
                            if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                                ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                            }
                            this.rect.offset(iArr[0], iArr[1]);
                            obtain.setBoundsInScreen(this.rect);
                            z = true;
                            obtain.setFocusable(z);
                            obtain.setVisibleToUser(z);
                            return obtain;
                        }
                        if (!(ChatMessageCell.this.currentMessageObject.messageText instanceof Spannable)) {
                            return null;
                        }
                        Spannable spannable2 = (Spannable) ChatMessageCell.this.currentMessageObject.messageText;
                        ClickableSpan linkById2 = getLinkById(i, false);
                        if (linkById2 == null) {
                            return null;
                        }
                        int[] realSpanStartAndEnd2 = ChatMessageCell.this.getRealSpanStartAndEnd(spannable2, linkById2);
                        obtain.setText(spannable2.subSequence(realSpanStartAndEnd2[0], realSpanStartAndEnd2[1]).toString());
                        Iterator<MessageObject.TextLayoutBlock> it2 = ChatMessageCell.this.currentMessageObject.textLayoutBlocks.iterator();
                        while (it2.hasNext()) {
                            MessageObject.TextLayoutBlock next2 = it2.next();
                            int length2 = next2.textLayout.getText().length();
                            int i28 = next2.charactersOffset;
                            int i29 = realSpanStartAndEnd2[0];
                            if (i28 <= i29) {
                                int i30 = length2 + i28;
                                int i31 = realSpanStartAndEnd2[1];
                                if (i30 >= i31) {
                                    next2.textLayout.getSelectionPath(i29 - i28, i31 - i28, this.linkPath);
                                    this.linkPath.computeBounds(this.rectF, true);
                                    Rect rect8 = this.rect;
                                    RectF rectF2 = this.rectF;
                                    rect8.set((int) rectF2.left, (int) rectF2.top, (int) rectF2.right, (int) rectF2.bottom);
                                    this.rect.offset(0, (int) next2.textYOffset(ChatMessageCell.this.currentMessageObject.textLayoutBlocks, ChatMessageCell.this.transitionParams));
                                    Rect rect9 = this.rect;
                                    ChatMessageCell chatMessageCell9 = ChatMessageCell.this;
                                    rect9.offset(chatMessageCell9.textX, chatMessageCell9.textY);
                                    obtain.setBoundsInParent(this.rect);
                                    if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                                        ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                                    }
                                    z2 = true;
                                    this.rect.offset(iArr[0], iArr[1]);
                                    obtain.setBoundsInScreen(this.rect);
                                    obtain.setClassName("android.widget.TextView");
                                    obtain.setEnabled(z2);
                                    obtain.setClickable(z2);
                                    obtain.setLongClickable(z2);
                                }
                            }
                        }
                    }
                    z2 = true;
                    obtain.setClassName("android.widget.TextView");
                    obtain.setEnabled(z2);
                    obtain.setClickable(z2);
                    obtain.setLongClickable(z2);
                } else {
                    if (ChatMessageCell.this.currentUser == null) {
                        return null;
                    }
                    obtain.setText(UserObject.getUserName(ChatMessageCell.this.currentUser));
                    this.rect.set((int) ChatMessageCell.this.nameX, (int) ChatMessageCell.this.nameY, (int) (ChatMessageCell.this.nameX + ChatMessageCell.this.nameWidth), (int) (ChatMessageCell.this.nameY + (ChatMessageCell.this.nameLayout != null ? ChatMessageCell.this.nameLayout.getHeight() : 10)));
                    obtain.setBoundsInParent(this.rect);
                    if (ChatMessageCell.this.accessibilityVirtualViewBounds.get(i) == null) {
                        ChatMessageCell.this.accessibilityVirtualViewBounds.put(i, new Rect(this.rect));
                    }
                    this.rect.offset(iArr[0], iArr[1]);
                    obtain.setBoundsInScreen(this.rect);
                    obtain.setClassName("android.widget.TextView");
                    obtain.setEnabled(true);
                    obtain.setClickable(true);
                    obtain.setLongClickable(true);
                }
                obtain.addAction(16);
                obtain.addAction(32);
                z = true;
                obtain.setFocusable(z);
                obtain.setVisibleToUser(z);
                return obtain;
            }
            AccessibilityNodeInfo obtain2 = AccessibilityNodeInfo.obtain(ChatMessageCell.this);
            ChatMessageCell.this.onInitializeAccessibilityNodeInfo(obtain2);
            boolean z4 = ChatMessageCell.this.currentMessageObject != null && ChatMessageCell.this.currentMessageObject.isOut() && !ChatMessageCell.this.currentMessageObject.scheduled && ChatMessageCell.this.currentMessageObject.isUnread();
            boolean z5 = ChatMessageCell.this.currentMessageObject != null && ChatMessageCell.this.currentMessageObject.isContentUnread();
            if (ChatMessageCell.this.currentMessageObject != null) {
                charSequence = ", ";
                j = ChatMessageCell.this.currentMessageObject.loadedFileSize;
            } else {
                charSequence = ", ";
                j = 0;
            }
            ChatMessageCell chatMessageCell10 = ChatMessageCell.this;
            if (chatMessageCell10.accessibilityText != null && chatMessageCell10.accessibilityTextUnread == z4 && ChatMessageCell.this.accessibilityTextContentUnread == z5 && ChatMessageCell.this.accessibilityTextFileSize == j) {
                accessibilityNodeInfo = obtain2;
                str5 = "AccActionDownload";
            } else {
                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
                ChatMessageCell chatMessageCell11 = ChatMessageCell.this;
                if (!chatMessageCell11.isChat || chatMessageCell11.currentUser == null || ChatMessageCell.this.currentMessageObject.isOut()) {
                    str5 = "AccActionDownload";
                } else {
                    spannableStringBuilder.append((CharSequence) UserObject.getUserName(ChatMessageCell.this.currentUser));
                    str5 = "AccActionDownload";
                    spannableStringBuilder.setSpan(new ProfileSpan(ChatMessageCell.this.currentUser), 0, spannableStringBuilder.length(), 33);
                    spannableStringBuilder.append('\n');
                }
                if (ChatMessageCell.this.drawForwardedName) {
                    int i32 = 0;
                    while (i32 < 2) {
                        if (ChatMessageCell.this.forwardedNameLayout[i32] != null && ChatMessageCell.this.forwardedNameLayout[i32].getText() != null) {
                            spannableStringBuilder.append(ChatMessageCell.this.forwardedNameLayout[i32].getText());
                            spannableStringBuilder.append(i32 == 0 ? " " : "\n");
                        }
                        i32++;
                    }
                }
                if (ChatMessageCell.this.documentAttach != null && ChatMessageCell.this.documentAttachType == 1) {
                    String attachFileName = FileLoader.getAttachFileName(ChatMessageCell.this.documentAttach);
                    if (attachFileName.indexOf(46) != -1) {
                        spannableStringBuilder.append((CharSequence) LocaleController.formatString(R.string.AccDescrDocumentType, attachFileName.substring(attachFileName.lastIndexOf(46) + 1).toUpperCase(Locale.ROOT)));
                    }
                }
                if (!TextUtils.isEmpty(ChatMessageCell.this.currentMessageObject.messageText)) {
                    spannableStringBuilder.append(ChatMessageCell.this.currentMessageObject.messageText);
                }
                if (ChatMessageCell.this.documentAttach == null || !((ChatMessageCell.this.documentAttachType == 1 || ChatMessageCell.this.documentAttachType == 2 || ChatMessageCell.this.documentAttachType == 4) && ChatMessageCell.this.buttonState == 1 && ChatMessageCell.this.loadingProgressLayout != null)) {
                    accessibilityNodeInfo = obtain2;
                    j2 = j;
                } else {
                    spannableStringBuilder.append((CharSequence) "\n");
                    boolean isSending = ChatMessageCell.this.currentMessageObject.isSending();
                    accessibilityNodeInfo = obtain2;
                    j2 = j;
                    spannableStringBuilder.append((CharSequence) LocaleController.formatString(isSending ? "AccDescrUploadProgress" : "AccDescrDownloadProgress", isSending ? R.string.AccDescrUploadProgress : R.string.AccDescrDownloadProgress, AndroidUtilities.formatFileSize(ChatMessageCell.this.currentMessageObject.loadedFileSize), AndroidUtilities.formatFileSize(ChatMessageCell.this.lastLoadingSizeTotal)));
                }
                if (ChatMessageCell.this.currentMessageObject.isMusic()) {
                    spannableStringBuilder.append((CharSequence) "\n");
                    spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrMusicInfo", R.string.AccDescrMusicInfo, ChatMessageCell.this.currentMessageObject.getMusicAuthor(), ChatMessageCell.this.currentMessageObject.getMusicTitle()));
                    charSequence2 = charSequence;
                    spannableStringBuilder.append(charSequence2);
                    string = LocaleController.formatDuration((int) ChatMessageCell.this.currentMessageObject.getDuration());
                } else {
                    charSequence2 = charSequence;
                    if (ChatMessageCell.this.currentMessageObject.isVoice() || ChatMessageCell.this.isRoundVideo) {
                        spannableStringBuilder.append(charSequence2);
                        spannableStringBuilder.append((CharSequence) LocaleController.formatDuration((int) ChatMessageCell.this.currentMessageObject.getDuration()));
                        spannableStringBuilder.append(charSequence2);
                        if (ChatMessageCell.this.currentMessageObject.isContentUnread()) {
                            i8 = R.string.AccDescrMsgNotPlayed;
                            str6 = "AccDescrMsgNotPlayed";
                        } else {
                            i8 = R.string.AccDescrMsgPlayed;
                            str6 = "AccDescrMsgPlayed";
                        }
                        string = LocaleController.getString(str6, i8);
                    }
                    if (ChatMessageCell.this.lastPoll != null) {
                        spannableStringBuilder.append(charSequence2);
                        spannableStringBuilder.append((CharSequence) ChatMessageCell.this.lastPoll.question.text);
                        spannableStringBuilder.append(charSequence2);
                        if (ChatMessageCell.this.pollClosed) {
                            i11 = R.string.FinalResults;
                            str8 = "FinalResults";
                        } else if (ChatMessageCell.this.lastPoll.quiz) {
                            if (ChatMessageCell.this.lastPoll.public_voters) {
                                i11 = R.string.QuizPoll;
                                str8 = "QuizPoll";
                            } else {
                                i11 = R.string.AnonymousQuizPoll;
                                str8 = "AnonymousQuizPoll";
                            }
                        } else if (ChatMessageCell.this.lastPoll.public_voters) {
                            i11 = R.string.PublicPoll;
                            str8 = "PublicPoll";
                        } else {
                            i11 = R.string.AnonymousPoll;
                            str8 = "AnonymousPoll";
                        }
                        spannableStringBuilder.append((CharSequence) LocaleController.getString(str8, i11));
                    }
                    if (ChatMessageCell.this.documentAttach != null) {
                        if (ChatMessageCell.this.documentAttachType == 4) {
                            spannableStringBuilder.append(charSequence2);
                            spannableStringBuilder.append((CharSequence) LocaleController.formatDuration((int) ChatMessageCell.this.currentMessageObject.getDuration()));
                        }
                        if (ChatMessageCell.this.buttonState == 0 || ChatMessageCell.this.documentAttachType == 1) {
                            spannableStringBuilder.append(charSequence2);
                            spannableStringBuilder.append((CharSequence) AndroidUtilities.formatFileSize(ChatMessageCell.this.documentAttach.size));
                        }
                    }
                    if (ChatMessageCell.this.currentMessageObject.isVoiceTranscriptionOpen()) {
                        if (MessageObject.getMedia(ChatMessageCell.this.currentMessageObject.messageOwner) != null && !TextUtils.isEmpty(ChatMessageCell.this.currentMessageObject.caption)) {
                            spannableStringBuilder.append((CharSequence) "\n");
                            charSequence3 = ChatMessageCell.this.currentMessageObject.caption;
                        }
                        if (ChatMessageCell.this.currentMessageObject.isOut()) {
                            if (ChatMessageCell.this.currentMessageObject.isSent()) {
                                spannableStringBuilder.append((CharSequence) "\n");
                                if (ChatMessageCell.this.currentMessageObject.scheduled) {
                                    formatString = LocaleController.formatString("AccDescrScheduledDate", R.string.AccDescrScheduledDate, ChatMessageCell.this.currentTimeString);
                                } else {
                                    spannableStringBuilder.append((CharSequence) LocaleController.formatString("AccDescrSentDate", R.string.AccDescrSentDate, LocaleController.getString("TodayAt", R.string.TodayAt) + " " + ((Object) ChatMessageCell.this.currentTimeString)));
                                    spannableStringBuilder.append(charSequence2);
                                    if (ChatMessageCell.this.currentMessageObject.isUnread()) {
                                        i10 = R.string.AccDescrMsgUnread;
                                        str7 = "AccDescrMsgUnread";
                                    } else {
                                        i10 = R.string.AccDescrMsgRead;
                                        str7 = "AccDescrMsgRead";
                                    }
                                }
                            } else {
                                if (ChatMessageCell.this.currentMessageObject.isSending()) {
                                    spannableStringBuilder.append((CharSequence) "\n");
                                    spannableStringBuilder.append((CharSequence) LocaleController.getString("AccDescrMsgSending", R.string.AccDescrMsgSending));
                                    float progress = ChatMessageCell.this.radialProgress.getProgress();
                                    if (progress > 0.0f) {
                                        spannableStringBuilder.append((CharSequence) Integer.toString(Math.round(progress * 100.0f))).append((CharSequence) "%");
                                    }
                                } else if (ChatMessageCell.this.currentMessageObject.isSendError()) {
                                    spannableStringBuilder.append((CharSequence) "\n");
                                    i10 = R.string.AccDescrMsgSendingError;
                                    str7 = "AccDescrMsgSendingError";
                                }
                                if (ChatMessageCell.this.getRepliesCount() > 0 && !ChatMessageCell.this.hasCommentLayout()) {
                                    spannableStringBuilder.append((CharSequence) "\n");
                                    spannableStringBuilder.append((CharSequence) LocaleController.formatPluralString("AccDescrNumberOfReplies", ChatMessageCell.this.getRepliesCount(), new Object[0]));
                                }
                                if (ChatMessageCell.this.currentMessageObject.messageOwner.reactions != null && ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results != null) {
                                    String str12 = "";
                                    if (ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results.size() != 1) {
                                        TLRPC.ReactionCount reactionCount = ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results.get(0);
                                        TLRPC.Reaction reaction = reactionCount.reaction;
                                        String str13 = reaction instanceof TLRPC.TL_reactionEmoji ? ((TLRPC.TL_reactionEmoji) reaction).emoticon : "";
                                        int i33 = reactionCount.count;
                                        if (i33 == 1) {
                                            spannableStringBuilder.append((CharSequence) "\n");
                                            if (ChatMessageCell.this.currentMessageObject.messageOwner.reactions.recent_reactions == null || ChatMessageCell.this.currentMessageObject.messageOwner.reactions.recent_reactions.size() != 1 || (messagePeerReaction = ChatMessageCell.this.currentMessageObject.messageOwner.reactions.recent_reactions.get(0)) == null) {
                                                z3 = false;
                                            } else {
                                                TLRPC.User user = MessagesController.getInstance(ChatMessageCell.this.currentAccount).getUser(Long.valueOf(MessageObject.getPeerId(messagePeerReaction.peer_id)));
                                                z3 = UserObject.isUserSelf(user);
                                                if (user != null) {
                                                    str12 = UserObject.getFirstName(user);
                                                }
                                            }
                                            formatPluralString = z3 ? LocaleController.formatString("AccDescrYouReactedWith", R.string.AccDescrYouReactedWith, str13) : LocaleController.formatString("AccDescrReactedWith", R.string.AccDescrReactedWith, str12, str13);
                                        } else if (i33 > 1) {
                                            spannableStringBuilder.append((CharSequence) "\n");
                                            formatPluralString = LocaleController.formatPluralString("AccDescrNumberOfPeopleReactions", reactionCount.count, str13);
                                        }
                                        spannableStringBuilder.append((CharSequence) formatPluralString);
                                    } else {
                                        spannableStringBuilder.append((CharSequence) LocaleController.getString("Reactions", R.string.Reactions)).append((CharSequence) ": ");
                                        int size = ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results.size();
                                        int i34 = 0;
                                        while (i34 < size) {
                                            TLRPC.ReactionCount reactionCount2 = ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results.get(i34);
                                            TLRPC.Reaction reaction2 = reactionCount2.reaction;
                                            spannableStringBuilder.append((CharSequence) (reaction2 instanceof TLRPC.TL_reactionEmoji ? ((TLRPC.TL_reactionEmoji) reaction2).emoticon : "")).append((CharSequence) " ").append((CharSequence) (reactionCount2.count + ""));
                                            i34++;
                                            if (i34 < size) {
                                                spannableStringBuilder.append(charSequence2);
                                            }
                                        }
                                        spannableStringBuilder.append((CharSequence) "\n");
                                    }
                                }
                                if ((ChatMessageCell.this.currentMessageObject.messageOwner.flags & 1024) == 0) {
                                    spannableStringBuilder.append((CharSequence) "\n");
                                    i9 = 0;
                                    spannableStringBuilder.append((CharSequence) LocaleController.formatPluralString("AccDescrNumberOfViews", ChatMessageCell.this.currentMessageObject.messageOwner.views, new Object[0]));
                                } else {
                                    i9 = 0;
                                }
                                spannableStringBuilder.append((CharSequence) "\n");
                                for (final CharacterStyle characterStyle : (CharacterStyle[]) spannableStringBuilder.getSpans(i9, spannableStringBuilder.length(), ClickableSpan.class)) {
                                    int spanStart = spannableStringBuilder.getSpanStart(characterStyle);
                                    int spanEnd = spannableStringBuilder.getSpanEnd(characterStyle);
                                    spannableStringBuilder.removeSpan(characterStyle);
                                    spannableStringBuilder.setSpan(new ClickableSpan() { // from class: org.telegram.ui.Cells.ChatMessageCell.MessageAccessibilityNodeProvider.1
                                        @Override // android.text.style.ClickableSpan
                                        public void onClick(View view) {
                                            CharacterStyle characterStyle2 = characterStyle;
                                            if (characterStyle2 instanceof ProfileSpan) {
                                                ((ProfileSpan) characterStyle2).onClick(view);
                                            } else if (ChatMessageCell.this.delegate != null) {
                                                ChatMessageCell.this.delegate.didPressUrl(ChatMessageCell.this, characterStyle, false);
                                            }
                                        }
                                    }, spanStart, spanEnd, 33);
                                }
                                ChatMessageCell chatMessageCell12 = ChatMessageCell.this;
                                chatMessageCell12.accessibilityText = spannableStringBuilder;
                                chatMessageCell12.accessibilityTextUnread = z4;
                                ChatMessageCell.this.accessibilityTextContentUnread = z5;
                                ChatMessageCell.this.accessibilityTextFileSize = j2;
                            }
                            formatString = LocaleController.getString(str7, i10);
                        } else {
                            spannableStringBuilder.append((CharSequence) "\n");
                            formatString = LocaleController.formatString("AccDescrReceivedDate", R.string.AccDescrReceivedDate, LocaleController.getString("TodayAt", R.string.TodayAt) + " " + ((Object) ChatMessageCell.this.currentTimeString));
                        }
                        spannableStringBuilder.append((CharSequence) formatString);
                        if (ChatMessageCell.this.getRepliesCount() > 0) {
                            spannableStringBuilder.append((CharSequence) "\n");
                            spannableStringBuilder.append((CharSequence) LocaleController.formatPluralString("AccDescrNumberOfReplies", ChatMessageCell.this.getRepliesCount(), new Object[0]));
                        }
                        if (ChatMessageCell.this.currentMessageObject.messageOwner.reactions != null) {
                            String str122 = "";
                            if (ChatMessageCell.this.currentMessageObject.messageOwner.reactions.results.size() != 1) {
                            }
                        }
                        if ((ChatMessageCell.this.currentMessageObject.messageOwner.flags & 1024) == 0) {
                        }
                        spannableStringBuilder.append((CharSequence) "\n");
                        while (r3 < r2) {
                        }
                        ChatMessageCell chatMessageCell122 = ChatMessageCell.this;
                        chatMessageCell122.accessibilityText = spannableStringBuilder;
                        chatMessageCell122.accessibilityTextUnread = z4;
                        ChatMessageCell.this.accessibilityTextContentUnread = z5;
                        ChatMessageCell.this.accessibilityTextFileSize = j2;
                    } else {
                        spannableStringBuilder.append((CharSequence) "\n");
                        charSequence3 = ChatMessageCell.this.currentMessageObject.getVoiceTranscription();
                    }
                    spannableStringBuilder.append(charSequence3);
                    if (ChatMessageCell.this.currentMessageObject.isOut()) {
                    }
                    spannableStringBuilder.append((CharSequence) formatString);
                    if (ChatMessageCell.this.getRepliesCount() > 0) {
                    }
                    if (ChatMessageCell.this.currentMessageObject.messageOwner.reactions != null) {
                    }
                    if ((ChatMessageCell.this.currentMessageObject.messageOwner.flags & 1024) == 0) {
                    }
                    spannableStringBuilder.append((CharSequence) "\n");
                    while (r3 < r2) {
                    }
                    ChatMessageCell chatMessageCell1222 = ChatMessageCell.this;
                    chatMessageCell1222.accessibilityText = spannableStringBuilder;
                    chatMessageCell1222.accessibilityTextUnread = z4;
                    ChatMessageCell.this.accessibilityTextContentUnread = z5;
                    ChatMessageCell.this.accessibilityTextFileSize = j2;
                }
                spannableStringBuilder.append((CharSequence) string);
                if (ChatMessageCell.this.lastPoll != null) {
                }
                if (ChatMessageCell.this.documentAttach != null) {
                }
                if (ChatMessageCell.this.currentMessageObject.isVoiceTranscriptionOpen()) {
                }
                spannableStringBuilder.append(charSequence3);
                if (ChatMessageCell.this.currentMessageObject.isOut()) {
                }
                spannableStringBuilder.append((CharSequence) formatString);
                if (ChatMessageCell.this.getRepliesCount() > 0) {
                }
                if (ChatMessageCell.this.currentMessageObject.messageOwner.reactions != null) {
                }
                if ((ChatMessageCell.this.currentMessageObject.messageOwner.flags & 1024) == 0) {
                }
                spannableStringBuilder.append((CharSequence) "\n");
                while (r3 < r2) {
                }
                ChatMessageCell chatMessageCell12222 = ChatMessageCell.this;
                chatMessageCell12222.accessibilityText = spannableStringBuilder;
                chatMessageCell12222.accessibilityTextUnread = z4;
                ChatMessageCell.this.accessibilityTextContentUnread = z5;
                ChatMessageCell.this.accessibilityTextFileSize = j2;
            }
            int i35 = Build.VERSION.SDK_INT;
            if (i35 < 24) {
                accessibilityNodeInfo2 = accessibilityNodeInfo;
                accessibilityNodeInfo2.setContentDescription(ChatMessageCell.this.accessibilityText.toString());
            } else {
                accessibilityNodeInfo2 = accessibilityNodeInfo;
                accessibilityNodeInfo2.setText(ChatMessageCell.this.accessibilityText);
            }
            accessibilityNodeInfo2.setEnabled(true);
            AccessibilityNodeInfo.CollectionItemInfo collectionItemInfo = accessibilityNodeInfo2.getCollectionItemInfo();
            if (collectionItemInfo != null) {
                accessibilityNodeInfo2.setCollectionItemInfo(AccessibilityNodeInfo.CollectionItemInfo.obtain(collectionItemInfo.getRowIndex(), 1, 0, 1, false));
            }
            if (i35 >= 21) {
                accessibilityNodeInfo2.addAction(new AccessibilityNodeInfo.AccessibilityAction(R.id.acc_action_msg_options, LocaleController.getString("AccActionMessageOptions", R.string.AccActionMessageOptions)));
                int iconForCurrentState = ChatMessageCell.this.getIconForCurrentState();
                if (iconForCurrentState == 0) {
                    str9 = str5;
                    i12 = R.string.AccActionPlay;
                    str10 = "AccActionPlay";
                } else if (iconForCurrentState != 1) {
                    if (iconForCurrentState != 2) {
                        if (iconForCurrentState == 3) {
                            i13 = R.string.AccActionCancelDownload;
                            str11 = "AccActionCancelDownload";
                        } else if (iconForCurrentState == 5) {
                            i13 = R.string.AccActionOpenFile;
                            str11 = "AccActionOpenFile";
                        } else if (ChatMessageCell.this.currentMessageObject.type == 16) {
                            i13 = R.string.CallAgain;
                            str11 = "CallAgain";
                        } else {
                            str9 = str5;
                            string2 = null;
                        }
                        string2 = LocaleController.getString(str11, i13);
                        str9 = str5;
                    } else {
                        str9 = str5;
                        string2 = LocaleController.getString(str9, R.string.AccActionDownload);
                    }
                    accessibilityNodeInfo2.addAction(new AccessibilityNodeInfo.AccessibilityAction(16, string2));
                    accessibilityNodeInfo2.addAction(new AccessibilityNodeInfo.AccessibilityAction(32, LocaleController.getString("AccActionEnterSelectionMode", R.string.AccActionEnterSelectionMode)));
                    if (ChatMessageCell.this.getMiniIconForCurrentState() == 2) {
                        accessibilityNodeInfo2.addAction(new AccessibilityNodeInfo.AccessibilityAction(R.id.acc_action_small_button, LocaleController.getString(str9, R.string.AccActionDownload)));
                    }
                } else {
                    str9 = str5;
                    i12 = R.string.AccActionPause;
                    str10 = "AccActionPause";
                }
                string2 = LocaleController.getString(str10, i12);
                accessibilityNodeInfo2.addAction(new AccessibilityNodeInfo.AccessibilityAction(16, string2));
                accessibilityNodeInfo2.addAction(new AccessibilityNodeInfo.AccessibilityAction(32, LocaleController.getString("AccActionEnterSelectionMode", R.string.AccActionEnterSelectionMode)));
                if (ChatMessageCell.this.getMiniIconForCurrentState() == 2) {
                }
            } else {
                accessibilityNodeInfo2.addAction(16);
                accessibilityNodeInfo2.addAction(32);
            }
            if ((ChatMessageCell.this.currentMessageObject.isVoice() || ChatMessageCell.this.currentMessageObject.isRoundVideo() || ChatMessageCell.this.currentMessageObject.isMusic()) && MediaController.getInstance().isPlayingMessage(ChatMessageCell.this.currentMessageObject)) {
                ChatMessageCell.this.seekBarAccessibilityDelegate.onInitializeAccessibilityNodeInfoInternal(accessibilityNodeInfo2);
            }
            if (ChatMessageCell.this.useTranscribeButton) {
                ChatMessageCell chatMessageCell13 = ChatMessageCell.this;
                if (chatMessageCell13.transcribeButton != null) {
                    accessibilityNodeInfo2.addChild(chatMessageCell13, 493);
                }
            }
            if (i35 < 24) {
                ChatMessageCell chatMessageCell14 = ChatMessageCell.this;
                if (chatMessageCell14.isChat && chatMessageCell14.currentUser != null && !ChatMessageCell.this.currentMessageObject.isOut()) {
                    accessibilityNodeInfo2.addChild(ChatMessageCell.this, 5000);
                }
                if (ChatMessageCell.this.currentMessageObject.messageText instanceof Spannable) {
                    Spannable spannable3 = (Spannable) ChatMessageCell.this.currentMessageObject.messageText;
                    int i36 = 0;
                    for (CharacterStyle characterStyle2 : (CharacterStyle[]) spannable3.getSpans(0, spannable3.length(), ClickableSpan.class)) {
                        accessibilityNodeInfo2.addChild(ChatMessageCell.this, i36 + 2000);
                        i36++;
                    }
                }
                if (ChatMessageCell.this.currentMessageObject.caption instanceof Spannable) {
                    ChatMessageCell chatMessageCell15 = ChatMessageCell.this;
                    if (chatMessageCell15.captionLayout != null) {
                        Spannable spannable4 = (Spannable) chatMessageCell15.currentMessageObject.caption;
                        int i37 = 0;
                        for (CharacterStyle characterStyle3 : (CharacterStyle[]) spannable4.getSpans(0, spannable4.length(), ClickableSpan.class)) {
                            accessibilityNodeInfo2.addChild(ChatMessageCell.this, i37 + 3000);
                            i37++;
                        }
                    }
                }
            }
            Iterator it3 = ChatMessageCell.this.botButtons.iterator();
            int i38 = 0;
            while (it3.hasNext()) {
                accessibilityNodeInfo2.addChild(ChatMessageCell.this, i38 + MediaDataController.MAX_STYLE_RUNS_COUNT);
                i38++;
            }
            if (ChatMessageCell.this.hintButtonVisible && ChatMessageCell.this.pollHintX != -1 && ChatMessageCell.this.currentMessageObject.isPoll()) {
                accessibilityNodeInfo2.addChild(ChatMessageCell.this, 495);
            }
            Iterator it4 = ChatMessageCell.this.pollButtons.iterator();
            int i39 = 0;
            while (it4.hasNext()) {
                accessibilityNodeInfo2.addChild(ChatMessageCell.this, i39 + 500);
                i39++;
            }
            if (ChatMessageCell.this.drawInstantView && !ChatMessageCell.this.instantButtonRect.isEmpty()) {
                accessibilityNodeInfo2.addChild(ChatMessageCell.this, 499);
            }
            if (ChatMessageCell.this.drawContact && ChatMessageCell.this.contactRect != null && !ChatMessageCell.this.contactRect.isEmpty()) {
                accessibilityNodeInfo2.addChild(ChatMessageCell.this, 492);
                if (ChatMessageCell.this.contactButtons != null && ChatMessageCell.this.contactButtons.size() > 1) {
                    Iterator it5 = ChatMessageCell.this.contactButtons.iterator();
                    while (it5.hasNext()) {
                        InstantViewButton instantViewButton3 = (InstantViewButton) it5.next();
                        if (ChatMessageCell.this.drawContactView && instantViewButton3.type == 5 && !instantViewButton3.rect.isEmpty()) {
                            accessibilityNodeInfo2.addChild(ChatMessageCell.this, 491);
                        }
                        if (ChatMessageCell.this.drawContactAdd && instantViewButton3.type == 31 && !instantViewButton3.rect.isEmpty()) {
                            accessibilityNodeInfo2.addChild(ChatMessageCell.this, 490);
                        }
                        if (ChatMessageCell.this.drawContactSendMessage && instantViewButton3.type == 30 && !instantViewButton3.rect.isEmpty()) {
                            accessibilityNodeInfo2.addChild(ChatMessageCell.this, 489);
                        }
                    }
                }
            }
            if (ChatMessageCell.this.commentLayout != null) {
                accessibilityNodeInfo2.addChild(ChatMessageCell.this, 496);
            }
            if (ChatMessageCell.this.drawSideButton == 1 || ChatMessageCell.this.drawSideButton == 2) {
                accessibilityNodeInfo2.addChild(ChatMessageCell.this, 498);
            }
            ChatMessageCell chatMessageCell16 = ChatMessageCell.this;
            if (chatMessageCell16.replyNameLayout != null) {
                accessibilityNodeInfo2.addChild(chatMessageCell16, 497);
            }
            if (ChatMessageCell.this.forwardedNameLayout[0] != null && ChatMessageCell.this.forwardedNameLayout[1] != null) {
                if (Build.VERSION.SDK_INT >= 21) {
                    accessibilityNodeInfo2.addAction(new AccessibilityNodeInfo.AccessibilityAction(R.id.acc_action_open_forwarded_origin, LocaleController.getString("AccActionOpenForwardedOrigin", R.string.AccActionOpenForwardedOrigin)));
                } else {
                    accessibilityNodeInfo2.addChild(ChatMessageCell.this, 494);
                }
            }
            if (ChatMessageCell.this.drawSelectionBackground || ChatMessageCell.this.getBackground() != null) {
                accessibilityNodeInfo2.setSelected(true);
            }
            return accessibilityNodeInfo2;
        }

        /* JADX WARN: Code restructure failed: missing block: B:20:0x0046, code lost:
        
            if (r11 != null) goto L25;
         */
        /* JADX WARN: Code restructure failed: missing block: B:21:0x0053, code lost:
        
            r9.this$0.delegate.didPressUrl(r9.this$0, r11, false);
         */
        /* JADX WARN: Code restructure failed: missing block: B:26:0x0051, code lost:
        
            if (r11 != null) goto L25;
         */
        /* JADX WARN: Code restructure failed: missing block: B:59:0x0123, code lost:
        
            if (r9.this$0.delegate != null) goto L65;
         */
        /* JADX WARN: Code restructure failed: missing block: B:60:0x0132, code lost:
        
            r10 = r9.this$0.delegate;
            r11 = r9.this$0;
            r12 = 5;
         */
        /* JADX WARN: Code restructure failed: missing block: B:64:0x0130, code lost:
        
            if (r9.this$0.delegate != null) goto L65;
         */
        /* JADX WARN: Code restructure failed: missing block: B:98:0x01d1, code lost:
        
            if (r9.this$0.currentMessageObject.messageOwner.reply_to.reply_from == null) goto L136;
         */
        @Override // android.view.accessibility.AccessibilityNodeProvider
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public boolean performAction(int i, int i2, Bundle bundle) {
            ChatMessageCell chatMessageCell;
            int i3;
            TranscribeButton transcribeButton;
            ChatMessageCellDelegate chatMessageCellDelegate;
            ChatMessageCellDelegate chatMessageCellDelegate2;
            ChatMessageCell chatMessageCell2;
            TLRPC.User user;
            float f;
            float f2;
            boolean z;
            ChatMessageCellDelegate chatMessageCellDelegate3;
            ChatMessageCell chatMessageCell3;
            int i4;
            ClickableSpan linkById;
            if (i == -1) {
                ChatMessageCell.this.performAccessibilityAction(i2, bundle);
            } else {
                if (i2 == 64) {
                    chatMessageCell = ChatMessageCell.this;
                    i3 = 32768;
                } else {
                    if (i2 == 16) {
                        if (i != 5000) {
                            if (i >= 3000) {
                                linkById = getLinkById(i, true);
                            } else if (i >= 2000) {
                                linkById = getLinkById(i, false);
                            } else if (i >= 1000) {
                                int i5 = i - 1000;
                                if (i5 >= ChatMessageCell.this.botButtons.size()) {
                                    return false;
                                }
                                BotButton botButton = (BotButton) ChatMessageCell.this.botButtons.get(i5);
                                if (ChatMessageCell.this.delegate != null && botButton.button != null) {
                                    ChatMessageCell.this.delegate.didPressBotButton(ChatMessageCell.this, botButton.button);
                                }
                            } else if (i >= 500) {
                                int i6 = i - 500;
                                if (i6 >= ChatMessageCell.this.pollButtons.size()) {
                                    return false;
                                }
                                PollButton pollButton = (PollButton) ChatMessageCell.this.pollButtons.get(i6);
                                if (ChatMessageCell.this.delegate != null) {
                                    ArrayList arrayList = new ArrayList();
                                    arrayList.add(pollButton.answer);
                                    ChatMessageCell.this.delegate.didPressVoteButtons(ChatMessageCell.this, arrayList, -1, 0, 0);
                                }
                            } else if (i == 495) {
                                if (ChatMessageCell.this.delegate != null) {
                                    ChatMessageCell.this.delegate.didPressHint(ChatMessageCell.this, 0);
                                }
                            } else if (i != 499) {
                                if (i != 492) {
                                    if (i != 491) {
                                        if (i == 490) {
                                            if (ChatMessageCell.this.delegate != null) {
                                                chatMessageCellDelegate3 = ChatMessageCell.this.delegate;
                                                chatMessageCell3 = ChatMessageCell.this;
                                                i4 = 31;
                                            }
                                        } else if (i == 489) {
                                            if (ChatMessageCell.this.delegate != null) {
                                                chatMessageCellDelegate3 = ChatMessageCell.this.delegate;
                                                chatMessageCell3 = ChatMessageCell.this;
                                                i4 = 30;
                                            }
                                        } else if (i == 498) {
                                            if (ChatMessageCell.this.delegate != null) {
                                                chatMessageCellDelegate = ChatMessageCell.this.delegate;
                                                chatMessageCellDelegate.didPressSideButton(ChatMessageCell.this);
                                            }
                                        } else if (i == 497) {
                                            if (ChatMessageCell.this.delegate != null) {
                                                ChatMessageCell chatMessageCell4 = ChatMessageCell.this;
                                                if (!chatMessageCell4.isThreadChat || chatMessageCell4.currentMessageObject.getReplyTopMsgId() != 0) {
                                                    if (!ChatMessageCell.this.currentMessageObject.hasValidReplyMessageObject()) {
                                                        ChatMessageCell chatMessageCell5 = ChatMessageCell.this;
                                                        if (!chatMessageCell5.hasReplyQuote) {
                                                            if (chatMessageCell5.currentMessageObject.messageOwner != null) {
                                                                if (ChatMessageCell.this.currentMessageObject.messageOwner.reply_to != null) {
                                                                }
                                                            }
                                                        }
                                                    }
                                                    ChatMessageCellDelegate chatMessageCellDelegate4 = ChatMessageCell.this.delegate;
                                                    ChatMessageCell chatMessageCell6 = ChatMessageCell.this;
                                                    chatMessageCellDelegate4.didPressReplyMessage(chatMessageCell6, chatMessageCell6.currentMessageObject.getReplyMsgId(), 0.0f, 0.0f, false);
                                                }
                                            }
                                        } else if (i == 494) {
                                            if (ChatMessageCell.this.delegate != null) {
                                                if (ChatMessageCell.this.currentForwardChannel != null) {
                                                    ChatMessageCellDelegate chatMessageCellDelegate5 = ChatMessageCell.this.delegate;
                                                    ChatMessageCell chatMessageCell7 = ChatMessageCell.this;
                                                    chatMessageCellDelegate5.didPressChannelAvatar(chatMessageCell7, chatMessageCell7.currentForwardChannel, ChatMessageCell.this.currentMessageObject.messageOwner.fwd_from.channel_post, ChatMessageCell.this.lastTouchX, ChatMessageCell.this.lastTouchY, false);
                                                } else if (ChatMessageCell.this.currentForwardUser != null) {
                                                    chatMessageCellDelegate2 = ChatMessageCell.this.delegate;
                                                    chatMessageCell2 = ChatMessageCell.this;
                                                    user = chatMessageCell2.currentForwardUser;
                                                    f = ChatMessageCell.this.lastTouchX;
                                                    f2 = ChatMessageCell.this.lastTouchY;
                                                    z = false;
                                                    chatMessageCellDelegate2.didPressUserAvatar(chatMessageCell2, user, f, f2, z);
                                                } else if (ChatMessageCell.this.currentForwardName != null) {
                                                    ChatMessageCell.this.delegate.didPressHiddenForward(ChatMessageCell.this);
                                                }
                                            }
                                        } else if (i == 496) {
                                            if (ChatMessageCell.this.delegate != null) {
                                                ChatMessageCell chatMessageCell8 = ChatMessageCell.this;
                                                boolean z2 = chatMessageCell8.isRepliesChat;
                                                chatMessageCellDelegate = chatMessageCell8.delegate;
                                                if (!z2) {
                                                    chatMessageCellDelegate.didPressCommentButton(ChatMessageCell.this);
                                                }
                                                chatMessageCellDelegate.didPressSideButton(ChatMessageCell.this);
                                            }
                                        } else if (i == 493 && (transcribeButton = ChatMessageCell.this.transcribeButton) != null) {
                                            transcribeButton.onTap();
                                        }
                                    }
                                }
                                chatMessageCellDelegate3.didPressInstantButton(chatMessageCell3, i4);
                            } else if (ChatMessageCell.this.delegate != null) {
                                chatMessageCellDelegate3 = ChatMessageCell.this.delegate;
                                chatMessageCell3 = ChatMessageCell.this;
                                i4 = chatMessageCell3.drawInstantViewType;
                                chatMessageCellDelegate3.didPressInstantButton(chatMessageCell3, i4);
                            }
                            ChatMessageCell.this.sendAccessibilityEventForVirtualView(i, 1);
                        } else if (ChatMessageCell.this.delegate != null) {
                            chatMessageCellDelegate2 = ChatMessageCell.this.delegate;
                            chatMessageCell2 = ChatMessageCell.this;
                            user = chatMessageCell2.currentUser;
                            f2 = 0.0f;
                            z = false;
                            f = 0.0f;
                            chatMessageCellDelegate2.didPressUserAvatar(chatMessageCell2, user, f, f2, z);
                        }
                    } else if (i2 == 32) {
                        ClickableSpan linkById2 = getLinkById(i, i >= 3000);
                        if (linkById2 != null && ChatMessageCell.this.delegate != null) {
                            ChatMessageCell.this.delegate.didPressUrl(ChatMessageCell.this, linkById2, true);
                            chatMessageCell = ChatMessageCell.this;
                            i3 = 2;
                        }
                    }
                }
                chatMessageCell.sendAccessibilityEventForVirtualView(i, i3);
            }
            return true;
        }
    }

    public static class PollButton {
        public AnimatedEmojiSpan.EmojiGroupedSpans animatedEmoji;
        private TLRPC.PollAnswer answer;
        private boolean chosen;
        private boolean correct;
        private int count;
        private float decimal;
        public int height;
        private int percent;
        private float percentProgress;
        private boolean prevChosen;
        private int prevPercent;
        private float prevPercentProgress;
        private StaticLayout title;
        public int x;
        public int y;

        static /* synthetic */ TLRPC.PollAnswer access$1200(PollButton pollButton) {
            return pollButton.answer;
        }

        static /* synthetic */ TLRPC.PollAnswer access$1202(PollButton pollButton, TLRPC.PollAnswer pollAnswer) {
            pollButton.answer = pollAnswer;
            return pollAnswer;
        }

        static /* synthetic */ int access$1302(PollButton pollButton, int i) {
            pollButton.count = i;
            return i;
        }

        static /* synthetic */ int access$2400(PollButton pollButton) {
            return pollButton.percent;
        }

        static /* synthetic */ int access$2402(PollButton pollButton, int i) {
            pollButton.percent = i;
            return i;
        }

        static /* synthetic */ int access$2412(PollButton pollButton, int i) {
            int i2 = pollButton.percent + i;
            pollButton.percent = i2;
            return i2;
        }

        static /* synthetic */ int access$2500(PollButton pollButton) {
            return pollButton.prevPercent;
        }

        static /* synthetic */ int access$2502(PollButton pollButton, int i) {
            pollButton.prevPercent = i;
            return i;
        }

        static /* synthetic */ float access$2600(PollButton pollButton) {
            return pollButton.percentProgress;
        }

        static /* synthetic */ float access$2602(PollButton pollButton, float f) {
            pollButton.percentProgress = f;
            return f;
        }

        static /* synthetic */ float access$2700(PollButton pollButton) {
            return pollButton.prevPercentProgress;
        }

        static /* synthetic */ float access$2702(PollButton pollButton, float f) {
            pollButton.prevPercentProgress = f;
            return f;
        }

        static /* synthetic */ StaticLayout access$2800(PollButton pollButton) {
            return pollButton.title;
        }

        static /* synthetic */ StaticLayout access$2802(PollButton pollButton, StaticLayout staticLayout) {
            pollButton.title = staticLayout;
            return staticLayout;
        }

        static /* synthetic */ boolean access$2900(PollButton pollButton) {
            return pollButton.chosen;
        }

        static /* synthetic */ boolean access$2902(PollButton pollButton, boolean z) {
            pollButton.chosen = z;
            return z;
        }

        static /* synthetic */ boolean access$3002(PollButton pollButton, boolean z) {
            pollButton.correct = z;
            return z;
        }

        static /* synthetic */ float access$3100(PollButton pollButton) {
            return pollButton.decimal;
        }

        static /* synthetic */ float access$3102(PollButton pollButton, float f) {
            pollButton.decimal = f;
            return f;
        }

        static /* synthetic */ float access$3124(PollButton pollButton, float f) {
            float f2 = pollButton.decimal - f;
            pollButton.decimal = f2;
            return f2;
        }

        static /* synthetic */ boolean access$3202(PollButton pollButton, boolean z) {
            pollButton.prevChosen = z;
            return z;
        }
    }

    public class TransitionParams {
        public boolean animateBackgroundBoundsInner;
        public boolean animateBackgroundWidth;
        boolean animateBotButtonsChanged;
        private boolean animateButton;
        public boolean animateChange;
        private int animateCommentArrowX;
        private boolean animateCommentDrawUnread;
        private int animateCommentUnreadX;
        private float animateCommentX;
        private boolean animateComments;
        private StaticLayout animateCommentsLayout;
        public boolean animateDrawBackground;
        private boolean animateDrawCommentNumber;
        public boolean animateDrawNameLayout;
        public boolean animateDrawingTimeAlpha;
        private boolean animateEditedEnter;
        private StaticLayout animateEditedLayout;
        private int animateEditedWidthDiff;
        public boolean animateExpandedQuotes;
        public HashSet animateExpandedQuotesFrom;
        public boolean animateFactCheck;
        public boolean animateFactCheckExpanded;
        public boolean animateFactCheckHeight;
        public int animateFactCheckHeightFrom;
        int animateForwardNameWidth;
        float animateForwardNameX;
        public boolean animateForwardedLayout;
        public int animateForwardedNamesOffset;
        private float animateFromButtonX;
        private float animateFromButtonY;
        public int animateFromLinkPreviewHeight;
        public int animateFromLinkPreviewY;
        private int animateFromMediaOffsetY;
        public boolean animateFromRecommendationsExpanded;
        private float animateFromReplyTextHeight;
        public float animateFromReplyY;
        public float animateFromRoundVideoDotY;
        public float animateFromTextY;
        public int animateFromTimeX;
        public float animateFromTimeXPinned;
        private float animateFromTimeXReplies;
        private float animateFromTimeXViews;
        public int animateFromWidthForButton;
        public boolean animateLinkAbove;
        public boolean animateLinkPreviewHeight;
        public boolean animateLinkPreviewY;
        public boolean animateLocationIsExpired;
        public boolean animateMediaAbove;
        private boolean animateMediaOffsetY;
        public boolean animateMessageText;
        private float animateNameX;
        private AnimatedEmojiSpan.EmojiGroupedSpans animateOutAnimateEmoji;
        private AnimatedEmojiSpan.EmojiGroupedSpans animateOutAnimateEmojiReply;
        private MessageObject.TextLayoutBlocks animateOutCaptionLayout;
        private ArrayList animateOutTextBlocks;
        private float animateOutTextXOffset;
        private boolean animatePinned;
        public boolean animatePlayingRound;
        public boolean animateRadius;
        public boolean animateRecommendationsExpanded;
        boolean animateReplaceCaptionLayout;
        private boolean animateReplies;
        private StaticLayout animateRepliesLayout;
        private StaticLayout animateReplyTextLayout;
        public float animateReplyTextOffset;
        public boolean animateReplyY;
        public boolean animateRoundVideoDotY;
        private boolean animateShouldDrawMenuDrawable;
        private boolean animateShouldDrawTimeOnMedia;
        private boolean animateSign;
        public boolean animateSmallImage;
        public boolean animateText;
        private StaticLayout animateTimeLayout;
        private int animateTimeWidth;
        public float animateToImageH;
        public float animateToImageW;
        public float animateToImageX;
        public float animateToImageY;
        public int[] animateToRadius;
        private int animateTotalCommentWidth;
        public boolean animateUseTranscribeButton;
        private StaticLayout animateViewsLayout;
        public boolean animateWidthForButton;
        public float captionFromX;
        public float captionFromY;
        public float deltaBottom;
        public float deltaLeft;
        public float deltaRight;
        public float deltaTop;
        public boolean drawPinnedBottomBackground;
        public boolean ignoreAlpha;
        public boolean imageChangeBoundsTransition;
        public int lastBackgroundLeft;
        public int lastBackgroundRight;
        public float lastButtonX;
        public float lastButtonY;
        public int lastCommentArrowX;
        public boolean lastCommentDrawUnread;
        public StaticLayout lastCommentLayout;
        public int lastCommentUnreadX;
        public float lastCommentX;
        public int lastCommentsCount;
        public boolean lastDrawBackground;
        public boolean lastDrawCommentNumber;
        public StaticLayout lastDrawDocTitleLayout;
        public StaticLayout lastDrawInfoLayout;
        public float lastDrawLocationExpireProgress;
        public String lastDrawLocationExpireText;
        public boolean lastDrawNameLayout;
        public float lastDrawReplyY;
        public float lastDrawRoundVideoDotY;
        public boolean lastDrawTime;
        public MessageObject.TextLayoutBlocks lastDrawingCaptionLayout;
        public float lastDrawingCaptionX;
        public float lastDrawingCaptionY;
        public boolean lastDrawingEdited;
        public HashSet lastDrawingExpandedQuotes;
        public boolean lastDrawingFactCheck;
        public boolean lastDrawingFactCheckExpanded;
        public int lastDrawingFactCheckHeight;
        public float lastDrawingImageH;
        public float lastDrawingImageW;
        public float lastDrawingImageX;
        public float lastDrawingImageY;
        public boolean lastDrawingLinkAbove;
        public int lastDrawingLinkPreviewHeight;
        public int lastDrawingLinkPreviewY;
        public boolean lastDrawingMediaAbove;
        public boolean lastDrawingRecommendationsExpanded;
        public float lastDrawingReplyTextHeight;
        public boolean lastDrawingSmallImage;
        public ArrayList lastDrawingTextBlocks;
        public float lastDrawingTextX;
        public float lastDrawingTextY;
        public boolean lastDrawnForwardedName;
        public StaticLayout lastDrawnReplyTextLayout;
        public int lastDrawnWidthForButtons;
        public int lastForwardNameWidth;
        public float lastForwardNameX;
        public int lastForwardedNamesOffset;
        public boolean lastIsPinned;
        public boolean lastIsPlayingRound;
        public boolean lastLocatinIsExpired;
        public int lastMediaOffsetY;
        public int lastRepliesCount;
        public StaticLayout lastRepliesLayout;
        public int lastReplyTextXOffset;
        public boolean lastShouldDrawMenuDrawable;
        public boolean lastShouldDrawTimeOnMedia;
        public String lastSignMessage;
        public float lastTextXOffset;
        public StaticLayout lastTimeLayout;
        public int lastTimeWidth;
        public int lastTimeX;
        public float lastTimeXPinned;
        private float lastTimeXReplies;
        private float lastTimeXViews;
        public int lastTopOffset;
        public int lastTotalCommentWidth;
        public boolean lastUseTranscribeButton;
        public int lastViewsCount;
        public StaticLayout lastViewsLayout;
        public boolean messageEntering;
        private boolean moveCaption;
        public float photoImageFromCenterX;
        public float photoImageFromCenterY;
        public float photoImageFromHeight;
        public float photoImageFromWidth;
        public boolean shouldAnimateTimeX;
        public float toDeltaLeft;
        public float toDeltaRight;
        public boolean transformGroupToSingleMessage;
        public boolean updatePhotoImageX;
        public boolean wasDraw;
        public int[] imageRoundRadius = new int[4];
        public float captionEnterProgress = 1.0f;
        public float changePinnedBottomProgress = 1.0f;
        public Rect lastDrawingBackgroundRect = new Rect();
        public float animateChangeProgress = 1.0f;
        private ArrayList lastDrawBotButtons = new ArrayList();
        private ArrayList transitionBotButtons = new ArrayList();
        public int lastStatusDrawableParams = -1;
        public StaticLayout[] lastDrawnForwardedNameLayout = new StaticLayout[2];
        public StaticLayout[] animatingForwardedNameLayout = new StaticLayout[2];

        public TransitionParams() {
        }

        /* JADX WARN: Code restructure failed: missing block: B:118:0x0309, code lost:
        
            if (r24.lastDrawingCaptionY == r24.this$0.captionY) goto L146;
         */
        /* JADX WARN: Code restructure failed: missing block: B:288:0x034f, code lost:
        
            if (r24.lastDrawingCaptionY == r24.this$0.captionY) goto L146;
         */
        /* JADX WARN: Removed duplicated region for block: B:102:0x02c3  */
        /* JADX WARN: Removed duplicated region for block: B:121:0x0364  */
        /* JADX WARN: Removed duplicated region for block: B:125:0x03fe  */
        /* JADX WARN: Removed duplicated region for block: B:128:0x040d  */
        /* JADX WARN: Removed duplicated region for block: B:134:0x044d  */
        /* JADX WARN: Removed duplicated region for block: B:137:0x045a  */
        /* JADX WARN: Removed duplicated region for block: B:140:0x0466  */
        /* JADX WARN: Removed duplicated region for block: B:144:0x0486  */
        /* JADX WARN: Removed duplicated region for block: B:149:0x04a6  */
        /* JADX WARN: Removed duplicated region for block: B:160:0x04f8  */
        /* JADX WARN: Removed duplicated region for block: B:163:0x050d  */
        /* JADX WARN: Removed duplicated region for block: B:167:0x055d  */
        /* JADX WARN: Removed duplicated region for block: B:170:0x0569  */
        /* JADX WARN: Removed duplicated region for block: B:173:0x0575  */
        /* JADX WARN: Removed duplicated region for block: B:176:0x0583  */
        /* JADX WARN: Removed duplicated region for block: B:179:0x0590  */
        /* JADX WARN: Removed duplicated region for block: B:182:0x05a1  */
        /* JADX WARN: Removed duplicated region for block: B:185:0x05b2  */
        /* JADX WARN: Removed duplicated region for block: B:189:0x05c1  */
        /* JADX WARN: Removed duplicated region for block: B:192:0x05ce  */
        /* JADX WARN: Removed duplicated region for block: B:195:0x05db  */
        /* JADX WARN: Removed duplicated region for block: B:198:0x05e9  */
        /* JADX WARN: Removed duplicated region for block: B:201:0x05f8  */
        /* JADX WARN: Removed duplicated region for block: B:206:0x0630  */
        /* JADX WARN: Removed duplicated region for block: B:209:0x063d  */
        /* JADX WARN: Removed duplicated region for block: B:220:0x0670  */
        /* JADX WARN: Removed duplicated region for block: B:229:0x0513  */
        /* JADX WARN: Removed duplicated region for block: B:239:0x0461  */
        /* JADX WARN: Removed duplicated region for block: B:247:0x0382  */
        /* JADX WARN: Removed duplicated region for block: B:250:0x0388  */
        /* JADX WARN: Removed duplicated region for block: B:267:0x03ed  */
        /* JADX WARN: Removed duplicated region for block: B:283:0x0334  */
        /* JADX WARN: Removed duplicated region for block: B:296:0x020f  */
        /* JADX WARN: Removed duplicated region for block: B:44:0x0106  */
        /* JADX WARN: Removed duplicated region for block: B:47:0x0111  */
        /* JADX WARN: Removed duplicated region for block: B:72:0x0231  */
        /* JADX WARN: Removed duplicated region for block: B:75:0x0240  */
        /* JADX WARN: Removed duplicated region for block: B:85:0x027a  */
        /* JADX WARN: Removed duplicated region for block: B:88:0x0289  */
        /* JADX WARN: Removed duplicated region for block: B:91:0x0294  */
        /* JADX WARN: Removed duplicated region for block: B:94:0x029f  */
        /* JADX WARN: Removed duplicated region for block: B:99:0x02b8  */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public boolean animateChange() {
            boolean z;
            StaticLayout staticLayout;
            ChatMessageCell chatMessageCell;
            boolean z2;
            boolean z3;
            ChatMessageCell chatMessageCell2;
            MessageObject.TextLayoutBlocks textLayoutBlocks;
            MessageObject.TextLayoutBlocks textLayoutBlocks2;
            int i;
            int i2;
            boolean z4;
            ChatMessageCell chatMessageCell3;
            boolean z5;
            float f;
            ChatMessageCell chatMessageCell4;
            ChatMessageCell chatMessageCell5;
            StaticLayout staticLayout2;
            ChannelRecommendationsCell channelRecommendationsCell;
            if (!this.wasDraw) {
                return false;
            }
            this.animateMessageText = false;
            if (ChatMessageCell.this.currentMessageObject.textLayoutBlocks != this.lastDrawingTextBlocks) {
                if (ChatMessageCell.this.currentMessageObject.textLayoutBlocks != null && this.lastDrawingTextBlocks != null && ChatMessageCell.this.currentMessageObject.textLayoutBlocks.size() == this.lastDrawingTextBlocks.size()) {
                    for (int i3 = 0; i3 < this.lastDrawingTextBlocks.size(); i3++) {
                        String charSequence = ChatMessageCell.this.currentMessageObject.textLayoutBlocks.get(i3).textLayout == null ? null : ChatMessageCell.this.currentMessageObject.textLayoutBlocks.get(i3).textLayout.getText().toString();
                        String charSequence2 = ((MessageObject.TextLayoutBlock) this.lastDrawingTextBlocks.get(i3)).textLayout == null ? null : ((MessageObject.TextLayoutBlock) this.lastDrawingTextBlocks.get(i3)).textLayout.getText().toString();
                        if ((charSequence != null || charSequence2 == null) && ((charSequence == null || charSequence2 != null) && charSequence.equals(charSequence2))) {
                            ChatMessageCell chatMessageCell6 = ChatMessageCell.this;
                            AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans = chatMessageCell6.animatedEmojiStack;
                            if (emojiGroupedSpans != null) {
                                emojiGroupedSpans.replaceLayout(chatMessageCell6.currentMessageObject.textLayoutBlocks.get(i3).textLayout, ((MessageObject.TextLayoutBlock) this.lastDrawingTextBlocks.get(i3)).textLayout);
                            }
                        }
                    }
                    ChatMessageCell chatMessageCell7 = ChatMessageCell.this;
                    chatMessageCell7.animatedEmojiStack = AnimatedEmojiSpan.update(0, chatMessageCell7, chatMessageCell7.animatedEmojiStack, chatMessageCell7.currentMessageObject.textLayoutBlocks);
                }
                this.animateMessageText = true;
                ArrayList arrayList = this.lastDrawingTextBlocks;
                this.animateOutTextBlocks = arrayList;
                this.animateOutTextXOffset = this.lastTextXOffset;
                this.animateOutAnimateEmoji = AnimatedEmojiSpan.update(0, (View) ChatMessageCell.this, this.animateOutAnimateEmoji, (ArrayList<MessageObject.TextLayoutBlock>) arrayList, true);
                ChatMessageCell chatMessageCell8 = ChatMessageCell.this;
                chatMessageCell8.animatedEmojiStack = AnimatedEmojiSpan.update(0, chatMessageCell8, chatMessageCell8.animatedEmojiStack, chatMessageCell8.currentMessageObject.textLayoutBlocks);
                z = true;
                this.animateDrawNameLayout = false;
                if (ChatMessageCell.this.drawNameLayout != this.lastDrawNameLayout) {
                    this.animateDrawNameLayout = true;
                    z = true;
                }
                staticLayout = ChatMessageCell.this.replyTextLayout;
                if (staticLayout != this.lastDrawnReplyTextLayout) {
                    CharSequence text = staticLayout != null ? staticLayout.getText() : null;
                    StaticLayout staticLayout3 = this.lastDrawnReplyTextLayout;
                    if (!TextUtils.equals(text, staticLayout3 != null ? staticLayout3.getText() : null)) {
                        this.animateFromReplyTextHeight = this.lastDrawingReplyTextHeight;
                        StaticLayout staticLayout4 = this.lastDrawnReplyTextLayout;
                        this.animateReplyTextLayout = staticLayout4;
                        this.animateReplyTextOffset = this.lastReplyTextXOffset;
                        this.animateOutAnimateEmojiReply = AnimatedEmojiSpan.update(0, (View) ChatMessageCell.this, false, this.animateOutAnimateEmojiReply, true, staticLayout4);
                        z = true;
                    }
                }
                if (!ChatMessageCell.this.edited && !this.lastDrawingEdited && ChatMessageCell.this.timeLayout != null) {
                    String string = LocaleController.getString("EditedMessage", R.string.EditedMessage);
                    CharSequence text2 = ChatMessageCell.this.timeLayout.getText();
                    int indexOf = text2.toString().indexOf(string);
                    if (indexOf >= 0) {
                        if (indexOf == 0) {
                            TextPaint textPaint = Theme.chat_timePaint;
                            int dp = ChatMessageCell.this.timeTextWidth + AndroidUtilities.dp(100.0f);
                            Layout.Alignment alignment = Layout.Alignment.ALIGN_NORMAL;
                            this.animateEditedLayout = new StaticLayout(string, textPaint, dp, alignment, 1.0f, 0.0f, false);
                            SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
                            spannableStringBuilder.append((CharSequence) string);
                            spannableStringBuilder.append(text2.subSequence(string.length(), text2.length()));
                            spannableStringBuilder.setSpan(new EmptyStubSpan(), 0, string.length(), 0);
                            this.animateTimeLayout = new StaticLayout(spannableStringBuilder, Theme.chat_timePaint, ChatMessageCell.this.timeTextWidth + AndroidUtilities.dp(100.0f), alignment, 1.0f, 0.0f, false);
                            this.animateEditedWidthDiff = ChatMessageCell.this.timeWidth - this.lastTimeWidth;
                        } else {
                            this.animateEditedWidthDiff = 0;
                            this.animateEditedLayout = null;
                            this.animateTimeLayout = this.lastTimeLayout;
                        }
                        this.animateEditedEnter = true;
                        this.animateTimeWidth = this.lastTimeWidth;
                        this.animateFromTimeX = this.lastTimeX;
                        this.shouldAnimateTimeX = true;
                        z = true;
                    }
                    ChatMessageCell.this.accessibilityText = null;
                } else if (!ChatMessageCell.this.edited && this.lastDrawingEdited) {
                    chatMessageCell = ChatMessageCell.this;
                    if (chatMessageCell.timeLayout != null) {
                        this.animateTimeLayout = this.lastTimeLayout;
                        int i4 = chatMessageCell.timeWidth;
                        int i5 = this.lastTimeWidth;
                        this.animateEditedWidthDiff = i4 - i5;
                        this.animateEditedEnter = true;
                        this.animateTimeWidth = i5;
                        this.animateFromTimeX = this.lastTimeX;
                        this.shouldAnimateTimeX = true;
                        z = true;
                    }
                }
                this.animateDrawBackground = false;
                if (ChatMessageCell.this.drawBackground != this.lastDrawBackground) {
                    this.animateDrawBackground = true;
                    z = true;
                }
                this.animateSmallImage = false;
                if (ChatMessageCell.this.isSmallImage != this.lastDrawingSmallImage) {
                    this.animateSmallImage = true;
                    float f2 = this.lastDrawingImageW;
                    this.photoImageFromWidth = f2;
                    float f3 = this.lastDrawingImageH;
                    this.photoImageFromHeight = f3;
                    this.photoImageFromCenterX = this.lastDrawingImageX + (f2 / 2.0f);
                    this.photoImageFromCenterY = this.lastDrawingImageY + (f3 / 2.0f);
                    z = true;
                }
                this.animateRecommendationsExpanded = false;
                z2 = (ChatMessageCell.this.currentMessageObject.type == 27 || (channelRecommendationsCell = ChatMessageCell.this.channelRecommendationsCell) == null || !channelRecommendationsCell.isExpanded()) ? false : true;
                z3 = this.lastDrawingRecommendationsExpanded;
                if (z2 != z3) {
                    this.animateRecommendationsExpanded = true;
                    this.animateFromRecommendationsExpanded = z3;
                    z = true;
                }
                this.animateLinkAbove = false;
                chatMessageCell2 = ChatMessageCell.this;
                if (chatMessageCell2.linkPreviewAbove != this.lastDrawingLinkAbove) {
                    this.animateLinkAbove = true;
                    z = true;
                }
                this.animateMediaAbove = false;
                if (chatMessageCell2.captionAbove != this.lastDrawingMediaAbove) {
                    this.animateMediaAbove = true;
                    z = true;
                }
                this.animateLinkPreviewHeight = false;
                if (chatMessageCell2.hasLinkPreview) {
                    int i6 = ChatMessageCell.this.linkPreviewHeight;
                    int i7 = this.lastDrawingLinkPreviewHeight;
                    if (i6 != i7) {
                        this.animateLinkPreviewHeight = true;
                        this.animateFromLinkPreviewHeight = i7;
                        z = true;
                    }
                }
                this.animateUseTranscribeButton = false;
                if (ChatMessageCell.this.useTranscribeButton != this.lastUseTranscribeButton) {
                    this.animateUseTranscribeButton = true;
                    z = true;
                }
                ChatMessageCell chatMessageCell9 = ChatMessageCell.this;
                textLayoutBlocks = chatMessageCell9.captionLayout;
                textLayoutBlocks2 = this.lastDrawingCaptionLayout;
                if (textLayoutBlocks != textLayoutBlocks2) {
                    if (textLayoutBlocks != null && textLayoutBlocks2 != null) {
                        chatMessageCell9.updateCaptionLayout();
                        if (this.lastDrawingCaptionX == ChatMessageCell.this.captionX) {
                        }
                        this.moveCaption = true;
                        this.captionFromX = this.lastDrawingCaptionX;
                        this.captionFromY = this.lastDrawingCaptionY;
                    }
                    if (this.lastDrawBotButtons.isEmpty() || !ChatMessageCell.this.botButtons.isEmpty()) {
                        if (this.lastDrawBotButtons.size() != ChatMessageCell.this.botButtons.size()) {
                            this.animateBotButtonsChanged = true;
                        }
                        if (!this.animateBotButtonsChanged) {
                            for (int i8 = 0; i8 < ChatMessageCell.this.botButtons.size(); i8++) {
                                BotButton botButton = (BotButton) ChatMessageCell.this.botButtons.get(i8);
                                BotButton botButton2 = (BotButton) this.lastDrawBotButtons.get(i8);
                                if (Math.abs(botButton.x - botButton2.x) > 0.01f || Math.abs(botButton.width - botButton2.width) > 0.01f || !TextUtils.equals(botButton.title.getText(), botButton2.title.getText())) {
                                    this.animateBotButtonsChanged = true;
                                    break;
                                }
                            }
                        }
                        if (this.animateBotButtonsChanged) {
                            this.transitionBotButtons.addAll(this.lastDrawBotButtons);
                        }
                    }
                    if (this.lastDrawnWidthForButtons != ChatMessageCell.this.widthForButtons) {
                        this.animateFromWidthForButton = this.lastDrawnWidthForButtons;
                        this.animateWidthForButton = true;
                    }
                    if ((ChatMessageCell.this.documentAttachType != 5 || ChatMessageCell.this.documentAttachType == 3 || ChatMessageCell.this.documentAttachType == 1) && (ChatMessageCell.this.buttonX != this.lastButtonX || ChatMessageCell.this.buttonY != this.lastButtonY)) {
                        this.animateFromButtonX = this.lastButtonX;
                        this.animateFromButtonY = this.lastButtonY;
                        this.animateButton = true;
                        z = true;
                    }
                    i = ChatMessageCell.this.mediaOffsetY;
                    i2 = this.lastMediaOffsetY;
                    if (i != i2) {
                        this.animateFromMediaOffsetY = i2;
                        this.animateMediaOffsetY = true;
                        z = true;
                    }
                    z4 = this.lastIsPinned;
                    chatMessageCell3 = ChatMessageCell.this;
                    if (z4 != chatMessageCell3.isPinned) {
                        this.animatePinned = true;
                        chatMessageCell3.accessibilityText = null;
                        z = true;
                        z5 = true;
                    } else {
                        z5 = false;
                    }
                    if ((this.lastRepliesLayout == null || chatMessageCell3.repliesLayout != null) && this.lastRepliesCount != ChatMessageCell.this.getRepliesCount()) {
                        this.animateRepliesLayout = this.lastRepliesLayout;
                        this.animateReplies = true;
                        ChatMessageCell.this.accessibilityText = null;
                        z = true;
                        z5 = true;
                    }
                    if (this.lastViewsLayout != null && this.lastViewsCount != ChatMessageCell.this.getMessageObject().messageOwner.views) {
                        this.animateViewsLayout = this.lastViewsLayout;
                        ChatMessageCell.this.accessibilityText = null;
                        z = true;
                        z5 = true;
                    }
                    if (ChatMessageCell.this.commentLayout != null && this.lastCommentsCount != ChatMessageCell.this.getRepliesCount()) {
                        staticLayout2 = this.lastCommentLayout;
                        if (staticLayout2 != null || TextUtils.equals(staticLayout2.getText(), ChatMessageCell.this.commentLayout.getText())) {
                            this.animateCommentsLayout = null;
                        } else {
                            this.animateCommentsLayout = this.lastCommentLayout;
                        }
                        this.animateTotalCommentWidth = this.lastTotalCommentWidth;
                        this.animateCommentX = this.lastCommentX;
                        this.animateCommentArrowX = this.lastCommentArrowX;
                        this.animateCommentUnreadX = this.lastCommentUnreadX;
                        this.animateCommentDrawUnread = this.lastCommentDrawUnread;
                        this.animateDrawCommentNumber = this.lastDrawCommentNumber;
                        this.animateComments = true;
                        z = true;
                    }
                    if (!TextUtils.equals(this.lastSignMessage, ChatMessageCell.this.lastPostAuthor)) {
                        this.animateSign = true;
                        this.animateNameX = ChatMessageCell.this.nameX;
                        z = true;
                    }
                    if (this.lastDrawTime == ChatMessageCell.this.forceNotDrawTime) {
                        this.animateDrawingTimeAlpha = true;
                        this.animateViewsLayout = null;
                    } else {
                        if (this.lastShouldDrawTimeOnMedia == ChatMessageCell.this.shouldDrawTimeOnMedia()) {
                            if (z5 || Math.abs(ChatMessageCell.this.timeX - this.lastTimeX) > 1) {
                                this.shouldAnimateTimeX = true;
                                this.animateTimeWidth = this.lastTimeWidth;
                                this.animateFromTimeX = this.lastTimeX;
                                this.animateFromTimeXViews = this.lastTimeXViews;
                                this.animateFromTimeXReplies = this.lastTimeXReplies;
                                this.animateFromTimeXPinned = this.lastTimeXPinned;
                            }
                            if (this.lastShouldDrawMenuDrawable != ChatMessageCell.this.shouldDrawMenuDrawable()) {
                                this.animateShouldDrawMenuDrawable = true;
                            }
                            if (this.lastLocatinIsExpired != ChatMessageCell.this.locationExpired) {
                                this.animateLocationIsExpired = true;
                            }
                            if (this.lastIsPlayingRound != ChatMessageCell.this.isPlayingRound) {
                                this.animatePlayingRound = true;
                                z = true;
                            }
                            f = this.lastDrawingTextY;
                            chatMessageCell4 = ChatMessageCell.this;
                            if (f != chatMessageCell4.textY) {
                                this.animateText = true;
                                this.animateFromTextY = f;
                                z = true;
                            }
                            if (this.lastDrawingLinkPreviewY != chatMessageCell4.linkPreviewY) {
                                this.animateLinkPreviewY = true;
                                this.animateFromLinkPreviewY = this.lastDrawingLinkPreviewY;
                                z = true;
                            }
                            if (this.lastDrawingFactCheckHeight != ChatMessageCell.this.factCheckHeight) {
                                this.animateFactCheckHeight = true;
                                this.animateFactCheckHeightFrom = this.lastDrawingFactCheckHeight;
                                z = true;
                            }
                            if (this.lastDrawingFactCheckExpanded != (ChatMessageCell.this.getPrimaryMessageObject() == null && ChatMessageCell.this.getPrimaryMessageObject().factCheckExpanded)) {
                                this.animateFactCheckExpanded = true;
                                z = true;
                            }
                            if (this.lastDrawingFactCheck != ChatMessageCell.this.hasFactCheck) {
                                this.animateFactCheck = true;
                                z = true;
                            }
                            if (!MessageObject.expandedQuotesEquals(this.lastDrawingExpandedQuotes, ChatMessageCell.this.currentMessageObject != null ? ChatMessageCell.this.currentMessageObject.expandedQuotes : null)) {
                                this.animateExpandedQuotes = true;
                                this.animateExpandedQuotesFrom = this.lastDrawingExpandedQuotes;
                                z = true;
                            }
                            if (ChatMessageCell.this.currentMessageObject != null && this.lastDrawnForwardedName != ChatMessageCell.this.currentMessageObject.needDrawForwarded()) {
                                this.animateForwardedLayout = true;
                                StaticLayout[] staticLayoutArr = this.animatingForwardedNameLayout;
                                StaticLayout[] staticLayoutArr2 = this.lastDrawnForwardedNameLayout;
                                staticLayoutArr[0] = staticLayoutArr2[0];
                                staticLayoutArr[1] = staticLayoutArr2[1];
                                this.animateForwardNameX = this.lastForwardNameX;
                                this.animateForwardedNamesOffset = this.lastForwardedNamesOffset;
                                this.animateForwardNameWidth = this.lastForwardNameWidth;
                                z = true;
                            }
                            ChatMessageCell.this.updateReactionLayoutPosition();
                            if (ChatMessageCell.this.reactionsLayoutInBubble.animateChange()) {
                                z = true;
                            }
                            if (ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                                float dp2 = ChatMessageCell.this.layoutHeight - AndroidUtilities.dp(28 - (ChatMessageCell.this.drawPinnedBottom ? 2 : 0));
                                if (!ChatMessageCell.this.reactionsLayoutInBubble.isEmpty) {
                                    dp2 -= r4.totalHeight;
                                }
                                float f4 = this.lastDrawRoundVideoDotY;
                                if (dp2 != f4) {
                                    this.animateRoundVideoDotY = true;
                                    this.animateFromRoundVideoDotY = f4;
                                    z = true;
                                }
                            }
                            chatMessageCell5 = ChatMessageCell.this;
                            if (chatMessageCell5.replyNameLayout != null) {
                                float f5 = chatMessageCell5.replyStartX;
                                float f6 = this.lastDrawReplyY;
                                if (f5 != f6 && f6 != 0.0f) {
                                    this.animateReplyY = true;
                                    this.animateFromReplyY = f6;
                                    return true;
                                }
                            }
                            return z;
                        }
                        this.animateEditedEnter = false;
                        this.animateShouldDrawTimeOnMedia = true;
                        this.animateFromTimeX = this.lastTimeX;
                        this.animateTimeLayout = this.lastTimeLayout;
                        this.animateTimeWidth = this.lastTimeWidth;
                    }
                    z = true;
                    if (this.lastShouldDrawMenuDrawable != ChatMessageCell.this.shouldDrawMenuDrawable()) {
                    }
                    if (this.lastLocatinIsExpired != ChatMessageCell.this.locationExpired) {
                    }
                    if (this.lastIsPlayingRound != ChatMessageCell.this.isPlayingRound) {
                    }
                    f = this.lastDrawingTextY;
                    chatMessageCell4 = ChatMessageCell.this;
                    if (f != chatMessageCell4.textY) {
                    }
                    if (this.lastDrawingLinkPreviewY != chatMessageCell4.linkPreviewY) {
                    }
                    if (this.lastDrawingFactCheckHeight != ChatMessageCell.this.factCheckHeight) {
                    }
                    if (this.lastDrawingFactCheckExpanded != (ChatMessageCell.this.getPrimaryMessageObject() == null && ChatMessageCell.this.getPrimaryMessageObject().factCheckExpanded)) {
                    }
                    if (this.lastDrawingFactCheck != ChatMessageCell.this.hasFactCheck) {
                    }
                    if (!MessageObject.expandedQuotesEquals(this.lastDrawingExpandedQuotes, ChatMessageCell.this.currentMessageObject != null ? ChatMessageCell.this.currentMessageObject.expandedQuotes : null)) {
                    }
                    if (ChatMessageCell.this.currentMessageObject != null) {
                        this.animateForwardedLayout = true;
                        StaticLayout[] staticLayoutArr3 = this.animatingForwardedNameLayout;
                        StaticLayout[] staticLayoutArr22 = this.lastDrawnForwardedNameLayout;
                        staticLayoutArr3[0] = staticLayoutArr22[0];
                        staticLayoutArr3[1] = staticLayoutArr22[1];
                        this.animateForwardNameX = this.lastForwardNameX;
                        this.animateForwardedNamesOffset = this.lastForwardedNamesOffset;
                        this.animateForwardNameWidth = this.lastForwardNameWidth;
                        z = true;
                    }
                    ChatMessageCell.this.updateReactionLayoutPosition();
                    if (ChatMessageCell.this.reactionsLayoutInBubble.animateChange()) {
                    }
                    if (ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                    }
                    chatMessageCell5 = ChatMessageCell.this;
                    if (chatMessageCell5.replyNameLayout != null) {
                    }
                    return z;
                }
                String charSequence3 = textLayoutBlocks2 == null ? null : textLayoutBlocks2.text.toString();
                MessageObject.TextLayoutBlocks textLayoutBlocks3 = ChatMessageCell.this.captionLayout;
                String charSequence4 = textLayoutBlocks3 == null ? null : textLayoutBlocks3.text.toString();
                if ((charSequence4 == null) == (charSequence3 == null) && (charSequence3 == null || charSequence3.equals(charSequence4))) {
                    ChatMessageCell.this.updateCaptionLayout();
                    if (this.lastDrawingCaptionX == ChatMessageCell.this.captionX) {
                    }
                    this.moveCaption = true;
                    this.captionFromX = this.lastDrawingCaptionX;
                    this.captionFromY = this.lastDrawingCaptionY;
                } else {
                    this.animateReplaceCaptionLayout = true;
                    MessageObject.TextLayoutBlocks textLayoutBlocks4 = this.lastDrawingCaptionLayout;
                    this.animateOutCaptionLayout = textLayoutBlocks4;
                    this.animateOutAnimateEmoji = AnimatedEmojiSpan.update(0, ChatMessageCell.this, (AnimatedEmojiSpan.EmojiGroupedSpans) null, textLayoutBlocks4 == null ? null : textLayoutBlocks4.textLayoutBlocks);
                    ChatMessageCell chatMessageCell10 = ChatMessageCell.this;
                    AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans2 = chatMessageCell10.animatedEmojiStack;
                    MessageObject.TextLayoutBlocks textLayoutBlocks5 = chatMessageCell10.captionLayout;
                    chatMessageCell10.animatedEmojiStack = AnimatedEmojiSpan.update(0, chatMessageCell10, emojiGroupedSpans2, textLayoutBlocks5 == null ? null : textLayoutBlocks5.textLayoutBlocks);
                }
                z = true;
                if (this.lastDrawBotButtons.isEmpty()) {
                }
                if (this.lastDrawBotButtons.size() != ChatMessageCell.this.botButtons.size()) {
                }
                if (!this.animateBotButtonsChanged) {
                }
                if (this.animateBotButtonsChanged) {
                }
                if (this.lastDrawnWidthForButtons != ChatMessageCell.this.widthForButtons) {
                }
                if (ChatMessageCell.this.documentAttachType != 5) {
                }
                this.animateFromButtonX = this.lastButtonX;
                this.animateFromButtonY = this.lastButtonY;
                this.animateButton = true;
                z = true;
                i = ChatMessageCell.this.mediaOffsetY;
                i2 = this.lastMediaOffsetY;
                if (i != i2) {
                }
                z4 = this.lastIsPinned;
                chatMessageCell3 = ChatMessageCell.this;
                if (z4 != chatMessageCell3.isPinned) {
                }
                if (this.lastRepliesLayout == null) {
                }
                this.animateRepliesLayout = this.lastRepliesLayout;
                this.animateReplies = true;
                ChatMessageCell.this.accessibilityText = null;
                z = true;
                z5 = true;
                if (this.lastViewsLayout != null) {
                    this.animateViewsLayout = this.lastViewsLayout;
                    ChatMessageCell.this.accessibilityText = null;
                    z = true;
                    z5 = true;
                }
                if (ChatMessageCell.this.commentLayout != null) {
                    staticLayout2 = this.lastCommentLayout;
                    if (staticLayout2 != null) {
                    }
                    this.animateCommentsLayout = null;
                    this.animateTotalCommentWidth = this.lastTotalCommentWidth;
                    this.animateCommentX = this.lastCommentX;
                    this.animateCommentArrowX = this.lastCommentArrowX;
                    this.animateCommentUnreadX = this.lastCommentUnreadX;
                    this.animateCommentDrawUnread = this.lastCommentDrawUnread;
                    this.animateDrawCommentNumber = this.lastDrawCommentNumber;
                    this.animateComments = true;
                    z = true;
                }
                if (!TextUtils.equals(this.lastSignMessage, ChatMessageCell.this.lastPostAuthor)) {
                }
                if (this.lastDrawTime == ChatMessageCell.this.forceNotDrawTime) {
                }
                z = true;
                if (this.lastShouldDrawMenuDrawable != ChatMessageCell.this.shouldDrawMenuDrawable()) {
                }
                if (this.lastLocatinIsExpired != ChatMessageCell.this.locationExpired) {
                }
                if (this.lastIsPlayingRound != ChatMessageCell.this.isPlayingRound) {
                }
                f = this.lastDrawingTextY;
                chatMessageCell4 = ChatMessageCell.this;
                if (f != chatMessageCell4.textY) {
                }
                if (this.lastDrawingLinkPreviewY != chatMessageCell4.linkPreviewY) {
                }
                if (this.lastDrawingFactCheckHeight != ChatMessageCell.this.factCheckHeight) {
                }
                if (this.lastDrawingFactCheckExpanded != (ChatMessageCell.this.getPrimaryMessageObject() == null && ChatMessageCell.this.getPrimaryMessageObject().factCheckExpanded)) {
                }
                if (this.lastDrawingFactCheck != ChatMessageCell.this.hasFactCheck) {
                }
                if (!MessageObject.expandedQuotesEquals(this.lastDrawingExpandedQuotes, ChatMessageCell.this.currentMessageObject != null ? ChatMessageCell.this.currentMessageObject.expandedQuotes : null)) {
                }
                if (ChatMessageCell.this.currentMessageObject != null) {
                }
                ChatMessageCell.this.updateReactionLayoutPosition();
                if (ChatMessageCell.this.reactionsLayoutInBubble.animateChange()) {
                }
                if (ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                }
                chatMessageCell5 = ChatMessageCell.this;
                if (chatMessageCell5.replyNameLayout != null) {
                }
                return z;
            }
            z = false;
            this.animateDrawNameLayout = false;
            if (ChatMessageCell.this.drawNameLayout != this.lastDrawNameLayout) {
            }
            staticLayout = ChatMessageCell.this.replyTextLayout;
            if (staticLayout != this.lastDrawnReplyTextLayout) {
            }
            if (!ChatMessageCell.this.edited) {
            }
            if (!ChatMessageCell.this.edited) {
                chatMessageCell = ChatMessageCell.this;
                if (chatMessageCell.timeLayout != null) {
                }
            }
            this.animateDrawBackground = false;
            if (ChatMessageCell.this.drawBackground != this.lastDrawBackground) {
            }
            this.animateSmallImage = false;
            if (ChatMessageCell.this.isSmallImage != this.lastDrawingSmallImage) {
            }
            this.animateRecommendationsExpanded = false;
            if (ChatMessageCell.this.currentMessageObject.type == 27) {
            }
            z3 = this.lastDrawingRecommendationsExpanded;
            if (z2 != z3) {
            }
            this.animateLinkAbove = false;
            chatMessageCell2 = ChatMessageCell.this;
            if (chatMessageCell2.linkPreviewAbove != this.lastDrawingLinkAbove) {
            }
            this.animateMediaAbove = false;
            if (chatMessageCell2.captionAbove != this.lastDrawingMediaAbove) {
            }
            this.animateLinkPreviewHeight = false;
            if (chatMessageCell2.hasLinkPreview) {
            }
            this.animateUseTranscribeButton = false;
            if (ChatMessageCell.this.useTranscribeButton != this.lastUseTranscribeButton) {
            }
            ChatMessageCell chatMessageCell92 = ChatMessageCell.this;
            textLayoutBlocks = chatMessageCell92.captionLayout;
            textLayoutBlocks2 = this.lastDrawingCaptionLayout;
            if (textLayoutBlocks != textLayoutBlocks2) {
            }
            z = true;
            if (this.lastDrawBotButtons.isEmpty()) {
            }
            if (this.lastDrawBotButtons.size() != ChatMessageCell.this.botButtons.size()) {
            }
            if (!this.animateBotButtonsChanged) {
            }
            if (this.animateBotButtonsChanged) {
            }
            if (this.lastDrawnWidthForButtons != ChatMessageCell.this.widthForButtons) {
            }
            if (ChatMessageCell.this.documentAttachType != 5) {
            }
            this.animateFromButtonX = this.lastButtonX;
            this.animateFromButtonY = this.lastButtonY;
            this.animateButton = true;
            z = true;
            i = ChatMessageCell.this.mediaOffsetY;
            i2 = this.lastMediaOffsetY;
            if (i != i2) {
            }
            z4 = this.lastIsPinned;
            chatMessageCell3 = ChatMessageCell.this;
            if (z4 != chatMessageCell3.isPinned) {
            }
            if (this.lastRepliesLayout == null) {
            }
            this.animateRepliesLayout = this.lastRepliesLayout;
            this.animateReplies = true;
            ChatMessageCell.this.accessibilityText = null;
            z = true;
            z5 = true;
            if (this.lastViewsLayout != null) {
            }
            if (ChatMessageCell.this.commentLayout != null) {
            }
            if (!TextUtils.equals(this.lastSignMessage, ChatMessageCell.this.lastPostAuthor)) {
            }
            if (this.lastDrawTime == ChatMessageCell.this.forceNotDrawTime) {
            }
            z = true;
            if (this.lastShouldDrawMenuDrawable != ChatMessageCell.this.shouldDrawMenuDrawable()) {
            }
            if (this.lastLocatinIsExpired != ChatMessageCell.this.locationExpired) {
            }
            if (this.lastIsPlayingRound != ChatMessageCell.this.isPlayingRound) {
            }
            f = this.lastDrawingTextY;
            chatMessageCell4 = ChatMessageCell.this;
            if (f != chatMessageCell4.textY) {
            }
            if (this.lastDrawingLinkPreviewY != chatMessageCell4.linkPreviewY) {
            }
            if (this.lastDrawingFactCheckHeight != ChatMessageCell.this.factCheckHeight) {
            }
            if (this.lastDrawingFactCheckExpanded != (ChatMessageCell.this.getPrimaryMessageObject() == null && ChatMessageCell.this.getPrimaryMessageObject().factCheckExpanded)) {
            }
            if (this.lastDrawingFactCheck != ChatMessageCell.this.hasFactCheck) {
            }
            if (!MessageObject.expandedQuotesEquals(this.lastDrawingExpandedQuotes, ChatMessageCell.this.currentMessageObject != null ? ChatMessageCell.this.currentMessageObject.expandedQuotes : null)) {
            }
            if (ChatMessageCell.this.currentMessageObject != null) {
            }
            ChatMessageCell.this.updateReactionLayoutPosition();
            if (ChatMessageCell.this.reactionsLayoutInBubble.animateChange()) {
            }
            if (ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
            }
            chatMessageCell5 = ChatMessageCell.this;
            if (chatMessageCell5.replyNameLayout != null) {
            }
            return z;
        }

        /* JADX WARN: Removed duplicated region for block: B:15:0x0085  */
        /* JADX WARN: Removed duplicated region for block: B:18:0x008c  */
        /* JADX WARN: Removed duplicated region for block: B:21:0x0091  */
        /* JADX WARN: Removed duplicated region for block: B:25:0x0087  */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
        */
        public int createStatusDrawableParams() {
            int i;
            boolean z;
            boolean z2;
            boolean z3 = true;
            if (!ChatMessageCell.this.currentMessageObject.isOutOwner()) {
                if (!ChatMessageCell.this.currentMessageObject.isSending() && !ChatMessageCell.this.currentMessageObject.isEditing()) {
                    z3 = false;
                }
                return (z3 ? 4 : 0) | (ChatMessageCell.this.currentMessageObject.isSendError() ? 8 : 0);
            }
            if (ChatMessageCell.this.currentMessageObject.isSending() || ChatMessageCell.this.currentMessageObject.isEditing()) {
                i = 0;
                z3 = false;
                z = true;
            } else {
                if (ChatMessageCell.this.currentMessageObject.isSendError()) {
                    i = 0;
                    z3 = false;
                    z = false;
                    z2 = true;
                    if (!ChatMessageCell.this.currentMessageObject.notime || ChatMessageCell.this.currentMessageObject.isQuickReply()) {
                        i = 0;
                        z3 = false;
                        z = false;
                    }
                    return i | (!z3 ? 2 : 0) | (z ? 4 : 0) | (z2 ? 8 : 0);
                }
                if (ChatMessageCell.this.currentMessageObject.isSent()) {
                    i = (ChatMessageCell.this.currentMessageObject.scheduled || ChatMessageCell.this.currentMessageObject.isUnread()) ? 0 : 1;
                } else {
                    i = 0;
                    z3 = false;
                }
                z = false;
            }
            z2 = false;
            if (!ChatMessageCell.this.currentMessageObject.notime) {
            }
            i = 0;
            z3 = false;
            z = false;
            return i | (!z3 ? 2 : 0) | (z ? 4 : 0) | (z2 ? 8 : 0);
        }

        public void onDetach() {
            this.wasDraw = false;
        }

        public void recordDrawingState() {
            ChannelRecommendationsCell channelRecommendationsCell;
            this.wasDraw = true;
            this.lastDrawingImageX = ChatMessageCell.this.photoImage.getImageX();
            this.lastDrawingImageY = ChatMessageCell.this.photoImage.getImageY();
            this.lastDrawingImageW = ChatMessageCell.this.photoImage.getImageWidth();
            this.lastDrawingImageH = ChatMessageCell.this.photoImage.getImageHeight();
            System.arraycopy(ChatMessageCell.this.photoImage.getRoundRadius(), 0, this.imageRoundRadius, 0, 4);
            Theme.MessageDrawable messageDrawable = ChatMessageCell.this.currentBackgroundDrawable;
            if (messageDrawable != null) {
                this.lastDrawingBackgroundRect.set(messageDrawable.getBounds());
            }
            this.lastDrawingTextBlocks = ChatMessageCell.this.currentMessageObject != null ? ChatMessageCell.this.currentMessageObject.textLayoutBlocks : null;
            this.lastDrawingEdited = ChatMessageCell.this.edited;
            this.lastDrawingCaptionX = ChatMessageCell.this.captionX;
            ChatMessageCell chatMessageCell = ChatMessageCell.this;
            this.lastDrawingCaptionY = chatMessageCell.captionY;
            this.lastDrawingCaptionLayout = chatMessageCell.captionLayout;
            this.lastDrawBotButtons.clear();
            if (!ChatMessageCell.this.botButtons.isEmpty()) {
                this.lastDrawBotButtons.addAll(ChatMessageCell.this.botButtons);
            }
            this.lastDrawingSmallImage = ChatMessageCell.this.isSmallImage;
            ChatMessageCell chatMessageCell2 = ChatMessageCell.this;
            this.lastDrawingLinkPreviewHeight = chatMessageCell2.linkPreviewHeight;
            this.lastDrawingLinkAbove = chatMessageCell2.linkPreviewAbove;
            this.lastDrawingMediaAbove = chatMessageCell2.captionAbove;
            this.lastDrawingRecommendationsExpanded = chatMessageCell2.currentMessageObject != null && ChatMessageCell.this.currentMessageObject.type == 27 && (channelRecommendationsCell = ChatMessageCell.this.channelRecommendationsCell) != null && channelRecommendationsCell.isExpanded();
            if (ChatMessageCell.this.commentLayout != null) {
                this.lastCommentsCount = ChatMessageCell.this.getRepliesCount();
                this.lastTotalCommentWidth = ChatMessageCell.this.totalCommentWidth;
                this.lastCommentLayout = ChatMessageCell.this.commentLayout;
                this.lastCommentArrowX = ChatMessageCell.this.commentArrowX;
                this.lastCommentUnreadX = ChatMessageCell.this.commentUnreadX;
                this.lastCommentDrawUnread = ChatMessageCell.this.commentDrawUnread;
                this.lastCommentX = ChatMessageCell.this.commentX;
                this.lastDrawCommentNumber = ChatMessageCell.this.drawCommentNumber;
            }
            this.lastRepliesCount = ChatMessageCell.this.getRepliesCount();
            this.lastViewsCount = ChatMessageCell.this.getMessageObject().messageOwner.views;
            this.lastRepliesLayout = ChatMessageCell.this.repliesLayout;
            this.lastViewsLayout = ChatMessageCell.this.viewsLayout;
            ChatMessageCell chatMessageCell3 = ChatMessageCell.this;
            this.lastIsPinned = chatMessageCell3.isPinned;
            this.lastSignMessage = chatMessageCell3.lastPostAuthor;
            this.lastDrawBackground = ChatMessageCell.this.drawBackground;
            this.lastUseTranscribeButton = ChatMessageCell.this.useTranscribeButton;
            this.lastButtonX = ChatMessageCell.this.buttonX;
            this.lastButtonY = ChatMessageCell.this.buttonY;
            this.lastMediaOffsetY = ChatMessageCell.this.mediaOffsetY;
            this.lastDrawTime = !ChatMessageCell.this.forceNotDrawTime;
            ChatMessageCell chatMessageCell4 = ChatMessageCell.this;
            this.lastTimeX = chatMessageCell4.timeX;
            this.lastTimeLayout = chatMessageCell4.timeLayout;
            this.lastTimeWidth = chatMessageCell4.timeWidth;
            this.lastShouldDrawTimeOnMedia = chatMessageCell4.shouldDrawTimeOnMedia();
            this.lastTopOffset = ChatMessageCell.this.getTopMediaOffset();
            this.lastShouldDrawMenuDrawable = ChatMessageCell.this.shouldDrawMenuDrawable();
            this.lastLocatinIsExpired = ChatMessageCell.this.locationExpired;
            this.lastIsPlayingRound = ChatMessageCell.this.isPlayingRound;
            ChatMessageCell chatMessageCell5 = ChatMessageCell.this;
            this.lastDrawingTextY = chatMessageCell5.textY;
            this.lastDrawingTextX = chatMessageCell5.textX;
            this.lastDrawingLinkPreviewY = chatMessageCell5.linkPreviewY;
            this.lastDrawnWidthForButtons = ChatMessageCell.this.widthForButtons;
            this.lastDrawnForwardedNameLayout[0] = ChatMessageCell.this.forwardedNameLayout[0];
            this.lastDrawnForwardedNameLayout[1] = ChatMessageCell.this.forwardedNameLayout[1];
            this.lastDrawnForwardedName = ChatMessageCell.this.currentMessageObject != null && ChatMessageCell.this.currentMessageObject.needDrawForwarded();
            this.lastForwardNameX = ChatMessageCell.this.forwardNameX;
            ChatMessageCell chatMessageCell6 = ChatMessageCell.this;
            this.lastForwardedNamesOffset = chatMessageCell6.namesOffset;
            this.lastForwardNameWidth = chatMessageCell6.forwardedNameWidth;
            this.lastBackgroundLeft = ChatMessageCell.this.getCurrentBackgroundLeft();
            Theme.MessageDrawable messageDrawable2 = ChatMessageCell.this.currentBackgroundDrawable;
            if (messageDrawable2 != null) {
                this.lastBackgroundRight = messageDrawable2.getBounds().right;
            }
            this.lastTextXOffset = ChatMessageCell.this.currentMessageObject != null ? ChatMessageCell.this.currentMessageObject.textXOffset : 0.0f;
            this.lastDrawingReplyTextHeight = ChatMessageCell.this.replyTextHeight;
            ChatMessageCell chatMessageCell7 = ChatMessageCell.this;
            this.lastDrawnReplyTextLayout = chatMessageCell7.replyTextLayout;
            this.lastReplyTextXOffset = chatMessageCell7.replyTextOffset;
            chatMessageCell7.reactionsLayoutInBubble.recordDrawingState();
            ChatMessageCell chatMessageCell8 = ChatMessageCell.this;
            this.lastDrawReplyY = chatMessageCell8.replyNameLayout != null ? chatMessageCell8.replyStartY : 0.0f;
            this.lastDrawNameLayout = chatMessageCell8.drawNameLayout;
            this.lastDrawingFactCheckHeight = ChatMessageCell.this.factCheckHeight;
            this.lastDrawingFactCheckExpanded = ChatMessageCell.this.getPrimaryMessageObject() != null && ChatMessageCell.this.getPrimaryMessageObject().factCheckExpanded;
            this.lastDrawingFactCheck = ChatMessageCell.this.hasFactCheck;
            this.lastDrawingExpandedQuotes = ChatMessageCell.this.getPrimaryMessageObject() != null ? ChatMessageCell.this.getPrimaryMessageObject().expandedQuotes : null;
        }

        public void recordDrawingStatePreview() {
            this.lastDrawnForwardedNameLayout[0] = ChatMessageCell.this.forwardedNameLayout[0];
            this.lastDrawnForwardedNameLayout[1] = ChatMessageCell.this.forwardedNameLayout[1];
            this.lastDrawnForwardedName = ChatMessageCell.this.currentMessageObject.needDrawForwarded();
            this.lastForwardNameX = ChatMessageCell.this.forwardNameX;
            ChatMessageCell chatMessageCell = ChatMessageCell.this;
            this.lastForwardedNamesOffset = chatMessageCell.namesOffset;
            this.lastForwardNameWidth = chatMessageCell.forwardedNameWidth;
        }

        public void resetAnimation() {
            this.animateChange = false;
            this.animatePinned = false;
            this.animateBackgroundBoundsInner = false;
            this.animateBackgroundWidth = false;
            this.deltaLeft = 0.0f;
            this.deltaRight = 0.0f;
            this.deltaBottom = 0.0f;
            this.deltaTop = 0.0f;
            this.toDeltaLeft = 0.0f;
            this.toDeltaRight = 0.0f;
            if (this.imageChangeBoundsTransition && this.animateToImageW != 0.0f && this.animateToImageH != 0.0f) {
                ChatMessageCell.this.photoImage.setImageCoords(this.animateToImageX, this.animateToImageY, this.animateToImageW, this.animateToImageH);
            }
            if (this.animateRadius) {
                ChatMessageCell.this.photoImage.setRoundRadius(this.animateToRadius);
            }
            this.animateToImageX = 0.0f;
            this.animateToImageY = 0.0f;
            this.animateToImageW = 0.0f;
            this.animateToImageH = 0.0f;
            this.imageChangeBoundsTransition = false;
            this.changePinnedBottomProgress = 1.0f;
            this.captionEnterProgress = 1.0f;
            this.animateRadius = false;
            this.animateChangeProgress = 1.0f;
            this.animateMessageText = false;
            this.animateDrawNameLayout = false;
            this.animateOutTextBlocks = null;
            this.animateEditedLayout = null;
            this.animateTimeLayout = null;
            this.animateEditedEnter = false;
            this.animateReplaceCaptionLayout = false;
            this.transformGroupToSingleMessage = false;
            this.animateOutCaptionLayout = null;
            AnimatedEmojiSpan.release(ChatMessageCell.this, this.animateOutAnimateEmoji);
            this.animateOutAnimateEmoji = null;
            this.moveCaption = false;
            this.animateDrawingTimeAlpha = false;
            this.transitionBotButtons.clear();
            this.animateButton = false;
            this.animateBotButtonsChanged = false;
            this.animateWidthForButton = false;
            this.animateMediaOffsetY = false;
            this.animateReplyTextLayout = null;
            this.animateReplies = false;
            this.animateRepliesLayout = null;
            this.animateComments = false;
            this.animateCommentsLayout = null;
            this.animateViewsLayout = null;
            this.animateShouldDrawTimeOnMedia = false;
            this.animateShouldDrawMenuDrawable = false;
            this.shouldAnimateTimeX = false;
            this.animateDrawBackground = false;
            this.animateSign = false;
            this.animateSmallImage = false;
            this.animateLinkAbove = false;
            this.animateMediaAbove = false;
            this.animateRecommendationsExpanded = false;
            this.animateDrawingTimeAlpha = false;
            this.animateLocationIsExpired = false;
            this.animatePlayingRound = false;
            this.animateText = false;
            this.animateLinkPreviewY = false;
            this.animateFactCheckHeight = false;
            this.animateFactCheckExpanded = false;
            this.animateExpandedQuotes = false;
            this.animateFactCheck = false;
            this.animateForwardedLayout = false;
            StaticLayout[] staticLayoutArr = this.animatingForwardedNameLayout;
            staticLayoutArr[0] = null;
            staticLayoutArr[1] = null;
            this.animateRoundVideoDotY = false;
            this.animateReplyY = false;
            ChatMessageCell.this.reactionsLayoutInBubble.resetAnimation();
        }

        public boolean supportChangeAnimation() {
            return true;
        }
    }

    public ChatMessageCell(Context context, int i) {
        this(context, i, false, null, null);
    }

    public ChatMessageCell(Context context, int i, boolean z, ChatMessageSharedResources chatMessageSharedResources, Theme.ResourcesProvider resourcesProvider) {
        super(context);
        this.visibleOnScreen = true;
        this.reactionsLayoutInBubble = new ReactionsLayoutInBubble(this);
        this.giveawayMessageCell = new GiveawayMessageCell(this);
        this.giveawayResultsMessageCell = new GiveawayResultsMessageCell(this);
        this.scrollRect = new Rect();
        this.drawnContactButtonsFlag = 0;
        this.imageBackgroundGradientRotation = 45;
        this.selectorDrawable = new Drawable[2];
        this.selectorMaskDrawable = new MaskDrawable[2];
        this.selectorDrawableMaskType = new int[2];
        this.instantButtonRect = new RectF();
        this.pressedState = new int[]{android.R.attr.state_enabled, android.R.attr.state_pressed};
        this.highlightCaptionToSetStart = -1;
        this.highlightCaptionToSetEnd = -1;
        this.deleteProgressRect = new RectF();
        this.rect = new RectF();
        this.foreverDrawableColor = -1;
        this.timeAlpha = 1.0f;
        this.controlsAlpha = 1.0f;
        this.pressedBlock = -1;
        this.links = new LinkSpanDrawable.LinkCollector(this);
        this.urlPathCache = new ArrayList();
        this.urlPathSelection = new ArrayList();
        this.rectPath = new Path();
        this.pollButtons = new ArrayList();
        this.botButtons = new ArrayList();
        this.botButtonPath = new Path();
        this.botButtonRadii = new float[8];
        this.botButtonsByData = new HashMap();
        this.botButtonsByPosition = new HashMap();
        this.isCheckPressed = true;
        this.drawBackground = true;
        this.backgroundWidth = 100;
        this.commentButtonRect = new Rect();
        this.spoilersPatchedReplyTextLayout = new AtomicReference();
        this.forwardedNameLayout = new StaticLayout[2];
        this.forwardNameOffsetX = new float[2];
        this.drawTime = true;
        this.mediaSpoilerPath = new Path();
        this.mediaSpoilerRadii = new float[8];
        this.mediaSpoilerEffect = new SpoilerEffect();
        this.unlockAlpha = 1.0f;
        this.unlockSpoilerEffect = new SpoilerEffect();
        this.unlockSpoilerPath = new Path();
        this.unlockSpoilerRadii = new float[8];
        this.replySelectorRect = new RectF();
        this.ALPHA_PROPERTY_WORKAROUND = Build.VERSION.SDK_INT == 28;
        this.alphaInternal = 1.0f;
        this.transitionParams = new TransitionParams();
        this.roundVideoPlayPipFloat = new AnimatedFloat(this, 200L, CubicBezierInterpolator.EASE_OUT);
        this.diceFinishCallback = new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell.1
            @Override // java.lang.Runnable
            public void run() {
                if (ChatMessageCell.this.delegate != null) {
                    ChatMessageCell.this.delegate.onDiceFinished();
                }
            }
        };
        this.invalidateRunnable = new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell.2
            @Override // java.lang.Runnable
            public void run() {
                ChatMessageCell.this.checkLocationExpired();
                if (ChatMessageCell.this.locationExpired) {
                    ChatMessageCell.this.invalidate();
                    ChatMessageCell.this.scheduledInvalidate = false;
                    return;
                }
                ChatMessageCell.this.invalidate(((int) r0.rect.left) - 5, ((int) ChatMessageCell.this.rect.top) - 5, ((int) ChatMessageCell.this.rect.right) + 5, ((int) ChatMessageCell.this.rect.bottom) + 5);
                if (ChatMessageCell.this.scheduledInvalidate) {
                    AndroidUtilities.runOnUIThread(ChatMessageCell.this.invalidateRunnable, 1000L);
                }
            }
        };
        this.accessibilityVirtualViewBounds = new SparseArray();
        this.currentFocusedVirtualView = -1;
        this.backgroundCacheParams = new Theme.MessageDrawable.PathDrawParams();
        this.replySpoilers = new ArrayList();
        this.replySpoilersPool = new Stack();
        this.sPath = new Path();
        this.pressedEffect = false;
        this.overridenDuration = -1L;
        this.hadLongPress = false;
        this.radialProgressAlpha = 1.0f;
        this.ANIMATION_OFFSET_X = new Property(Float.class, "animationOffsetX") { // from class: org.telegram.ui.Cells.ChatMessageCell.12
            @Override // android.util.Property
            public Float get(ChatMessageCell chatMessageCell) {
                return Float.valueOf(chatMessageCell.animationOffsetX);
            }

            @Override // android.util.Property
            public void set(ChatMessageCell chatMessageCell, Float f) {
                chatMessageCell.setAnimationOffsetX(f.floatValue());
            }
        };
        this.currentAccount = i;
        this.resourcesProvider = resourcesProvider;
        this.canDrawBackgroundInParent = z;
        this.sharedResources = chatMessageSharedResources;
        if (chatMessageSharedResources == null) {
            this.sharedResources = new ChatMessageSharedResources(context);
        }
        this.backgroundDrawable = new MessageBackgroundDrawable(this);
        ImageReceiver imageReceiver = new ImageReceiver();
        this.avatarImage = imageReceiver;
        imageReceiver.setAllowLoadingOnAttachedOnly(true);
        this.avatarImage.setRoundRadius(AndroidUtilities.dp(21.0f));
        this.avatarDrawable = new AvatarDrawable();
        ImageReceiver imageReceiver2 = new ImageReceiver(this);
        this.replyImageReceiver = imageReceiver2;
        imageReceiver2.setAllowLoadingOnAttachedOnly(true);
        this.replyImageReceiver.setRoundRadius(AndroidUtilities.dp(4.0f));
        ImageReceiver imageReceiver3 = new ImageReceiver(this);
        this.locationImageReceiver = imageReceiver3;
        imageReceiver3.setAllowLoadingOnAttachedOnly(true);
        this.locationImageReceiver.setRoundRadius(AndroidUtilities.dp(26.1f));
        this.TAG = DownloadController.getInstance(i).generateObserverTag();
        this.contactAvatarDrawable = new AvatarDrawable();
        ImageReceiver imageReceiver4 = new ImageReceiver(this);
        this.photoImage = imageReceiver4;
        imageReceiver4.setAllowLoadingOnAttachedOnly(true);
        this.photoImage.setUseRoundForThumbDrawable(true);
        this.photoImage.setDelegate(this);
        ImageReceiver imageReceiver5 = new ImageReceiver(this);
        this.blurredPhotoImage = imageReceiver5;
        imageReceiver5.setAllowLoadingOnAttachedOnly(true);
        this.blurredPhotoImage.setUseRoundForThumbDrawable(true);
        this.radialProgress = new RadialProgress2(this, resourcesProvider);
        RadialProgress2 radialProgress2 = new RadialProgress2(this, resourcesProvider);
        this.videoRadialProgress = radialProgress2;
        radialProgress2.setDrawBackground(false);
        this.videoRadialProgress.setCircleRadius(AndroidUtilities.dp(15.0f));
        SeekBar seekBar = new SeekBar(this) { // from class: org.telegram.ui.Cells.ChatMessageCell.3
            @Override // org.telegram.ui.Components.SeekBar
            protected void onTimestampUpdate(URLSpanNoUnderline uRLSpanNoUnderline) {
                ChatMessageCell.this.setHighlightedSpan(uRLSpanNoUnderline);
            }
        };
        this.seekBar = seekBar;
        seekBar.setDelegate(this);
        SeekBarWaveform seekBarWaveform = new SeekBarWaveform(context);
        this.seekBarWaveform = seekBarWaveform;
        seekBarWaveform.setDelegate(this);
        this.seekBarWaveform.setParentView(this);
        this.seekBarAccessibilityDelegate = new FloatSeekBarAccessibilityDelegate() { // from class: org.telegram.ui.Cells.ChatMessageCell.4
            @Override // org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate
            public float getProgress() {
                if (ChatMessageCell.this.currentMessageObject.isMusic()) {
                    return ChatMessageCell.this.seekBar.getProgress();
                }
                if (ChatMessageCell.this.currentMessageObject.isVoice()) {
                    return ChatMessageCell.this.useSeekBarWaveform ? ChatMessageCell.this.seekBarWaveform.getProgress() : ChatMessageCell.this.seekBar.getProgress();
                }
                if (ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                    return ChatMessageCell.this.currentMessageObject.audioProgress;
                }
                return 0.0f;
            }

            @Override // org.telegram.ui.Components.FloatSeekBarAccessibilityDelegate
            public void setProgress(float f) {
                if (!ChatMessageCell.this.currentMessageObject.isMusic()) {
                    if (ChatMessageCell.this.currentMessageObject.isVoice()) {
                        if (ChatMessageCell.this.useSeekBarWaveform) {
                            ChatMessageCell.this.seekBarWaveform.setProgress(f);
                        }
                    } else {
                        if (!ChatMessageCell.this.currentMessageObject.isRoundVideo()) {
                            return;
                        }
                        if (ChatMessageCell.this.useSeekBarWaveform) {
                            if (ChatMessageCell.this.seekBarWaveform != null) {
                                ChatMessageCell.this.seekBarWaveform.setProgress(f);
                            }
                        } else if (ChatMessageCell.this.seekBar != null) {
                            ChatMessageCell.this.seekBar.setProgress(f);
                        }
                        ChatMessageCell.this.currentMessageObject.audioProgress = f;
                    }
                    ChatMessageCell.this.onSeekBarDrag(f);
                    ChatMessageCell.this.invalidate();
                }
                ChatMessageCell.this.seekBar.setProgress(f);
                ChatMessageCell.this.onSeekBarDrag(f);
                ChatMessageCell.this.invalidate();
            }
        };
        this.roundVideoPlayingDrawable = new RoundVideoPlayingDrawable(this, resourcesProvider);
        setImportantForAccessibility(1);
    }

    private boolean allowDrawPhotoImage() {
        return !this.currentMessageObject.hasMediaSpoilers() || this.currentMessageObject.isMediaSpoilersRevealed || this.mediaSpoilerRevealProgress != 0.0f || this.blurredPhotoImage.getBitmap() == null;
    }

    private void animateCheckboxTranslation() {
        boolean z = this.checkBoxVisible;
        if (z || this.checkBoxAnimationInProgress) {
            if ((z && this.checkBoxAnimationProgress == 1.0f) || (!z && this.checkBoxAnimationProgress == 0.0f)) {
                this.checkBoxAnimationInProgress = false;
            }
            this.checkBoxTranslation = (int) Math.ceil((z ? CubicBezierInterpolator.EASE_OUT : CubicBezierInterpolator.EASE_IN).getInterpolation(this.checkBoxAnimationProgress) * AndroidUtilities.dp(35.0f));
            if (!this.currentMessageObject.isOutOwner() || this.currentMessageObject.hasWideCode) {
                updateTranslation();
            }
            if (this.checkBoxAnimationInProgress) {
                long elapsedRealtime = SystemClock.elapsedRealtime();
                long j = elapsedRealtime - this.lastCheckBoxAnimationTime;
                this.lastCheckBoxAnimationTime = elapsedRealtime;
                if (this.checkBoxVisible) {
                    float f = this.checkBoxAnimationProgress + (j / 200.0f);
                    this.checkBoxAnimationProgress = f;
                    if (f > 1.0f) {
                        this.checkBoxAnimationProgress = 1.0f;
                    }
                } else {
                    float f2 = this.checkBoxAnimationProgress - (j / 200.0f);
                    this.checkBoxAnimationProgress = f2;
                    if (f2 <= 0.0f) {
                        this.checkBoxAnimationProgress = 0.0f;
                    }
                }
                invalidate();
                ((View) getParent()).invalidate();
            }
        }
    }

    private void applyServiceShaderMatrix(int i, int i2, float f, float f2) {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        if (resourcesProvider != null) {
            resourcesProvider.applyServiceShaderMatrix(i, i2, f, f2);
        } else {
            Theme.applyServiceShaderMatrix(i, i2, f, f2);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:30:0x0087, code lost:
    
        if (r0.isSmall == false) goto L53;
     */
    /* JADX WARN: Code restructure failed: missing block: B:51:0x0095, code lost:
    
        if (r0.isSmall == false) goto L59;
     */
    /* JADX WARN: Removed duplicated region for block: B:33:0x00a5  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x00dc  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void calcBackgroundWidth(int i, int i2, int i3) {
        int i4;
        int max;
        if (this.currentMessageObject.isSponsored()) {
            this.backgroundWidth = i3 + AndroidUtilities.dp(31.0f);
            return;
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        boolean z = reactionsLayoutInBubble.isEmpty;
        int i5 = (z || reactionsLayoutInBubble.isSmall) ? this.currentMessageObject.lastLineWidth : reactionsLayoutInBubble.lastLineX;
        if (!z && !reactionsLayoutInBubble.isSmall) {
            r4 = i - i5 < i2 || this.currentMessageObject.hasRtl;
            if (this.hasInvoicePreview) {
                this.totalHeight += AndroidUtilities.dp(14.0f);
            }
        } else if ((!this.linkPreviewAbove && ((this.hasLinkPreview && !this.currentMessageObject.isSponsored()) || this.hasFactCheck || this.hasOldCaptionPreview || this.hasGamePreview || this.hasInvoicePreview)) || i - i5 < i2 || this.currentMessageObject.hasRtl) {
            r4 = true;
        }
        if (this.currentMessageObject.isUnsupported()) {
            r4 = true;
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.hasCodeAtBottom) {
            ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
            if (!reactionsLayoutInBubble2.isEmpty) {
            }
            i4 = 18;
            r4 = true;
            if (r4) {
                int extraTextX = (i3 - getExtraTextX()) - i5;
                if (extraTextX >= 0 && extraTextX <= i2) {
                    this.backgroundWidth = ((i3 + i2) - extraTextX) + AndroidUtilities.dp(31.0f);
                    return;
                }
                max = Math.max(i3, i5 + i2) + AndroidUtilities.dp(31.0f);
            } else {
                this.totalHeight += AndroidUtilities.dp(i4);
                this.hasNewLineForTime = true;
                int max2 = Math.max(i3, i5) + AndroidUtilities.dp(31.0f);
                this.backgroundWidth = max2;
                max = Math.max(max2, (this.currentMessageObject.isOutOwner() ? this.timeWidth + AndroidUtilities.dp(17.0f) : this.timeWidth) + AndroidUtilities.dp(31.0f));
            }
            this.backgroundWidth = max;
        }
        if (messageObject.hasQuoteAtBottom) {
            ReactionsLayoutInBubble reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
            if (!reactionsLayoutInBubble3.isEmpty) {
            }
            i4 = 18;
            r4 = true;
            if (r4) {
            }
            this.backgroundWidth = max;
        }
        if (!messageObject.isGiveawayOrGiveawayResults()) {
            i4 = 14;
            if (r4) {
            }
            this.backgroundWidth = max;
        }
        i4 = 18;
        r4 = true;
        if (r4) {
        }
        this.backgroundWidth = max;
    }

    private void calculateUnlockXY() {
        if (this.currentMessageObject.type != 20 || this.unlockLayout == null) {
            return;
        }
        this.unlockX = this.backgroundDrawableLeft + ((this.photoImage.getImageWidth() - this.unlockLayout.getWidth()) / 2.0f);
        this.unlockY = this.backgroundDrawableTop + this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - this.unlockLayout.getHeight()) / 2.0f);
    }

    private void cancelLoading(MessageObject messageObject) {
        if (messageObject == null || messageObject.mediaExists || messageObject.putInDownloadsStore || DownloadController.getInstance(this.currentAccount).isDownloading(messageObject.messageOwner.id) || PhotoViewer.getInstance().isVisible()) {
            return;
        }
        TLRPC.Document document = messageObject.getDocument();
        if (MessageObject.isStickerDocument(document) || MessageObject.isAnimatedStickerDocument(document, true) || MessageObject.isGifDocument(document) || MessageObject.isRoundVideoDocument(document)) {
            return;
        }
        if (document != null) {
            FileLoader.getInstance(this.currentAccount).cancelLoadFile(document);
            return;
        }
        TLRPC.PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
        if (closestPhotoSizeWithSize != null) {
            FileLoader.getInstance(this.currentAccount).cancelLoadFile(closestPhotoSizeWithSize);
        }
    }

    private void cancelShakeAnimation() {
        AnimatorSet animatorSet = this.shakeAnimation;
        if (animatorSet != null) {
            animatorSet.cancel();
            this.shakeAnimation = null;
            setScaleX(1.0f);
            setScaleY(1.0f);
            setRotation(0.0f);
        }
    }

    private boolean checkAdminMotionEvent(MotionEvent motionEvent) {
        RectF rectF;
        ChatMessageCellDelegate chatMessageCellDelegate;
        Drawable drawable;
        boolean z = false;
        if (this.adminLayout == null || (rectF = this.boostCounterBounds) == null || (this.currentUser == null && this.currentChat == null)) {
            this.boostCounterPressed = false;
            return false;
        }
        boolean contains = rectF.contains((int) motionEvent.getX(), (int) motionEvent.getY());
        if (motionEvent.getAction() == 0) {
            SpannableString spannableString = new SpannableString(this.adminLayout.getText());
            BoostCounterSpan[] boostCounterSpanArr = (BoostCounterSpan[]) spannableString.getSpans(0, spannableString.length(), BoostCounterSpan.class);
            if (contains && boostCounterSpanArr != null && boostCounterSpanArr.length > 0) {
                z = true;
            }
            this.boostCounterPressed = z;
            if (z && (drawable = this.boostCounterLayoutSelector) != null) {
                if (Build.VERSION.SDK_INT >= 21) {
                    drawable.setHotspot((int) motionEvent.getX(), (int) motionEvent.getY());
                }
                this.boostCounterLayoutSelector.setState(this.pressedState);
            }
        } else if (motionEvent.getAction() == 1 || motionEvent.getAction() == 3) {
            if (motionEvent.getAction() == 1 && this.boostCounterPressed && (chatMessageCellDelegate = this.delegate) != null) {
                chatMessageCellDelegate.didPressBoostCounter(this);
            }
            Drawable drawable2 = this.boostCounterLayoutSelector;
            if (drawable2 != null) {
                drawable2.setState(StateSet.NOTHING);
            }
            this.boostCounterPressed = false;
        }
        return this.boostCounterPressed;
    }

    /* JADX WARN: Code restructure failed: missing block: B:118:0x0146, code lost:
    
        if (r4 <= (r0 + r6)) goto L96;
     */
    /* JADX WARN: Code restructure failed: missing block: B:68:0x010c, code lost:
    
        if (r4 <= (r0 + r6)) goto L96;
     */
    /* JADX WARN: Code restructure failed: missing block: B:69:0x0148, code lost:
    
        r0 = true;
     */
    /* JADX WARN: Removed duplicated region for block: B:72:0x0151  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x0161  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkAudioMotionEvent(MotionEvent motionEvent) {
        MessageObject messageObject;
        boolean z;
        MessageObject messageObject2;
        int i;
        int dp;
        int dp2;
        int i2;
        MessageObject messageObject3;
        int i3 = this.documentAttachType;
        if ((i3 != 3 && i3 != 5 && (i3 != 7 || (i3 == 7 && (messageObject3 = this.currentMessageObject) != null && !messageObject3.isVoiceTranscriptionOpen()))) || AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        boolean onTouch = this.useSeekBarWaveform ? this.seekBarWaveform.onTouch(motionEvent.getAction(), (motionEvent.getX() - this.seekBarX) - AndroidUtilities.dp(13.0f), motionEvent.getY() - this.seekBarY) : (MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || ((messageObject = this.currentMessageObject) != null && this.documentAttachType == 7 && messageObject.isVoiceTranscriptionOpen())) ? this.seekBar.onTouch(motionEvent.getAction(), motionEvent.getX() - this.seekBarX, motionEvent.getY() - this.seekBarY) : false;
        if (onTouch) {
            if (!this.useSeekBarWaveform && motionEvent.getAction() == 0) {
                getParent().requestDisallowInterceptTouchEvent(true);
            } else if (this.useSeekBarWaveform && !this.seekBarWaveform.isStartDraging() && motionEvent.getAction() == 1) {
                didPressButton(true, false);
            }
            this.disallowLongPress = true;
        } else {
            int dp3 = AndroidUtilities.dp(36.0f);
            boolean z2 = this.miniButtonState >= 0 && x >= (dp2 = this.buttonX + (dp = AndroidUtilities.dp(27.0f))) && x <= dp2 + dp3 && y >= (i2 = this.buttonY + dp) && y <= i2 + dp3;
            if (!z2 && ((messageObject2 = this.currentMessageObject) == null || !messageObject2.hasMediaSpoilers() || this.currentMessageObject.isVoice() || this.currentMessageObject.isMediaSpoilersRevealed)) {
                int i4 = this.buttonState;
                if (i4 != 0 && i4 != 1 && i4 != 2) {
                    int i5 = this.buttonX;
                    if (x >= i5) {
                        if (x <= i5 + dp3) {
                            int i6 = this.buttonY;
                            if (y >= i6) {
                            }
                        }
                    }
                } else if (x >= this.buttonX - AndroidUtilities.dp(12.0f) && x <= (this.buttonX - AndroidUtilities.dp(12.0f)) + this.backgroundWidth) {
                    boolean z3 = this.drawInstantView;
                    if (y >= (z3 ? this.buttonY : this.namesOffset + this.mediaOffsetY)) {
                        if (z3) {
                            i = this.buttonY;
                        } else {
                            i = this.namesOffset + this.mediaOffsetY;
                            dp3 = AndroidUtilities.dp(82.0f);
                        }
                    }
                }
                if (motionEvent.getAction() != 0) {
                    if (!z && !z2) {
                        return onTouch;
                    }
                    if (z) {
                        this.buttonPressed = 1;
                    } else {
                        this.miniButtonPressed = 1;
                    }
                    invalidate();
                    return true;
                }
                if (this.buttonPressed != 0) {
                    if (motionEvent.getAction() == 1) {
                        this.buttonPressed = 0;
                        playSoundEffect(0);
                        didPressButton(true, false);
                    } else {
                        if (motionEvent.getAction() != 3 && (motionEvent.getAction() != 2 || z)) {
                            return onTouch;
                        }
                        this.buttonPressed = 0;
                    }
                } else {
                    if (this.miniButtonPressed == 0) {
                        return onTouch;
                    }
                    if (motionEvent.getAction() == 1) {
                        this.miniButtonPressed = 0;
                        playSoundEffect(0);
                        didPressMiniButton(true);
                    } else {
                        if (motionEvent.getAction() != 3 && (motionEvent.getAction() != 2 || z2)) {
                            return onTouch;
                        }
                        this.miniButtonPressed = 0;
                    }
                }
            }
            z = false;
            if (motionEvent.getAction() != 0) {
            }
        }
        invalidate();
        return onTouch;
    }

    private boolean checkBotButtonMotionEvent(MotionEvent motionEvent) {
        int i;
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (this.botButtons.isEmpty()) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() != 0) {
            if (motionEvent.getAction() == 1) {
                if (this.pressedBotButton == -1) {
                    return false;
                }
                playSoundEffect(0);
                BotButton botButton = (BotButton) this.botButtons.get(this.pressedBotButton);
                if (botButton.selectorDrawable != null) {
                    botButton.selectorDrawable.setState(StateSet.NOTHING);
                }
                botButton.setPressed(false);
                if (this.currentMessageObject.scheduled) {
                    Toast.makeText(getContext(), LocaleController.getString(R.string.MessageScheduledBotAction), 1).show();
                } else if (botButton.button != null && (chatMessageCellDelegate = this.delegate) != null) {
                    chatMessageCellDelegate.didPressBotButton(this, botButton.button);
                }
            } else {
                if (motionEvent.getAction() != 3 || (i = this.pressedBotButton) == -1) {
                    return false;
                }
                BotButton botButton2 = (BotButton) this.botButtons.get(i);
                if (botButton2.selectorDrawable != null) {
                    botButton2.selectorDrawable.setState(StateSet.NOTHING);
                }
                botButton2.setPressed(false);
            }
            this.pressedBotButton = -1;
            invalidateOutbounds();
            return false;
        }
        int widthForButtons = getWidthForButtons();
        int measuredWidth = this.currentMessageObject.isOutOwner() ? (getMeasuredWidth() - widthForButtons) - AndroidUtilities.dp(10.0f) : this.backgroundDrawableLeft + AndroidUtilities.dp(this.mediaBackground ? 1.0f : 7.0f);
        for (int i2 = 0; i2 < this.botButtons.size(); i2++) {
            BotButton botButton3 = (BotButton) this.botButtons.get(i2);
            int dp = (botButton3.y + this.layoutHeight) - AndroidUtilities.dp(2.0f);
            float f = x;
            float f2 = widthForButtons;
            float f3 = measuredWidth;
            if (f >= (botButton3.x * f2) + f3 && f <= (botButton3.x * f2) + f3 + (botButton3.width * f2) && y >= dp && y <= botButton3.height + dp) {
                this.pressedBotButton = i2;
                invalidateOutbounds();
                if (botButton3.selectorDrawable == null) {
                    botButton3.selectorDrawable = Theme.createRadSelectorDrawable(getThemedColor(Theme.key_chat_serviceBackgroundSelector), 6, 6);
                    botButton3.selectorDrawable.setCallback(this);
                    botButton3.selectorDrawable.setBounds(((int) (botButton3.x * f2)) + measuredWidth, dp, ((int) (botButton3.x * f2)) + measuredWidth + ((int) (botButton3.width * f2)), botButton3.height + dp);
                }
                if (Build.VERSION.SDK_INT >= 21) {
                    botButton3.selectorDrawable.setHotspot(f, y);
                }
                botButton3.selectorDrawable.setState(this.pressedState);
                botButton3.setPressed(true);
                final int i3 = this.pressedBotButton;
                postDelayed(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda10
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatMessageCell.this.lambda$checkBotButtonMotionEvent$4(i3);
                    }
                }, ViewConfiguration.getLongPressTimeout() - 1);
                return true;
            }
        }
        return false;
    }

    /* JADX WARN: Removed duplicated region for block: B:176:0x0175 A[Catch: Exception -> 0x00ae, TryCatch #1 {Exception -> 0x00ae, blocks: (B:131:0x0096, B:133:0x00a9, B:134:0x00b2, B:136:0x00c6, B:139:0x00cc, B:141:0x00d2, B:143:0x00e3, B:145:0x00ed, B:147:0x00f3, B:149:0x00f7, B:151:0x00fb, B:152:0x00fe, B:154:0x0104, B:156:0x010c, B:157:0x0113, B:158:0x0120, B:160:0x013a, B:162:0x0145, B:165:0x0153, B:170:0x0162, B:174:0x0172, B:176:0x0175, B:178:0x017b, B:181:0x0181, B:183:0x0187, B:185:0x018d, B:187:0x0193, B:192:0x0330, B:194:0x019d, B:195:0x01a9, B:197:0x01ad, B:199:0x01b5, B:201:0x01dc, B:202:0x01e1, B:204:0x01ec, B:206:0x01f0, B:209:0x0203, B:211:0x020a, B:260:0x0321, B:263:0x0324, B:273:0x01df, B:274:0x0334, B:276:0x033a, B:278:0x033e, B:280:0x0347, B:282:0x034d, B:283:0x0354, B:285:0x0358, B:287:0x035e, B:289:0x0168, B:290:0x0159), top: B:130:0x0096 }] */
    /* JADX WARN: Removed duplicated region for block: B:185:0x018d A[Catch: Exception -> 0x00ae, TryCatch #1 {Exception -> 0x00ae, blocks: (B:131:0x0096, B:133:0x00a9, B:134:0x00b2, B:136:0x00c6, B:139:0x00cc, B:141:0x00d2, B:143:0x00e3, B:145:0x00ed, B:147:0x00f3, B:149:0x00f7, B:151:0x00fb, B:152:0x00fe, B:154:0x0104, B:156:0x010c, B:157:0x0113, B:158:0x0120, B:160:0x013a, B:162:0x0145, B:165:0x0153, B:170:0x0162, B:174:0x0172, B:176:0x0175, B:178:0x017b, B:181:0x0181, B:183:0x0187, B:185:0x018d, B:187:0x0193, B:192:0x0330, B:194:0x019d, B:195:0x01a9, B:197:0x01ad, B:199:0x01b5, B:201:0x01dc, B:202:0x01e1, B:204:0x01ec, B:206:0x01f0, B:209:0x0203, B:211:0x020a, B:260:0x0321, B:263:0x0324, B:273:0x01df, B:274:0x0334, B:276:0x033a, B:278:0x033e, B:280:0x0347, B:282:0x034d, B:283:0x0354, B:285:0x0358, B:287:0x035e, B:289:0x0168, B:290:0x0159), top: B:130:0x0096 }] */
    /* JADX WARN: Removed duplicated region for block: B:274:0x0334 A[Catch: Exception -> 0x00ae, TryCatch #1 {Exception -> 0x00ae, blocks: (B:131:0x0096, B:133:0x00a9, B:134:0x00b2, B:136:0x00c6, B:139:0x00cc, B:141:0x00d2, B:143:0x00e3, B:145:0x00ed, B:147:0x00f3, B:149:0x00f7, B:151:0x00fb, B:152:0x00fe, B:154:0x0104, B:156:0x010c, B:157:0x0113, B:158:0x0120, B:160:0x013a, B:162:0x0145, B:165:0x0153, B:170:0x0162, B:174:0x0172, B:176:0x0175, B:178:0x017b, B:181:0x0181, B:183:0x0187, B:185:0x018d, B:187:0x0193, B:192:0x0330, B:194:0x019d, B:195:0x01a9, B:197:0x01ad, B:199:0x01b5, B:201:0x01dc, B:202:0x01e1, B:204:0x01ec, B:206:0x01f0, B:209:0x0203, B:211:0x020a, B:260:0x0321, B:263:0x0324, B:273:0x01df, B:274:0x0334, B:276:0x033a, B:278:0x033e, B:280:0x0347, B:282:0x034d, B:283:0x0354, B:285:0x0358, B:287:0x035e, B:289:0x0168, B:290:0x0159), top: B:130:0x0096 }] */
    /* JADX WARN: Removed duplicated region for block: B:37:0x04e1 A[ORIG_RETURN, RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:39:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:43:0x03bf  */
    /* JADX WARN: Removed duplicated region for block: B:81:0x045f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkCaptionMotionEvent(MotionEvent motionEvent) {
        int i;
        boolean z;
        boolean z2;
        AnimatedEmojiSpan animatedEmojiSpan;
        boolean z3;
        Object obj;
        Object[] spans;
        Object[] spans2;
        ReplyMessageLine replyMessageLine;
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (!(this.currentCaption instanceof Spannable) || this.captionLayout == null) {
            return false;
        }
        if (motionEvent.getAction() == 0 || (motionEvent.getAction() == 1 && (this.pressedLinkType == 1 || this.pressedCopyCode != null))) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            float f = x;
            float f2 = this.captionX;
            if (f >= f2) {
                float f3 = y;
                float f4 = this.captionY;
                if (f3 >= f4) {
                    MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
                    if (f <= f2 + textLayoutBlocks.textWidth && f3 <= f4 + textLayoutBlocks.textHeight(this.transitionParams)) {
                        int i2 = (int) (f3 - this.captionY);
                        int i3 = 0;
                        for (int i4 = 0; i4 < this.captionLayout.textLayoutBlocks.size() && this.captionLayout.textLayoutBlocks.get(i4).textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams) <= i2; i4++) {
                            i3 = i4;
                        }
                        try {
                            MessageObject.TextLayoutBlock textLayoutBlock = this.captionLayout.textLayoutBlocks.get(i3);
                            int i5 = (int) (f - (this.captionX - (textLayoutBlock.isRtl() ? this.captionLayout.textXOffset : 0.0f)));
                            int textYOffset = (int) (i2 - textLayoutBlock.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams));
                            if (!textLayoutBlock.quote && textLayoutBlock.code && i5 > 0 && i5 <= this.captionLayout.textWidth && textYOffset >= ((textLayoutBlock.padTop + textLayoutBlock.height) + textLayoutBlock.padBottom) - AndroidUtilities.dp(38.0f) && textYOffset <= textLayoutBlock.padTop + textLayoutBlock.height + textLayoutBlock.padBottom) {
                                if (motionEvent.getAction() == 1) {
                                    if (textLayoutBlock == this.pressedCopyCode && (chatMessageCellDelegate = this.delegate) != null) {
                                        chatMessageCellDelegate.didPressCodeCopy(this, textLayoutBlock);
                                    }
                                    resetCodeSelectors();
                                    this.pressedCopyCode = null;
                                } else {
                                    this.pressedCopyCode = textLayoutBlock;
                                    if (Build.VERSION.SDK_INT >= 21) {
                                        textLayoutBlock.copySelector.setHotspot(i5, textYOffset);
                                    }
                                    textLayoutBlock.copySelector.setCallback(this);
                                    textLayoutBlock.copySelector.setState(this.pressedState);
                                }
                                return true;
                            }
                            int lineForVertical = textLayoutBlock.textLayout.getLineForVertical(textYOffset);
                            float f5 = i5;
                            int offsetForHorizontal = textLayoutBlock.charactersOffset + textLayoutBlock.textLayout.getOffsetForHorizontal(lineForVertical, f5);
                            float lineLeft = textLayoutBlock.textLayout.getLineLeft(lineForVertical);
                            if (lineLeft <= f5 && lineLeft + textLayoutBlock.textLayout.getLineWidth(lineForVertical) >= f5) {
                                Spannable spannable = (Spannable) this.currentCaption;
                                CharacterStyle[] characterStyleArr = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                                if (characterStyleArr != null && characterStyleArr.length != 0) {
                                    z = false;
                                    if (characterStyleArr != null && characterStyleArr.length != 0) {
                                        z2 = z;
                                        if (characterStyleArr.length != 0 && ((!(characterStyleArr[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled) && !AndroidUtilities.isAccessibilityScreenReaderEnabled())) {
                                            if (motionEvent.getAction() != 0) {
                                                CharacterStyle characterStyle = characterStyleArr[0];
                                                if (characterStyle instanceof AnimatedEmojiSpan) {
                                                    AnimatedEmojiSpan animatedEmojiSpan2 = this.pressedEmoji;
                                                    if (animatedEmojiSpan2 != null) {
                                                        if (animatedEmojiSpan2 != characterStyle) {
                                                        }
                                                    }
                                                    resetPressedLink(1);
                                                    this.pressedEmoji = (AnimatedEmojiSpan) characterStyleArr[0];
                                                    this.pressedLinkType = 1;
                                                } else {
                                                    LinkSpanDrawable linkSpanDrawable = this.pressedLink;
                                                    if (linkSpanDrawable == null || linkSpanDrawable.getSpan() != characterStyleArr[0]) {
                                                        this.links.removeLink(this.pressedLink);
                                                        CharacterStyle characterStyle2 = characterStyleArr[0];
                                                        Object obj2 = URLSpanMono.class;
                                                        LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(characterStyle2, this.resourcesProvider, f5, textYOffset, spanSupportsLongPress(characterStyle2));
                                                        this.pressedLink = linkSpanDrawable2;
                                                        linkSpanDrawable2.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outLinkSelectBackground : Theme.key_chat_linkSelectBackground));
                                                        if (textLayoutBlock.quote && (replyMessageLine = this.quoteLine) != null) {
                                                            this.pressedLink.setColor(Theme.multAlpha(replyMessageLine.getColor(), Theme.isCurrentThemeDark() ? 0.13f : 0.1f));
                                                        }
                                                        this.linkBlockNum = i3;
                                                        this.pressedLinkType = 1;
                                                        try {
                                                            LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                                                            int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                                            int i6 = realSpanStartAndEnd[0];
                                                            int i7 = textLayoutBlock.charactersOffset;
                                                            int i8 = i6 - i7;
                                                            realSpanStartAndEnd[0] = i8;
                                                            realSpanStartAndEnd[1] = realSpanStartAndEnd[1] - i7;
                                                            obtainNewPath.setCurrentLayout(textLayoutBlock.textLayout, i8, 0.0f);
                                                            textLayoutBlock.textLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                                            if (realSpanStartAndEnd[1] >= textLayoutBlock.charactersEnd) {
                                                                int i9 = i3 + 1;
                                                                while (i9 < this.captionLayout.textLayoutBlocks.size()) {
                                                                    MessageObject.TextLayoutBlock textLayoutBlock2 = this.captionLayout.textLayoutBlocks.get(i9);
                                                                    if (z2) {
                                                                        int i10 = textLayoutBlock2.charactersOffset;
                                                                        obj = obj2;
                                                                        spans2 = spannable.getSpans(i10, i10, obj);
                                                                    } else {
                                                                        obj = obj2;
                                                                        int i11 = textLayoutBlock2.charactersOffset;
                                                                        spans2 = spannable.getSpans(i11, i11, ClickableSpan.class);
                                                                    }
                                                                    CharacterStyle[] characterStyleArr2 = (CharacterStyle[]) spans2;
                                                                    if (characterStyleArr2 == null || characterStyleArr2.length == 0 || characterStyleArr2[0] != this.pressedLink.getSpan()) {
                                                                        break;
                                                                    }
                                                                    LinkPath obtainNewPath2 = this.pressedLink.obtainNewPath();
                                                                    obtainNewPath2.setCurrentLayout(textLayoutBlock2.textLayout, 0, textLayoutBlock2.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams) - textLayoutBlock.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams));
                                                                    int i12 = (realSpanStartAndEnd[1] + textLayoutBlock.charactersOffset) - textLayoutBlock2.charactersOffset;
                                                                    textLayoutBlock2.textLayout.getSelectionPath(0, i12, obtainNewPath2);
                                                                    if (i12 < textLayoutBlock2.charactersEnd - 1) {
                                                                        break;
                                                                    }
                                                                    i9++;
                                                                    obj2 = obj;
                                                                }
                                                            }
                                                            obj = obj2;
                                                            if (realSpanStartAndEnd[0] <= textLayoutBlock.charactersOffset) {
                                                                int i13 = 0;
                                                                for (int i14 = i3 - 1; i14 >= 0; i14--) {
                                                                    MessageObject.TextLayoutBlock textLayoutBlock3 = this.captionLayout.textLayoutBlocks.get(i14);
                                                                    if (z2) {
                                                                        try {
                                                                            int i15 = textLayoutBlock3.charactersEnd - 1;
                                                                            spans = spannable.getSpans(i15, i15, obj);
                                                                        } catch (Exception e) {
                                                                            e = e;
                                                                            FileLog.e(e);
                                                                            z3 = true;
                                                                            this.links.addLink(this.pressedLink, 1);
                                                                            invalidate();
                                                                            return z3;
                                                                        }
                                                                    } else {
                                                                        int i16 = textLayoutBlock3.charactersEnd - 1;
                                                                        spans = spannable.getSpans(i16, i16, ClickableSpan.class);
                                                                    }
                                                                    CharacterStyle[] characterStyleArr3 = (CharacterStyle[]) spans;
                                                                    if (characterStyleArr3 == null || characterStyleArr3.length == 0 || characterStyleArr3[0] != this.pressedLink.getSpan()) {
                                                                        break;
                                                                    }
                                                                    LinkPath obtainNewPath3 = this.pressedLink.obtainNewPath();
                                                                    i13 -= textLayoutBlock3.height;
                                                                    int i17 = realSpanStartAndEnd[0];
                                                                    int i18 = textLayoutBlock.charactersOffset;
                                                                    int i19 = textLayoutBlock3.charactersOffset;
                                                                    int i20 = (i17 + i18) - i19;
                                                                    int i21 = (realSpanStartAndEnd[1] + i18) - i19;
                                                                    obtainNewPath3.setCurrentLayout(textLayoutBlock3.textLayout, i20, i13);
                                                                    textLayoutBlock3.textLayout.getSelectionPath(i20, i21, obtainNewPath3);
                                                                    if (i20 > textLayoutBlock3.charactersOffset) {
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        } catch (Exception e2) {
                                                            e = e2;
                                                        }
                                                        z3 = true;
                                                        this.links.addLink(this.pressedLink, 1);
                                                        invalidate();
                                                        return z3;
                                                    }
                                                }
                                                z3 = true;
                                                invalidate();
                                                return z3;
                                            }
                                            CharacterStyle characterStyle3 = characterStyleArr[0];
                                            if ((characterStyle3 instanceof AnimatedEmojiSpan) && (animatedEmojiSpan = this.pressedEmoji) == characterStyle3) {
                                                if (this.delegate.didPressAnimatedEmoji(this, animatedEmojiSpan)) {
                                                    resetPressedLink(1);
                                                    this.pressedEmoji = null;
                                                    return true;
                                                }
                                                resetPressedLink(1);
                                                this.pressedEmoji = null;
                                            } else {
                                                LinkSpanDrawable linkSpanDrawable3 = this.pressedLink;
                                                if (linkSpanDrawable3 != null && characterStyle3 == linkSpanDrawable3.getSpan()) {
                                                    this.delegate.didPressUrl(this, this.pressedLink.getSpan(), false);
                                                    resetPressedLink(1);
                                                    return true;
                                                }
                                            }
                                        }
                                    }
                                    characterStyleArr = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, AnimatedEmojiSpan.class);
                                    z2 = false;
                                    if (characterStyleArr.length != 0) {
                                        if (motionEvent.getAction() != 0) {
                                        }
                                    }
                                }
                                characterStyleArr = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, URLSpanMono.class);
                                z = true;
                                if (characterStyleArr != null) {
                                    z2 = z;
                                    if (characterStyleArr.length != 0) {
                                    }
                                }
                                characterStyleArr = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, AnimatedEmojiSpan.class);
                                z2 = false;
                                if (characterStyleArr.length != 0) {
                                }
                            }
                        } catch (Exception e3) {
                            FileLog.e(e3);
                        }
                    }
                }
            }
            i = 1;
            resetPressedLink(1);
            if (motionEvent.getAction() != 0 || motionEvent.getAction() == i) {
                int x2 = (int) motionEvent.getX();
                int y2 = (int) motionEvent.getY();
                if (this.pressedLink == null) {
                    float f6 = x2;
                    float f7 = this.captionX;
                    if (f6 >= f7) {
                        float f8 = y2;
                        float f9 = this.captionY;
                        if (f8 >= f9) {
                            MessageObject.TextLayoutBlocks textLayoutBlocks2 = this.captionLayout;
                            if (f6 <= f7 + textLayoutBlocks2.textWidth && f8 <= f9 + textLayoutBlocks2.textHeight(this.transitionParams)) {
                                int i22 = (int) (f8 - this.captionY);
                                int i23 = 0;
                                while (true) {
                                    if (i23 >= this.captionLayout.textLayoutBlocks.size()) {
                                        break;
                                    }
                                    MessageObject.TextLayoutBlock textLayoutBlock4 = this.captionLayout.textLayoutBlocks.get(i23);
                                    if (textLayoutBlock4.quoteCollapse && textLayoutBlock4.collapsedHeight < textLayoutBlock4.height) {
                                        float f10 = i22;
                                        if (f10 >= textLayoutBlock4.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams) && f10 < textLayoutBlock4.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams) + textLayoutBlock4.padTop + textLayoutBlock4.height(this.transitionParams) + textLayoutBlock4.padBottom) {
                                            this.pressedBlock = i23;
                                            ButtonBounce buttonBounce = textLayoutBlock4.collapsedBounce;
                                            if (buttonBounce == null || buttonBounce.getView() != this) {
                                                textLayoutBlock4.collapsedBounce = new ButtonBounce(this);
                                            }
                                            textLayoutBlock4.collapsedBounce.setPressed(motionEvent.getAction() == 0);
                                        }
                                    }
                                    i23++;
                                }
                            }
                        }
                    }
                }
                if (motionEvent.getAction() == 1) {
                    if (this.pressedBlock != -1) {
                        for (int i24 = 0; i24 < this.captionLayout.textLayoutBlocks.size(); i24++) {
                            MessageObject.TextLayoutBlock textLayoutBlock5 = this.captionLayout.textLayoutBlocks.get(i24);
                            if (i24 == this.pressedBlock && !this.transitionParams.animateExpandedQuotes) {
                                MessageObject primaryMessageObject = getPrimaryMessageObject();
                                boolean z4 = !textLayoutBlock5.collapsed();
                                HashSet<Integer> hashSet = primaryMessageObject.expandedQuotes == null ? new HashSet<>() : new HashSet<>(primaryMessageObject.expandedQuotes);
                                primaryMessageObject.expandedQuotes = hashSet;
                                Integer valueOf = Integer.valueOf(textLayoutBlock5.index);
                                if (z4) {
                                    hashSet.remove(valueOf);
                                } else {
                                    hashSet.add(valueOf);
                                }
                                ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                                if (chatMessageCellDelegate2 != null) {
                                    chatMessageCellDelegate2.forceUpdate(this, true);
                                }
                            }
                        }
                    }
                    for (int i25 = 0; i25 < this.captionLayout.textLayoutBlocks.size(); i25++) {
                        ButtonBounce buttonBounce2 = this.captionLayout.textLayoutBlocks.get(i25).collapsedBounce;
                        if (buttonBounce2 != null) {
                            buttonBounce2.setPressed(false);
                        }
                    }
                    this.pressedBlock = -1;
                }
            } else if (motionEvent.getAction() == 3) {
                for (int i26 = 0; i26 < this.captionLayout.textLayoutBlocks.size(); i26++) {
                    ButtonBounce buttonBounce3 = this.captionLayout.textLayoutBlocks.get(i26).collapsedBounce;
                    if (buttonBounce3 != null) {
                        buttonBounce3.setPressed(false);
                    }
                }
                this.pressedBlock = -1;
            }
            return this.pressedBlock == -1;
        }
        if (motionEvent.getAction() == 1) {
            this.pressedCopyCode = null;
            resetCodeSelectors();
        }
        i = 1;
        if (motionEvent.getAction() != 0) {
        }
        int x22 = (int) motionEvent.getX();
        int y22 = (int) motionEvent.getY();
        if (this.pressedLink == null) {
        }
        if (motionEvent.getAction() == 1) {
        }
        if (this.pressedBlock == -1) {
        }
    }

    private boolean checkCommentButtonMotionEvent(MotionEvent motionEvent) {
        Drawable drawable;
        Drawable drawable2;
        Drawable drawable3;
        if (!this.drawCommentButton) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null) {
            int i = groupedMessagePosition.flags;
            if ((i & 1) == 0 || (i & 8) == 0) {
                ViewGroup viewGroup = (ViewGroup) getParent();
                int childCount = viewGroup.getChildCount();
                for (int i2 = 0; i2 < childCount; i2++) {
                    View childAt = viewGroup.getChildAt(i2);
                    if (childAt != this && (childAt instanceof ChatMessageCell)) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        if (chatMessageCell.drawCommentButton && chatMessageCell.currentMessagesGroup == this.currentMessagesGroup) {
                            int i3 = chatMessageCell.currentPosition.flags;
                            if ((i3 & 1) != 0 && (i3 & 8) != 0) {
                                MotionEvent obtain = MotionEvent.obtain(0L, 0L, motionEvent.getActionMasked(), (motionEvent.getX() + getLeft()) - chatMessageCell.getLeft(), (motionEvent.getY() + getTop()) - chatMessageCell.getTop(), 0);
                                boolean checkCommentButtonMotionEvent = chatMessageCell.checkCommentButtonMotionEvent(obtain);
                                obtain.recycle();
                                return checkCommentButtonMotionEvent;
                            }
                        }
                    }
                }
                return false;
            }
        }
        if (motionEvent.getAction() == 0) {
            if (this.commentButtonRect.contains(x, y)) {
                if (this.currentMessageObject.isSent()) {
                    this.selectorDrawableMaskType[1] = 2;
                    this.commentButtonPressed = true;
                    if (Build.VERSION.SDK_INT >= 21 && (drawable3 = this.selectorDrawable[1]) != null) {
                        drawable3.setHotspot(x, y);
                        this.selectorDrawable[1].setState(this.pressedState);
                    }
                    invalidateWithParent();
                }
                return true;
            }
        } else if (motionEvent.getAction() == 1) {
            if (this.commentButtonPressed) {
                ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                if (chatMessageCellDelegate != null) {
                    if (this.isRepliesChat) {
                        chatMessageCellDelegate.didPressSideButton(this);
                    } else {
                        chatMessageCellDelegate.didPressCommentButton(this);
                    }
                }
                playSoundEffect(0);
                if (Build.VERSION.SDK_INT >= 21 && (drawable2 = this.selectorDrawable[1]) != null) {
                    drawable2.setState(StateSet.NOTHING);
                }
                this.commentButtonPressed = false;
                invalidateWithParent();
            }
        } else if (motionEvent.getAction() == 2 && this.commentButtonPressed && Build.VERSION.SDK_INT >= 21 && (drawable = this.selectorDrawable[1]) != null) {
            drawable.setHotspot(x, y);
        }
        return false;
    }

    private boolean checkContactMotionEvent(MotionEvent motionEvent) {
        Drawable drawable;
        Drawable drawable2;
        ChatMessageCellDelegate chatMessageCellDelegate;
        int i;
        Drawable drawable3;
        if (this.currentMessageObject.type != 12) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            ArrayList arrayList = this.contactButtons;
            if (arrayList != null && arrayList.size() > 1) {
                for (int i2 = 0; i2 < this.contactButtons.size(); i2++) {
                    InstantViewButton instantViewButton = (InstantViewButton) this.contactButtons.get(i2);
                    float f = x;
                    float f2 = y;
                    if (instantViewButton.rect.contains(f, f2)) {
                        if (instantViewButton.buttonBounce == null) {
                            instantViewButton.buttonBounce = new ButtonBounce(this);
                        }
                        instantViewButton.buttonBounce.setPressed(true);
                        if (Build.VERSION.SDK_INT >= 21 && instantViewButton.selectorDrawable != null) {
                            instantViewButton.selectorDrawable.setHotspot(f, f2);
                            instantViewButton.selectorDrawable.setState(this.pressedState);
                        }
                        invalidate();
                        return true;
                    }
                }
            }
            float f3 = x;
            float f4 = y;
            if (this.contactRect.contains(f3, f4)) {
                this.contactPressed = true;
                this.contactBounce.setPressed(true);
                if (Build.VERSION.SDK_INT >= 21 && (drawable3 = this.selectorDrawable[0]) != null) {
                    drawable3.setHotspot(f3, f4);
                    this.selectorDrawable[0].setState(this.pressedState);
                }
                invalidate();
                return true;
            }
        } else if (motionEvent.getAction() == 1) {
            if (this.contactPressed) {
                if (this.delegate != null) {
                    ArrayList arrayList2 = this.contactButtons;
                    if (arrayList2 == null || arrayList2.size() != 1) {
                        chatMessageCellDelegate = this.delegate;
                        i = 5;
                    } else {
                        chatMessageCellDelegate = this.delegate;
                        i = ((InstantViewButton) this.contactButtons.get(0)).type;
                    }
                    chatMessageCellDelegate.didPressInstantButton(this, i);
                }
                playSoundEffect(0);
                if (Build.VERSION.SDK_INT >= 21 && (drawable2 = this.selectorDrawable[0]) != null) {
                    drawable2.setState(StateSet.NOTHING);
                }
                this.contactPressed = false;
                this.contactBounce.setPressed(false);
                invalidate();
            } else {
                ArrayList arrayList3 = this.contactButtons;
                if (arrayList3 != null && arrayList3.size() > 1) {
                    for (int i3 = 0; i3 < this.contactButtons.size(); i3++) {
                        InstantViewButton instantViewButton2 = (InstantViewButton) this.contactButtons.get(i3);
                        if (instantViewButton2.buttonBounce != null && instantViewButton2.buttonBounce.isPressed()) {
                            ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                            if (chatMessageCellDelegate2 != null) {
                                chatMessageCellDelegate2.didPressInstantButton(this, instantViewButton2.type);
                            }
                            if (Build.VERSION.SDK_INT >= 21 && instantViewButton2.selectorDrawable != null) {
                                instantViewButton2.selectorDrawable.setState(StateSet.NOTHING);
                            }
                            instantViewButton2.buttonBounce.setPressed(false);
                            playSoundEffect(0);
                            invalidate();
                        }
                    }
                }
            }
        } else if (motionEvent.getAction() == 2) {
            if (!this.contactPressed || Build.VERSION.SDK_INT < 21 || (drawable = this.selectorDrawable[0]) == null) {
                ArrayList arrayList4 = this.contactButtons;
                if (arrayList4 != null && arrayList4.size() > 1) {
                    int i4 = 0;
                    while (true) {
                        if (i4 >= this.contactButtons.size()) {
                            break;
                        }
                        InstantViewButton instantViewButton3 = (InstantViewButton) this.contactButtons.get(i4);
                        if (instantViewButton3.buttonBounce == null || !instantViewButton3.buttonBounce.isPressed()) {
                            i4++;
                        } else if (Build.VERSION.SDK_INT >= 21 && instantViewButton3.selectorDrawable != null) {
                            drawable = instantViewButton3.selectorDrawable;
                        }
                    }
                }
            }
            drawable.setHotspot(x, y);
        }
        return false;
    }

    private boolean checkDateMotionEvent(MotionEvent motionEvent) {
        if (!this.currentMessageObject.isImportedForward()) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            float f = x;
            float f2 = this.drawTimeX;
            if (f < f2 || f > f2 + this.timeWidth) {
                return false;
            }
            float f3 = y;
            float f4 = this.drawTimeY;
            if (f3 < f4 || f3 > f4 + AndroidUtilities.dp(20.0f)) {
                return false;
            }
            this.timePressed = true;
        } else {
            if (motionEvent.getAction() != 1 || !this.timePressed) {
                return false;
            }
            this.timePressed = false;
            playSoundEffect(0);
            this.delegate.didPressTime(this);
        }
        invalidate();
        return true;
    }

    /* JADX WARN: Code restructure failed: missing block: B:36:0x00a4, code lost:
    
        if (r9.getAction() == 3) goto L33;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkEffectMotionEvent(MotionEvent motionEvent) {
        ChatMessageCellDelegate chatMessageCellDelegate;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.getEffect() == null) {
            return false;
        }
        int timeX = (int) ((getTimeX() - AndroidUtilities.dp(this.effectId == 0 ? 0.0f : 18.0f)) + (this.timeWidth * (this.currentMessageObject.sendPreview ? 1.0f - this.timeAlpha : 0.0f)));
        int timeY = (int) getTimeY();
        int dp = timeX - AndroidUtilities.dp(2.0f);
        int dp2 = timeY - AndroidUtilities.dp(2.0f);
        RectF rectF = AndroidUtilities.rectTmp;
        rectF.set(dp, dp2, dp + AndroidUtilities.dp(16.0f) + this.timeWidth, dp2 + AndroidUtilities.dp(16.0f));
        boolean contains = rectF.contains(motionEvent.getX(), motionEvent.getY());
        if (motionEvent.getAction() == 0) {
            if (contains) {
                if (this.effectDrawableBounce == null) {
                    this.effectDrawableBounce = new ButtonBounce(this);
                }
                this.pressedEffect = true;
            }
        } else if (motionEvent.getAction() == 2) {
            this.pressedEffect = contains;
        } else {
            if (motionEvent.getAction() == 1) {
                if (this.pressedEffect && (chatMessageCellDelegate = this.delegate) != null) {
                    chatMessageCellDelegate.didPressEffect(this);
                }
            }
            this.pressedEffect = false;
        }
        ButtonBounce buttonBounce = this.effectDrawableBounce;
        if (buttonBounce != null) {
            buttonBounce.setPressed(this.pressedEffect);
        }
        return this.pressedEffect;
    }

    /* JADX WARN: Removed duplicated region for block: B:79:0x0201 A[Catch: Exception -> 0x01d9, TryCatch #0 {Exception -> 0x01d9, blocks: (B:59:0x019f, B:61:0x01b8, B:63:0x01c3, B:65:0x01d5, B:68:0x01e5, B:70:0x01e8, B:72:0x01ef, B:75:0x01f5, B:77:0x01fb, B:79:0x0201, B:81:0x0205, B:83:0x0273, B:84:0x020e, B:86:0x0232, B:89:0x0267, B:92:0x0264, B:93:0x0277, B:95:0x027b, B:97:0x0284, B:98:0x01dc, B:88:0x0240), top: B:58:0x019f, inners: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:93:0x0277 A[Catch: Exception -> 0x01d9, TryCatch #0 {Exception -> 0x01d9, blocks: (B:59:0x019f, B:61:0x01b8, B:63:0x01c3, B:65:0x01d5, B:68:0x01e5, B:70:0x01e8, B:72:0x01ef, B:75:0x01f5, B:77:0x01fb, B:79:0x0201, B:81:0x0205, B:83:0x0273, B:84:0x020e, B:86:0x0232, B:89:0x0267, B:92:0x0264, B:93:0x0277, B:95:0x027b, B:97:0x0284, B:98:0x01dc, B:88:0x0240), top: B:58:0x019f, inners: #1 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkFactCheckMotionEvent(MotionEvent motionEvent) {
        int i;
        int dp;
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (!this.hasFactCheck || this.factCheckTitle == null || this.factCheckWhat == null) {
            return false;
        }
        if (this.factCheckWhatBounce == null) {
            this.factCheckWhatBounce = new ButtonBounce(this);
        }
        if (this.factCheckBounce == null) {
            ButtonBounce buttonBounce = new ButtonBounce(this);
            this.factCheckBounce = buttonBounce;
            buttonBounce.setAdditionalInvalidate(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda14
                @Override // java.lang.Runnable
                public final void run() {
                    ChatMessageCell.this.invalidateOutbounds();
                }
            });
        }
        float backgroundDrawableRight = getBackgroundDrawableRight();
        TransitionParams transitionParams = this.transitionParams;
        float dp2 = ((backgroundDrawableRight + (transitionParams != null ? transitionParams.deltaRight : 0.0f)) - AndroidUtilities.dp(10 + ((!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6))) - getExtraTextX();
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages == null || groupedMessages.isDocuments) {
            float f = 12.0f;
            if (this.currentMessageObject.isOutOwner()) {
                dp = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                if (this.currentMessageObject.type == 19) {
                    dp -= Math.max(0, ((Math.max(this.replyNameWidth, this.replyTextWidth) + dp) + AndroidUtilities.dp(14.0f)) - AndroidUtilities.displaySize.x);
                }
            } else {
                if (this.mediaBackground) {
                    i = this.backgroundDrawableLeft;
                } else {
                    i = this.backgroundDrawableLeft;
                    if (!this.drawPinnedBottom) {
                        f = 18.0f;
                    }
                }
                dp = i + AndroidUtilities.dp(f) + getExtraTextX();
            }
        } else {
            dp = (int) this.captionX;
        }
        int dp3 = ((int) (dp + this.transitionParams.deltaLeft)) - AndroidUtilities.dp(1.33f);
        int i2 = this.factCheckY;
        float f2 = dp3;
        int i3 = (int) (dp2 - f2);
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        int dp4 = (int) (AndroidUtilities.dp(10.0f) + dp3 + this.factCheckTitle.getCurrentWidth() + AndroidUtilities.dp(4.0f));
        int dp5 = AndroidUtilities.dp(4.33f) + i2;
        RectF rectF = AndroidUtilities.rectTmp;
        float f3 = dp4;
        rectF.set(f3, dp5, this.factCheckWhat.getCurrentWidth() + f3 + AndroidUtilities.dp(4.0f), AndroidUtilities.dp(17.33f) + dp5);
        boolean contains = rectF.contains(motionEvent.getX(), motionEvent.getY());
        rectF.set(f2, i2, dp3 + i3, this.factCheckHeight + i2);
        boolean z = !contains && !this.hadLongPress && this.pressedFactCheckLink == null && rectF.contains(motionEvent.getX(), motionEvent.getY());
        if (((z && !this.hadLongPress) || this.pressedFactCheckLink != null) && this.factCheckTextLayout != null) {
            if (this.factCheckLinks == null) {
                LinkSpanDrawable.LinkCollector linkCollector = new LinkSpanDrawable.LinkCollector(this);
                this.factCheckLinks = linkCollector;
                linkCollector.setAdditionalInvalidate(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda14
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatMessageCell.this.invalidateOutbounds();
                    }
                });
            }
            int dp6 = (dp3 + AndroidUtilities.dp(10.0f)) - this.factCheckTextLayoutLeft;
            int dp7 = i2 + AndroidUtilities.dp(22.0f);
            if (motionEvent.getAction() == 0 || (motionEvent.getAction() == 1 && this.pressedFactCheckLink != null)) {
                if (x < dp6 || y < dp7 || x > i3 + dp6 || y > this.factCheckTextLayout.getHeight() + dp7) {
                    resetPressedLink(1);
                } else {
                    try {
                        int i4 = y - dp7;
                        int lineForVertical = this.factCheckTextLayout.getLineForVertical(i4);
                        float f4 = x - dp6;
                        int offsetForHorizontal = this.factCheckTextLayout.getOffsetForHorizontal(lineForVertical, f4);
                        float lineLeft = this.factCheckTextLayout.getLineLeft(lineForVertical);
                        if (lineLeft <= f4 && lineLeft + this.factCheckTextLayout.getLineWidth(lineForVertical) >= f4) {
                            Spannable spannable = (Spannable) this.factCheckTextLayout.getText();
                            CharacterStyle[] characterStyleArr = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                            if (characterStyleArr != null) {
                                if (characterStyleArr.length == 0) {
                                }
                                if (characterStyleArr.length != 0 && ((!(characterStyleArr[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled) && !AndroidUtilities.isAccessibilityScreenReaderEnabled())) {
                                    if (motionEvent.getAction() != 0) {
                                        LinkSpanDrawable linkSpanDrawable = this.pressedFactCheckLink;
                                        if (linkSpanDrawable == null || linkSpanDrawable.getSpan() != characterStyleArr[0]) {
                                            this.factCheckLinks.removeLink(this.pressedFactCheckLink);
                                            CharacterStyle characterStyle = characterStyleArr[0];
                                            LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(characterStyle, this.resourcesProvider, f4, i4, spanSupportsLongPress(characterStyle));
                                            this.pressedFactCheckLink = linkSpanDrawable2;
                                            ReplyMessageLine replyMessageLine = this.factCheckLine;
                                            if (replyMessageLine != null) {
                                                linkSpanDrawable2.setColor(Theme.multAlpha(replyMessageLine.getColor(), 0.1f));
                                            }
                                            try {
                                                LinkPath obtainNewPath = this.pressedFactCheckLink.obtainNewPath();
                                                int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedFactCheckLink.getSpan());
                                                obtainNewPath.setCurrentLayout(this.factCheckTextLayout, realSpanStartAndEnd[0], 0.0f);
                                                this.factCheckTextLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                            } catch (Exception e) {
                                                FileLog.e(e);
                                            }
                                            this.factCheckLinks.addLink(this.pressedFactCheckLink, 1);
                                            z = false;
                                        }
                                        invalidate();
                                    } else {
                                        LinkSpanDrawable linkSpanDrawable3 = this.pressedFactCheckLink;
                                        if (linkSpanDrawable3 != null && characterStyleArr[0] == linkSpanDrawable3.getSpan()) {
                                            this.delegate.didPressUrl(this, this.pressedFactCheckLink.getSpan(), false);
                                            resetPressedLink(1);
                                            this.factCheckWhatPressed = false;
                                            this.factCheckPressed = false;
                                            this.pressedFactCheckLink = null;
                                        }
                                    }
                                }
                            }
                            characterStyleArr = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, URLSpanMono.class);
                            if (characterStyleArr.length != 0) {
                                if (motionEvent.getAction() != 0) {
                                }
                            }
                        }
                    } catch (Exception e2) {
                        FileLog.e(e2);
                    }
                }
            }
        }
        boolean z2 = this.factCheckLarge && z;
        if (motionEvent.getAction() == 0 || motionEvent.getAction() == 2) {
            this.factCheckWhatPressed = contains;
            this.factCheckPressed = z2;
        } else if (motionEvent.getAction() == 1) {
            if (this.factCheckWhatPressed) {
                ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                if (chatMessageCellDelegate2 != null) {
                    chatMessageCellDelegate2.didPressFactCheckWhat(this, (int) (dp4 + AndroidUtilities.dp(4.0f) + (this.factCheckWhat.getCurrentWidth() / 2.0f)), dp5);
                }
            } else if (this.factCheckPressed && !this.transitionParams.animateFactCheckExpanded && (chatMessageCellDelegate = this.delegate) != null) {
                chatMessageCellDelegate.didPressFactCheck(this);
            }
            this.factCheckWhatPressed = false;
            this.factCheckPressed = false;
        } else if (motionEvent.getAction() == 3) {
            this.factCheckWhatPressed = false;
            this.factCheckPressed = false;
            LinkSpanDrawable.LinkCollector linkCollector2 = this.factCheckLinks;
            if (linkCollector2 != null) {
                linkCollector2.clear();
            }
            this.pressedFactCheckLink = null;
        }
        this.factCheckWhatBounce.setPressed(this.factCheckWhatPressed);
        this.factCheckBounce.setPressed(this.factCheckPressed);
        return this.factCheckWhatPressed || this.factCheckPressed || this.pressedFactCheckLink != null;
    }

    private boolean checkGameMotionEvent(MotionEvent motionEvent) {
        int i;
        int i2;
        if (!this.hasGamePreview) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            if (this.drawPhotoImage && this.drawImageButton && this.buttonState != -1 && x >= (i = this.buttonX) && x <= i + AndroidUtilities.dp(48.0f) && y >= (i2 = this.buttonY) && y <= i2 + AndroidUtilities.dp(48.0f) && this.radialProgress.getIcon() != 4) {
                this.buttonPressed = 1;
                invalidate();
                return true;
            }
            if (this.drawPhotoImage && this.photoImage.isInsideImage(x, y)) {
                this.gamePreviewPressed = true;
                return true;
            }
            if (this.descriptionLayout != null && y >= this.descriptionY) {
                try {
                    int dp = x - ((this.unmovedTextX + AndroidUtilities.dp(10.0f)) + this.descriptionX);
                    int i3 = y - this.descriptionY;
                    int lineForVertical = this.descriptionLayout.getLineForVertical(i3);
                    float f = dp;
                    int offsetForHorizontal = this.descriptionLayout.getOffsetForHorizontal(lineForVertical, f);
                    float lineLeft = this.descriptionLayout.getLineLeft(lineForVertical);
                    if (lineLeft <= f && lineLeft + this.descriptionLayout.getLineWidth(lineForVertical) >= f) {
                        Spannable spannable = (Spannable) this.currentMessageObject.linkDescription;
                        ClickableSpan[] clickableSpanArr = (ClickableSpan[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                        if (clickableSpanArr.length != 0 && ((!(clickableSpanArr[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled) && !AndroidUtilities.isAccessibilityScreenReaderEnabled())) {
                            LinkSpanDrawable linkSpanDrawable = this.pressedLink;
                            if (linkSpanDrawable == null || linkSpanDrawable.getSpan() != clickableSpanArr[0]) {
                                this.links.removeLink(this.pressedLink);
                                ClickableSpan clickableSpan = clickableSpanArr[0];
                                LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(clickableSpan, this.resourcesProvider, f, i3, spanSupportsLongPress(clickableSpan));
                                this.pressedLink = linkSpanDrawable2;
                                linkSpanDrawable2.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outLinkSelectBackground : Theme.key_chat_linkSelectBackground));
                                this.linkBlockNum = -10;
                                this.pressedLinkType = 2;
                                try {
                                    LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                                    int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                    obtainNewPath.setCurrentLayout(this.descriptionLayout, realSpanStartAndEnd[0], 0.0f);
                                    this.descriptionLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                } catch (Exception e) {
                                    FileLog.e(e);
                                }
                                this.links.addLink(this.pressedLink, 2);
                            }
                            invalidate();
                            return true;
                        }
                    }
                } catch (Exception e2) {
                    FileLog.e(e2);
                }
            }
        } else if (motionEvent.getAction() == 1) {
            if (this.pressedLinkType == 2 || this.gamePreviewPressed || this.buttonPressed != 0) {
                if (this.buttonPressed != 0) {
                    this.buttonPressed = 0;
                    playSoundEffect(0);
                    didPressButton(true, false);
                    invalidate();
                } else {
                    LinkSpanDrawable linkSpanDrawable3 = this.pressedLink;
                    if (linkSpanDrawable3 == null) {
                        this.gamePreviewPressed = false;
                        int i4 = 0;
                        while (true) {
                            if (i4 >= this.botButtons.size()) {
                                break;
                            }
                            BotButton botButton = (BotButton) this.botButtons.get(i4);
                            if (botButton.button instanceof TLRPC.TL_keyboardButtonGame) {
                                playSoundEffect(0);
                                this.delegate.didPressBotButton(this, botButton.button);
                                invalidate();
                                break;
                            }
                            i4++;
                        }
                        resetPressedLink(2);
                        return true;
                    }
                    if (linkSpanDrawable3.getSpan() instanceof URLSpan) {
                        Browser.openUrl(getContext(), ((URLSpan) this.pressedLink.getSpan()).getURL());
                    } else if (this.pressedLink.getSpan() instanceof ClickableSpan) {
                        ((ClickableSpan) this.pressedLink.getSpan()).onClick(this);
                    }
                }
            }
            resetPressedLink(2);
        }
        return false;
    }

    private void checkImageReceiversAttachState() {
        boolean z = this.attachedToWindow;
        boolean z2 = false;
        if (z != this.imageReceiversAttachState) {
            this.imageReceiversAttachState = z;
            if (z) {
                this.radialProgress.onAttachedToWindow();
                this.videoRadialProgress.onAttachedToWindow();
                if (this.pollAvatarImages != null) {
                    int i = 0;
                    while (true) {
                        ImageReceiver[] imageReceiverArr = this.pollAvatarImages;
                        if (i >= imageReceiverArr.length) {
                            break;
                        }
                        imageReceiverArr[i].onAttachedToWindow();
                        i++;
                    }
                }
                if (this.commentAvatarImages != null) {
                    int i2 = 0;
                    while (true) {
                        ImageReceiver[] imageReceiverArr2 = this.commentAvatarImages;
                        if (i2 >= imageReceiverArr2.length) {
                            break;
                        }
                        imageReceiverArr2[i2].onAttachedToWindow();
                        i2++;
                    }
                }
                this.giveawayMessageCell.onAttachedToWindow();
                this.giveawayResultsMessageCell.onAttachedToWindow();
                this.replyImageReceiver.onAttachedToWindow();
                this.locationImageReceiver.onAttachedToWindow();
                this.blurredPhotoImage.onAttachedToWindow();
                if (!this.photoImage.onAttachedToWindow() || this.drawPhotoImage) {
                    updateButtonState(false, false, false);
                }
                this.animatedEmojiReplyStack = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiReplyStack, this.replyTextLayout);
                this.animatedEmojiDescriptionStack = AnimatedEmojiSpan.update(0, (View) this, false, this.animatedEmojiDescriptionStack, this.descriptionLayout);
                updateAnimatedEmojis();
            } else {
                this.radialProgress.onDetachedFromWindow();
                this.videoRadialProgress.onDetachedFromWindow();
                if (this.pollAvatarImages != null) {
                    int i3 = 0;
                    while (true) {
                        ImageReceiver[] imageReceiverArr3 = this.pollAvatarImages;
                        if (i3 >= imageReceiverArr3.length) {
                            break;
                        }
                        imageReceiverArr3[i3].onDetachedFromWindow();
                        i3++;
                    }
                }
                if (this.commentAvatarImages != null) {
                    int i4 = 0;
                    while (true) {
                        ImageReceiver[] imageReceiverArr4 = this.commentAvatarImages;
                        if (i4 >= imageReceiverArr4.length) {
                            break;
                        }
                        imageReceiverArr4[i4].onDetachedFromWindow();
                        i4++;
                    }
                }
                this.replyImageReceiver.onDetachedFromWindow();
                this.locationImageReceiver.onDetachedFromWindow();
                this.photoImage.onDetachedFromWindow();
                this.blurredPhotoImage.onDetachedFromWindow();
                this.giveawayMessageCell.onDetachedFromWindow();
                this.giveawayResultsMessageCell.onDetachedFromWindow();
                AnimatedEmojiSpan.release(this, this.animatedEmojiDescriptionStack);
                AnimatedEmojiSpan.release(this, this.animatedEmojiReplyStack);
                AnimatedEmojiSpan.release(this, this.animatedEmojiStack);
            }
        }
        if (this.attachedToWindow && (this.visibleOnScreen || !this.shouldCheckVisibleOnScreen)) {
            z2 = true;
        }
        if (z2 != this.imageReceiversVisibleState) {
            this.imageReceiversVisibleState = z2;
            if (z2) {
                fileAttach(true, this.currentMessageObject);
            } else {
                fileDetach(this.currentMessageObject);
            }
        }
    }

    private boolean checkInstantButtonMotionEvent(MotionEvent motionEvent) {
        Drawable drawable;
        Drawable drawable2;
        if (!this.currentMessageObject.isSponsored() && !this.currentMessageObject.isUnsupported() && (!this.drawInstantView || this.currentMessageObject.type == 0)) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            if (this.drawInstantView) {
                float f = x;
                float f2 = y;
                if (this.instantButtonRect.contains(f, f2)) {
                    this.selectorDrawableMaskType[0] = this.lastPoll == null ? 0 : 2;
                    this.instantPressed = true;
                    if (Build.VERSION.SDK_INT >= 21 && this.selectorDrawable[0] != null && this.instantButtonRect.contains(f, f2)) {
                        this.selectorDrawable[0].setHotspot(f, f2);
                        this.selectorDrawable[0].setState(this.pressedState);
                        setInstantButtonPressed(true);
                    }
                    invalidate();
                    return true;
                }
            }
        } else if (motionEvent.getAction() == 1) {
            if (this.instantPressed) {
                ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                if (chatMessageCellDelegate != null) {
                    if (this.lastPoll != null) {
                        MessageObject messageObject = this.currentMessageObject;
                        if (messageObject.scheduled) {
                            Toast.makeText(getContext(), LocaleController.getString(R.string.MessageScheduledVoteResults), 1).show();
                        } else if (!this.pollVoted && !this.pollClosed) {
                            if (!messageObject.checkedVotes.isEmpty()) {
                                this.pollVoteInProgressNum = -1;
                                this.pollVoteInProgress = true;
                                this.vibrateOnPollVote = true;
                                this.voteCurrentProgressTime = 0.0f;
                                this.firstCircleLength = true;
                                this.voteCurrentCircleLength = 360.0f;
                                this.voteRisingCircleLength = false;
                            }
                            this.delegate.didPressVoteButtons(this, this.currentMessageObject.checkedVotes, -1, 0, this.namesOffset);
                        }
                    }
                    chatMessageCellDelegate.didPressInstantButton(this, this.drawInstantViewType);
                }
                playSoundEffect(0);
                if (Build.VERSION.SDK_INT >= 21 && (drawable2 = this.selectorDrawable[0]) != null) {
                    drawable2.setState(StateSet.NOTHING);
                }
                this.instantPressed = false;
                setInstantButtonPressed(false);
                invalidate();
            }
        } else if (motionEvent.getAction() == 2 && this.instantButtonPressed && Build.VERSION.SDK_INT >= 21 && (drawable = this.selectorDrawable[0]) != null) {
            drawable.setHotspot(x, y);
        }
        return false;
    }

    private boolean checkLinkPreviewMotionEvent(MotionEvent motionEvent) {
        int i;
        MessageObject messageObject;
        TLRPC.TL_channelAdminLogEvent tL_channelAdminLogEvent;
        int i2;
        int i3;
        int i4;
        int i5;
        int dp;
        int dp2;
        int i6;
        int themedColor;
        MessageObject messageObject2;
        int i7 = this.currentMessageObject.type;
        if ((i7 != 0 && i7 != 24) || !this.hasLinkPreview) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        int i8 = this.unmovedTextX;
        if (x >= i8 && x <= (i8 + this.backgroundWidth) - AndroidUtilities.dp(14.0f) && y >= (i = this.linkPreviewY)) {
            if (y <= i + this.linkPreviewHeight + AndroidUtilities.dp((this.drawInstantView ? 46 : 0) + 8)) {
                if (motionEvent.getAction() == 0) {
                    if (this.descriptionLayout != null && y >= this.descriptionY && !this.currentMessageObject.preview) {
                        try {
                            int dp3 = x - ((this.unmovedTextX + AndroidUtilities.dp(10.0f)) + this.descriptionX);
                            int i9 = y - this.descriptionY;
                            if (i9 <= this.descriptionLayout.getHeight()) {
                                int lineForVertical = this.descriptionLayout.getLineForVertical(i9);
                                float f = dp3;
                                int offsetForHorizontal = this.descriptionLayout.getOffsetForHorizontal(lineForVertical, f);
                                float lineLeft = this.descriptionLayout.getLineLeft(lineForVertical);
                                if (lineLeft <= f && lineLeft + this.descriptionLayout.getLineWidth(lineForVertical) >= f) {
                                    Spannable spannable = (Spannable) (this.currentMessageObject.isSponsored() ? this.currentMessageObject.messageText : this.currentMessageObject.linkDescription);
                                    ClickableSpan[] clickableSpanArr = (ClickableSpan[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                                    if (clickableSpanArr.length != 0 && ((!(clickableSpanArr[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled) && !AndroidUtilities.isAccessibilityScreenReaderEnabled())) {
                                        LinkSpanDrawable linkSpanDrawable = this.pressedLink;
                                        if (linkSpanDrawable == null || linkSpanDrawable.getSpan() != clickableSpanArr[0]) {
                                            this.links.removeLink(this.pressedLink);
                                            ClickableSpan clickableSpan = clickableSpanArr[0];
                                            LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(clickableSpan, this.resourcesProvider, x, y, spanSupportsLongPress(clickableSpan));
                                            this.pressedLink = linkSpanDrawable2;
                                            if (!this.hasLinkPreview || this.linkLine == null || (messageObject2 = this.currentMessageObject) == null || messageObject2.isOutOwner()) {
                                                themedColor = getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outLinkSelectBackground : Theme.key_chat_linkSelectBackground);
                                            } else {
                                                themedColor = Theme.multAlpha(this.linkLine.getColor(), 0.1f);
                                            }
                                            linkSpanDrawable2.setColor(themedColor);
                                            this.linkBlockNum = -10;
                                            this.pressedLinkType = 2;
                                            startCheckLongPress();
                                            try {
                                                LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                                                int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                                obtainNewPath.setCurrentLayout(this.descriptionLayout, realSpanStartAndEnd[0], 0.0f);
                                                this.descriptionLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                            } catch (Exception e) {
                                                FileLog.e(e);
                                            }
                                            this.links.addLink(this.pressedLink, 2);
                                        }
                                        invalidate();
                                        return true;
                                    }
                                }
                            }
                        } catch (Exception e2) {
                            FileLog.e(e2);
                        }
                    }
                    if (this.pressedLink == null) {
                        int dp4 = AndroidUtilities.dp(48.0f);
                        if (this.miniButtonState >= 0 && x >= (dp2 = this.buttonX + (dp = AndroidUtilities.dp(27.0f))) && x <= dp2 + dp4 && y >= (i6 = this.buttonY + dp) && y <= i6 + dp4) {
                            this.miniButtonPressed = 1;
                        } else {
                            if (!this.drawVideoImageButton || this.buttonState == -1 || x < (i4 = this.videoButtonX) || x > i4 + AndroidUtilities.dp(34.0f) + Math.max(this.infoWidth, this.docTitleWidth) || y < (i5 = this.videoButtonY) || y > i5 + AndroidUtilities.dp(30.0f)) {
                                if (!(this.drawPhotoImage && this.currentMessageObject.sponsoredMedia != null && this.photoImage.isInsideImage(x, y)) && (!this.drawPhotoImage || !this.drawImageButton || this.buttonState == -1 || ((this.checkOnlyButtonPressed || !this.photoImage.isInsideImage(x, y)) && (x < (i2 = this.buttonX) || x > i2 + AndroidUtilities.dp(48.0f) || y < (i3 = this.buttonY) || y > i3 + AndroidUtilities.dp(48.0f) || this.radialProgress.getIcon() == 4)))) {
                                    this.instantPressed = true;
                                    this.selectorDrawableMaskType[0] = 0;
                                    if (Build.VERSION.SDK_INT >= 21) {
                                        Drawable drawable = this.selectorDrawable[0];
                                        if (drawable != null && drawable.getBounds().contains(x, y)) {
                                            this.selectorDrawable[0].setHotspot(x, y);
                                            this.selectorDrawable[0].setState(this.pressedState);
                                        }
                                        Drawable drawable2 = this.linkPreviewSelector;
                                        if (drawable2 != null && drawable2.getBounds().contains(x, y)) {
                                            this.linkPreviewSelector.setHotspot(x, y);
                                            this.linkPreviewSelector.setState(this.pressedState);
                                        }
                                        setInstantButtonPressed(true);
                                    }
                                    ButtonBounce buttonBounce = this.linkPreviewBounce;
                                    if (buttonBounce != null) {
                                        buttonBounce.setPressed(true);
                                    }
                                    invalidate();
                                    return true;
                                }
                                this.buttonPressed = 1;
                                invalidate();
                                TLRPC.MessageMedia messageMedia = this.currentMessageObject.sponsoredMedia;
                                if (messageMedia != null && (MessageObject.isGifDocument(messageMedia.document) || this.currentMessageObject.sponsoredMedia.photo != null)) {
                                    if (Build.VERSION.SDK_INT >= 21) {
                                        Drawable drawable3 = this.selectorDrawable[0];
                                        if (drawable3 != null && drawable3.getBounds().contains(x, y)) {
                                            this.selectorDrawable[0].setHotspot(x, y);
                                            this.selectorDrawable[0].setState(this.pressedState);
                                        }
                                        Drawable drawable4 = this.linkPreviewSelector;
                                        if (drawable4 != null && drawable4.getBounds().contains(x, y)) {
                                            this.linkPreviewSelector.setHotspot(x, y);
                                            this.linkPreviewSelector.setState(this.pressedState);
                                        }
                                        setInstantButtonPressed(true);
                                    }
                                    ButtonBounce buttonBounce2 = this.linkPreviewBounce;
                                    if (buttonBounce2 != null) {
                                        buttonBounce2.setPressed(true);
                                    }
                                }
                                return true;
                            }
                            this.videoButtonPressed = 1;
                        }
                        invalidate();
                        return true;
                    }
                } else if (motionEvent.getAction() == 1) {
                    if (this.instantPressed) {
                        int i10 = this.documentAttachType;
                        if (i10 == 7) {
                            if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isMessagePaused()) {
                                this.delegate.needPlayMessage(this, this.currentMessageObject, false);
                            } else {
                                MediaController.getInstance().lambda$startAudioAgain$7(this.currentMessageObject);
                            }
                        } else if (this.drawInstantView || !((messageObject = this.currentMessageObject) == null || (tL_channelAdminLogEvent = messageObject.currentEvent) == null || !(tL_channelAdminLogEvent.action instanceof TLRPC.TL_channelAdminLogEventActionEditMessage))) {
                            ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                            if (chatMessageCellDelegate != null) {
                                chatMessageCellDelegate.didPressInstantButton(this, this.drawInstantViewType);
                            }
                        } else if (this.drawPhotoImage && (i10 == 2 || i10 == 4 || (this.authorLayout == null && this.titleLayout == null && this.descriptionLayout == null && this.siteNameLayout == null))) {
                            ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                            if (chatMessageCellDelegate2 != null) {
                                chatMessageCellDelegate2.didPressImage(this, this.lastTouchX, this.lastTouchY, true);
                            }
                        } else if (!messageObject.preview) {
                            TLRPC.WebPage webPage = MessageObject.getMedia(messageObject.messageOwner).webpage;
                            if (webPage != null && !TextUtils.isEmpty(webPage.embed_url)) {
                                ChatMessageCellDelegate chatMessageCellDelegate3 = this.delegate;
                                if (chatMessageCellDelegate3 != null) {
                                    chatMessageCellDelegate3.needOpenWebView(this.currentMessageObject, webPage.embed_url, webPage.site_name, webPage.title, webPage.url, webPage.embed_width, webPage.embed_height);
                                }
                            } else if (webPage != null) {
                                ChatMessageCellDelegate chatMessageCellDelegate4 = this.delegate;
                                if (chatMessageCellDelegate4 != null) {
                                    chatMessageCellDelegate4.didPressWebPage(this, webPage, webPage.url, MessageObject.getMedia(this.currentMessageObject.messageOwner).safe);
                                } else {
                                    Browser.openUrl(getContext(), webPage.url);
                                }
                            }
                        }
                        playSoundEffect(0);
                        if (Build.VERSION.SDK_INT >= 21) {
                            Drawable drawable5 = this.selectorDrawable[0];
                            if (drawable5 != null) {
                                drawable5.setState(StateSet.NOTHING);
                            }
                            Drawable drawable6 = this.linkPreviewSelector;
                            if (drawable6 != null) {
                                drawable6.setState(StateSet.NOTHING);
                            }
                        }
                        ButtonBounce buttonBounce3 = this.linkPreviewBounce;
                        if (buttonBounce3 != null) {
                            buttonBounce3.setPressed(false);
                        }
                        this.instantPressed = false;
                        setInstantButtonPressed(false);
                    } else {
                        if (this.pressedLinkType != 2 && this.buttonPressed == 0 && this.miniButtonPressed == 0 && this.videoButtonPressed == 0 && !this.linkPreviewPressed) {
                            if (!this.hadLongPress) {
                                this.hadLongPress = false;
                            }
                        } else if (this.videoButtonPressed == 1) {
                            this.videoButtonPressed = 0;
                            playSoundEffect(0);
                            didPressButton(true, true);
                        } else if (this.buttonPressed != 0) {
                            this.buttonPressed = 0;
                            playSoundEffect(0);
                            if (this.drawVideoImageButton || this.currentMessageObject.sponsoredMedia != null) {
                                didClickedImage();
                            } else {
                                didPressButton(true, false);
                            }
                        } else if (this.miniButtonPressed != 0) {
                            this.miniButtonPressed = 0;
                            playSoundEffect(0);
                            didPressMiniButton(true);
                        } else {
                            LinkSpanDrawable linkSpanDrawable3 = this.pressedLink;
                            if (linkSpanDrawable3 == null) {
                                AnimatedEmojiSpan animatedEmojiSpan = this.pressedEmoji;
                                if (animatedEmojiSpan == null || !this.delegate.didPressAnimatedEmoji(this, animatedEmojiSpan)) {
                                    if (this.documentAttachType == 2 && this.drawImageButton) {
                                        int i11 = this.buttonState;
                                        if (i11 == -1) {
                                            if (!SharedConfig.isAutoplayGifs() || this.currentMessageObject.isRepostPreview) {
                                                this.buttonState = 2;
                                                this.currentMessageObject.gifState = 1.0f;
                                                this.photoImage.setAllowStartAnimation(false);
                                                this.photoImage.stopAnimation();
                                                this.radialProgress.setIcon(getIconForCurrentState(), false, true);
                                                invalidate();
                                                playSoundEffect(0);
                                            } else {
                                                this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY, false);
                                            }
                                        } else if (i11 == 2 || i11 == 0) {
                                            didPressButton(true, false);
                                            playSoundEffect(0);
                                        }
                                    } else {
                                        MessageObject messageObject3 = this.currentMessageObject;
                                        if (!messageObject3.preview) {
                                            TLRPC.WebPage webPage2 = MessageObject.getMedia(messageObject3.messageOwner).webpage;
                                            if (webPage2 == null || TextUtils.isEmpty(webPage2.embed_url)) {
                                                int i12 = this.buttonState;
                                                if (i12 == -1 || i12 == 3) {
                                                    this.delegate.didPressImage(this, this.lastTouchX, this.lastTouchY, false);
                                                    playSoundEffect(0);
                                                } else if (webPage2 != null) {
                                                    ChatMessageCellDelegate chatMessageCellDelegate5 = this.delegate;
                                                    if (chatMessageCellDelegate5 != null) {
                                                        chatMessageCellDelegate5.didPressWebPage(this, webPage2, webPage2.url, MessageObject.getMedia(this.currentMessageObject.messageOwner).safe);
                                                    } else {
                                                        Browser.openUrl(getContext(), webPage2.url);
                                                    }
                                                }
                                            } else {
                                                this.delegate.needOpenWebView(this.currentMessageObject, webPage2.embed_url, webPage2.site_name, webPage2.title, webPage2.url, webPage2.embed_width, webPage2.embed_height);
                                            }
                                        }
                                    }
                                    resetPressedLink(2);
                                    return true;
                                }
                                this.pressedEmoji = null;
                            } else if (linkSpanDrawable3.getSpan() instanceof URLSpan) {
                                this.delegate.didPressUrl(this, this.pressedLink.getSpan(), false);
                            } else if (this.pressedLink.getSpan() instanceof ClickableSpan) {
                                ((ClickableSpan) this.pressedLink.getSpan()).onClick(this);
                            }
                        }
                        resetPressedLink(2);
                    }
                    invalidate();
                } else if (motionEvent.getAction() == 2 && this.instantButtonPressed && Build.VERSION.SDK_INT >= 21) {
                    Drawable drawable7 = this.selectorDrawable[0];
                    if (drawable7 != null) {
                        drawable7.setHotspot(x, y);
                    }
                    Drawable drawable8 = this.linkPreviewSelector;
                    if (drawable8 != null) {
                        drawable8.setHotspot(x, y);
                    }
                }
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkLocationExpired() {
        boolean isCurrentLocationTimeExpired;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || (isCurrentLocationTimeExpired = isCurrentLocationTimeExpired(messageObject)) == this.locationExpired) {
            return;
        }
        this.locationExpired = isCurrentLocationTimeExpired;
        if (isCurrentLocationTimeExpired) {
            MessageObject messageObject2 = this.currentMessageObject;
            this.currentMessageObject = null;
            setMessageObject(messageObject2, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
        } else {
            AndroidUtilities.runOnUIThread(this.invalidateRunnable, 1000L);
            this.scheduledInvalidate = true;
            int dp = this.backgroundWidth - AndroidUtilities.dp(91.0f);
            this.docTitleLayout = new StaticLayout(TextUtils.ellipsize(LocaleController.getString(R.string.AttachLiveLocation), Theme.chat_locationTitlePaint, dp, TextUtils.TruncateAt.END), Theme.chat_locationTitlePaint, dp, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        }
    }

    private boolean checkNameMotionEvent(MotionEvent motionEvent) {
        Drawable drawable;
        ChatMessageCellDelegate chatMessageCellDelegate;
        TLRPC.Chat chat;
        int i;
        if (!this.drawNameLayout || this.nameLayout == null || (drawable = this.nameLayoutSelector) == null || (this.currentUser == null && this.currentChat == null)) {
            this.nameLayoutPressed = false;
            return false;
        }
        boolean contains = drawable.getBounds().contains((int) motionEvent.getX(), (int) motionEvent.getY());
        if (motionEvent.getAction() == 0) {
            this.nameLayoutPressed = contains;
            if (contains) {
                if (Build.VERSION.SDK_INT >= 21) {
                    this.nameLayoutSelector.setHotspot((int) motionEvent.getX(), (int) motionEvent.getY());
                }
                this.nameLayoutSelector.setState(this.pressedState);
            }
        } else if (motionEvent.getAction() == 1 || motionEvent.getAction() == 3) {
            if (motionEvent.getAction() == 1 && this.nameLayoutPressed && (chatMessageCellDelegate = this.delegate) != null) {
                if (this.viaOnly) {
                    TLRPC.User user = this.currentViaBotUser;
                    if (user == null || user.bot_inline_placeholder != null) {
                        chatMessageCellDelegate.didPressViaBot(this, user != null ? user.username : this.currentMessageObject.messageOwner.via_bot_name);
                    } else {
                        chatMessageCellDelegate.didPressViaBotNotInline(this, user.id);
                    }
                } else {
                    TLRPC.User user2 = this.currentUser;
                    if (user2 != null) {
                        chatMessageCellDelegate.didPressUserAvatar(this, user2, motionEvent.getX(), motionEvent.getY(), false);
                    } else {
                        TLRPC.Chat chat2 = this.currentChat;
                        if (chat2 != null) {
                            TLRPC.MessageFwdHeader messageFwdHeader = this.currentMessageObject.messageOwner.fwd_from;
                            if (messageFwdHeader != null) {
                                int i2 = messageFwdHeader.channel_post;
                                chat = this.currentForwardChannel;
                                i = i2;
                            } else {
                                chat = chat2;
                                i = 0;
                            }
                            chatMessageCellDelegate.didPressChannelAvatar(this, chat != null ? chat : chat2, i, this.lastTouchX, this.lastTouchY, false);
                        }
                    }
                }
            }
            this.nameLayoutSelector.setState(StateSet.NOTHING);
            this.nameLayoutPressed = false;
        }
        return this.nameLayoutPressed;
    }

    private boolean checkNameStatusMotionEvent(MotionEvent motionEvent) {
        if (!this.drawNameLayout || this.nameLayout == null || this.nameLayoutSelector == null || ((this.currentUser == null && this.currentChat == null) || this.currentNameStatus == null || this.currentNameStatusDrawable == null)) {
            this.nameStatusPressed = false;
            return false;
        }
        boolean contains = this.nameStatusSelector.getBounds().contains((int) motionEvent.getX(), (int) motionEvent.getY());
        if (motionEvent.getAction() == 0) {
            this.nameStatusPressed = contains;
            if (contains) {
                if (Build.VERSION.SDK_INT >= 21) {
                    this.nameStatusSelector.setHotspot((int) motionEvent.getX(), (int) motionEvent.getY());
                }
                this.nameStatusSelector.setState(this.pressedState);
            }
        } else if (motionEvent.getAction() == 1 || motionEvent.getAction() == 3) {
            if (motionEvent.getAction() == 1 && this.nameStatusPressed && this.delegate != null && this.currentUser != null) {
                this.delegate.didPressUserStatus(this, this.currentUser, this.currentNameStatusDrawable.getDrawable() instanceof AnimatedEmojiDrawable ? ((AnimatedEmojiDrawable) this.currentNameStatusDrawable.getDrawable()).getDocument() : null, this.nameStatusSlug);
                invalidateOutbounds();
            }
            this.nameStatusSelector.setState(StateSet.NOTHING);
            this.nameStatusPressed = false;
        }
        return this.nameStatusPressed;
    }

    private boolean checkOtherButtonMotionEvent(MotionEvent motionEvent) {
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        Drawable drawable;
        Drawable drawable2;
        int i = this.documentAttachType;
        if ((i == 5 || i == 1) && (groupedMessagePosition = this.currentPosition) != null && (groupedMessagePosition.flags & 4) == 0) {
            return false;
        }
        int i2 = this.currentMessageObject.type;
        boolean z = i2 == 16;
        if (!z) {
            z = ((i != 1 && i2 != 12 && i != 5 && i != 4 && i != 2 && i2 != 8) || this.hasGamePreview || this.hasInvoicePreview) ? false : true;
        }
        if (!z) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() != 0) {
            if (motionEvent.getAction() == 1) {
                if (this.otherPressed) {
                    if (this.currentMessageObject.type == 16 && Build.VERSION.SDK_INT >= 21 && (drawable2 = this.selectorDrawable[0]) != null) {
                        drawable2.setState(StateSet.NOTHING);
                    }
                    this.otherPressed = false;
                    playSoundEffect(0);
                    this.delegate.didPressOther(this, this.otherX, this.otherY);
                    invalidate();
                    return true;
                }
            } else if (motionEvent.getAction() == 2 && this.currentMessageObject.type == 16 && this.otherPressed && Build.VERSION.SDK_INT >= 21 && (drawable = this.selectorDrawable[0]) != null) {
                drawable.setHotspot(x, y);
            }
            return false;
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.type != 16) {
            if (x >= this.otherX - AndroidUtilities.dp(20.0f) && x <= this.otherX + AndroidUtilities.dp(20.0f) && y >= this.otherY - AndroidUtilities.dp(4.0f) && y <= this.otherY + AndroidUtilities.dp(30.0f)) {
                this.otherPressed = true;
                invalidate();
                return true;
            }
            return false;
        }
        boolean isVideoCall = messageObject.isVideoCall();
        int i3 = this.otherX;
        if (x >= i3) {
            boolean z2 = LocaleController.isRTL;
            int i4 = NotificationCenter.storyQualityUpdate;
            if (x <= i3 + AndroidUtilities.dp((z2 ? 0 : NotificationCenter.storyQualityUpdate) + 30 + (!isVideoCall ? 2 : 0)) && y >= this.otherY - AndroidUtilities.dp(14.0f) && y <= this.otherY + AndroidUtilities.dp(50.0f)) {
                this.otherPressed = true;
                this.selectorDrawableMaskType[0] = 4;
                if (Build.VERSION.SDK_INT >= 21 && this.selectorDrawable[0] != null) {
                    int i5 = this.otherX;
                    if (LocaleController.isRTL) {
                        i4 = 0;
                    }
                    int dp = i5 + AndroidUtilities.dp(i4 + (!isVideoCall ? 2 : 0)) + (Theme.chat_msgInCallDrawable[isVideoCall ? 1 : 0].getIntrinsicWidth() / 2);
                    int intrinsicHeight = this.otherY + (Theme.chat_msgInCallDrawable[isVideoCall ? 1 : 0].getIntrinsicHeight() / 2);
                    this.selectorDrawable[0].setBounds(dp - AndroidUtilities.dp(20.0f), intrinsicHeight - AndroidUtilities.dp(20.0f), dp + AndroidUtilities.dp(20.0f), intrinsicHeight + AndroidUtilities.dp(20.0f));
                    this.selectorDrawable[0].setHotspot(x, y);
                    this.selectorDrawable[0].setState(this.pressedState);
                }
                invalidate();
                return true;
            }
        }
        return false;
    }

    /* JADX WARN: Code restructure failed: missing block: B:136:0x021e, code lost:
    
        if (r8.drawVideoImageButton != false) goto L137;
     */
    /* JADX WARN: Removed duplicated region for block: B:117:0x01a6  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkPhotoImageMotionEvent(MotionEvent motionEvent) {
        MessageObject messageObject;
        int i;
        int i2;
        int i3;
        int i4;
        int dp;
        int dp2;
        int i5;
        boolean z = true;
        if ((!this.drawPhotoImage && this.documentAttachType != 1) || (this.currentMessageObject.isSending() && this.buttonState != 1)) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() != 0) {
            if (motionEvent.getAction() != 1) {
                return false;
            }
            if (this.videoButtonPressed == 1) {
                this.videoButtonPressed = 0;
                playSoundEffect(0);
                didPressButton(true, true);
            } else if (this.buttonPressed == 1) {
                this.buttonPressed = 0;
                playSoundEffect(0);
            } else if (this.miniButtonPressed == 1) {
                this.miniButtonPressed = 0;
                playSoundEffect(0);
                didPressMiniButton(true);
            } else {
                if (!this.imagePressed) {
                    return false;
                }
                this.imagePressed = false;
                int i6 = this.buttonState;
                if (i6 == -1 || ((i6 == 1 && this.isRoundVideo) || i6 == 2 || i6 == 3 || this.drawVideoImageButton)) {
                    playSoundEffect(0);
                    didClickedImage();
                } else if (i6 == 0) {
                    playSoundEffect(0);
                    didPressButton(true, false);
                }
            }
            invalidate();
            return false;
        }
        int dp3 = AndroidUtilities.dp(48.0f);
        boolean z2 = this.miniButtonState >= 0 && x >= (dp2 = this.buttonX + (dp = AndroidUtilities.dp(27.0f))) && x <= dp2 + dp3 && y >= (i5 = this.buttonY + dp) && y <= i5 + dp3;
        MessageObject messageObject2 = this.currentMessageObject;
        boolean z3 = messageObject2 == null || !messageObject2.hasMediaSpoilers() || this.currentMessageObject.isMediaSpoilersRevealed || this.buttonState == 1;
        if (z2) {
            this.miniButtonPressed = 1;
        } else if (this.buttonState != -1 && this.radialProgress.getIcon() != 4 && x >= (i3 = this.buttonX) && x <= i3 + dp3 && y >= (i4 = this.buttonY) && y <= i4 + dp3 && z3) {
            this.buttonPressed = 1;
        } else {
            if (!this.drawVideoImageButton || this.buttonState == -1 || x < (i = this.videoButtonX) || x > i + AndroidUtilities.dp(34.0f) + Math.max(this.infoWidth, this.docTitleWidth) || y < (i2 = this.videoButtonY) || y > i2 + AndroidUtilities.dp(30.0f) || !z3) {
                if (this.documentAttachType == 1) {
                    float f = x;
                    if (f >= this.photoImage.getImageX() && f <= (this.photoImage.getImageX() + this.backgroundWidth) - AndroidUtilities.dp(50.0f)) {
                        float f2 = y;
                        if (f2 >= this.photoImage.getImageY() && f2 <= this.photoImage.getImageY() + this.photoImage.getImageHeight()) {
                            this.imagePressed = true;
                        }
                    }
                    z = false;
                } else {
                    if (!this.currentMessageObject.isAnyKindOfSticker() || this.currentMessageObject.getInputStickerSet() != null || this.currentMessageObject.isAnimatedEmoji() || this.currentMessageObject.isDice()) {
                        float f3 = x;
                        if (f3 >= this.photoImage.getImageX() && f3 <= this.photoImage.getImageX() + this.photoImage.getImageWidth()) {
                            float f4 = y;
                            if (f4 >= this.photoImage.getImageY() && f4 <= this.photoImage.getImageY() + this.photoImage.getImageHeight() && (!this.isRoundVideo || ((f3 - this.photoImage.getCenterX()) * (f3 - this.photoImage.getCenterX())) + ((f4 - this.photoImage.getCenterY()) * (f4 - this.photoImage.getCenterY())) < (this.photoImage.getImageWidth() / 2.0f) * (this.photoImage.getImageWidth() / 2.0f))) {
                                this.imagePressed = true;
                                messageObject = this.currentMessageObject;
                                if (messageObject.type == 12) {
                                    long j = MessageObject.getMedia(messageObject.messageOwner).user_id;
                                    if ((j != 0 ? MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j)) : null) == null) {
                                        this.imagePressed = false;
                                    }
                                }
                            }
                        }
                        z = false;
                        messageObject = this.currentMessageObject;
                        if (messageObject.type == 12) {
                        }
                    }
                    z = false;
                }
                if (this.imagePressed || !(this.currentMessageObject.isSendError() || (this.currentMessageObject.type == 8 && this.buttonState == -1 && SharedConfig.isAutoplayGifs() && !this.currentMessageObject.isRepostPreview && this.photoImage.getAnimation() == null))) {
                    return z;
                }
                this.imagePressed = false;
                return false;
            }
            this.videoButtonPressed = 1;
        }
        invalidate();
        if (this.imagePressed) {
        }
        return z;
    }

    private boolean checkPinchToZoom(MotionEvent motionEvent) {
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        PinchToZoomHelper pinchToZoomHelper = chatMessageCellDelegate == null ? null : chatMessageCellDelegate.getPinchToZoomHelper();
        if (this.currentMessageObject == null || !this.photoImage.hasNotThumb() || pinchToZoomHelper == null || this.currentMessageObject.isSticker() || this.currentMessageObject.isAnimatedEmoji() || ((this.currentMessageObject.isVideo() && !this.autoPlayingMedia) || this.isRoundVideo || this.currentMessageObject.isAnimatedSticker() || ((this.currentMessageObject.isDocument() && !this.currentMessageObject.isGif()) || this.currentMessageObject.needDrawBluredPreview()))) {
            return false;
        }
        ImageReceiver imageReceiver = this.photoImage;
        MessageObject messageObject = this.currentMessageObject;
        SpoilerEffect2 spoilerEffect2 = this.mediaSpoilerEffect2;
        return pinchToZoomHelper.checkPinchToZoom(motionEvent, this, imageReceiver, null, null, messageObject, spoilerEffect2 == null ? 0 : spoilerEffect2.getAttachIndex(this));
    }

    private boolean checkPollButtonMotionEvent(MotionEvent motionEvent) {
        Drawable drawable;
        ArrayList arrayList;
        int i;
        int dp;
        int i2;
        ChatMessageCellDelegate chatMessageCellDelegate;
        Drawable drawable2;
        Drawable drawable3;
        Drawable drawable4;
        int i3;
        int i4;
        Drawable drawable5;
        if (this.currentMessageObject.eventId != 0 || this.pollVoteInProgress || this.pollUnvoteInProgress || this.pollButtons.isEmpty()) {
            return false;
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.type != 17 || !messageObject.isSent()) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            this.pressedVoteButton = -1;
            this.pollHintPressed = false;
            if (!this.hintButtonVisible || (i3 = this.pollHintX) == -1 || x < i3 || x > i3 + AndroidUtilities.dp(40.0f) || y < (i4 = this.pollHintY) || y > i4 + AndroidUtilities.dp(40.0f)) {
                for (int i5 = 0; i5 < this.pollButtons.size(); i5++) {
                    PollButton pollButton = (PollButton) this.pollButtons.get(i5);
                    int dp2 = (pollButton.y + this.namesOffset) - AndroidUtilities.dp(13.0f);
                    int i6 = pollButton.x;
                    if (x >= i6 && x <= (i6 + this.backgroundWidth) - AndroidUtilities.dp(31.0f) && y >= dp2 && y <= pollButton.height + dp2 + AndroidUtilities.dp(26.0f)) {
                        this.pressedVoteButton = i5;
                        if (!this.pollVoted && !this.pollClosed) {
                            this.selectorDrawableMaskType[0] = 1;
                            if (Build.VERSION.SDK_INT >= 21 && (drawable4 = this.selectorDrawable[0]) != null) {
                                drawable4.setBounds(pollButton.x - AndroidUtilities.dp(9.0f), dp2, (pollButton.x + this.backgroundWidth) - AndroidUtilities.dp(22.0f), pollButton.height + dp2 + AndroidUtilities.dp(26.0f));
                                this.selectorDrawable[0].setHotspot(x, y);
                                this.selectorDrawable[0].setState(this.pressedState);
                            }
                        }
                        return true;
                    }
                }
                return false;
            }
            this.pollHintPressed = true;
            this.selectorDrawableMaskType[0] = 3;
            if (Build.VERSION.SDK_INT >= 21 && (drawable5 = this.selectorDrawable[0]) != null) {
                drawable5.setBounds(this.pollHintX - AndroidUtilities.dp(8.0f), this.pollHintY - AndroidUtilities.dp(8.0f), this.pollHintX + AndroidUtilities.dp(32.0f), this.pollHintY + AndroidUtilities.dp(32.0f));
                this.selectorDrawable[0].setHotspot(x, y);
                this.selectorDrawable[0].setState(this.pressedState);
            }
            invalidate();
            return true;
        }
        if (motionEvent.getAction() != 1) {
            if (motionEvent.getAction() != 2) {
                return false;
            }
            if ((this.pressedVoteButton == -1 && !this.pollHintPressed) || Build.VERSION.SDK_INT < 21 || (drawable = this.selectorDrawable[0]) == null) {
                return false;
            }
            drawable.setHotspot(x, y);
            return false;
        }
        if (this.pollHintPressed) {
            playSoundEffect(0);
            this.delegate.didPressHint(this, 0);
            this.pollHintPressed = false;
            if (Build.VERSION.SDK_INT < 21 || (drawable3 = this.selectorDrawable[0]) == null) {
                return false;
            }
            drawable3.setState(StateSet.NOTHING);
            return false;
        }
        if (this.pressedVoteButton == -1) {
            return false;
        }
        playSoundEffect(0);
        if (Build.VERSION.SDK_INT >= 21 && (drawable2 = this.selectorDrawable[0]) != null) {
            drawable2.setState(StateSet.NOTHING);
        }
        if (this.currentMessageObject.scheduled) {
            Toast.makeText(getContext(), LocaleController.getString(R.string.MessageScheduledVote), 1).show();
        } else {
            PollButton pollButton2 = (PollButton) this.pollButtons.get(this.pressedVoteButton);
            TLRPC.PollAnswer pollAnswer = pollButton2.answer;
            if (this.pollVoted || this.pollClosed) {
                arrayList = new ArrayList();
                arrayList.add(pollAnswer);
                ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                i = pollButton2.count;
                dp = pollButton2.x + AndroidUtilities.dp(50.0f);
                i2 = this.namesOffset + pollButton2.y;
                chatMessageCellDelegate = chatMessageCellDelegate2;
            } else if (!this.lastPoll.multiple_choice) {
                this.pollVoteInProgressNum = this.pressedVoteButton;
                this.pollVoteInProgress = true;
                this.vibrateOnPollVote = true;
                this.voteCurrentProgressTime = 0.0f;
                this.firstCircleLength = true;
                this.voteCurrentCircleLength = 360.0f;
                this.voteRisingCircleLength = false;
                arrayList = new ArrayList();
                arrayList.add(pollAnswer);
                chatMessageCellDelegate = this.delegate;
                dp = 0;
                i2 = 0;
                i = -1;
            } else if (this.currentMessageObject.checkedVotes.contains(pollAnswer)) {
                this.currentMessageObject.checkedVotes.remove(pollAnswer);
                this.pollCheckBox[this.pressedVoteButton].setChecked(false, true);
            } else {
                this.currentMessageObject.checkedVotes.add(pollAnswer);
                this.pollCheckBox[this.pressedVoteButton].setChecked(true, true);
            }
            chatMessageCellDelegate.didPressVoteButtons(this, arrayList, i, dp, i2);
        }
        this.pressedVoteButton = -1;
        invalidate();
        return false;
    }

    private boolean checkReactionsTouchEvent(MotionEvent motionEvent) {
        MessageObject.GroupedMessages groupedMessages;
        if (this.currentMessageObject.hasValidGroupId() && (groupedMessages = this.currentMessagesGroup) != null && !groupedMessages.isDocuments) {
            ViewGroup viewGroup = (ViewGroup) getParent();
            if (viewGroup == null) {
                return false;
            }
            for (int i = 0; i < viewGroup.getChildCount(); i++) {
                View childAt = viewGroup.getChildAt(i);
                if (childAt instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                    MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                    if (currentMessagesGroup != null && currentMessagesGroup.groupId == this.currentMessagesGroup.groupId) {
                        int i2 = currentPosition.flags;
                        if ((i2 & 8) != 0 && (i2 & 1) != 0) {
                            if (chatMessageCell != this) {
                                motionEvent.offsetLocation(getLeft() - chatMessageCell.getLeft(), getTop() - chatMessageCell.getTop());
                                boolean checkTouchEvent = chatMessageCell.reactionsLayoutInBubble.checkTouchEvent(motionEvent);
                                motionEvent.offsetLocation(-(getLeft() - chatMessageCell.getLeft()), -(getTop() - chatMessageCell.getTop()));
                                return checkTouchEvent;
                            }
                        }
                    }
                }
            }
            return false;
        }
        return this.reactionsLayoutInBubble.checkTouchEvent(motionEvent);
    }

    /* JADX WARN: Code restructure failed: missing block: B:106:0x01c5, code lost:
    
        if (r15 != null) goto L108;
     */
    /* JADX WARN: Code restructure failed: missing block: B:83:0x015f, code lost:
    
        if (r15 != null) goto L108;
     */
    /* JADX WARN: Code restructure failed: missing block: B:84:0x01c7, code lost:
    
        r15.setPressed(false);
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkReplyTouchEvent(MotionEvent motionEvent) {
        ChatMessageCellDelegate chatMessageCellDelegate;
        int i;
        int i2;
        ButtonBounce buttonBounce;
        TLRPC.Message message;
        TLRPC.MessageReplyHeader messageReplyHeader;
        if (this.replyNameLayout == null || (chatMessageCellDelegate = this.delegate) == null || !chatMessageCellDelegate.canPerformReply()) {
            return false;
        }
        float x = motionEvent.getX();
        float y = motionEvent.getY();
        if (this.currentMessageObject.shouldDrawWithoutBackground()) {
            i = this.replyStartX;
            i2 = Math.max(this.replyNameWidth, this.replyTextWidth);
        } else {
            i = this.replyStartX;
            i2 = this.backgroundDrawableRight;
        }
        int i3 = i + i2;
        if (motionEvent.getAction() == 0) {
            if (x >= this.replyStartX && x <= i3) {
                float f = this.replyStartY;
                if (y >= f && y <= f + this.replyHeight) {
                    this.replyPressed = true;
                    getParent().requestDisallowInterceptTouchEvent(false);
                    this.replyTouchX = x;
                    this.replyTouchY = getY() + y;
                    Drawable drawable = this.replySelector;
                    if (drawable != null) {
                        if (Build.VERSION.SDK_INT >= 21) {
                            drawable.setHotspot(x, y);
                        }
                        this.replySelectorPressed = false;
                        this.replySelectorCanBePressed = true;
                        postDelayed(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda11
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatMessageCell.this.lambda$checkReplyTouchEvent$5();
                            }
                        }, ViewConfiguration.getTapTimeout() / 6);
                        invalidate();
                    }
                    ButtonBounce buttonBounce2 = this.replyBounce;
                    if (buttonBounce2 != null) {
                        buttonBounce2.setPressed(true);
                        this.replyBounceX = x;
                        this.replyBounceY = y;
                    }
                    startCheckLongPress();
                    return true;
                }
            }
        } else if (motionEvent.getAction() == 1) {
            if (this.replyPressed) {
                cancelCheckLongPress();
                this.replyPressed = false;
                Drawable drawable2 = this.replySelector;
                if (drawable2 != null) {
                    if (this.replySelectorPressed) {
                        drawable2.setState(new int[0]);
                    } else {
                        drawable2.setState(new int[]{android.R.attr.state_pressed, android.R.attr.state_enabled});
                        post(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda12
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatMessageCell.this.lambda$checkReplyTouchEvent$6();
                            }
                        });
                    }
                    this.replySelectorPressed = false;
                    this.replySelectorCanBePressed = false;
                    invalidate();
                }
                ButtonBounce buttonBounce3 = this.replyBounce;
                if (buttonBounce3 != null) {
                    buttonBounce3.setPressed(false);
                }
                playSoundEffect(0);
                if (this.replyPanelIsForward) {
                    ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                    if (chatMessageCellDelegate2 != null) {
                        TLRPC.Chat chat = this.currentForwardChannel;
                        if (chat != null) {
                            chatMessageCellDelegate2.didPressChannelAvatar(this, chat, this.currentMessageObject.messageOwner.fwd_from.channel_post, this.lastTouchX, this.lastTouchY, false);
                        } else {
                            TLRPC.User user = this.currentForwardUser;
                            if (user != null) {
                                chatMessageCellDelegate2.didPressUserAvatar(this, user, this.lastTouchX, this.lastTouchY, false);
                            } else if (this.currentForwardName != null) {
                                chatMessageCellDelegate2.didPressHiddenForward(this);
                            }
                        }
                    }
                } else if (this.delegate != null && (this.currentMessageObject.hasValidReplyMessageObject() || this.currentMessageObject.isReplyToStory() || this.hasReplyQuote || ((message = this.currentMessageObject.messageOwner) != null && (messageReplyHeader = message.reply_to) != null && messageReplyHeader.reply_from != null))) {
                    this.delegate.didPressReplyMessage(this, this.currentMessageObject.getReplyMsgId(), x, y, false);
                }
            }
        } else if (motionEvent.getAction() == 3) {
            this.replyPressed = false;
            this.replySelectorPressed = false;
            Drawable drawable3 = this.replySelector;
            if (drawable3 != null) {
                drawable3.setState(new int[0]);
            }
            invalidate();
            buttonBounce = this.replyBounce;
        } else if (motionEvent.getAction() == 2) {
            if (x >= this.replyStartX && x <= i3) {
                float f2 = this.replyStartY;
                if (y >= f2 && y <= f2 + this.replyHeight) {
                    if (this.replySelector != null && this.replySelectorCanBePressed && Math.sqrt(Math.pow(x - this.replyTouchX, 2.0d) + Math.pow((y + getY()) - this.replyTouchY, 2.0d)) > 0.75d) {
                        this.replySelectorCanBePressed = false;
                    }
                }
            }
            this.replyPressed = false;
            this.replySelectorPressed = false;
            this.replySelectorCanBePressed = false;
            Drawable drawable4 = this.replySelector;
            if (drawable4 != null) {
                drawable4.setState(new int[0]);
            }
            invalidate();
            buttonBounce = this.replyBounce;
        }
        return this.replyPressed;
    }

    /* JADX WARN: Code restructure failed: missing block: B:14:0x0064, code lost:
    
        if (r10 <= (r17.seekbarRoundY + org.telegram.messenger.AndroidUtilities.dp(20.0f))) goto L22;
     */
    /* JADX WARN: Code restructure failed: missing block: B:15:0x00a6, code lost:
    
        getParent().requestDisallowInterceptTouchEvent(true);
        cancelCheckLongPress();
        r17.roundSeekbarTouched = 1;
        invalidate();
     */
    /* JADX WARN: Code restructure failed: missing block: B:37:0x00a4, code lost:
    
        if (r4 > (r11 * r11)) goto L22;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkRoundSeekbar(MotionEvent motionEvent) {
        if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || !MediaController.getInstance().isMessagePaused()) {
            return false;
        }
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            float f = x;
            if (f >= this.seekbarRoundX - AndroidUtilities.dp(20.0f) && f <= this.seekbarRoundX + AndroidUtilities.dp(20.0f)) {
                float f2 = y;
                if (f2 >= this.seekbarRoundY - AndroidUtilities.dp(20.0f)) {
                }
            }
            float centerX = f - this.photoImage.getCenterX();
            float centerY = y - this.photoImage.getCenterY();
            float imageWidth = (this.photoImage.getImageWidth() - AndroidUtilities.dp(64.0f)) / 2.0f;
            float f3 = (centerX * centerX) + (centerY * centerY);
            if (f3 < ((this.photoImage.getImageWidth() / 2.0f) * this.photoImage.getImageWidth()) / 2.0f) {
            }
        } else if (this.roundSeekbarTouched == 1 && motionEvent.getAction() == 2) {
            float degrees = ((float) Math.toDegrees(Math.atan2(y - this.photoImage.getCenterY(), x - this.photoImage.getCenterX()))) + 90.0f;
            if (degrees < 0.0f) {
                degrees += 360.0f;
            }
            float f4 = degrees / 360.0f;
            if (Math.abs(this.currentMessageObject.audioProgress - f4) > 0.9f) {
                if (this.roundSeekbarOutAlpha == 0.0f) {
                    try {
                        performHapticFeedback(3);
                    } catch (Exception unused) {
                    }
                }
                this.roundSeekbarOutAlpha = 1.0f;
                this.roundSeekbarOutProgress = this.currentMessageObject.audioProgress;
            }
            long currentTimeMillis = System.currentTimeMillis();
            if (currentTimeMillis - this.lastSeekUpdateTime > 100) {
                MediaController.getInstance().seekToProgress(this.currentMessageObject, f4);
                this.lastSeekUpdateTime = currentTimeMillis;
            }
            this.currentMessageObject.audioProgress = f4;
            updatePlayingMessageProgress();
        }
        if ((motionEvent.getAction() == 1 || motionEvent.getAction() == 3) && this.roundSeekbarTouched != 0) {
            if (motionEvent.getAction() == 1) {
                float degrees2 = ((float) Math.toDegrees(Math.atan2(y - this.photoImage.getCenterY(), x - this.photoImage.getCenterX()))) + 90.0f;
                if (degrees2 < 0.0f) {
                    degrees2 += 360.0f;
                }
                float f5 = degrees2 / 360.0f;
                this.currentMessageObject.audioProgress = f5;
                MediaController.getInstance().seekToProgress(this.currentMessageObject, f5);
                updatePlayingMessageProgress();
            }
            MediaController.getInstance().playMessage(this.currentMessageObject);
            this.roundSeekbarTouched = 0;
            getParent().requestDisallowInterceptTouchEvent(false);
        }
        return this.roundSeekbarTouched != 0;
    }

    /* JADX WARN: Code restructure failed: missing block: B:22:0x003d, code lost:
    
        if (r5 != null) goto L28;
     */
    /* JADX WARN: Code restructure failed: missing block: B:29:0x004b, code lost:
    
        r5.setPressed(false);
     */
    /* JADX WARN: Code restructure failed: missing block: B:33:0x0049, code lost:
    
        if (r5 != null) goto L28;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkSponsoredCloseMotionEvent(MotionEvent motionEvent) {
        ButtonBounce buttonBounce;
        ChatMessageCellDelegate chatMessageCellDelegate;
        RectF rectF;
        if (motionEvent.getAction() == 0 && (rectF = this.closeSponsoredBounds) != null && this.closeSponsoredBounce != null && rectF.contains(motionEvent.getX(), motionEvent.getY())) {
            this.closeSponsoredBounce.setPressed(true);
            return true;
        }
        if (motionEvent.getAction() == 1) {
            ButtonBounce buttonBounce2 = this.closeSponsoredBounce;
            if (buttonBounce2 != null && buttonBounce2.isPressed() && (chatMessageCellDelegate = this.delegate) != null) {
                chatMessageCellDelegate.didPressSponsoredClose(this);
            }
            buttonBounce = this.closeSponsoredBounce;
        } else if (motionEvent.getAction() == 3) {
            buttonBounce = this.closeSponsoredBounce;
        }
        ButtonBounce buttonBounce3 = this.closeSponsoredBounce;
        return buttonBounce3 != null && buttonBounce3.isPressed();
    }

    /* JADX WARN: Removed duplicated region for block: B:189:0x0182 A[Catch: Exception -> 0x00b9, TryCatch #1 {Exception -> 0x00b9, blocks: (B:144:0x009f, B:146:0x00b4, B:147:0x00bd, B:149:0x00d1, B:152:0x00d7, B:154:0x00dd, B:156:0x00ee, B:158:0x00f8, B:160:0x00fe, B:162:0x0102, B:164:0x0106, B:165:0x0109, B:167:0x010f, B:169:0x0117, B:170:0x011e, B:171:0x012b, B:173:0x0145, B:175:0x0150, B:178:0x0160, B:183:0x016f, B:187:0x017f, B:189:0x0182, B:191:0x0188, B:194:0x018e, B:196:0x0194, B:198:0x019a, B:200:0x01a0, B:205:0x033d, B:207:0x01aa, B:208:0x01b6, B:210:0x01ba, B:212:0x01c2, B:214:0x01e9, B:215:0x01ee, B:217:0x01f9, B:219:0x01fd, B:222:0x0210, B:224:0x0217, B:273:0x032e, B:276:0x0331, B:286:0x01ec, B:287:0x0341, B:289:0x0347, B:291:0x034b, B:293:0x0354, B:295:0x035a, B:296:0x0361, B:298:0x0365, B:300:0x036b, B:302:0x0175, B:303:0x0166), top: B:143:0x009f }] */
    /* JADX WARN: Removed duplicated region for block: B:198:0x019a A[Catch: Exception -> 0x00b9, TryCatch #1 {Exception -> 0x00b9, blocks: (B:144:0x009f, B:146:0x00b4, B:147:0x00bd, B:149:0x00d1, B:152:0x00d7, B:154:0x00dd, B:156:0x00ee, B:158:0x00f8, B:160:0x00fe, B:162:0x0102, B:164:0x0106, B:165:0x0109, B:167:0x010f, B:169:0x0117, B:170:0x011e, B:171:0x012b, B:173:0x0145, B:175:0x0150, B:178:0x0160, B:183:0x016f, B:187:0x017f, B:189:0x0182, B:191:0x0188, B:194:0x018e, B:196:0x0194, B:198:0x019a, B:200:0x01a0, B:205:0x033d, B:207:0x01aa, B:208:0x01b6, B:210:0x01ba, B:212:0x01c2, B:214:0x01e9, B:215:0x01ee, B:217:0x01f9, B:219:0x01fd, B:222:0x0210, B:224:0x0217, B:273:0x032e, B:276:0x0331, B:286:0x01ec, B:287:0x0341, B:289:0x0347, B:291:0x034b, B:293:0x0354, B:295:0x035a, B:296:0x0361, B:298:0x0365, B:300:0x036b, B:302:0x0175, B:303:0x0166), top: B:143:0x009f }] */
    /* JADX WARN: Removed duplicated region for block: B:287:0x0341 A[Catch: Exception -> 0x00b9, TryCatch #1 {Exception -> 0x00b9, blocks: (B:144:0x009f, B:146:0x00b4, B:147:0x00bd, B:149:0x00d1, B:152:0x00d7, B:154:0x00dd, B:156:0x00ee, B:158:0x00f8, B:160:0x00fe, B:162:0x0102, B:164:0x0106, B:165:0x0109, B:167:0x010f, B:169:0x0117, B:170:0x011e, B:171:0x012b, B:173:0x0145, B:175:0x0150, B:178:0x0160, B:183:0x016f, B:187:0x017f, B:189:0x0182, B:191:0x0188, B:194:0x018e, B:196:0x0194, B:198:0x019a, B:200:0x01a0, B:205:0x033d, B:207:0x01aa, B:208:0x01b6, B:210:0x01ba, B:212:0x01c2, B:214:0x01e9, B:215:0x01ee, B:217:0x01f9, B:219:0x01fd, B:222:0x0210, B:224:0x0217, B:273:0x032e, B:276:0x0331, B:286:0x01ec, B:287:0x0341, B:289:0x0347, B:291:0x034b, B:293:0x0354, B:295:0x035a, B:296:0x0361, B:298:0x0365, B:300:0x036b, B:302:0x0175, B:303:0x0166), top: B:143:0x009f }] */
    /* JADX WARN: Removed duplicated region for block: B:47:0x04e9 A[ORIG_RETURN, RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:48:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x03f2  */
    /* JADX WARN: Removed duplicated region for block: B:87:0x0458 A[EDGE_INSN: B:87:0x0458->B:88:0x0458 BREAK  A[LOOP:1: B:61:0x03e8->B:83:0x0455], SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:90:0x045f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean checkTextBlockMotionEvent(MotionEvent motionEvent) {
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        int i;
        int i2;
        boolean z;
        boolean z2;
        AnimatedEmojiSpan animatedEmojiSpan;
        boolean z3;
        Object obj;
        Object[] spans;
        Object[] spans2;
        ReplyMessageLine replyMessageLine;
        ChatMessageCellDelegate chatMessageCellDelegate;
        int x;
        int y;
        int i3;
        int i4;
        MessageObject messageObject;
        int i5;
        MessageObject messageObject2 = this.currentMessageObject;
        int i6 = messageObject2.type;
        if ((i6 != 0 && i6 != 19 && i6 != 24) || (arrayList = messageObject2.textLayoutBlocks) == null || arrayList.isEmpty() || !(this.currentMessageObject.messageText instanceof Spannable)) {
            return false;
        }
        if (motionEvent.getAction() == 0 || (motionEvent.getAction() == 1 && (this.pressedLinkType == 1 || this.pressedCopyCode != null))) {
            int x2 = (int) motionEvent.getX();
            int y2 = (int) motionEvent.getY();
            int i7 = this.textX;
            if (x2 >= i7 && y2 >= (i2 = this.textY)) {
                MessageObject messageObject3 = this.currentMessageObject;
                if (x2 <= i7 + messageObject3.textWidth && y2 <= i2 + messageObject3.textHeight(this.transitionParams)) {
                    int i8 = y2 - this.textY;
                    int i9 = 0;
                    for (int i10 = 0; i10 < this.currentMessageObject.textLayoutBlocks.size() && this.currentMessageObject.textLayoutBlocks.get(i10).textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams) <= i8; i10++) {
                        i9 = i10;
                    }
                    try {
                        MessageObject.TextLayoutBlock textLayoutBlock = this.currentMessageObject.textLayoutBlocks.get(i9);
                        int i11 = (int) (x2 - (this.textX - (textLayoutBlock.isRtl() ? this.currentMessageObject.textXOffset : 0.0f)));
                        int textYOffset = (int) (i8 - textLayoutBlock.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams));
                        if (!textLayoutBlock.quote && textLayoutBlock.code && i11 > 0 && i11 <= this.currentMessageObject.textWidth && textYOffset >= ((textLayoutBlock.padTop + textLayoutBlock.height) + textLayoutBlock.padBottom) - AndroidUtilities.dp(38.0f) && textYOffset <= textLayoutBlock.padTop + textLayoutBlock.height + textLayoutBlock.padBottom) {
                            if (motionEvent.getAction() == 1) {
                                if (textLayoutBlock == this.pressedCopyCode && (chatMessageCellDelegate = this.delegate) != null) {
                                    chatMessageCellDelegate.didPressCodeCopy(this, textLayoutBlock);
                                }
                                resetCodeSelectors();
                                this.pressedCopyCode = null;
                            } else {
                                this.pressedCopyCode = textLayoutBlock;
                                if (Build.VERSION.SDK_INT >= 21) {
                                    textLayoutBlock.copySelector.setHotspot(i11, textYOffset);
                                }
                                textLayoutBlock.copySelector.setCallback(this);
                                textLayoutBlock.copySelector.setState(this.pressedState);
                            }
                            return true;
                        }
                        int lineForVertical = textLayoutBlock.textLayout.getLineForVertical(textYOffset);
                        float f = i11;
                        int offsetForHorizontal = textLayoutBlock.charactersOffset + textLayoutBlock.textLayout.getOffsetForHorizontal(lineForVertical, f);
                        float lineLeft = textLayoutBlock.textLayout.getLineLeft(lineForVertical);
                        if (lineLeft <= f && lineLeft + textLayoutBlock.textLayout.getLineWidth(lineForVertical) >= f) {
                            Spannable spannable = (Spannable) this.currentMessageObject.messageText;
                            CharacterStyle[] characterStyleArr = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, ClickableSpan.class);
                            if (characterStyleArr != null && characterStyleArr.length != 0) {
                                z = false;
                                if (characterStyleArr != null && characterStyleArr.length != 0) {
                                    z2 = z;
                                    if (characterStyleArr.length != 0 && ((!(characterStyleArr[0] instanceof URLSpanBotCommand) || URLSpanBotCommand.enabled) && !AndroidUtilities.isAccessibilityScreenReaderEnabled())) {
                                        if (motionEvent.getAction() != 0) {
                                            CharacterStyle characterStyle = characterStyleArr[0];
                                            if (characterStyle instanceof AnimatedEmojiSpan) {
                                                AnimatedEmojiSpan animatedEmojiSpan2 = this.pressedEmoji;
                                                if (animatedEmojiSpan2 != null) {
                                                    if (animatedEmojiSpan2 != characterStyle) {
                                                    }
                                                }
                                                resetPressedLink(1);
                                                this.pressedEmoji = (AnimatedEmojiSpan) characterStyleArr[0];
                                                this.pressedLinkType = 1;
                                            } else {
                                                LinkSpanDrawable linkSpanDrawable = this.pressedLink;
                                                if (linkSpanDrawable == null || linkSpanDrawable.getSpan() != characterStyleArr[0]) {
                                                    this.links.removeLink(this.pressedLink);
                                                    CharacterStyle characterStyle2 = characterStyleArr[0];
                                                    Object obj2 = URLSpanMono.class;
                                                    LinkSpanDrawable linkSpanDrawable2 = new LinkSpanDrawable(characterStyle2, this.resourcesProvider, f, textYOffset, spanSupportsLongPress(characterStyle2));
                                                    this.pressedLink = linkSpanDrawable2;
                                                    linkSpanDrawable2.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outLinkSelectBackground : Theme.key_chat_linkSelectBackground));
                                                    if (textLayoutBlock.quote && (replyMessageLine = this.quoteLine) != null) {
                                                        this.pressedLink.setColor(Theme.multAlpha(replyMessageLine.getColor(), Theme.isCurrentThemeDark() ? 0.13f : 0.1f));
                                                    }
                                                    this.linkBlockNum = i9;
                                                    this.pressedLinkType = 1;
                                                    try {
                                                        LinkPath obtainNewPath = this.pressedLink.obtainNewPath();
                                                        int[] realSpanStartAndEnd = getRealSpanStartAndEnd(spannable, this.pressedLink.getSpan());
                                                        int i12 = realSpanStartAndEnd[0];
                                                        int i13 = textLayoutBlock.charactersOffset;
                                                        int i14 = i12 - i13;
                                                        realSpanStartAndEnd[0] = i14;
                                                        realSpanStartAndEnd[1] = realSpanStartAndEnd[1] - i13;
                                                        obtainNewPath.setCurrentLayout(textLayoutBlock.textLayout, i14, 0.0f);
                                                        textLayoutBlock.textLayout.getSelectionPath(realSpanStartAndEnd[0], realSpanStartAndEnd[1], obtainNewPath);
                                                        if (realSpanStartAndEnd[1] >= textLayoutBlock.charactersEnd) {
                                                            int i15 = i9 + 1;
                                                            while (i15 < this.currentMessageObject.textLayoutBlocks.size()) {
                                                                MessageObject.TextLayoutBlock textLayoutBlock2 = this.currentMessageObject.textLayoutBlocks.get(i15);
                                                                if (z2) {
                                                                    int i16 = textLayoutBlock2.charactersOffset;
                                                                    obj = obj2;
                                                                    spans2 = spannable.getSpans(i16, i16, obj);
                                                                } else {
                                                                    obj = obj2;
                                                                    int i17 = textLayoutBlock2.charactersOffset;
                                                                    spans2 = spannable.getSpans(i17, i17, ClickableSpan.class);
                                                                }
                                                                CharacterStyle[] characterStyleArr2 = (CharacterStyle[]) spans2;
                                                                if (characterStyleArr2 == null || characterStyleArr2.length == 0 || characterStyleArr2[0] != this.pressedLink.getSpan()) {
                                                                    break;
                                                                }
                                                                LinkPath obtainNewPath2 = this.pressedLink.obtainNewPath();
                                                                obtainNewPath2.setCurrentLayout(textLayoutBlock2.textLayout, 0, textLayoutBlock2.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams) - textLayoutBlock.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams));
                                                                int i18 = (realSpanStartAndEnd[1] + textLayoutBlock.charactersOffset) - textLayoutBlock2.charactersOffset;
                                                                textLayoutBlock2.textLayout.getSelectionPath(0, i18, obtainNewPath2);
                                                                if (i18 < textLayoutBlock2.charactersEnd - 1) {
                                                                    break;
                                                                }
                                                                i15++;
                                                                obj2 = obj;
                                                            }
                                                        }
                                                        obj = obj2;
                                                        if (realSpanStartAndEnd[0] <= textLayoutBlock.charactersOffset) {
                                                            int i19 = 0;
                                                            for (int i20 = i9 - 1; i20 >= 0; i20--) {
                                                                MessageObject.TextLayoutBlock textLayoutBlock3 = this.currentMessageObject.textLayoutBlocks.get(i20);
                                                                if (z2) {
                                                                    try {
                                                                        int i21 = textLayoutBlock3.charactersEnd - 1;
                                                                        spans = spannable.getSpans(i21, i21, obj);
                                                                    } catch (Exception e) {
                                                                        e = e;
                                                                        FileLog.e(e);
                                                                        z3 = true;
                                                                        this.links.addLink(this.pressedLink, 1);
                                                                        invalidate();
                                                                        return z3;
                                                                    }
                                                                } else {
                                                                    int i22 = textLayoutBlock3.charactersEnd - 1;
                                                                    spans = spannable.getSpans(i22, i22, ClickableSpan.class);
                                                                }
                                                                CharacterStyle[] characterStyleArr3 = (CharacterStyle[]) spans;
                                                                if (characterStyleArr3 == null || characterStyleArr3.length == 0 || characterStyleArr3[0] != this.pressedLink.getSpan()) {
                                                                    break;
                                                                }
                                                                LinkPath obtainNewPath3 = this.pressedLink.obtainNewPath();
                                                                i19 -= textLayoutBlock3.height;
                                                                int i23 = realSpanStartAndEnd[0];
                                                                int i24 = textLayoutBlock.charactersOffset;
                                                                int i25 = textLayoutBlock3.charactersOffset;
                                                                int i26 = (i23 + i24) - i25;
                                                                int i27 = (realSpanStartAndEnd[1] + i24) - i25;
                                                                obtainNewPath3.setCurrentLayout(textLayoutBlock3.textLayout, i26, i19);
                                                                textLayoutBlock3.textLayout.getSelectionPath(i26, i27, obtainNewPath3);
                                                                if (i26 > textLayoutBlock3.charactersOffset) {
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    } catch (Exception e2) {
                                                        e = e2;
                                                    }
                                                    z3 = true;
                                                    this.links.addLink(this.pressedLink, 1);
                                                    invalidate();
                                                    return z3;
                                                }
                                            }
                                            z3 = true;
                                            invalidate();
                                            return z3;
                                        }
                                        CharacterStyle characterStyle3 = characterStyleArr[0];
                                        if ((characterStyle3 instanceof AnimatedEmojiSpan) && (animatedEmojiSpan = this.pressedEmoji) == characterStyle3) {
                                            if (this.delegate.didPressAnimatedEmoji(this, animatedEmojiSpan)) {
                                                resetPressedLink(1);
                                                this.pressedEmoji = null;
                                                return true;
                                            }
                                            resetPressedLink(1);
                                            this.pressedEmoji = null;
                                        } else {
                                            LinkSpanDrawable linkSpanDrawable3 = this.pressedLink;
                                            if (linkSpanDrawable3 != null && characterStyle3 == linkSpanDrawable3.getSpan()) {
                                                this.delegate.didPressUrl(this, this.pressedLink.getSpan(), false);
                                                resetPressedLink(1);
                                                return true;
                                            }
                                        }
                                    }
                                }
                                characterStyleArr = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, AnimatedEmojiSpan.class);
                                z2 = false;
                                if (characterStyleArr.length != 0) {
                                    if (motionEvent.getAction() != 0) {
                                    }
                                }
                            }
                            characterStyleArr = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, URLSpanMono.class);
                            z = true;
                            if (characterStyleArr != null) {
                                z2 = z;
                                if (characterStyleArr.length != 0) {
                                }
                            }
                            characterStyleArr = (CharacterStyle[]) spannable.getSpans(offsetForHorizontal, offsetForHorizontal, AnimatedEmojiSpan.class);
                            z2 = false;
                            if (characterStyleArr.length != 0) {
                            }
                        }
                    } catch (Exception e3) {
                        FileLog.e(e3);
                    }
                }
            }
            i = 1;
            resetPressedLink(1);
            if (motionEvent.getAction() != 0 || motionEvent.getAction() == i) {
                x = (int) motionEvent.getX();
                y = (int) motionEvent.getY();
                if (this.pressedLink == null && x >= (i3 = this.textX) && y >= (i4 = this.textY)) {
                    messageObject = this.currentMessageObject;
                    if (x <= i3 + messageObject.textWidth && y <= i4 + messageObject.textHeight(this.transitionParams)) {
                        int i28 = y - this.textY;
                        i5 = 0;
                        while (true) {
                            if (i5 < this.currentMessageObject.textLayoutBlocks.size()) {
                                break;
                            }
                            MessageObject.TextLayoutBlock textLayoutBlock4 = this.currentMessageObject.textLayoutBlocks.get(i5);
                            if (textLayoutBlock4.quoteCollapse && textLayoutBlock4.collapsedHeight < textLayoutBlock4.height) {
                                float f2 = i28;
                                if (f2 >= textLayoutBlock4.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams) && f2 < textLayoutBlock4.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams) + textLayoutBlock4.padTop + textLayoutBlock4.height(this.transitionParams) + textLayoutBlock4.padBottom) {
                                    this.pressedBlock = i5;
                                    ButtonBounce buttonBounce = textLayoutBlock4.collapsedBounce;
                                    if (buttonBounce == null || buttonBounce.getView() != this) {
                                        textLayoutBlock4.collapsedBounce = new ButtonBounce(this);
                                    }
                                    textLayoutBlock4.collapsedBounce.setPressed(motionEvent.getAction() == 0);
                                }
                            }
                            i5++;
                        }
                    }
                }
                if (motionEvent.getAction() == 1) {
                    if (this.pressedBlock != -1) {
                        for (int i29 = 0; i29 < this.currentMessageObject.textLayoutBlocks.size(); i29++) {
                            MessageObject.TextLayoutBlock textLayoutBlock5 = this.currentMessageObject.textLayoutBlocks.get(i29);
                            if (i29 == this.pressedBlock && !this.transitionParams.animateExpandedQuotes) {
                                MessageObject messageObject4 = textLayoutBlock5.messageObject;
                                if (messageObject4 == null) {
                                    messageObject4 = getPrimaryMessageObject();
                                    textLayoutBlock5.messageObject = messageObject4;
                                }
                                if (messageObject4 != null) {
                                    boolean z4 = !textLayoutBlock5.collapsed();
                                    HashSet<Integer> hashSet = messageObject4.expandedQuotes == null ? new HashSet<>() : new HashSet<>(messageObject4.expandedQuotes);
                                    messageObject4.expandedQuotes = hashSet;
                                    Integer valueOf = Integer.valueOf(textLayoutBlock5.index);
                                    if (z4) {
                                        hashSet.remove(valueOf);
                                    } else {
                                        hashSet.add(valueOf);
                                    }
                                    ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                                    if (chatMessageCellDelegate2 != null) {
                                        chatMessageCellDelegate2.forceUpdate(this, true);
                                    }
                                }
                            }
                        }
                    }
                    for (int i30 = 0; i30 < this.currentMessageObject.textLayoutBlocks.size(); i30++) {
                        ButtonBounce buttonBounce2 = this.currentMessageObject.textLayoutBlocks.get(i30).collapsedBounce;
                        if (buttonBounce2 != null) {
                            buttonBounce2.setPressed(false);
                        }
                    }
                    this.pressedBlock = -1;
                }
            } else if (motionEvent.getAction() == 3) {
                for (int i31 = 0; i31 < this.currentMessageObject.textLayoutBlocks.size(); i31++) {
                    ButtonBounce buttonBounce3 = this.currentMessageObject.textLayoutBlocks.get(i31).collapsedBounce;
                    if (buttonBounce3 != null) {
                        buttonBounce3.setPressed(false);
                    }
                }
                this.pressedBlock = -1;
            }
            return this.pressedBlock == -1;
        }
        if (motionEvent.getAction() == 1) {
            this.pressedCopyCode = null;
            resetCodeSelectors();
        }
        i = 1;
        if (motionEvent.getAction() != 0) {
        }
        x = (int) motionEvent.getX();
        y = (int) motionEvent.getY();
        if (this.pressedLink == null) {
            messageObject = this.currentMessageObject;
            if (x <= i3 + messageObject.textWidth) {
                int i282 = y - this.textY;
                i5 = 0;
                while (true) {
                    if (i5 < this.currentMessageObject.textLayoutBlocks.size()) {
                    }
                    i5++;
                }
            }
        }
        if (motionEvent.getAction() == 1) {
        }
        if (this.pressedBlock == -1) {
        }
    }

    private boolean checkTextSelection(MotionEvent motionEvent) {
        TextSelectionHelper.ChatListTextSelectionHelper textSelectionHelper;
        int i;
        int i2;
        int i3;
        int dp;
        MessageObject.GroupedMessages groupedMessages;
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        if (chatMessageCellDelegate == null || (textSelectionHelper = chatMessageCellDelegate.getTextSelectionHelper()) == null || textSelectionHelper.isMenuEmpty()) {
            return false;
        }
        ArrayList<MessageObject.TextLayoutBlock> arrayList = this.currentMessageObject.textLayoutBlocks;
        if ((arrayList == null || arrayList.isEmpty()) && !hasCaptionLayout()) {
            return false;
        }
        if ((!this.drawSelectionBackground && this.currentMessagesGroup == null) || (this.currentMessagesGroup != null && !this.delegate.hasSelectedMessages())) {
            return false;
        }
        if (this.currentMessageObject.hasValidGroupId() && (groupedMessages = this.currentMessagesGroup) != null && !groupedMessages.isDocuments) {
            ViewGroup viewGroup = (ViewGroup) getParent();
            if (viewGroup == null) {
                return false;
            }
            for (int i4 = 0; i4 < viewGroup.getChildCount(); i4++) {
                View childAt = viewGroup.getChildAt(i4);
                if (childAt instanceof ChatMessageCell) {
                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                    MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                    MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                    if (currentMessagesGroup != null && currentMessagesGroup.groupId == this.currentMessagesGroup.groupId && (currentPosition.flags & captionFlag()) != 0 && (currentPosition.flags & 1) != 0) {
                        textSelectionHelper.setMaybeTextCord((int) chatMessageCell.captionX, (int) chatMessageCell.captionY);
                        textSelectionHelper.setMessageObject(chatMessageCell);
                        if (chatMessageCell == this) {
                            return textSelectionHelper.onTouchEvent(motionEvent);
                        }
                        motionEvent.offsetLocation(getLeft() - chatMessageCell.getLeft(), getTop() - chatMessageCell.getTop());
                        boolean onTouchEvent = textSelectionHelper.onTouchEvent(motionEvent);
                        motionEvent.offsetLocation(-(getLeft() - chatMessageCell.getLeft()), -(getTop() - chatMessageCell.getTop()));
                        return onTouchEvent;
                    }
                }
            }
            return false;
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && !messageObject.preview && this.factCheckTextLayout != null && motionEvent.getY() >= this.factCheckY) {
            textSelectionHelper.setIsDescription(false);
            textSelectionHelper.setIsFactCheck(true);
            MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
            if (groupedMessages2 == null || groupedMessages2.isDocuments) {
                float f = 12.0f;
                if (this.currentMessageObject.isOutOwner()) {
                    int dp2 = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                    dp = this.currentMessageObject.type == 19 ? dp2 - Math.max(0, ((Math.max(this.replyNameWidth, this.replyTextWidth) + dp2) + AndroidUtilities.dp(14.0f)) - AndroidUtilities.displaySize.x) : dp2;
                } else {
                    if (this.mediaBackground) {
                        i3 = this.backgroundDrawableLeft;
                    } else {
                        i3 = this.backgroundDrawableLeft;
                        if (!this.drawPinnedBottom) {
                            f = 18.0f;
                        }
                    }
                    dp = i3 + AndroidUtilities.dp(f) + getExtraTextX();
                }
            } else {
                dp = (int) this.captionX;
            }
            int dp3 = ((int) (dp + this.transitionParams.deltaLeft)) - AndroidUtilities.dp(1.33f);
            int i5 = this.factCheckY;
            i = (dp3 + AndroidUtilities.dp(10.0f)) - this.factCheckTextLayoutLeft;
            i2 = i5 + AndroidUtilities.dp(22.0f);
        } else if (hasCaptionLayout()) {
            textSelectionHelper.setIsDescription(false);
            textSelectionHelper.setIsFactCheck(false);
            i = (int) this.captionX;
            i2 = (int) this.captionY;
        } else {
            MessageObject messageObject2 = this.currentMessageObject;
            if (messageObject2 == null || messageObject2.preview || this.descriptionLayout == null || (!this.linkPreviewAbove ? motionEvent.getY() <= this.descriptionY : motionEvent.getY() >= this.textY)) {
                textSelectionHelper.setIsDescription(false);
                textSelectionHelper.setIsFactCheck(false);
                i = this.textX;
                i2 = this.textY;
            } else {
                textSelectionHelper.setIsDescription(true);
                textSelectionHelper.setIsFactCheck(false);
                i = (this.hasGamePreview ? this.unmovedTextX - AndroidUtilities.dp(10.0f) : this.unmovedTextX + AndroidUtilities.dp(1.0f)) + AndroidUtilities.dp(10.0f) + this.descriptionX;
                i2 = this.descriptionY;
            }
        }
        textSelectionHelper.setMaybeTextCord(i, i2);
        textSelectionHelper.setMessageObject(this);
        return textSelectionHelper.onTouchEvent(motionEvent);
    }

    private boolean checkTitleLabelMotion(MotionEvent motionEvent) {
        if (this.currentMessageObject.isSponsored() && this.currentMessageObject.sponsoredCanReport) {
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            if (motionEvent.getAction() == 0) {
                float f = x;
                if (f >= this.titleLabelX - AndroidUtilities.dp(6.0f) && f <= this.titleLabelX + this.titleLabelLayoutWidth + AndroidUtilities.dp(6.0f)) {
                    float f2 = y;
                    if (f2 >= this.titleLabelY - AndroidUtilities.dp(2.0f) && f2 <= this.titleLabelY + this.titleLabelLayoutHeight + AndroidUtilities.dp(2.0f)) {
                        ButtonBounce buttonBounce = this.titleLabelBounce;
                        if (buttonBounce != null) {
                            buttonBounce.setPressed(true);
                        }
                        this.isTitleLabelPressed = true;
                        return true;
                    }
                }
            } else if (motionEvent.getAction() == 1 && this.isTitleLabelPressed) {
                ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                if (chatMessageCellDelegate != null) {
                    chatMessageCellDelegate.didPressAboutRevenueSharingAds();
                }
                ButtonBounce buttonBounce2 = this.titleLabelBounce;
                if (buttonBounce2 != null) {
                    buttonBounce2.setPressed(false);
                }
                playSoundEffect(0);
                this.isTitleLabelPressed = false;
            }
        }
        return false;
    }

    private boolean checkTranscribeButtonMotionEvent(MotionEvent motionEvent) {
        TranscribeButton transcribeButton;
        return this.useTranscribeButton && (!this.isPlayingRound || getVideoTranscriptionProgress() > 0.0f || this.wasTranscriptionOpen) && (transcribeButton = this.transcribeButton) != null && transcribeButton.onTouch(motionEvent.getAction(), motionEvent.getX(), motionEvent.getY());
    }

    private void createCommentUI() {
        if (this.commentAvatarImages != null) {
            return;
        }
        this.commentAvatarImages = new ImageReceiver[3];
        this.commentAvatarDrawables = new AvatarDrawable[3];
        this.commentAvatarImagesVisible = new boolean[3];
        int i = 0;
        while (true) {
            ImageReceiver[] imageReceiverArr = this.commentAvatarImages;
            if (i >= imageReceiverArr.length) {
                return;
            }
            imageReceiverArr[i] = new ImageReceiver(this);
            this.commentAvatarImages[i].setRoundRadius(AndroidUtilities.dp(12.0f));
            this.commentAvatarDrawables[i] = new AvatarDrawable();
            this.commentAvatarDrawables[i].setTextSize(AndroidUtilities.dp(18.0f));
            i++;
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    private void createContactButtons() {
        int i;
        boolean z;
        if (Build.VERSION.SDK_INT >= 21) {
            createSelectorDrawable(0);
        }
        if (this.drawContact) {
            boolean z2 = this.drawContactView;
            if (this.drawContactSendMessage) {
                boolean z3 = (z2 ? 1 : 0) | 2;
                i = (z2 ? 1 : 0) + 1;
                z = z3;
            } else {
                i = z2 ? 1 : 0;
                z = z2;
            }
            boolean z4 = z;
            if (this.drawContactAdd) {
                i++;
                z4 = (z ? 1 : 0) | 4;
            }
            if (i == 0) {
                this.contactButtons = null;
                this.drawnContactButtonsFlag = 0;
                return;
            }
            this.totalHeight += AndroidUtilities.dp(60.0f);
            if (z4 != this.drawnContactButtonsFlag) {
                this.drawnContactButtonsFlag = 0;
                int dp = (this.backgroundWidth - AndroidUtilities.dp(75.0f)) / i;
                float dpf2 = (this.backgroundWidth - AndroidUtilities.dpf2(37.0f)) / i;
                ArrayList arrayList = this.contactButtons;
                if (arrayList == null) {
                    this.contactButtons = new ArrayList(i);
                } else {
                    arrayList.clear();
                }
                if (this.drawContactView) {
                    this.drawnContactButtonsFlag |= 1;
                    this.contactButtons.add(createInstantViewButton(5, LocaleController.getString("ViewContact", R.string.ViewContact), dp, dpf2));
                }
                if (this.drawContactSendMessage) {
                    this.drawnContactButtonsFlag |= 2;
                    this.contactButtons.add(createInstantViewButton(30, LocaleController.getString("SharedContactMessage", R.string.SharedContactMessage), dp, dpf2));
                }
                if (this.drawContactAdd) {
                    this.drawnContactButtonsFlag |= 4;
                    this.contactButtons.add(createInstantViewButton(31, LocaleController.getString("SharedContactAdd", R.string.SharedContactAdd), dp, dpf2));
                }
            }
        }
    }

    private int createDocumentLayout(int i, MessageObject messageObject) {
        TLRPC.Document document;
        int i2;
        int i3 = i;
        int i4 = 0;
        TLRPC.MessageMedia messageMedia = messageObject.sponsoredMedia;
        if (messageMedia != null) {
            document = messageMedia.document;
        } else if (messageObject.type == 0) {
            TLRPC.MessageMedia media = MessageObject.getMedia(messageObject.messageOwner);
            TLRPC.WebPage webPage = media == null ? null : media.webpage;
            document = webPage == null ? null : webPage.document;
        } else {
            document = messageObject.getDocument();
        }
        this.documentAttach = document;
        TLRPC.Document document2 = this.documentAttach;
        if (document2 == null) {
            return 0;
        }
        double d = 0.0d;
        if (MessageObject.isVoiceDocument(document2)) {
            this.documentAttachType = 3;
            int i5 = 0;
            while (true) {
                if (i5 >= this.documentAttach.attributes.size()) {
                    break;
                }
                TLRPC.DocumentAttribute documentAttribute = this.documentAttach.attributes.get(i5);
                if (documentAttribute instanceof TLRPC.TL_documentAttributeAudio) {
                    d = documentAttribute.duration;
                    break;
                }
                i5++;
            }
            this.widthBeforeNewTimeLine = (i3 - AndroidUtilities.dp(94.0f)) - ((int) Math.ceil(Theme.chat_audioTimePaint.measureText("00:00")));
            this.availableTimeWidth = i3 - AndroidUtilities.dp(18.0f);
            measureTime(messageObject);
            int dp = AndroidUtilities.dp(174.0f) + this.timeWidth;
            if (!this.hasLinkPreview) {
                this.backgroundWidth = Math.min(i3, dp + ((int) Math.ceil(Theme.chat_audioTimePaint.measureText(AndroidUtilities.formatLongDuration((int) d)))));
            }
            this.seekBarWaveform.setMessageObject(messageObject);
            return 0;
        }
        if (MessageObject.isVideoDocument(this.documentAttach)) {
            this.documentAttachType = 4;
            if (!messageObject.needDrawBluredPreview()) {
                updatePlayingMessageProgress();
                String format = String.format("%s", AndroidUtilities.formatFileSize(this.documentAttach.size));
                this.docTitleWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(format));
                this.docTitleLayout = new StaticLayout(format, Theme.chat_infoPaint, this.docTitleWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            }
            return 0;
        }
        if (MessageObject.isMusicDocument(this.documentAttach)) {
            this.documentAttachType = 5;
            int dp2 = i3 - AndroidUtilities.dp(92.0f);
            if (dp2 < 0) {
                dp2 = AndroidUtilities.dp(100.0f);
            }
            String replace = messageObject.getMusicTitle().replace('\n', ' ');
            TextPaint textPaint = Theme.chat_audioTitlePaint;
            float dp3 = dp2 - AndroidUtilities.dp(12.0f);
            TextUtils.TruncateAt truncateAt = TextUtils.TruncateAt.END;
            CharSequence ellipsize = TextUtils.ellipsize(replace, textPaint, dp3, truncateAt);
            TextPaint textPaint2 = Theme.chat_audioTitlePaint;
            Layout.Alignment alignment = Layout.Alignment.ALIGN_NORMAL;
            StaticLayout staticLayout = new StaticLayout(ellipsize, textPaint2, dp2, alignment, 1.0f, 0.0f, false);
            this.songLayout = staticLayout;
            if (staticLayout.getLineCount() > 0) {
                this.songX = -((int) Math.ceil(this.songLayout.getLineLeft(0)));
            }
            StaticLayout staticLayout2 = new StaticLayout(TextUtils.ellipsize(messageObject.getMusicAuthor().replace('\n', ' '), Theme.chat_audioPerformerPaint, dp2, truncateAt), Theme.chat_audioPerformerPaint, dp2, alignment, 1.0f, 0.0f, false);
            this.performerLayout = staticLayout2;
            if (staticLayout2.getLineCount() > 0) {
                this.performerX = -((int) Math.ceil(this.performerLayout.getLineLeft(0)));
            }
            while (true) {
                if (i4 >= this.documentAttach.attributes.size()) {
                    break;
                }
                TLRPC.DocumentAttribute documentAttribute2 = this.documentAttach.attributes.get(i4);
                if (documentAttribute2 instanceof TLRPC.TL_documentAttributeAudio) {
                    d = documentAttribute2.duration;
                    break;
                }
                i4++;
            }
            int i6 = (int) d;
            int ceil = (int) Math.ceil(Theme.chat_audioTimePaint.measureText(AndroidUtilities.formatShortDuration(i6, i6)));
            this.widthBeforeNewTimeLine = (this.backgroundWidth - AndroidUtilities.dp(86.0f)) - ceil;
            this.availableTimeWidth = this.backgroundWidth - AndroidUtilities.dp(28.0f);
            return ceil;
        }
        if (MessageObject.isGifDocument(this.documentAttach, messageObject.hasValidGroupId())) {
            this.documentAttachType = 2;
            if (!messageObject.needDrawBluredPreview()) {
                String string = LocaleController.getString("AttachGif", R.string.AttachGif);
                this.infoWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(string));
                TextPaint textPaint3 = Theme.chat_infoPaint;
                int i7 = this.infoWidth;
                Layout.Alignment alignment2 = Layout.Alignment.ALIGN_NORMAL;
                this.infoLayout = new StaticLayout(string, textPaint3, i7, alignment2, 1.0f, 0.0f, false);
                String format2 = String.format("%s", AndroidUtilities.formatFileSize(this.documentAttach.size));
                this.docTitleWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(format2));
                this.docTitleLayout = new StaticLayout(format2, Theme.chat_infoPaint, this.docTitleWidth, alignment2, 1.0f, 0.0f, false);
            }
            return 0;
        }
        String str = this.documentAttach.mime_type;
        boolean z = (str != null && (str.toLowerCase().startsWith("image/") || this.documentAttach.mime_type.toLowerCase().startsWith("video/mp4"))) || MessageObject.isDocumentHasThumb(this.documentAttach);
        this.drawPhotoImage = z;
        if (!z) {
            i3 += AndroidUtilities.dp(30.0f);
        }
        this.documentAttachType = 1;
        String documentFileName = FileLoader.getDocumentFileName(this.documentAttach);
        if (documentFileName.length() == 0) {
            documentFileName = LocaleController.getString("AttachDocument", R.string.AttachDocument);
        }
        StaticLayout createStaticLayout = StaticLayoutEx.createStaticLayout(documentFileName, Theme.chat_docNamePaint, i3, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.MIDDLE, i3, 2, false);
        this.docTitleLayout = createStaticLayout;
        this.docTitleOffsetX = Integer.MIN_VALUE;
        if (createStaticLayout == null || createStaticLayout.getLineCount() <= 0) {
            this.docTitleOffsetX = 0;
            i2 = i3;
        } else {
            int i8 = 0;
            while (i4 < this.docTitleLayout.getLineCount()) {
                i8 = Math.max(i8, (int) Math.ceil(this.docTitleLayout.getLineWidth(i4)));
                this.docTitleOffsetX = Math.max(this.docTitleOffsetX, (int) Math.ceil(-this.docTitleLayout.getLineLeft(i4)));
                i4++;
            }
            i2 = Math.min(i3, i8);
        }
        String str2 = AndroidUtilities.formatFileSize(this.documentAttach.size) + " " + FileLoader.getDocumentExtension(this.documentAttach);
        int dp4 = i3 - AndroidUtilities.dp(30.0f);
        TextPaint textPaint4 = Theme.chat_infoPaint;
        int min = Math.min(dp4, (int) Math.ceil(textPaint4.measureText("000.0 mm / " + AndroidUtilities.formatFileSize(this.documentAttach.size))));
        this.infoWidth = min;
        CharSequence ellipsize2 = TextUtils.ellipsize(str2, Theme.chat_infoPaint, (float) min, TextUtils.TruncateAt.END);
        try {
            if (this.infoWidth < 0) {
                this.infoWidth = AndroidUtilities.dp(10.0f);
            }
            this.infoLayout = new StaticLayout(ellipsize2, Theme.chat_infoPaint, this.infoWidth + AndroidUtilities.dp(6.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        } catch (Exception e) {
            FileLog.e(e);
        }
        if (this.drawPhotoImage) {
            this.currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 320);
            this.currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 40);
            if (this.currentMessageObject.isHiddenSensitive() || (DownloadController.getInstance(this.currentAccount).getAutodownloadMask() & 1) == 0) {
                this.currentPhotoObject = null;
            }
            TLRPC.PhotoSize photoSize = this.currentPhotoObject;
            if (photoSize == null || photoSize == this.currentPhotoObjectThumb) {
                this.currentPhotoObject = null;
                this.photoImage.setNeedsQualityThumb(true);
                this.photoImage.setShouldGenerateQualityThumb(true);
            } else {
                BitmapDrawable bitmapDrawable = this.currentMessageObject.strippedThumb;
                if (bitmapDrawable != null) {
                    this.currentPhotoObjectThumb = null;
                    this.currentPhotoObjectThumbStripped = bitmapDrawable;
                }
            }
            this.currentPhotoFilter = "86_86_b";
            this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, messageObject.photoThumbsObject), "86_86", ImageLocation.getForObject(this.currentPhotoObjectThumb, messageObject.photoThumbsObject), this.currentPhotoFilter, this.currentPhotoObjectThumbStripped, 0L, null, messageObject, 1);
        }
        return i2;
    }

    private InstantViewButton createInstantViewButton(int i, String str, int i2, float f) {
        InstantViewButton instantViewButton = new InstantViewButton();
        instantViewButton.type = i;
        instantViewButton.layout = new StaticLayout(TextUtils.ellipsize(str, Theme.chat_instantViewPaint, i2, TextUtils.TruncateAt.END), Theme.chat_instantViewPaint, i2 + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        instantViewButton.buttonWidth = f;
        if (instantViewButton.layout.getLineCount() > 0) {
            double d = instantViewButton.buttonWidth;
            double ceil = Math.ceil(instantViewButton.layout.getLineWidth(0));
            Double.isNaN(d);
            instantViewButton.textX = ((float) (d - ceil)) / 2.0f;
            InstantViewButton.access$5024(instantViewButton, (int) instantViewButton.layout.getLineLeft(0));
        }
        return instantViewButton;
    }

    private void createInstantViewButton() {
        int measureText;
        int i;
        int i2;
        if (Build.VERSION.SDK_INT >= 21 && this.drawInstantView) {
            createSelectorDrawable(0);
        }
        if (this.drawInstantView && this.instantViewLayout == null) {
            this.instantWidth = AndroidUtilities.dp(33.0f);
            String str = this.instantViewButtonText;
            if (str == null) {
                int i3 = this.drawInstantViewType;
                if (i3 == 12) {
                    i = R.string.OpenChannelPost;
                } else if (i3 == 1) {
                    i = R.string.OpenChannel;
                } else {
                    if (i3 == 13) {
                        i2 = R.string.SendMessage;
                    } else if (i3 == 32) {
                        i2 = R.string.OpenProfile;
                    } else if (i3 == 10) {
                        i = R.string.OpenBot;
                    } else if (i3 == 2) {
                        i = R.string.OpenGroup;
                    } else if (i3 == 3) {
                        i = R.string.OpenMessage;
                    } else if (i3 == 5) {
                        i = R.string.ViewContact;
                    } else if (i3 == 6) {
                        i = R.string.OpenBackground;
                    } else if (i3 == 7) {
                        i = R.string.OpenTheme;
                    } else if (i3 == 8) {
                        i = (this.pollVoted || this.pollClosed) ? R.string.PollViewResults : R.string.PollSubmitVotes;
                    } else if (i3 == 9 || i3 == 11) {
                        TLRPC.TL_webPage tL_webPage = (TLRPC.TL_webPage) MessageObject.getMedia(this.currentMessageObject.messageOwner).webpage;
                        if (tL_webPage != null && tL_webPage.url.contains("voicechat=")) {
                            i = R.string.VoipGroupJoinAsSpeaker;
                        }
                        i = R.string.VoipGroupJoinAsLinstener;
                    } else {
                        if (i3 != 25) {
                            if (i3 == 14) {
                                i2 = R.string.ViewChatList;
                            } else if (i3 == 15) {
                                i2 = R.string.BotWebAppInstantViewOpen;
                            } else if (i3 == 16) {
                                i2 = R.string.OpenLink;
                            } else if (i3 == 17) {
                                i2 = R.string.ViewStory;
                            } else {
                                i = (i3 == 18 || i3 == 22) ? R.string.BoostLinkButton : i3 == 19 ? R.string.BoostingHowItWork : i3 == 20 ? R.string.OpenGift : i3 == 21 ? R.string.AppUpdate : i3 == 23 ? R.string.OpenStickerSet : i3 == 24 ? R.string.OpenEmojiSet : i3 == 26 ? R.string.OpenUniqueGift : R.string.InstantView;
                            }
                        }
                        i = R.string.VoipGroupJoinAsLinstener;
                    }
                    str = LocaleController.getString(i2).toUpperCase();
                }
                str = LocaleController.getString(i);
            }
            if (this.currentMessageObject.isSponsored() && this.backgroundWidth < (measureText = (int) (Theme.chat_instantViewPaint.measureText(str) + AndroidUtilities.dp(75.0f)))) {
                this.backgroundWidth = measureText;
            }
            int dp = this.backgroundWidth - AndroidUtilities.dp(75.0f);
            StaticLayout staticLayout = new StaticLayout(TextUtils.ellipsize(str, Theme.chat_instantViewPaint, dp, TextUtils.TruncateAt.END), Theme.chat_instantViewPaint, dp + AndroidUtilities.dp(2.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            this.instantViewLayout = staticLayout;
            this.instantViewLayoutWidth = staticLayout.getLineCount() > 0 ? this.instantViewLayout.getLineWidth(0) : 0.0f;
            this.instantViewLayoutLeft = this.instantViewLayout.getLineCount() > 0 ? this.instantViewLayout.getLineLeft(0) : 0.0f;
            this.instantWidth = this.backgroundWidth - AndroidUtilities.dp(this.drawInstantViewType == 8 ? 13.0f : 34.0f);
            int dp2 = this.totalHeight + AndroidUtilities.dp(46.0f);
            this.totalHeight = dp2;
            if (this.currentMessageObject.type == 12) {
                this.totalHeight = dp2 + AndroidUtilities.dp(14.0f);
            }
            if (this.currentMessageObject.isSponsored()) {
                this.totalHeight += AndroidUtilities.dp(2.0f);
            }
            StaticLayout staticLayout2 = this.instantViewLayout;
            if (staticLayout2 == null || staticLayout2.getLineCount() <= 0) {
                return;
            }
            double d = this.instantWidth;
            double ceil = Math.ceil(this.instantViewLayout.getLineWidth(0));
            Double.isNaN(d);
            this.instantTextX = (((int) (d - ceil)) / 2) + (this.drawInstantViewType == 0 ? AndroidUtilities.dp(8.0f) : 0);
            int lineLeft = (int) this.instantViewLayout.getLineLeft(0);
            this.instantTextLeftX = lineLeft;
            this.instantTextX += -lineLeft;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:17:0x005e  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x007d  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void createLoadingProgressLayout(long j, long j2) {
        StaticLayout staticLayout;
        boolean z;
        String format;
        int ceil;
        String str;
        int i;
        long j3 = j2;
        if (j3 <= 0 || this.documentAttach == null) {
            staticLayout = null;
        } else {
            long j4 = (j << 16) + j3;
            if (this.loadingProgressLayout != null && this.loadingProgressLayoutHash == j4) {
                return;
            }
            this.loadingProgressLayoutHash = j4;
            long j5 = this.lastLoadingSizeTotal;
            if (j5 == 0) {
                this.lastLoadingSizeTotal = j3;
            } else if (j > j5) {
                j3 = j5;
                String formatFileSize = AndroidUtilities.formatFileSize(j3);
                int ceil2 = (int) Math.ceil(Theme.chat_infoPaint.measureText(String.format("000.0 mm / %s", formatFileSize)));
                if (this.documentAttachType != 1) {
                    format = ceil2 <= Math.max(this.infoWidth, this.docTitleWidth) ? String.format("%s / %s", AndroidUtilities.formatFileSize(j5), formatFileSize) : AndroidUtilities.formatFileSize(j5);
                    z = true;
                } else {
                    MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                    z = groupedMessagePosition == null || (groupedMessagePosition.flags & 3) == 3;
                    if (z) {
                        format = String.format("%s / %s", AndroidUtilities.formatFileSize(j5), formatFileSize);
                    } else {
                        int min = (int) (Math.min(1.0f, j5 / j3) * 100.0f);
                        format = min >= 100 ? "100%" : String.format(Locale.US, "%2d%%", Integer.valueOf(min));
                    }
                }
                ceil = (int) Math.ceil(Theme.chat_infoPaint.measureText(format));
                if (z || ceil <= this.backgroundWidth - AndroidUtilities.dp(48.0f)) {
                    str = format;
                    i = ceil;
                } else {
                    int min2 = (int) (Math.min(1.0f, j5 / j3) * 100.0f);
                    String format2 = min2 < 100 ? String.format(Locale.US, "%2d%%", Integer.valueOf(min2)) : "100%";
                    i = (int) Math.ceil(Theme.chat_infoPaint.measureText(format2));
                    str = format2;
                }
                staticLayout = new StaticLayout(str, Theme.chat_infoPaint, i, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            } else {
                j3 = j5;
            }
            j5 = j;
            String formatFileSize2 = AndroidUtilities.formatFileSize(j3);
            int ceil22 = (int) Math.ceil(Theme.chat_infoPaint.measureText(String.format("000.0 mm / %s", formatFileSize2)));
            if (this.documentAttachType != 1) {
            }
            ceil = (int) Math.ceil(Theme.chat_infoPaint.measureText(format));
            if (z) {
            }
            str = format;
            i = ceil;
            staticLayout = new StaticLayout(str, Theme.chat_infoPaint, i, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        }
        this.loadingProgressLayout = staticLayout;
    }

    private void createLoadingProgressLayout(TLRPC.Document document) {
        if (document == null) {
            return;
        }
        long[] fileProgressSizes = ImageLoader.getInstance().getFileProgressSizes(FileLoader.getDocumentFileName(document));
        if (fileProgressSizes != null) {
            createLoadingProgressLayout(fileProgressSizes[0], fileProgressSizes[1]);
        } else {
            createLoadingProgressLayout(this.currentMessageObject.loadedFileSize, document.size);
        }
    }

    private void createPollUI() {
        if (this.pollAvatarImages != null) {
            return;
        }
        this.pollAvatarImages = new ImageReceiver[3];
        this.pollAvatarDrawables = new AvatarDrawable[3];
        this.pollAvatarImagesVisible = new boolean[3];
        int i = 0;
        while (true) {
            ImageReceiver[] imageReceiverArr = this.pollAvatarImages;
            if (i >= imageReceiverArr.length) {
                break;
            }
            imageReceiverArr[i] = new ImageReceiver(this);
            this.pollAvatarImages[i].setRoundRadius(AndroidUtilities.dp(8.0f));
            this.pollAvatarDrawables[i] = new AvatarDrawable();
            this.pollAvatarDrawables[i].setTextSize(AndroidUtilities.dp(22.0f));
            i++;
        }
        this.pollCheckBox = new CheckBoxBase[10];
        int i2 = 0;
        while (true) {
            CheckBoxBase[] checkBoxBaseArr = this.pollCheckBox;
            if (i2 >= checkBoxBaseArr.length) {
                return;
            }
            checkBoxBaseArr[i2] = new CheckBoxBase(this, 20, this.resourcesProvider);
            this.pollCheckBox[i2].setDrawUnchecked(false);
            this.pollCheckBox[i2].setBackgroundType(9);
            i2++;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void createStatusDrawableAnimator(int i, int i2, final boolean z) {
        boolean z2 = false;
        boolean z3 = (i2 & 1) != 0;
        boolean z4 = (i2 & 2) != 0;
        boolean z5 = (i & 1) != 0;
        boolean z6 = (i & 2) != 0;
        if ((i & 4) == 0 && z6 && z4 && !z5 && z3) {
            z2 = true;
        }
        if (!this.transitionParams.messageEntering || z2) {
            this.statusDrawableProgress = 0.0f;
            ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
            this.statusDrawableAnimator = ofFloat;
            ofFloat.setDuration(z2 ? 220L : 150L);
            this.statusDrawableAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
            this.animateFromStatusDrawableParams = i;
            this.animateToStatusDrawableParams = i2;
            this.statusDrawableAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda2
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatMessageCell.this.lambda$createStatusDrawableAnimator$13(z, valueAnimator);
                }
            });
            this.statusDrawableAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.Cells.ChatMessageCell.11
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animator) {
                    int createStatusDrawableParams = ChatMessageCell.this.transitionParams.createStatusDrawableParams();
                    if (ChatMessageCell.this.animateToStatusDrawableParams != createStatusDrawableParams) {
                        ChatMessageCell chatMessageCell = ChatMessageCell.this;
                        chatMessageCell.createStatusDrawableAnimator(chatMessageCell.animateToStatusDrawableParams, createStatusDrawableParams, z);
                    } else {
                        ChatMessageCell.this.statusDrawableAnimationInProgress = false;
                        ChatMessageCell chatMessageCell2 = ChatMessageCell.this;
                        chatMessageCell2.transitionParams.lastStatusDrawableParams = chatMessageCell2.animateToStatusDrawableParams;
                    }
                }
            });
            this.statusDrawableAnimationInProgress = true;
            this.statusDrawableAnimator.start();
        }
    }

    private void didClickedImage() {
        ChatMessageCellDelegate chatMessageCellDelegate;
        MessageObject messageObject;
        ChatMessageCellDelegate chatMessageCellDelegate2;
        TLRPC.WebPage webPage;
        TLRPC.MessageMedia messageMedia;
        TLRPC.ReplyMarkup replyMarkup;
        if (this.currentMessageObject.hasMediaSpoilers() && !this.currentMessageObject.needDrawBluredPreview()) {
            MessageObject messageObject2 = this.currentMessageObject;
            if (!messageObject2.isMediaSpoilersRevealed) {
                if (this.delegate == null || !messageObject2.isSensitive()) {
                    startRevealMedia(this.lastTouchX, this.lastTouchY);
                    return;
                } else {
                    this.delegate.didPressRevealSensitiveContent(this);
                    return;
                }
            }
        }
        MessageObject messageObject3 = this.currentMessageObject;
        int i = messageObject3.type;
        if (i == 20) {
            TLRPC.Message message = messageObject3.messageOwner;
            if (message == null || (messageMedia = message.media) == null || messageMedia.extended_media.isEmpty() || (replyMarkup = this.currentMessageObject.messageOwner.reply_markup) == null) {
                return;
            }
            Iterator<TLRPC.TL_keyboardButtonRow> it = replyMarkup.rows.iterator();
            while (it.hasNext()) {
                Iterator<TLRPC.KeyboardButton> it2 = it.next().buttons.iterator();
                if (it2.hasNext()) {
                    this.delegate.didPressExtendedMediaPreview(this, it2.next());
                    return;
                }
            }
            return;
        }
        if (i != 1 && !messageObject3.isAnyKindOfSticker()) {
            MessageObject messageObject4 = this.currentMessageObject;
            int i2 = messageObject4.type;
            if (i2 == 12) {
                long j = MessageObject.getMedia(messageObject4.messageOwner).user_id;
                this.delegate.didPressUserAvatar(this, j != 0 ? MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j)) : null, this.lastTouchX, this.lastTouchY, false);
                return;
            }
            if (i2 == 5) {
                if (this.buttonState == -1) {
                    if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isMessagePaused()) {
                        this.delegate.needPlayMessage(this, this.currentMessageObject, false);
                        return;
                    } else {
                        MediaController.getInstance().lambda$startAudioAgain$7(this.currentMessageObject);
                        return;
                    }
                }
            } else if (i2 == 8) {
                int i3 = this.buttonState;
                if (i3 != -1 && (i3 != 1 || !this.canStreamVideo || !this.autoPlayingMedia)) {
                    if (i3 != 2 && i3 != 0) {
                        return;
                    }
                }
                chatMessageCellDelegate = this.delegate;
            } else {
                if (this.documentAttachType != 4 && !messageObject4.hasVideoQualities()) {
                    MessageObject messageObject5 = this.currentMessageObject;
                    int i4 = messageObject5.type;
                    if (i4 != 4 && i4 != 23 && i4 != 24) {
                        int i5 = this.documentAttachType;
                        if (i5 == 1) {
                            if (this.buttonState != -1) {
                                return;
                            }
                        } else if (messageObject5.sponsoredMedia != null) {
                            chatMessageCellDelegate = this.delegate;
                            if (chatMessageCellDelegate == null) {
                                return;
                            }
                        } else {
                            if (i5 == 2) {
                                if (this.buttonState != -1 || (webPage = MessageObject.getMedia(messageObject5.messageOwner).webpage) == null) {
                                    return;
                                }
                                String str = webPage.embed_url;
                                if (str == null || str.length() == 0) {
                                    Browser.openUrl(getContext(), webPage.url);
                                    return;
                                } else {
                                    this.delegate.needOpenWebView(this.currentMessageObject, webPage.embed_url, webPage.site_name, webPage.description, webPage.url, webPage.embed_width, webPage.embed_height);
                                    return;
                                }
                            }
                            if (!this.hasInvoicePreview) {
                                if (Build.VERSION.SDK_INT < 26 || (chatMessageCellDelegate2 = this.delegate) == null) {
                                    return;
                                }
                                if (i4 == 16) {
                                    chatMessageCellDelegate2.didLongPress(this, 0.0f, 0.0f);
                                    return;
                                } else {
                                    chatMessageCellDelegate2.didPressOther(this, this.otherX, this.otherY);
                                    return;
                                }
                            }
                            if (this.buttonState != -1) {
                                return;
                            }
                        }
                    }
                } else if (this.buttonState != -1 && (!this.drawVideoImageButton || (!this.autoPlayingMedia && (((messageObject = this.currentMessageObject) == null || !messageObject.hasVideoQualities()) && (!SharedConfig.streamMedia || !this.canStreamVideo))))) {
                    if (this.drawVideoImageButton) {
                        didPressButton(true, true);
                        return;
                    }
                    int i6 = this.buttonState;
                    if (i6 != 0 && i6 != 3) {
                        return;
                    }
                }
                chatMessageCellDelegate = this.delegate;
            }
            didPressButton(true, false);
            return;
        }
        int i7 = this.buttonState;
        if (i7 != -1) {
            if (i7 != 0) {
                return;
            }
            didPressButton(true, false);
            return;
        }
        chatMessageCellDelegate = this.delegate;
        chatMessageCellDelegate.didPressImage(this, this.lastTouchX, this.lastTouchY, false);
    }

    /* JADX WARN: Code restructure failed: missing block: B:58:0x00cf, code lost:
    
        if (r30.currentMessageObject.loadedFileSize > 0) goto L81;
     */
    /* JADX WARN: Code restructure failed: missing block: B:66:0x013f, code lost:
    
        r2 = r30.documentAttach;
     */
    /* JADX WARN: Code restructure failed: missing block: B:67:0x0141, code lost:
    
        createLoadingProgressLayout(r2);
     */
    /* JADX WARN: Code restructure failed: missing block: B:81:0x013d, code lost:
    
        if (r30.currentMessageObject.loadedFileSize > 0) goto L81;
     */
    /* JADX WARN: Code restructure failed: missing block: B:85:0x015d, code lost:
    
        if (r2.loadedFileSize > 0) goto L93;
     */
    /* JADX WARN: Code restructure failed: missing block: B:86:0x019e, code lost:
    
        r2 = r2.getDocument();
     */
    /* JADX WARN: Code restructure failed: missing block: B:91:0x019c, code lost:
    
        if (r2.loadedFileSize > 0) goto L93;
     */
    /* JADX WARN: Removed duplicated region for block: B:156:0x032c  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x00ab  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x024a  */
    /* JADX WARN: Removed duplicated region for block: B:98:0x00ad  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void didPressButton(boolean z, boolean z2) {
        ChatMessageCellDelegate chatMessageCellDelegate;
        MessageObject messageObject;
        MessageObject playingMessageObject;
        RadialProgress2 radialProgress2;
        int iconForCurrentState;
        FileLoader fileLoader;
        TLRPC.Document document;
        MessageObject messageObject2;
        TLRPC.PhotoSize photoSize;
        String str;
        int i;
        int i2;
        MessageObject messageObject3;
        MessageObject messageObject4;
        if (this.delegate != null && this.currentMessageObject.isSensitive() && this.currentMessageObject.hasMediaSpoilers() && !this.currentMessageObject.needDrawBluredPreview() && !this.currentMessageObject.isMediaSpoilersRevealed) {
            this.delegate.didPressRevealSensitiveContent(this);
            return;
        }
        MessageObject messageObject5 = this.currentMessageObject;
        if (messageObject5 != null && !messageObject5.isAnyKindOfSticker()) {
            this.currentMessageObject.putInDownloadsStore = true;
        }
        int i3 = this.buttonState;
        if (i3 == 0 && (!this.drawVideoImageButton || z2)) {
            int i4 = this.documentAttachType;
            if (i4 == 3 || i4 == 5 || (i4 == 7 && (messageObject4 = this.currentMessageObject) != null && messageObject4.isVoiceTranscriptionOpen() && this.currentMessageObject.mediaExists)) {
                if (this.miniButtonState == 0) {
                    FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                    this.currentMessageObject.loadingCancelled = false;
                }
                if (this.delegate.needPlayMessage(this, this.currentMessageObject, false)) {
                    if (this.hasMiniProgress == 2 && this.miniButtonState != 1) {
                        this.miniButtonState = 1;
                        this.radialProgress.setProgress(0.0f, false);
                        this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, true);
                    }
                    updatePlayingMessageProgress();
                    this.buttonState = 1;
                    this.radialProgress.setIcon(getIconForCurrentState(), false, true);
                    invalidate();
                }
                return;
            }
            (z2 ? this.videoRadialProgress : this.radialProgress).setProgress(0.0f, false);
            if (this.currentPhotoObject == null || !(this.photoImage.hasNotThumb() || this.currentPhotoObjectThumb == null)) {
                photoSize = this.currentPhotoObjectThumb;
            } else {
                photoSize = this.currentPhotoObject;
                if (!(photoSize instanceof TLRPC.TL_photoStrippedSize) && !"s".equals(photoSize.type)) {
                    str = this.currentPhotoFilter;
                    String str2 = str;
                    i = !this.currentMessageObject.shouldEncryptPhotoOrVideo() ? 2 : 0;
                    MessageObject messageObject6 = this.currentMessageObject;
                    i2 = messageObject6.type;
                    if (i2 != 1 || i2 == 20) {
                        this.photoImage.setForceLoading(true);
                        this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.currentPhotoObject.size, null, this.currentMessageObject, i);
                    } else {
                        if (i2 == 8) {
                            FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                        } else if (this.isRoundVideo) {
                            if (messageObject6.isSecretMedia()) {
                                FileLoader fileLoader2 = FileLoader.getInstance(this.currentAccount);
                                TLRPC.Document document2 = this.currentMessageObject.getDocument();
                                MessageObject messageObject7 = this.currentMessageObject;
                                fileLoader2.loadFile(document2, messageObject7, 2, messageObject7.shouldEncryptPhotoOrVideo() ? 2 : 1);
                            } else {
                                MessageObject messageObject8 = this.currentMessageObject;
                                messageObject8.gifState = 2.0f;
                                TLRPC.Document document3 = messageObject8.getDocument();
                                this.photoImage.setForceLoading(true);
                                this.photoImage.setImage(ImageLocation.getForDocument(document3), null, ImageLocation.getForObject(photoSize, document3), str2, document3.size, null, this.currentMessageObject, 0);
                            }
                            this.wouldBeInPip = true;
                            invalidate();
                        } else if (i2 == 9) {
                            FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                        } else {
                            int i5 = this.documentAttachType;
                            if (i5 == 4) {
                                FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 1, i);
                                messageObject3 = this.currentMessageObject;
                            } else if (i2 != 0 || i5 == 0) {
                                this.photoImage.setForceLoading(true);
                                this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, 0L, null, this.currentMessageObject, 0);
                            } else if (i5 == 2) {
                                this.photoImage.setForceLoading(true);
                                this.photoImage.setImage(ImageLocation.getForDocument(this.documentAttach), null, ImageLocation.getForDocument(this.currentPhotoObject, this.documentAttach), this.currentPhotoFilterThumb, this.documentAttach.size, null, this.currentMessageObject, i);
                                messageObject3 = this.currentMessageObject;
                                messageObject3.gifState = 2.0f;
                            } else if (i5 == 1) {
                                FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                            } else if (i5 == 8) {
                                this.photoImage.setImage(ImageLocation.getForDocument(this.documentAttach), this.currentPhotoFilter, ImageLocation.getForDocument(this.currentPhotoObject, this.documentAttach), "b1", 0L, "jpg", this.currentMessageObject, 1);
                            }
                        }
                        radialProgress2 = this.radialProgress;
                        iconForCurrentState = getIconForCurrentState();
                    }
                    this.currentMessageObject.loadingCancelled = false;
                    this.buttonState = 1;
                    if (z2) {
                        radialProgress2 = this.videoRadialProgress;
                        iconForCurrentState = 14;
                    }
                    radialProgress2 = this.radialProgress;
                    iconForCurrentState = getIconForCurrentState();
                }
            }
            str = this.currentPhotoFilterThumb;
            String str22 = str;
            if (!this.currentMessageObject.shouldEncryptPhotoOrVideo()) {
            }
            MessageObject messageObject62 = this.currentMessageObject;
            i2 = messageObject62.type;
            if (i2 != 1) {
            }
            this.photoImage.setForceLoading(true);
            this.photoImage.setImage(ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject), this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.currentPhotoObject.size, null, this.currentMessageObject, i);
            this.currentMessageObject.loadingCancelled = false;
            this.buttonState = 1;
            if (z2) {
            }
            radialProgress2 = this.radialProgress;
            iconForCurrentState = getIconForCurrentState();
        } else {
            if (i3 != 1 || (this.drawVideoImageButton && !z2)) {
                if (i3 == 2) {
                    MessageObject messageObject9 = this.currentMessageObject;
                    if (messageObject9 == null || messageObject9.type != 23) {
                        if (this.documentAttachType == 7 && messageObject9 != null && messageObject9.isVoiceTranscriptionOpen()) {
                            if (this.miniButtonState == 0) {
                                FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                                this.currentMessageObject.loadingCancelled = false;
                            }
                            if (this.delegate.needPlayMessage(this, this.currentMessageObject, false)) {
                                if (this.hasMiniProgress == 2 && this.miniButtonState != 1) {
                                    this.miniButtonState = 1;
                                    this.radialProgress.setProgress(0.0f, false);
                                    this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, true);
                                }
                                updatePlayingMessageProgress();
                                this.buttonState = 1;
                                this.radialProgress.setIcon(getIconForCurrentState(), false, true);
                                invalidate();
                            }
                            if (!this.isRoundVideo) {
                                return;
                            } else {
                                this.wouldBeInPip = true;
                            }
                        } else {
                            int i6 = this.documentAttachType;
                            if (i6 != 3 && i6 != 5) {
                                if (!this.isRoundVideo || (playingMessageObject = MediaController.getInstance().getPlayingMessageObject()) == null || !playingMessageObject.isRoundVideo()) {
                                    this.photoImage.setAllowStartAnimation(true);
                                    this.photoImage.startAnimation();
                                }
                                this.currentMessageObject.gifState = 0.0f;
                                this.buttonState = -1;
                                this.radialProgress.setIcon(getIconForCurrentState(), false, z);
                                return;
                            }
                            this.radialProgress.setProgress(0.0f, false);
                            FileLoader.getInstance(this.currentAccount).loadFile(this.documentAttach, this.currentMessageObject, 2, 0);
                            this.currentMessageObject.loadingCancelled = false;
                            this.buttonState = 4;
                            this.radialProgress.setIcon(getIconForCurrentState(), true, z);
                        }
                        invalidate();
                    }
                    chatMessageCellDelegate = this.delegate;
                } else if (i3 == 3 || i3 == 0) {
                    if (this.hasMiniProgress == 2 && this.miniButtonState != 1) {
                        this.miniButtonState = 1;
                        this.radialProgress.setProgress(0.0f, false);
                        this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, z);
                    }
                    chatMessageCellDelegate = this.delegate;
                    if (chatMessageCellDelegate == null) {
                        return;
                    }
                } else {
                    if (i3 != 4) {
                        return;
                    }
                    int i7 = this.documentAttachType;
                    if (i7 != 3 && i7 != 5 && (i7 != 7 || (messageObject = this.currentMessageObject) == null || !messageObject.isVoiceTranscriptionOpen())) {
                        return;
                    }
                    if ((this.currentMessageObject.isOut() && (this.currentMessageObject.isSending() || this.currentMessageObject.isEditing())) || this.currentMessageObject.isSendError()) {
                        if (this.delegate == null || this.radialProgress.getIcon() == 6) {
                            return;
                        }
                        this.delegate.didPressCancelSendButton(this);
                        return;
                    }
                    this.currentMessageObject.loadingCancelled = true;
                    FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.documentAttach);
                    this.buttonState = 2;
                    radialProgress2 = this.radialProgress;
                    iconForCurrentState = getIconForCurrentState();
                }
                chatMessageCellDelegate.didPressImage(this, 0.0f, 0.0f, false);
                return;
            }
            this.photoImage.setForceLoading(false);
            int i8 = this.documentAttachType;
            if (i8 == 3 || i8 == 5 || (i8 == 7 && (messageObject2 = this.currentMessageObject) != null && messageObject2.isVoiceTranscriptionOpen())) {
                if (!MediaController.getInstance().lambda$startAudioAgain$7(this.currentMessageObject)) {
                    return;
                }
                this.buttonState = 0;
                radialProgress2 = this.radialProgress;
                iconForCurrentState = getIconForCurrentState();
            } else {
                if (this.currentMessageObject.isOut() && !this.drawVideoImageButton && (this.currentMessageObject.isSending() || this.currentMessageObject.isEditing())) {
                    if (this.radialProgress.getIcon() == 6) {
                        return;
                    }
                    this.delegate.didPressCancelSendButton(this);
                    return;
                }
                MessageObject messageObject10 = this.currentMessageObject;
                messageObject10.loadingCancelled = true;
                int i9 = this.documentAttachType;
                if (i9 == 2 || i9 == 4 || i9 == 1 || i9 == 8) {
                    fileLoader = FileLoader.getInstance(this.currentAccount);
                    document = this.documentAttach;
                } else {
                    int i10 = messageObject10.type;
                    if (i10 == 0 || i10 == 1 || i10 == 20 || i10 == 8 || i10 == 5) {
                        ImageLoader.getInstance().cancelForceLoadingForImageReceiver(this.photoImage);
                        this.photoImage.cancelLoadImage();
                    } else if (i10 == 9) {
                        fileLoader = FileLoader.getInstance(this.currentAccount);
                        document = this.currentMessageObject.getDocument();
                    }
                    this.buttonState = 0;
                    if (z2) {
                        this.videoRadialProgress.setIcon(2, false, z);
                        invalidate();
                    }
                    radialProgress2 = this.radialProgress;
                    iconForCurrentState = getIconForCurrentState();
                }
                fileLoader.cancelLoadFile(document);
                this.buttonState = 0;
                if (z2) {
                }
                radialProgress2 = this.radialProgress;
                iconForCurrentState = getIconForCurrentState();
            }
        }
        radialProgress2.setIcon(iconForCurrentState, false, z);
        invalidate();
    }

    /* JADX WARN: Code restructure failed: missing block: B:18:0x003f, code lost:
    
        if (r1.shouldEncryptPhotoOrVideo() != false) goto L21;
     */
    /* JADX WARN: Code restructure failed: missing block: B:19:0x0054, code lost:
    
        r2 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:21:0x0052, code lost:
    
        r2 = 2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:23:0x0050, code lost:
    
        if (r1.shouldEncryptPhotoOrVideo() != false) goto L21;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void didPressMiniButton(boolean z) {
        FileLoader fileLoader;
        TLRPC.Document document;
        MessageObject messageObject;
        int i;
        int i2 = this.miniButtonState;
        if (i2 == 0) {
            this.miniButtonState = 1;
            this.radialProgress.setProgress(0.0f, false);
            MessageObject messageObject2 = this.currentMessageObject;
            if (messageObject2 != null && !messageObject2.isAnyKindOfSticker()) {
                this.currentMessageObject.putInDownloadsStore = true;
            }
            int i3 = this.documentAttachType;
            if (i3 == 3 || i3 == 5) {
                fileLoader = FileLoader.getInstance(this.currentAccount);
                document = this.documentAttach;
                messageObject = this.currentMessageObject;
            } else if (i3 == 4 || i3 == 7) {
                createLoadingProgressLayout(this.documentAttach);
                fileLoader = FileLoader.getInstance(this.currentAccount);
                document = this.documentAttach;
                messageObject = this.currentMessageObject;
            }
            fileLoader.loadFile(document, messageObject, 2, i);
            this.currentMessageObject.loadingCancelled = false;
        } else {
            if (i2 != 1) {
                return;
            }
            int i4 = this.documentAttachType;
            if ((i4 == 3 || i4 == 5 || i4 == 7) && MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                MediaController.getInstance().cleanupPlayer(true, true);
            }
            this.miniButtonState = 0;
            this.currentMessageObject.loadingCancelled = true;
            FileLoader.getInstance(this.currentAccount).cancelLoadFile(this.documentAttach);
        }
        this.radialProgress.setMiniIcon(getMiniIconForCurrentState(), false, true);
        invalidate();
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:54:0x00fb  */
    /* JADX WARN: Removed duplicated region for block: B:57:0x0102  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawAnimatedEmojiMessageText(float f, float f2, Canvas canvas, ArrayList arrayList, AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans, boolean z, float f3, float f4, boolean z2) {
        int size;
        int i;
        float backgroundDrawableRight;
        int i2;
        int i3;
        int i4;
        int i5;
        float f5;
        int i6;
        int i7;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        ArrayList arrayList2 = arrayList;
        if (this.currentMessageObject == null || arrayList2 == null || arrayList.isEmpty()) {
            return;
        }
        float f6 = 0.0f;
        if (f3 == 0.0f) {
            return;
        }
        if (!z || z2) {
            size = arrayList.size();
            i = 0;
        } else {
            if (this.fullyDraw) {
                this.firstVisibleBlockNum = 0;
                this.lastVisibleBlockNum = arrayList.size();
            }
            i = this.firstVisibleBlockNum;
            size = this.lastVisibleBlockNum;
        }
        if (this.currentMessagesGroup != null && (groupedMessagePosition = this.currentPosition) != null) {
            int i8 = groupedMessagePosition.flags;
            if ((i8 & 1) == 0 || (i8 & 2) == 0) {
                int minTabletSide = AndroidUtilities.isTablet() ? AndroidUtilities.getMinTabletSide() : getParentWidth();
                int i9 = 0;
                for (int i10 = 0; i10 < this.currentMessagesGroup.posArray.size(); i10++) {
                    if (this.currentMessagesGroup.posArray.get(i10).minY != 0) {
                        break;
                    }
                    double d = i9;
                    double ceil = Math.ceil(((r5.pw + r5.leftSpanOffset) / 1000.0f) * minTabletSide);
                    Double.isNaN(d);
                    i9 = (int) (d + ceil);
                }
                backgroundDrawableRight = ((this.mediaBackground || !this.currentMessageObject.isOutOwner()) ? this.backgroundDrawableLeft + i9 : (this.backgroundDrawableLeft + i9) - AndroidUtilities.dp(6.0f)) - (getExtraTextX() + AndroidUtilities.dp((this.isAvatarVisible ? 48 : 0) + 8));
                float dp = (backgroundDrawableRight - (AndroidUtilities.dp(10 + ((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6)) + getExtraTextX())) - f;
                i2 = i;
                while (i2 <= size && i2 < arrayList.size()) {
                    if (i2 >= 0) {
                        i6 = i2;
                        i7 = size;
                    } else {
                        MessageObject.TextLayoutBlock textLayoutBlock = (MessageObject.TextLayoutBlock) arrayList2.get(i2);
                        int saveCount = canvas.getSaveCount();
                        canvas.save();
                        canvas.translate(f - (textLayoutBlock.isRtl() ? (int) Math.ceil(f4) : 0), f2 + textLayoutBlock.padTop + textLayoutBlock.textYOffset(arrayList2, this.transitionParams) + this.transitionYOffsetForDrawables);
                        float textYOffset = f2 + textLayoutBlock.textYOffset(arrayList2, this.transitionParams) + this.transitionYOffsetForDrawables;
                        boolean z3 = this.transitionParams.messageEntering;
                        int i11 = this.currentMessageObject.isOutOwner() ? Theme.key_chat_messageTextOut : Theme.key_chat_messageTextIn;
                        if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                            i11 = Theme.key_windowBackgroundWhiteBlackText;
                        }
                        int i12 = i11;
                        int dp2 = (int) (textLayoutBlock.maxRight + ((float) AndroidUtilities.dp(24.0f)) > 0.7f * dp ? dp : textLayoutBlock.maxRight + AndroidUtilities.dp(24.0f));
                        if (textLayoutBlock.quoteCollapse) {
                            RectF rectF = AndroidUtilities.rectTmp;
                            rectF.set(f6, (-textLayoutBlock.padTop) + AndroidUtilities.dp(textLayoutBlock.first ? 4.66f : 3.0f), dp2, textLayoutBlock.height(this.transitionParams) + AndroidUtilities.dp(4.0f));
                            rectF.offset(textLayoutBlock.isRtl() ? f4 - AndroidUtilities.dp(10.0f) : 0.0f, f6);
                            ButtonBounce buttonBounce = textLayoutBlock.collapsedBounce;
                            if (buttonBounce != null) {
                                float scale = buttonBounce.getScale(0.01f);
                                canvas.scale(scale, scale, rectF.centerX(), rectF.centerY());
                            }
                        }
                        if (!textLayoutBlock.quoteCollapse || textLayoutBlock.height <= textLayoutBlock.collapsedHeight) {
                            i3 = dp2;
                            i4 = i12;
                            i5 = saveCount;
                            f5 = 1.0f;
                        } else {
                            float collapsed = textLayoutBlock.collapsed(this.transitionParams);
                            i3 = dp2;
                            i4 = i12;
                            i5 = saveCount;
                            canvas.saveLayerAlpha(0.0f, 0.0f, dp2, textLayoutBlock.height(this.transitionParams) - 1, NotificationCenter.newLocationAvailable, 31);
                            f5 = collapsed;
                        }
                        StaticLayout staticLayout = textLayoutBlock.textLayout;
                        List<SpoilerEffect> list = textLayoutBlock.spoilers;
                        ColorFilter adaptiveEmojiColorFilter = getAdaptiveEmojiColorFilter(0, getThemedColor(i4));
                        float f7 = f5;
                        i6 = i2;
                        i7 = size;
                        AnimatedEmojiSpan.drawAnimatedEmojis(canvas, staticLayout, emojiGroupedSpans, 0.0f, list, 0.0f, 0.0f, textYOffset, f3, adaptiveEmojiColorFilter);
                        if (textLayoutBlock.quoteCollapse && textLayoutBlock.height > textLayoutBlock.collapsedHeight) {
                            if (this.clip == null) {
                                this.clip = new GradientClip();
                            }
                            canvas.save();
                            RectF rectF2 = AndroidUtilities.rectTmp;
                            rectF2.set(0.0f, textLayoutBlock.height(this.transitionParams) - AndroidUtilities.dp(24.0f), i3, textLayoutBlock.height(this.transitionParams));
                            this.clip.draw(canvas, rectF2, 3, f7);
                            canvas.restore();
                        }
                        canvas.restoreToCount(i5);
                    }
                    i2 = i6 + 1;
                    arrayList2 = arrayList;
                    size = i7;
                    f6 = 0.0f;
                }
                return;
            }
        }
        backgroundDrawableRight = getBackgroundDrawableRight() + this.transitionParams.deltaRight;
        float dp3 = (backgroundDrawableRight - (AndroidUtilities.dp(10 + ((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6)) + getExtraTextX())) - f;
        i2 = i;
        while (i2 <= size) {
            if (i2 >= 0) {
            }
            i2 = i6 + 1;
            arrayList2 = arrayList;
            size = i7;
            f6 = 0.0f;
        }
    }

    private void drawAnimatedEmojiMessageText(Canvas canvas, float f) {
        float f2;
        int dp;
        int dp2;
        int i;
        int dp3;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.isSponsored()) {
            return;
        }
        float f3 = this.textY;
        TransitionParams transitionParams = this.transitionParams;
        if (transitionParams.animateText) {
            float f4 = transitionParams.animateFromTextY;
            float f5 = transitionParams.animateChangeProgress;
            f2 = (f4 * (1.0f - f5)) + (f3 * f5);
        } else {
            f2 = f3;
        }
        if (transitionParams.animateChangeProgress == 1.0f || !transitionParams.animateMessageText) {
            float f6 = this.textX;
            MessageObject messageObject2 = this.currentMessageObject;
            drawAnimatedEmojiMessageText(f6, f2, canvas, messageObject2.textLayoutBlocks, this.animatedEmojiStack, true, f, messageObject2.textXOffset, false);
            return;
        }
        canvas.save();
        Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
        if (messageDrawable != null) {
            Rect bounds = messageDrawable.getBounds();
            if (!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.pinnedBottom) {
                dp = bounds.left + AndroidUtilities.dp(4.0f);
                dp2 = bounds.top + AndroidUtilities.dp(4.0f);
                i = bounds.right;
                dp3 = AndroidUtilities.dp(4.0f);
            } else {
                dp = bounds.left + AndroidUtilities.dp(4.0f);
                dp2 = bounds.top + AndroidUtilities.dp(4.0f);
                i = bounds.right;
                dp3 = AndroidUtilities.dp(10.0f);
            }
            canvas.clipRect(dp, dp2, i - dp3, bounds.bottom - AndroidUtilities.dp(4.0f));
        }
        drawAnimatedEmojiMessageText(this.textX, f2, canvas, this.transitionParams.animateOutTextBlocks, this.transitionParams.animateOutAnimateEmoji, false, f * (1.0f - this.transitionParams.animateChangeProgress), this.currentMessageObject.textXOffset, false);
        float f7 = this.textX;
        MessageObject messageObject3 = this.currentMessageObject;
        drawAnimatedEmojiMessageText(f7, f2, canvas, messageObject3.textLayoutBlocks, this.animatedEmojiStack, true, f * this.transitionParams.animateChangeProgress, messageObject3.textXOffset, false);
        canvas.restore();
    }

    private void drawBotButtons(Canvas canvas, ArrayList arrayList, int i) {
        Drawable drawable;
        String str;
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (SizeNotifierFrameLayout.drawingBlur) {
            return;
        }
        int widthForButtons = getWidthForButtons();
        MessageObject messageObject = this.currentMessageObject;
        float f = 1.0f;
        int dp = (messageObject == null || !messageObject.isOutOwner()) ? this.backgroundDrawableLeft + AndroidUtilities.dp((this.mediaBackground || this.drawPinnedBottom) ? 1.0f : 7.0f) : (getMeasuredWidth() - widthForButtons) - AndroidUtilities.dp(10.0f);
        float f2 = 2.0f;
        float dp2 = (this.layoutHeight - AndroidUtilities.dp(2.0f)) + this.transitionParams.deltaBottom;
        float f3 = 0.0f;
        for (int i2 = 0; i2 < arrayList.size(); i2++) {
            BotButton botButton = (BotButton) arrayList.get(i2);
            float f4 = botButton.y + botButton.height;
            if (f4 > f3) {
                f3 = f4;
            }
        }
        this.rect.set(0.0f, dp2, getMeasuredWidth(), f3 + dp2);
        if (i != 255) {
            canvas.saveLayerAlpha(this.rect, i, 31);
        } else {
            canvas.save();
        }
        int i3 = 0;
        while (i3 < arrayList.size()) {
            BotButton botButton2 = (BotButton) arrayList.get(i3);
            float dp3 = ((botButton2.y + this.layoutHeight) - AndroidUtilities.dp(f2)) + this.transitionParams.deltaBottom;
            float pressScale = botButton2.getPressScale();
            float f5 = widthForButtons;
            float f6 = dp;
            this.rect.set((botButton2.x * f5) + f6, dp3, (botButton2.x * f5) + f6 + (botButton2.width * f5), botButton2.height + dp3);
            canvas.save();
            if (pressScale != f) {
                canvas.scale(pressScale, pressScale, this.rect.centerX(), this.rect.centerY());
            }
            applyServiceShaderMatrix();
            Arrays.fill(this.botButtonRadii, AndroidUtilities.dp(Math.min(6.75f, SharedConfig.bubbleRadius)));
            if (botButton2.hasPositionFlag(9)) {
                float[] fArr = this.botButtonRadii;
                float dp4 = AndroidUtilities.dp(SharedConfig.bubbleRadius);
                fArr[7] = dp4;
                fArr[6] = dp4;
            }
            if (botButton2.hasPositionFlag(10)) {
                float[] fArr2 = this.botButtonRadii;
                float dp5 = AndroidUtilities.dp(SharedConfig.bubbleRadius);
                fArr2[5] = dp5;
                fArr2[4] = dp5;
            }
            this.botButtonPath.rewind();
            this.botButtonPath.addRoundRect(this.rect, this.botButtonRadii, Path.Direction.CW);
            canvas.drawPath(this.botButtonPath, getThemedPaint("paintChatActionBackground"));
            if (hasGradientService()) {
                canvas.drawPath(this.botButtonPath, Theme.chat_actionBackgroundGradientDarkenPaint);
            }
            boolean z = (((botButton2.button instanceof TLRPC.TL_keyboardButtonCallback) || (botButton2.button instanceof TLRPC.TL_keyboardButtonGame) || (botButton2.button instanceof TLRPC.TL_keyboardButtonBuy) || (botButton2.button instanceof TLRPC.TL_keyboardButtonUrlAuth)) && SendMessagesHelper.getInstance(this.currentAccount).isSendingCallback(this.currentMessageObject, botButton2.button)) || ((botButton2.button instanceof TLRPC.TL_keyboardButtonRequestGeoLocation) && SendMessagesHelper.getInstance(this.currentAccount).isSendingCurrentLocation(this.currentMessageObject, botButton2.button)) || ((botButton2.button instanceof TLRPC.TL_keyboardButtonUrl) && (chatMessageCellDelegate = this.delegate) != null && chatMessageCellDelegate.isProgressLoading(this, 3) && this.delegate.getProgressLoadingBotButtonUrl(this) == botButton2.button.url);
            canvas.save();
            canvas.clipPath(this.botButtonPath);
            LoadingDrawable loadingDrawable = botButton2.loadingDrawable;
            if (z) {
                if (loadingDrawable == null) {
                    botButton2.loadingDrawable = new LoadingDrawable();
                    botButton2.loadingDrawable.setRadiiDp(5.5f);
                    botButton2.loadingDrawable.setAppearByGradient(true);
                    botButton2.loadingDrawable.strokePaint.setStrokeWidth(AndroidUtilities.dpf2(1.25f));
                } else if (botButton2.loadingDrawable.isDisappeared() || botButton2.loadingDrawable.isDisappearing()) {
                    botButton2.loadingDrawable.reset();
                    botButton2.loadingDrawable.resetDisappear();
                }
            } else if (loadingDrawable != null && !botButton2.loadingDrawable.isDisappearing() && !botButton2.loadingDrawable.isDisappeared()) {
                botButton2.loadingDrawable.disappear();
            }
            if (botButton2.loadingDrawable != null && (z || botButton2.loadingDrawable.isDisappearing())) {
                this.rect.inset(AndroidUtilities.dpf2(0.625f), AndroidUtilities.dpf2(0.625f));
                botButton2.loadingDrawable.setRadii(this.botButtonRadii);
                botButton2.loadingDrawable.setBounds(this.rect);
                LoadingDrawable loadingDrawable2 = botButton2.loadingDrawable;
                int i4 = Theme.key_chat_serviceBackgroundSelector;
                loadingDrawable2.setColors(Theme.multAlpha(Theme.getColor(i4, this.resourcesProvider), f), Theme.multAlpha(Theme.getColor(i4, this.resourcesProvider), 2.5f), Theme.multAlpha(Theme.getColor(i4, this.resourcesProvider), 3.0f), Theme.multAlpha(Theme.getColor(i4, this.resourcesProvider), 10.0f));
                botButton2.loadingDrawable.setAlpha(NotificationCenter.newLocationAvailable);
                botButton2.loadingDrawable.draw(canvas);
                invalidateOutbounds();
            }
            if (botButton2.selectorDrawable != null) {
                int i5 = (int) dp3;
                botButton2.selectorDrawable.setBounds(((int) (botButton2.x * f5)) + dp, i5, ((int) (botButton2.x * f5)) + dp + ((int) (botButton2.width * f5)), botButton2.height + i5);
                botButton2.selectorDrawable.setAlpha(NotificationCenter.newLocationAvailable);
                botButton2.selectorDrawable.draw(canvas);
            }
            canvas.restore();
            canvas.save();
            botButton2.title.ellipsize(Math.max(1, ((int) (botButton2.width * f5)) - AndroidUtilities.dp(15.0f)));
            botButton2.title.draw(canvas, (botButton2.x * f5) + f6 + (((botButton2.width * f5) - botButton2.title.getWidth()) / 2.0f), (AndroidUtilities.dp(44.0f) / 2.0f) + dp3);
            canvas.restore();
            if (!(botButton2.button instanceof TLRPC.TL_keyboardButtonWebView)) {
                if (botButton2.button instanceof TLRPC.TL_keyboardButtonUrl) {
                    str = AndroidUtilities.isWebAppLink(botButton2.button.url) ? "drawableBotInline" : botButton2.isInviteButton ? "drawable_botInvite" : "drawableBotLink";
                } else if (!(botButton2.button instanceof TLRPC.TL_keyboardButtonSwitchInline) && !(botButton2.button instanceof TLRPC.TL_keyboardButtonRequestPeer)) {
                    if ((botButton2.button instanceof TLRPC.TL_keyboardButtonBuy) && this.hasInvoicePreview && this.hasInvoicePrice) {
                        BaseCell.setDrawableBounds(Theme.chat_botCardDrawable, (((((int) (botButton2.x * f5)) + ((int) (botButton2.width * f5))) - AndroidUtilities.dp(5.0f)) - Theme.chat_botCardDrawable.getIntrinsicWidth()) + dp, dp3 + AndroidUtilities.dp(4.0f));
                        drawable = Theme.chat_botCardDrawable;
                        drawable.draw(canvas);
                    }
                    canvas.restore();
                    i3++;
                    f = 1.0f;
                    f2 = 2.0f;
                }
                drawable = getThemedDrawable(str);
                BaseCell.setDrawableBounds(drawable, (((((int) (botButton2.x * f5)) + ((int) (botButton2.width * f5))) - AndroidUtilities.dp(3.0f)) - drawable.getIntrinsicWidth()) + dp, dp3 + AndroidUtilities.dp(3.0f));
                drawable.draw(canvas);
                canvas.restore();
                i3++;
                f = 1.0f;
                f2 = 2.0f;
            }
            drawable = getThemedDrawable("drawableBotWebView");
            BaseCell.setDrawableBounds(drawable, (((((int) (botButton2.x * f5)) + ((int) (botButton2.width * f5))) - AndroidUtilities.dp(3.0f)) - drawable.getIntrinsicWidth()) + dp, dp3 + AndroidUtilities.dp(3.0f));
            drawable.draw(canvas);
            canvas.restore();
            i3++;
            f = 1.0f;
            f2 = 2.0f;
        }
        canvas.restore();
    }

    /* JADX WARN: Code restructure failed: missing block: B:191:0x011c, code lost:
    
        if (r20.currentMessageObject.isRoundVideo() == false) goto L61;
     */
    /* JADX WARN: Code restructure failed: missing block: B:193:0x0126, code lost:
    
        if (android.text.TextUtils.isEmpty(r20.currentMessageObject.caption) == false) goto L61;
     */
    /* JADX WARN: Code restructure failed: missing block: B:208:0x007c, code lost:
    
        if (r20.mediaBackground != false) goto L28;
     */
    /* JADX WARN: Removed duplicated region for block: B:129:0x0448  */
    /* JADX WARN: Removed duplicated region for block: B:156:0x0441  */
    /* JADX WARN: Removed duplicated region for block: B:165:0x01ad  */
    /* JADX WARN: Removed duplicated region for block: B:170:0x01bb  */
    /* JADX WARN: Removed duplicated region for block: B:175:0x01cc  */
    /* JADX WARN: Removed duplicated region for block: B:187:0x0163  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x0143  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x0269  */
    /* JADX WARN: Removed duplicated region for block: B:79:0x02d2  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x030c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawCaptionLayout(Canvas canvas, MessageObject.TextLayoutBlocks textLayoutBlocks, boolean z, boolean z2, float f) {
        float f2;
        int i;
        TransitionParams transitionParams;
        int i2;
        Rect rect;
        int i3;
        int i4;
        int i5;
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        boolean z3;
        boolean z4;
        boolean z5;
        ChatMessageCell chatMessageCell;
        float f3;
        float f4;
        Canvas canvas2;
        float f5;
        boolean z6;
        float f6;
        float dp;
        float imageHeight;
        int dp2;
        int i6;
        Path path;
        float f7 = 12.0f;
        if (!this.mediaBackground && !this.drawPinnedBottom) {
            f7 = 18.0f;
        }
        AndroidUtilities.dp(f7);
        getExtraTextX();
        getExtraTextX();
        if (this.currentMessagesGroup != null && !this.currentMessageObject.isMusic() && !this.currentMessageObject.isDocument()) {
            int groupPhotosWidth = getGroupPhotosWidth();
            if ((this.currentPosition.flags & 1) == 0) {
                Math.ceil((r4.pw / 1000.0f) * groupPhotosWidth);
            } else {
                for (int i7 = 0; i7 < this.currentMessagesGroup.posArray.size(); i7++) {
                    if (this.currentMessagesGroup.posArray.get(i7).minY != 0) {
                        break;
                    }
                    Math.ceil(((r5.pw + r5.leftSpanOffset) / 1000.0f) * groupPhotosWidth);
                }
                AndroidUtilities.dp(9.0f);
            }
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null && (groupedMessagePosition.flags & 1) == 0 && !this.currentMessagesGroup.hasSibling) {
            AndroidUtilities.dp(14.0f);
        }
        drawCommentLayout(canvas, f);
        if (textLayoutBlocks != null) {
            if (z2 && this.links.isEmpty()) {
                return;
            }
            if ((!this.currentMessageObject.deleted || this.drawingToBitmap || this.currentPosition == null) && f != 0.0f) {
                setupTextColors();
                canvas.save();
                MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
                float f8 = groupedMessages != null ? groupedMessages.transitionParams.captionEnterProgress * f : f;
                if (f8 == 0.0f) {
                    return;
                }
                float f9 = this.captionY;
                float f10 = this.captionX;
                TransitionParams transitionParams2 = this.transitionParams;
                if (transitionParams2.animateBackgroundBoundsInner) {
                    if (transitionParams2.transformGroupToSingleMessage) {
                        f9 -= getTranslationY();
                    } else {
                        if (transitionParams2.moveCaption) {
                            float f11 = this.captionX;
                            TransitionParams transitionParams3 = this.transitionParams;
                            float f12 = transitionParams3.animateChangeProgress;
                            float f13 = 1.0f - f12;
                            f2 = (f11 * f12) + (transitionParams3.captionFromX * f13);
                            f9 = (transitionParams3.captionFromY * f13) + (this.captionY * f12);
                            if (this.isRoundVideo && this.transitionParams.animateDrawBackground) {
                                f9 += (1.0f - getVideoTranscriptionProgress()) * AndroidUtilities.roundMessageSize;
                            }
                            if (f8 == 1.0f) {
                                this.rect.set(f2, f9, textLayoutBlocks.textWidth + f2, textLayoutBlocks.textHeight(this.transitionParams) + f9);
                                i = canvas.saveLayerAlpha(this.rect, (int) (f8 * 255.0f), 31);
                            } else {
                                i = Integer.MIN_VALUE;
                            }
                            if (this.isRoundVideo || !this.transitionParams.animateDrawBackground) {
                                transitionParams = this.transitionParams;
                                if ((transitionParams.animateBackgroundBoundsInner && this.currentBackgroundDrawable != null && this.currentMessagesGroup == null) || (transitionParams.animateMediaAbove && this.currentMessagesGroup == null)) {
                                    int height = (this.drawCommentButton || (rect = this.commentButtonRect) == null) ? 0 : rect.height();
                                    ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                                    i2 = height + ((reactionsLayoutInBubble != null || reactionsLayoutInBubble.isSmall) ? 0 : reactionsLayoutInBubble.height);
                                    if (this.currentMessageObject.isOutOwner() || this.mediaBackground || this.pinnedBottom) {
                                        canvas.clipRect(getBackgroundDrawableLeft() + this.transitionParams.deltaLeft + AndroidUtilities.dp(4.0f), getBackgroundDrawableTop() + this.transitionParams.deltaTop + AndroidUtilities.dp(4.0f), (getBackgroundDrawableRight() + this.transitionParams.deltaRight) - AndroidUtilities.dp(4.0f), ((getBackgroundDrawableBottom() + this.transitionParams.deltaBottom) - AndroidUtilities.dp(4.0f)) - i2);
                                    } else {
                                        canvas.clipRect(getBackgroundDrawableLeft() + this.transitionParams.deltaLeft + AndroidUtilities.dp(4.0f), getBackgroundDrawableTop() + this.transitionParams.deltaTop + AndroidUtilities.dp(4.0f), (getBackgroundDrawableRight() + this.transitionParams.deltaRight) - AndroidUtilities.dp(10.0f), ((getBackgroundDrawableBottom() + this.transitionParams.deltaBottom) - AndroidUtilities.dp(4.0f)) - i2);
                                    }
                                }
                            } else {
                                Theme.MessageDrawable.PathDrawParams pathDrawParams = this.backgroundCacheParams;
                                if (pathDrawParams != null && (path = pathDrawParams.getPath()) != null && !path.isEmpty()) {
                                    canvas.translate(0.0f, this.transitionYOffsetForDrawables);
                                    canvas.clipPath(path);
                                    canvas.translate(0.0f, -this.transitionYOffsetForDrawables);
                                }
                            }
                            canvas.save();
                            canvas.translate(f2, f9);
                            if (this.highlightPath != null) {
                                float currentTimeMillis = (System.currentTimeMillis() - this.highlightPathStart) / 850.0f;
                                if (currentTimeMillis > 1.0f) {
                                    this.highlightPath = null;
                                } else {
                                    int alpha = Theme.chat_textSearchSelectionPaint.getAlpha();
                                    float f14 = currentTimeMillis * 4.0f;
                                    Theme.chat_textSearchSelectionPaint.setAlpha((int) (alpha * 0.8f * (1.0f - currentTimeMillis) * f14));
                                    canvas.save();
                                    float interpolation = (AndroidUtilities.overshootInterpolator.getInterpolation(Math.min(1.0f, f14)) * 0.6f) + 0.4f;
                                    LinkPath linkPath = this.highlightPath;
                                    canvas.scale(interpolation, interpolation, linkPath.centerX, linkPath.centerY);
                                    canvas.drawPath(this.highlightPath, Theme.chat_textSearchSelectionPaint);
                                    canvas.restore();
                                    Theme.chat_textSearchSelectionPaint.setAlpha(alpha);
                                }
                                invalidate();
                            }
                            canvas.restore();
                            if (this.currentMessageObject.type == 5) {
                                Theme.chat_timePaint.setColor(ColorUtils.blendARGB(getThemedColor(Theme.key_chat_serviceText), getThemedColor(isDrawSelectionBackground() ? this.currentMessageObject.isOutOwner() ? Theme.key_chat_outTimeSelectedText : Theme.key_chat_inTimeSelectedText : this.currentMessageObject.isOutOwner() ? Theme.key_chat_outTimeText : Theme.key_chat_inTimeText), getVideoTranscriptionProgress()));
                            }
                            if (z2) {
                                i3 = Integer.MIN_VALUE;
                                i4 = i;
                            } else {
                                TransitionParams transitionParams4 = this.transitionParams;
                                if (!transitionParams4.animateMediaAbove || transitionParams4.animateChangeProgress == 1.0f) {
                                    i5 = i;
                                    i3 = Integer.MIN_VALUE;
                                    arrayList = textLayoutBlocks.textLayoutBlocks;
                                    z3 = false;
                                    z4 = true;
                                    z5 = true;
                                    chatMessageCell = this;
                                    f3 = f2;
                                    f4 = f9;
                                    canvas2 = canvas;
                                    f5 = textLayoutBlocks.textXOffset;
                                    z6 = z;
                                    f6 = f;
                                } else {
                                    int i8 = this.currentMessageObject.type;
                                    if (i8 == 1 || i8 == 20 || this.documentAttachType == 4 || i8 == 8 || i8 == 23) {
                                        float imageY = this.photoImage.getImageY();
                                        dp = (imageY + (-textLayoutBlocks.textHeight(this.transitionParams))) - AndroidUtilities.dp(4.0f);
                                        imageHeight = this.photoImage.getImageHeight() + imageY + AndroidUtilities.dp(6.0f);
                                    } else {
                                        float f15 = 43.0f;
                                        if (this.hasOldCaptionPreview) {
                                            int dp3 = ((this.totalHeight - AndroidUtilities.dp(this.drawPinnedTop ? 9.0f : 10.0f)) - this.linkPreviewHeight) - AndroidUtilities.dp(17.0f);
                                            if (!this.drawCommentButton || this.drawSideButton == 3) {
                                                f15 = 0.0f;
                                            } else if (shouldDrawTimeOnMedia()) {
                                                f15 = 41.3f;
                                            }
                                            dp2 = dp3 - AndroidUtilities.dp(f15);
                                            i6 = this.captionHeight;
                                        } else {
                                            int dp4 = (this.totalHeight - this.captionHeight) - AndroidUtilities.dp(this.drawPinnedTop ? 9.0f : 10.0f);
                                            if (!this.drawCommentButton || this.drawSideButton == 3) {
                                                f15 = 0.0f;
                                            } else if (shouldDrawTimeOnMedia()) {
                                                f15 = 41.3f;
                                            }
                                            dp2 = dp4 - AndroidUtilities.dp(f15);
                                            ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
                                            i6 = (reactionsLayoutInBubble2.isEmpty || reactionsLayoutInBubble2.isSmall) ? 0 : reactionsLayoutInBubble2.totalHeight;
                                        }
                                        imageHeight = dp2 - i6;
                                        dp = AndroidUtilities.dp(9.0f);
                                    }
                                    i5 = i;
                                    i3 = Integer.MIN_VALUE;
                                    drawMessageText(f2, this.captionAbove ? imageHeight : dp, canvas, textLayoutBlocks.textLayoutBlocks, textLayoutBlocks.textXOffset, z, f * (1.0f - this.transitionParams.animateChangeProgress), true, false, true);
                                    f4 = this.captionAbove ? dp : imageHeight;
                                    arrayList = textLayoutBlocks.textLayoutBlocks;
                                    f5 = textLayoutBlocks.textXOffset;
                                    f6 = f * this.transitionParams.animateChangeProgress;
                                    z3 = false;
                                    z4 = true;
                                    z5 = true;
                                    chatMessageCell = this;
                                    f3 = f2;
                                    canvas2 = canvas;
                                    z6 = z;
                                }
                                chatMessageCell.drawMessageText(f3, f4, canvas2, arrayList, f5, z6, f6, z5, z3, z4);
                                i4 = i5;
                            }
                            if (i4 != i3) {
                                canvas.restoreToCount(i4);
                            }
                            canvas.restore();
                        }
                        if (!this.currentMessageObject.isVoice()) {
                        }
                    }
                    f10 += this.transitionParams.deltaLeft;
                }
                f2 = f10;
                if (this.isRoundVideo) {
                    f9 += (1.0f - getVideoTranscriptionProgress()) * AndroidUtilities.roundMessageSize;
                }
                if (f8 == 1.0f) {
                }
                if (this.isRoundVideo) {
                }
                transitionParams = this.transitionParams;
                if (transitionParams.animateBackgroundBoundsInner) {
                    if (this.drawCommentButton) {
                    }
                    ReactionsLayoutInBubble reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
                    i2 = height + ((reactionsLayoutInBubble3 != null || reactionsLayoutInBubble3.isSmall) ? 0 : reactionsLayoutInBubble3.height);
                    if (this.currentMessageObject.isOutOwner()) {
                    }
                    canvas.clipRect(getBackgroundDrawableLeft() + this.transitionParams.deltaLeft + AndroidUtilities.dp(4.0f), getBackgroundDrawableTop() + this.transitionParams.deltaTop + AndroidUtilities.dp(4.0f), (getBackgroundDrawableRight() + this.transitionParams.deltaRight) - AndroidUtilities.dp(4.0f), ((getBackgroundDrawableBottom() + this.transitionParams.deltaBottom) - AndroidUtilities.dp(4.0f)) - i2);
                    canvas.save();
                    canvas.translate(f2, f9);
                    if (this.highlightPath != null) {
                    }
                    canvas.restore();
                    if (this.currentMessageObject.type == 5) {
                    }
                    if (z2) {
                    }
                    if (i4 != i3) {
                    }
                    canvas.restore();
                }
                if (this.drawCommentButton) {
                }
                ReactionsLayoutInBubble reactionsLayoutInBubble32 = this.reactionsLayoutInBubble;
                i2 = height + ((reactionsLayoutInBubble32 != null || reactionsLayoutInBubble32.isSmall) ? 0 : reactionsLayoutInBubble32.height);
                if (this.currentMessageObject.isOutOwner()) {
                }
                canvas.clipRect(getBackgroundDrawableLeft() + this.transitionParams.deltaLeft + AndroidUtilities.dp(4.0f), getBackgroundDrawableTop() + this.transitionParams.deltaTop + AndroidUtilities.dp(4.0f), (getBackgroundDrawableRight() + this.transitionParams.deltaRight) - AndroidUtilities.dp(4.0f), ((getBackgroundDrawableBottom() + this.transitionParams.deltaBottom) - AndroidUtilities.dp(4.0f)) - i2);
                canvas.save();
                canvas.translate(f2, f9);
                if (this.highlightPath != null) {
                }
                canvas.restore();
                if (this.currentMessageObject.type == 5) {
                }
                if (z2) {
                }
                if (i4 != i3) {
                }
                canvas.restore();
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:18:0x0091  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x00a8  */
    /* JADX WARN: Removed duplicated region for block: B:27:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:56:0x0148  */
    /* JADX WARN: Removed duplicated region for block: B:59:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawClockOrErrorLayout(Canvas canvas, boolean z, boolean z2, float f, float f2, float f3, float f4, float f5, boolean z3) {
        float dp;
        float currentTotalHeight;
        float dp2;
        float dp3;
        boolean z4 = f5 != 1.0f;
        float f6 = (f5 * 0.5f) + 0.5f;
        float f7 = f2 * f5;
        if (z) {
            if (this.currentMessageObject.isOutOwner()) {
                return;
            }
            MsgClockDrawable msgClockDrawable = Theme.chat_msgClockDrawable;
            msgClockDrawable.setColor(getThemedColor((!shouldDrawTimeOnMedia() && z3) ? Theme.key_chat_outSentClockSelected : Theme.key_chat_mediaSentClock));
            if (shouldDrawTimeOnMedia()) {
                dp2 = getPhotoBottom() + this.additionalTimeOffsetY;
                dp3 = AndroidUtilities.dp(9.0f);
            } else {
                dp2 = (f - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 9.5f : 8.5f)) + f3;
                if (this.isRoundVideo) {
                    dp3 = (AndroidUtilities.dp(this.drawPinnedBottom ? 4.0f : 5.0f) + this.reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress)) * (1.0f - getVideoTranscriptionProgress());
                }
                BaseCell.setDrawableBounds(msgClockDrawable, f4 + (this.currentMessageObject.scheduled ? 0 : AndroidUtilities.dp(11.0f)), dp2 - msgClockDrawable.getIntrinsicHeight());
                msgClockDrawable.setAlpha((int) (f7 * 255.0f));
                if (z4) {
                    canvas.save();
                    canvas.scale(f6, f6, msgClockDrawable.getBounds().centerX(), msgClockDrawable.getBounds().centerY());
                }
                msgClockDrawable.draw(canvas);
                msgClockDrawable.setAlpha(NotificationCenter.newLocationAvailable);
                invalidate();
                if (!z4) {
                    return;
                }
            }
            dp2 -= dp3;
            BaseCell.setDrawableBounds(msgClockDrawable, f4 + (this.currentMessageObject.scheduled ? 0 : AndroidUtilities.dp(11.0f)), dp2 - msgClockDrawable.getIntrinsicHeight());
            msgClockDrawable.setAlpha((int) (f7 * 255.0f));
            if (z4) {
            }
            msgClockDrawable.draw(canvas);
            msgClockDrawable.setAlpha(NotificationCenter.newLocationAvailable);
            invalidate();
            if (!z4) {
            }
        } else {
            if (!z2 || this.currentMessageObject.isOutOwner()) {
                return;
            }
            float dp4 = f4 + (this.currentMessageObject.scheduled ? 0 : AndroidUtilities.dp(11.0f));
            float f8 = 21.5f;
            if (shouldDrawTimeOnMedia()) {
                dp = getPhotoBottom() + this.additionalTimeOffsetY;
                currentTotalHeight = AndroidUtilities.dp(21.5f);
            } else {
                if (!this.pinnedBottom && !this.pinnedTop) {
                    f8 = 20.5f;
                }
                dp = (f - AndroidUtilities.dp(f8)) + f3;
                if (this.isRoundVideo) {
                    currentTotalHeight = this.reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress) * (1.0f - getVideoTranscriptionProgress());
                }
                this.rect.set(dp4, dp, AndroidUtilities.dp(14.0f) + dp4, AndroidUtilities.dp(14.0f) + dp);
                int alpha = Theme.chat_msgErrorPaint.getAlpha();
                int i = (int) (f7 * 255.0f);
                Theme.chat_msgErrorPaint.setAlpha(i);
                if (z4) {
                    canvas.save();
                    canvas.scale(f6, f6, this.rect.centerX(), this.rect.centerY());
                }
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(1.0f), AndroidUtilities.dp(1.0f), Theme.chat_msgErrorPaint);
                Theme.chat_msgErrorPaint.setAlpha(alpha);
                Drawable themedDrawable = getThemedDrawable("drawableMsgError");
                BaseCell.setDrawableBounds(themedDrawable, dp4 + AndroidUtilities.dp(6.0f), dp + AndroidUtilities.dp(2.0f));
                themedDrawable.setAlpha(i);
                themedDrawable.draw(canvas);
                themedDrawable.setAlpha(NotificationCenter.newLocationAvailable);
                if (!z4) {
                    return;
                }
            }
            dp -= currentTotalHeight;
            this.rect.set(dp4, dp, AndroidUtilities.dp(14.0f) + dp4, AndroidUtilities.dp(14.0f) + dp);
            int alpha2 = Theme.chat_msgErrorPaint.getAlpha();
            int i2 = (int) (f7 * 255.0f);
            Theme.chat_msgErrorPaint.setAlpha(i2);
            if (z4) {
            }
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(1.0f), AndroidUtilities.dp(1.0f), Theme.chat_msgErrorPaint);
            Theme.chat_msgErrorPaint.setAlpha(alpha2);
            Drawable themedDrawable2 = getThemedDrawable("drawableMsgError");
            BaseCell.setDrawableBounds(themedDrawable2, dp4 + AndroidUtilities.dp(6.0f), dp + AndroidUtilities.dp(2.0f));
            themedDrawable2.setAlpha(i2);
            themedDrawable2.draw(canvas);
            themedDrawable2.setAlpha(NotificationCenter.newLocationAvailable);
            if (!z4) {
            }
        }
        canvas.restore();
    }

    private void drawContact(Canvas canvas) {
        TextPaint textPaint;
        int i;
        boolean z;
        float f;
        Drawable drawable;
        if (this.contactLine == null) {
            this.contactLine = new ReplyMessageLine(this);
        }
        int check = this.contactLine.check(this.currentMessageObject, this.currentUser, this.currentChat, this.resourcesProvider, 4);
        if (this.contactBounce == null) {
            this.contactBounce = new ButtonBounce(this, 2.0f, 2.0f);
        }
        int imageX = (int) (this.photoImage.getImageX() - AndroidUtilities.dp(13.0f));
        int dp = this.layoutHeight - AndroidUtilities.dp(62.0f);
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        if (!reactionsLayoutInBubble.isEmpty && !reactionsLayoutInBubble.isSmall) {
            dp -= reactionsLayoutInBubble.totalHeight;
        }
        if (this.drawCommentButton) {
            dp -= AndroidUtilities.dp(shouldDrawTimeOnMedia() ? 39.3f : 41.0f);
        }
        int i2 = dp;
        if (this.contactRect == null) {
            this.contactRect = new RectF();
        }
        int backgroundDrawableRight = (getBackgroundDrawableRight() - (AndroidUtilities.dp(10.0f) + ((!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : AndroidUtilities.dp(6.0f)))) - getExtraTextX();
        this.contactRect.set(imageX, this.photoImage.getImageY() - AndroidUtilities.dp(9.0f), backgroundDrawableRight, AndroidUtilities.dp(38.0f) + i2);
        float scale = this.contactBounce.getScale(0.0125f);
        boolean z2 = scale != 1.0f;
        if (z2) {
            canvas.save();
            canvas.scale(scale, scale, this.contactRect.centerX(), this.contactRect.centerY());
        }
        if (Build.VERSION.SDK_INT >= 21 && (drawable = this.selectorDrawable[0]) != null) {
            this.selectorDrawableMaskType[0] = 0;
            drawable.setBounds(imageX, (int) (this.photoImage.getImageY() - AndroidUtilities.dp(9.0f)), backgroundDrawableRight, AndroidUtilities.dp(38.0f) + i2);
            if (this.selectorDrawableColor != Theme.multAlpha(this.contactLine.getColor(), 0.1f)) {
                Drawable drawable2 = this.selectorDrawable[0];
                int multAlpha = Theme.multAlpha(this.contactLine.getColor(), 0.1f);
                this.selectorDrawableColor = multAlpha;
                Theme.setSelectorDrawableColor(drawable2, multAlpha, true);
            }
            this.selectorDrawable[0].draw(canvas);
        }
        float floor = (float) Math.floor(SharedConfig.bubbleRadius / 3.0f);
        int i3 = (int) floor;
        this.contactLine.drawBackground(canvas, this.contactRect, floor, floor, floor, 1.0f);
        this.contactLine.drawLine(canvas, this.contactRect, 1.0f);
        Theme.chat_contactNamePaint.setColor(check);
        Theme.chat_contactPhonePaint.setColor(getThemedColor(Theme.key_chat_inContactPhoneSelectedText));
        if (this.currentMessageObject.isOutOwner()) {
            textPaint = Theme.chat_contactPhonePaint;
            i = Theme.key_chat_messageTextOut;
        } else {
            textPaint = Theme.chat_contactPhonePaint;
            i = Theme.key_chat_messageTextIn;
        }
        textPaint.setColor(getThemedColor(i));
        if (this.titleLayout != null) {
            canvas.save();
            canvas.translate(this.photoImage.getImageX() + this.photoImage.getImageWidth() + AndroidUtilities.dp(9.0f), AndroidUtilities.dp(27.0f) + this.namesOffset);
            SpoilerEffect.layoutDrawMaybe(this.titleLayout, canvas);
            canvas.restore();
        }
        if (this.docTitleLayout != null) {
            canvas.save();
            canvas.translate(this.photoImage.getImageX() + this.photoImage.getImageWidth() + AndroidUtilities.dp(9.0f), AndroidUtilities.dp(50.0f) + this.namesOffset);
            SpoilerEffect.layoutDrawMaybe(this.docTitleLayout, canvas);
            canvas.restore();
        }
        ArrayList arrayList = this.contactButtons;
        if (arrayList != null && arrayList.size() > 0) {
            Theme.chat_instantViewPaint.setColor(check);
            Theme.chat_instantViewButtonPaint.setColor(Theme.multAlpha(check, 0.1f));
            int alpha = Theme.chat_instantViewPaint.getAlpha();
            Theme.chat_instantViewPaint.setAlpha((int) (alpha * 0.18f));
            canvas.drawRect(AndroidUtilities.dp(10.0f) + this.contactRect.left, AndroidUtilities.dp(2.0f) + i2, this.contactRect.right - AndroidUtilities.dp(7.0f), AndroidUtilities.dp(2.0f) + i2 + Math.max(1, AndroidUtilities.dp(0.66f)), Theme.chat_instantViewPaint);
            Theme.chat_instantViewPaint.setAlpha(alpha);
            int dp2 = i2 + AndroidUtilities.dp(2.0f);
            float dp3 = imageX + AndroidUtilities.dp(3.0f);
            ArrayList arrayList2 = this.contactButtons;
            boolean z3 = arrayList2 != null && arrayList2.size() > 1;
            int backgroundColor = this.contactLine.getBackgroundColor();
            int i4 = 0;
            while (i4 < this.contactButtons.size()) {
                InstantViewButton instantViewButton = (InstantViewButton) this.contactButtons.get(i4);
                float min = Math.min(instantViewButton.buttonWidth + dp3, this.contactRect.right);
                instantViewButton.rect.set(dp3, dp2, min, AndroidUtilities.dp(36.0f) + dp2);
                if (z3 && instantViewButton.selectorDrawable == null) {
                    this.linkPreviewSelectorColor = backgroundColor;
                    instantViewButton.selectorDrawable = Theme.createRadSelectorDrawable(backgroundColor, 0, 0, i4 == this.contactButtons.size() - 1 ? i3 : 0, 0);
                    instantViewButton.selectorDrawable.setCallback(this);
                }
                if (instantViewButton.selectorDrawable != null) {
                    instantViewButton.selectorDrawable.setBounds((int) dp3, dp2, (int) min, AndroidUtilities.dp(36.0f) + dp2);
                    instantViewButton.selectorDrawable.draw(canvas);
                }
                if (z2 || instantViewButton.buttonBounce == null) {
                    z = false;
                    f = 1.0f;
                } else {
                    f = instantViewButton.buttonBounce.getScale(0.02f);
                    z = f != 1.0f;
                }
                if (z) {
                    canvas.save();
                    canvas.scale(f, f, instantViewButton.rect.centerX(), instantViewButton.rect.centerY());
                }
                if (instantViewButton.layout != null) {
                    canvas.save();
                    canvas.translate(instantViewButton.textX + dp3, AndroidUtilities.dp(10.5f) + dp2);
                    instantViewButton.layout.draw(canvas);
                    canvas.restore();
                }
                if (z) {
                    canvas.restore();
                }
                dp3 += instantViewButton.buttonWidth;
                i4++;
            }
        }
        if (z2) {
            canvas.restore();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:129:0x006a  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x005f  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x00eb  */
    /* JADX WARN: Removed duplicated region for block: B:29:0x0109  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0131  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x0148  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0158  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x016b  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0151  */
    /* JADX WARN: Removed duplicated region for block: B:63:0x013d  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x01af  */
    /* JADX WARN: Removed duplicated region for block: B:73:0x01c0  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawSideButton(Canvas canvas) {
        float dp;
        float f;
        float f2;
        float currentTotalHeight;
        Drawable themedDrawable;
        Path path;
        Paint themedPaint;
        TransitionParams transitionParams;
        MessageObject.GroupedMessages groupedMessages;
        if (this.drawSideButton == 0) {
            return;
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null && (groupedMessages = this.currentMessagesGroup) != null && groupedMessages.isDocuments && !groupedMessagePosition.last) {
            return;
        }
        if (this.currentMessageObject.isOutOwner()) {
            dp = this.transitionParams.lastBackgroundLeft - AndroidUtilities.dp(40.0f);
            this.sideStartX = dp;
            MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
            if (groupedMessages2 != null) {
                f = groupedMessages2.transitionParams.offsetLeft;
                this.sideStartX = dp + (f - this.animationOffsetX);
            }
            if (this.drawSideButton != 4) {
                this.sideStartY = AndroidUtilities.dp(6.0f);
            } else {
                float dp2 = (this.layoutHeight + this.transitionParams.deltaBottom) - AndroidUtilities.dp(41.0f);
                this.sideStartY = dp2;
                MessageObject messageObject = this.currentMessageObject;
                if (messageObject.type == 19 && messageObject.textWidth < this.timeTextWidth) {
                    this.sideStartY = dp2 - AndroidUtilities.dp(22.0f);
                }
                MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
                if (groupedMessages3 != null) {
                    float f3 = this.sideStartY;
                    MessageObject.GroupedMessages.TransitionParams transitionParams2 = groupedMessages3.transitionParams;
                    float f4 = f3 + transitionParams2.offsetBottom;
                    this.sideStartY = f4;
                    if (transitionParams2.backgroundChangeBounds) {
                        this.sideStartY = f4 - getTranslationY();
                    }
                }
                if (this.currentMessageObject.shouldDrawReactions()) {
                    ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                    if (!reactionsLayoutInBubble.isSmall) {
                        if (this.isRoundVideo) {
                            f2 = this.sideStartY;
                            currentTotalHeight = reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress) * (1.0f - getVideoTranscriptionProgress());
                        } else if (reactionsLayoutInBubble.drawServiceShaderBackground > 0.0f) {
                            f2 = this.sideStartY;
                            currentTotalHeight = reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress);
                        }
                        this.sideStartY = f2 - currentTotalHeight;
                    }
                }
            }
            if (this.drawSideButton != 4) {
                float dp3 = ((this.layoutHeight + this.transitionParams.deltaBottom) - AndroidUtilities.dp(32.0f)) / 2.0f;
                if (this.sideStartY < dp3) {
                    this.sideStartY = dp3;
                }
            }
            if (this.currentMessageObject.type == 19) {
                if (this.drawSideButton != 3 || this.commentLayout == null) {
                    this.sideStartY = 0.0f;
                } else {
                    this.sideStartY = AndroidUtilities.dp(18.0f);
                }
            }
            if (!this.currentMessageObject.isOutOwner() && this.isRoundVideo && !this.hasLinkPreview) {
                float dp4 = !this.isAvatarVisible ? (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize) * 0.7f : AndroidUtilities.dp(50.0f);
                float videoTranscriptionProgress = !this.isPlayingRound ? (1.0f - getVideoTranscriptionProgress()) * dp4 : 0.0f;
                float dp5 = this.isPlayingRound ? AndroidUtilities.dp(28.0f) * (1.0f - getVideoTranscriptionProgress()) : 0.0f;
                transitionParams = this.transitionParams;
                if (transitionParams.animatePlayingRound) {
                    videoTranscriptionProgress = (this.isPlayingRound ? transitionParams.animateChangeProgress : 1.0f - transitionParams.animateChangeProgress) * (1.0f - getVideoTranscriptionProgress()) * dp4;
                    dp5 = AndroidUtilities.dp(28.0f) * (this.isPlayingRound ? this.transitionParams.animateChangeProgress : 1.0f - this.transitionParams.animateChangeProgress) * (1.0f - getVideoTranscriptionProgress());
                }
                this.sideStartX -= videoTranscriptionProgress;
                this.sideStartY -= dp5;
            }
            this.sideButtonVisible = true;
            if (this.drawSideButton != 3) {
                if (!this.enterTransitionInProgress || this.currentMessageObject.isVoice()) {
                    drawCommentButton(canvas, 1.0f);
                    return;
                }
                return;
            }
            if (SizeNotifierFrameLayout.drawingBlur) {
                return;
            }
            RectF rectF = this.rect;
            float f5 = this.sideStartX;
            rectF.set(f5, this.sideStartY, AndroidUtilities.dp(32.0f) + f5, this.sideStartY + AndroidUtilities.dp(this.drawSideButton2 == 5 ? 64.0f : 32.0f));
            if (this.rect.right >= getMeasuredWidth()) {
                this.sideButtonVisible = false;
                return;
            }
            applyServiceShaderMatrix();
            if (this.drawSideButton == 4 && this.drawSideButton2 == 5 && this.sideButtonPressed) {
                Path path2 = this.sideButtonPath1;
                if (path2 == null) {
                    this.sideButtonPath1 = new Path();
                } else {
                    path2.rewind();
                }
                Path path3 = this.sideButtonPath2;
                if (path3 == null) {
                    this.sideButtonPath2 = new Path();
                } else {
                    path3.rewind();
                }
                if (this.sideButtonPathCorners1 == null) {
                    this.sideButtonPathCorners1 = new float[]{r7, r7, r7, r7, 0.0f, 0.0f, 0.0f, 0.0f};
                    float dp6 = AndroidUtilities.dp(16.0f);
                }
                if (this.sideButtonPathCorners2 == null) {
                    this.sideButtonPathCorners2 = new float[]{0.0f, 0.0f, 0.0f, 0.0f, r3, r3, r3, r3};
                    float dp7 = AndroidUtilities.dp(16.0f);
                }
                RectF rectF2 = AndroidUtilities.rectTmp;
                float f6 = this.sideStartX;
                rectF2.set(f6, this.sideStartY, AndroidUtilities.dp(32.0f) + f6, this.sideStartY + AndroidUtilities.dp(32.0f));
                Path path4 = this.sideButtonPath1;
                float[] fArr = this.sideButtonPathCorners1;
                Path.Direction direction = Path.Direction.CW;
                path4.addRoundRect(rectF2, fArr, direction);
                rectF2.set(this.sideStartX, this.sideStartY + AndroidUtilities.dp(32.0f), this.sideStartX + AndroidUtilities.dp(32.0f), this.sideStartY + AndroidUtilities.dp(64.0f));
                this.sideButtonPath2.addRoundRect(rectF2, this.sideButtonPathCorners2, direction);
                if (this.pressedSideButton == 4) {
                    canvas.drawPath(this.sideButtonPath1, getThemedPaint("paintChatActionBackgroundSelected"));
                    path = this.sideButtonPath2;
                    themedPaint = getThemedPaint("paintChatActionBackground");
                } else {
                    canvas.drawPath(this.sideButtonPath1, getThemedPaint("paintChatActionBackground"));
                    path = this.sideButtonPath2;
                    themedPaint = getThemedPaint("paintChatActionBackgroundSelected");
                }
                canvas.drawPath(path, themedPaint);
            } else {
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), getThemedPaint(this.sideButtonPressed ? "paintChatActionBackgroundSelected" : "paintChatActionBackground"));
            }
            if (hasGradientService()) {
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
            }
            int i = this.drawSideButton;
            if (i == 2) {
                Drawable themedDrawable2 = getThemedDrawable("drawableGoIcon");
                BaseCell.setDrawableBounds(themedDrawable2, (this.sideStartX + AndroidUtilities.dp(16.0f)) - (themedDrawable2.getIntrinsicWidth() / 2.0f), (this.sideStartY + AndroidUtilities.dp(16.0f)) - (themedDrawable2.getIntrinsicHeight() / 2.0f));
                themedDrawable2.draw(canvas);
                return;
            }
            if (i == 4) {
                int dp8 = (int) (this.sideStartX + AndroidUtilities.dp(16.0f));
                int dp9 = (int) (this.sideStartY + AndroidUtilities.dp(16.0f));
                Drawable themedDrawable3 = getThemedDrawable("drawableCloseIcon");
                int intrinsicWidth = themedDrawable3.getIntrinsicWidth() / 2;
                int intrinsicHeight = themedDrawable3.getIntrinsicHeight() / 2;
                themedDrawable3.setBounds(dp8 - intrinsicWidth, dp9 - intrinsicHeight, intrinsicWidth + dp8, intrinsicHeight + dp9);
                BaseCell.setDrawableBounds(themedDrawable3, this.sideStartX + AndroidUtilities.dp(4.0f), this.sideStartY + AndroidUtilities.dp(4.0f));
                canvas.save();
                canvas.scale(0.65f, 0.65f, themedDrawable3.getBounds().centerX(), themedDrawable3.getBounds().centerY());
                themedDrawable3.draw(canvas);
                canvas.restore();
                if (this.drawSideButton2 != 5) {
                    return;
                }
                themedDrawable = getThemedDrawable("drawableMoreIcon");
                int intrinsicWidth2 = themedDrawable.getIntrinsicWidth() / 2;
                int intrinsicHeight2 = themedDrawable.getIntrinsicHeight() / 2;
                themedDrawable.setBounds(dp8 - intrinsicWidth2, dp9 - intrinsicHeight2, dp8 + intrinsicWidth2, dp9 + intrinsicHeight2);
                BaseCell.setDrawableBounds(themedDrawable, this.sideStartX + AndroidUtilities.dp(4.0f), this.sideStartY + AndroidUtilities.dp(34.0f));
            } else {
                int dp10 = (int) (this.sideStartX + AndroidUtilities.dp(16.0f));
                int dp11 = (int) (this.sideStartY + AndroidUtilities.dp(16.0f));
                themedDrawable = getThemedDrawable("drawableShareIcon");
                int intrinsicWidth3 = themedDrawable.getIntrinsicWidth() / 2;
                int intrinsicHeight3 = themedDrawable.getIntrinsicHeight() / 2;
                themedDrawable.setBounds(dp10 - intrinsicWidth3, dp11 - intrinsicHeight3, dp10 + intrinsicWidth3, dp11 + intrinsicHeight3);
                BaseCell.setDrawableBounds(themedDrawable, this.sideStartX + AndroidUtilities.dp(4.0f), this.sideStartY + AndroidUtilities.dp(4.0f));
            }
            themedDrawable.draw(canvas);
            return;
        }
        dp = this.transitionParams.lastBackgroundRight + AndroidUtilities.dp(8.0f);
        this.sideStartX = dp;
        MessageObject.GroupedMessages groupedMessages4 = this.currentMessagesGroup;
        if (groupedMessages4 != null) {
            f = groupedMessages4.transitionParams.offsetRight;
            this.sideStartX = dp + (f - this.animationOffsetX);
        }
        if (this.drawSideButton != 4) {
        }
        if (this.drawSideButton != 4) {
        }
        if (this.currentMessageObject.type == 19) {
        }
        if (!this.currentMessageObject.isOutOwner()) {
            if (!this.isAvatarVisible) {
            }
            if (!this.isPlayingRound) {
            }
            if (this.isPlayingRound) {
            }
            transitionParams = this.transitionParams;
            if (transitionParams.animatePlayingRound) {
            }
            this.sideStartX -= videoTranscriptionProgress;
            this.sideStartY -= dp5;
        }
        this.sideButtonVisible = true;
        if (this.drawSideButton != 3) {
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:111:0x02e1, code lost:
    
        if (r30 != false) goto L133;
     */
    /* JADX WARN: Code restructure failed: missing block: B:138:0x034a, code lost:
    
        if (r30 == false) goto L171;
     */
    /* JADX WARN: Code restructure failed: missing block: B:155:0x03ae, code lost:
    
        if (r30 == false) goto L171;
     */
    /* JADX WARN: Code restructure failed: missing block: B:69:0x0225, code lost:
    
        if (r30 != false) goto L133;
     */
    /* JADX WARN: Code restructure failed: missing block: B:70:0x02e6, code lost:
    
        r15.setAlpha(org.telegram.messenger.NotificationCenter.newLocationAvailable);
     */
    /* JADX WARN: Code restructure failed: missing block: B:71:0x02e3, code lost:
    
        r20.restore();
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawStatusDrawable(Canvas canvas, boolean z, boolean z2, boolean z3, boolean z4, float f, boolean z5, float f2, float f3, float f4, boolean z6, boolean z7) {
        float photoBottom;
        int dp;
        int dp2;
        Drawable themedDrawable;
        Drawable themedDrawable2;
        Drawable drawable;
        Drawable drawable2;
        int i;
        int dp3;
        int i2;
        int dp4;
        int i3;
        float f5;
        MessageObject messageObject;
        boolean z8 = (f4 == 1.0f || z6) ? false : true;
        float f6 = (f4 * 0.5f) + 0.5f;
        float f7 = z8 ? f * f4 : f;
        if (this.documentAttachType != 7 || ((messageObject = this.currentMessageObject) != null && messageObject.isRoundOnce())) {
            photoBottom = getPhotoBottom() + this.additionalTimeOffsetY;
        } else {
            photoBottom = f3 - ((AndroidUtilities.dp(this.drawPinnedBottom ? 4.0f : 5.0f) + this.reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress)) * (1.0f - getVideoTranscriptionProgress()));
        }
        float dp5 = photoBottom - AndroidUtilities.dp(8.5f);
        MessageObject messageObject2 = this.currentMessageObject;
        float dp6 = (messageObject2 == null || !messageObject2.isAnyKindOfSticker()) ? 0.0f : AndroidUtilities.dp(-6.0f);
        if (z3) {
            MsgClockDrawable msgClockDrawable = Theme.chat_msgClockDrawable;
            if (shouldDrawTimeOnMedia()) {
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    i3 = getThemedColor(Theme.key_chat_serviceText);
                    BaseCell.setDrawableBounds(msgClockDrawable, ((this.layoutWidth - AndroidUtilities.dp(z5 ? 24.0f : 22.0f)) - msgClockDrawable.getIntrinsicWidth()) + dp6, (dp5 - msgClockDrawable.getIntrinsicHeight()) + f2);
                    f5 = this.timeAlpha * 255.0f * f7;
                } else {
                    i3 = getThemedColor(Theme.key_chat_mediaSentClock);
                    BaseCell.setDrawableBounds(msgClockDrawable, ((this.layoutWidth - AndroidUtilities.dp(z5 ? 24.0f : 22.0f)) - msgClockDrawable.getIntrinsicWidth()) + dp6, (dp5 - msgClockDrawable.getIntrinsicHeight()) + f2);
                    f5 = f7 * 255.0f;
                }
                msgClockDrawable.setAlpha((int) f5);
            } else {
                int themedColor = getThemedColor(Theme.key_chat_outSentClock);
                BaseCell.setDrawableBounds(msgClockDrawable, (this.layoutWidth - AndroidUtilities.dp(18.5f)) - msgClockDrawable.getIntrinsicWidth(), ((f3 - AndroidUtilities.dp(8.5f)) - msgClockDrawable.getIntrinsicHeight()) + f2);
                msgClockDrawable.setAlpha((int) (f7 * 255.0f));
                i3 = themedColor;
            }
            msgClockDrawable.setColor(i3);
            if (z8) {
                canvas.save();
                canvas.scale(f6, f6, msgClockDrawable.getBounds().centerX(), msgClockDrawable.getBounds().centerY());
            }
            msgClockDrawable.draw(canvas);
            msgClockDrawable.setAlpha(NotificationCenter.newLocationAvailable);
            if (z8) {
                canvas.restore();
            }
            invalidate();
        }
        if (z2) {
            if (shouldDrawTimeOnMedia()) {
                if (z6) {
                    canvas.save();
                }
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    drawable = getThemedDrawable("drawableMsgStickerCheck");
                    if (z) {
                        if (z6) {
                            canvas.translate(AndroidUtilities.dp(4.8f) * (1.0f - f4), 0.0f);
                        }
                        i2 = this.layoutWidth;
                        dp4 = AndroidUtilities.dp(z5 ? 28.3f : 26.3f);
                    } else {
                        i2 = this.layoutWidth;
                        dp4 = AndroidUtilities.dp(z5 ? 23.5f : 21.5f);
                    }
                    BaseCell.setDrawableBounds(drawable, ((i2 - dp4) - drawable.getIntrinsicWidth()) + dp6, (dp5 - drawable.getIntrinsicHeight()) + f2);
                    drawable.setAlpha((int) (this.timeAlpha * 255.0f * f7));
                } else {
                    if (z) {
                        if (z6) {
                            canvas.translate(AndroidUtilities.dp(4.8f) * (1.0f - f4), 0.0f);
                        }
                        drawable2 = Theme.chat_msgMediaCheckDrawable;
                        i = this.layoutWidth;
                        dp3 = AndroidUtilities.dp(z5 ? 28.3f : 26.3f);
                    } else {
                        drawable2 = Theme.chat_msgMediaCheckDrawable;
                        i = this.layoutWidth;
                        dp3 = AndroidUtilities.dp(z5 ? 23.5f : 21.5f);
                    }
                    BaseCell.setDrawableBounds(drawable2, (i - dp3) - Theme.chat_msgMediaCheckDrawable.getIntrinsicWidth(), (dp5 - Theme.chat_msgMediaCheckDrawable.getIntrinsicHeight()) + f2);
                    Theme.chat_msgMediaCheckDrawable.setAlpha((int) (this.timeAlpha * 255.0f * f7));
                    drawable = Theme.chat_msgMediaCheckDrawable;
                }
                if (z8) {
                    canvas.save();
                    canvas.scale(f6, f6, drawable.getBounds().centerX(), drawable.getBounds().centerY());
                }
                drawable.draw(canvas);
                if (z8) {
                    canvas.restore();
                }
            } else {
                if (z6) {
                    canvas.save();
                }
                if (z) {
                    if (z6) {
                        canvas.translate(AndroidUtilities.dp(4.0f) * (1.0f - f4), 0.0f);
                    }
                    themedDrawable2 = getThemedDrawable(z7 ? "drawableMsgOutCheckReadSelected" : "drawableMsgOutCheckRead");
                    BaseCell.setDrawableBounds(themedDrawable2, ((this.layoutWidth - AndroidUtilities.dp(22.5f)) - themedDrawable2.getIntrinsicWidth()) + dp6, ((f3 - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 9.0f : 8.0f)) - themedDrawable2.getIntrinsicHeight()) + f2);
                } else {
                    themedDrawable2 = getThemedDrawable(z7 ? "drawableMsgOutCheckSelected" : "drawableMsgOutCheck");
                    BaseCell.setDrawableBounds(themedDrawable2, ((this.layoutWidth - AndroidUtilities.dp(18.5f)) - themedDrawable2.getIntrinsicWidth()) + dp6, ((f3 - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 9.0f : 8.0f)) - themedDrawable2.getIntrinsicHeight()) + f2);
                }
                drawable = themedDrawable2;
                drawable.setAlpha((int) (f7 * 255.0f));
                if (z8) {
                    canvas.save();
                    canvas.scale(f6, f6, drawable.getBounds().centerX(), drawable.getBounds().centerY());
                }
                drawable.draw(canvas);
                if (z8) {
                    canvas.restore();
                }
            }
        }
        if (z) {
            if (shouldDrawTimeOnMedia()) {
                themedDrawable = this.currentMessageObject.shouldDrawWithoutBackground() ? getThemedDrawable("drawableMsgStickerHalfCheck") : Theme.chat_msgMediaHalfCheckDrawable;
                BaseCell.setDrawableBounds(themedDrawable, ((this.layoutWidth - AndroidUtilities.dp(z5 ? 23.5f : 21.5f)) - themedDrawable.getIntrinsicWidth()) + dp6, (dp5 - themedDrawable.getIntrinsicHeight()) + f2);
                themedDrawable.setAlpha((int) (this.timeAlpha * 255.0f * f7));
                if (z8 || z6) {
                    canvas.save();
                    canvas.scale(f6, f6, themedDrawable.getBounds().centerX(), themedDrawable.getBounds().centerY());
                }
                themedDrawable.draw(canvas);
                if (!z8) {
                }
                canvas.restore();
                themedDrawable.setAlpha(NotificationCenter.newLocationAvailable);
            } else {
                themedDrawable = getThemedDrawable(z7 ? "drawableMsgOutHalfCheckSelected" : "drawableMsgOutHalfCheck");
                BaseCell.setDrawableBounds(themedDrawable, (this.layoutWidth - AndroidUtilities.dp(18.0f)) - themedDrawable.getIntrinsicWidth(), ((f3 - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 9.0f : 8.0f)) - themedDrawable.getIntrinsicHeight()) + f2);
                themedDrawable.setAlpha((int) (f7 * 255.0f));
                if (z8 || z6) {
                    canvas.save();
                    canvas.scale(f6, f6, themedDrawable.getBounds().centerX(), themedDrawable.getBounds().centerY());
                }
                themedDrawable.draw(canvas);
                if (!z8) {
                }
                canvas.restore();
                themedDrawable.setAlpha(NotificationCenter.newLocationAvailable);
            }
        }
        if (z4) {
            if (shouldDrawTimeOnMedia()) {
                dp = this.layoutWidth - AndroidUtilities.dp(34.5f);
                dp2 = AndroidUtilities.dp(26.5f);
            } else {
                dp = this.layoutWidth - AndroidUtilities.dp(32.0f);
                dp2 = AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 22.0f : 21.0f);
            }
            float f8 = (f3 - dp2) + f2;
            this.rect.set((int) (dp + dp6), f8, AndroidUtilities.dp(14.0f) + r6, AndroidUtilities.dp(14.0f) + f8);
            int alpha = Theme.chat_msgErrorPaint.getAlpha();
            Theme.chat_msgErrorPaint.setAlpha((int) (alpha * f7));
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(1.0f), AndroidUtilities.dp(1.0f), Theme.chat_msgErrorPaint);
            Theme.chat_msgErrorPaint.setAlpha(alpha);
            BaseCell.setDrawableBounds(Theme.chat_msgErrorDrawable, r6 + AndroidUtilities.dp(6.0f), f8 + AndroidUtilities.dp(2.0f));
            Theme.chat_msgErrorDrawable.setAlpha((int) (f7 * 255.0f));
            if (z8) {
                canvas.save();
                canvas.scale(f6, f6, Theme.chat_msgErrorDrawable.getBounds().centerX(), Theme.chat_msgErrorDrawable.getBounds().centerY());
            }
            Theme.chat_msgErrorDrawable.draw(canvas);
            Theme.chat_msgErrorDrawable.setAlpha(NotificationCenter.newLocationAvailable);
            if (z8) {
                canvas.restore();
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:145:0x040e  */
    /* JADX WARN: Removed duplicated region for block: B:150:0x0426  */
    /* JADX WARN: Removed duplicated region for block: B:155:0x044a  */
    /* JADX WARN: Removed duplicated region for block: B:252:0x09ab  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawTimeInternal(Canvas canvas, float f, boolean z, float f2, StaticLayout staticLayout, float f3, boolean z2) {
        int i;
        TextPaint textPaint;
        int i2;
        int themedColor;
        float f4;
        float f5;
        String str;
        char c;
        char c2;
        char c3;
        int i3;
        float f6;
        int i4;
        boolean z3;
        float f7;
        char c4;
        float dp;
        boolean z4;
        float f8;
        float f9;
        boolean z5;
        ChatMessageCell chatMessageCell;
        Canvas canvas2;
        boolean z6;
        boolean z7;
        boolean z8;
        boolean z9;
        float f10;
        boolean z10;
        float f11;
        boolean z11;
        float f12;
        int dp2;
        boolean z12;
        String str2;
        float photoBottom;
        int i5;
        int i6;
        String str3;
        int i7;
        float f13;
        MessageObject messageObject;
        boolean z13 = z;
        if (((!this.drawTime || this.groupPhotoInvisible) && shouldDrawTimeOnMedia()) || staticLayout == null) {
            return;
        }
        MessageObject messageObject2 = this.currentMessageObject;
        if ((!messageObject2.deleted || this.currentPosition == null) && (i = messageObject2.type) != 16) {
            if (i == 5) {
                textPaint = Theme.chat_timePaint;
                themedColor = ColorUtils.blendARGB(getThemedColor(Theme.key_chat_serviceText), getThemedColor(isDrawSelectionBackground() ? this.currentMessageObject.isOutOwner() ? Theme.key_chat_outTimeSelectedText : Theme.key_chat_inTimeSelectedText : this.currentMessageObject.isOutOwner() ? Theme.key_chat_outTimeText : Theme.key_chat_inTimeText), getVideoTranscriptionProgress());
            } else {
                if (shouldDrawTimeOnMedia()) {
                    if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                        textPaint = Theme.chat_timePaint;
                        i2 = Theme.key_chat_serviceText;
                    } else {
                        textPaint = Theme.chat_timePaint;
                        i2 = Theme.key_chat_mediaTimeText;
                    }
                } else if (this.currentMessageObject.isOutOwner()) {
                    textPaint = Theme.chat_timePaint;
                    i2 = z2 ? Theme.key_chat_outTimeSelectedText : Theme.key_chat_outTimeText;
                } else {
                    textPaint = Theme.chat_timePaint;
                    i2 = z2 ? Theme.key_chat_inTimeSelectedText : Theme.key_chat_inTimeText;
                }
                themedColor = getThemedColor(i2);
            }
            textPaint.setColor(themedColor);
            float f14 = getTransitionParams().animateDrawingTimeAlpha ? getTransitionParams().animateChangeProgress * f : f;
            if (f14 != 1.0f) {
                Theme.chat_timePaint.setAlpha((int) (r0.getAlpha() * f14));
            }
            canvas.save();
            if (this.drawPinnedBottom && !shouldDrawTimeOnMedia()) {
                canvas.translate(0.0f, AndroidUtilities.dp(2.0f));
            }
            float f15 = this.layoutHeight;
            TransitionParams transitionParams = this.transitionParams;
            if (transitionParams.animateBackgroundBoundsInner) {
                f15 += transitionParams.deltaBottom;
            }
            if (transitionParams.shouldAnimateTimeX) {
                float f16 = transitionParams.animateFromTimeX;
                float f17 = transitionParams.animateChangeProgress;
                f4 = (f16 * (1.0f - f17)) + (this.timeX * f17);
            } else {
                f4 = f2;
            }
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages == null || !groupedMessages.transitionParams.backgroundChangeBounds) {
                f5 = f2;
            } else {
                f15 -= getTranslationY();
                float f18 = this.currentMessagesGroup.transitionParams.offsetRight;
                f5 = f2 + f18;
                f4 += f18;
            }
            if (this.drawPinnedBottom && shouldDrawTimeOnMedia()) {
                f15 += AndroidUtilities.dp(1.0f);
            }
            float f19 = f15;
            if (this.transitionParams.animateBackgroundBoundsInner) {
                float f20 = this.animationOffsetX;
                f5 += f20;
                f4 += f20;
            }
            float f21 = f5;
            if (this.currentMessageObject.shouldDrawReactions()) {
                ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                if (reactionsLayoutInBubble.isSmall) {
                    TransitionParams transitionParams2 = this.transitionParams;
                    f4 += (!transitionParams2.animateBackgroundBoundsInner || transitionParams2.deltaRight == 0.0f) ? reactionsLayoutInBubble.getCurrentWidth(transitionParams2.animateChangeProgress) : reactionsLayoutInBubble.getCurrentWidth(1.0f);
                }
            }
            if (this.transitionParams.animateEditedEnter) {
                f4 -= this.transitionParams.animateEditedWidthDiff * (1.0f - this.transitionParams.animateChangeProgress);
            }
            float f22 = f4;
            boolean z14 = true;
            if (shouldDrawTimeOnMedia()) {
                int i8 = -(this.drawCommentButton ? AndroidUtilities.dp(41.3f) : 0);
                Paint themedPaint = this.currentMessageObject.shouldDrawWithoutBackground() ? getThemedPaint("paintChatActionBackground") : getThemedPaint("paintChatTimeBackground");
                int alpha = themedPaint.getAlpha();
                Theme.chat_timePaint.setAlpha((int) (this.timeAlpha * 255.0f * f14));
                MessageObject messageObject3 = this.currentMessageObject;
                if (messageObject3 == null || messageObject3.type != 4) {
                    f12 = f14;
                } else {
                    float currentAlpha = this.photoImage.isCrossfadingWithOldImage() ? 1.0f : this.photoImage.getCurrentAlpha();
                    if (!this.photoImage.hasNotThumb()) {
                        currentAlpha = 0.0f;
                    }
                    f12 = AndroidUtilities.lerp(0.35f, 1.0f, currentAlpha);
                }
                MessageObject messageObject4 = this.currentMessageObject;
                if (messageObject4 != null && messageObject4.sendPreview) {
                    AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable = this.effectDrawable;
                    f12 *= swapAnimatedEmojiDrawable == null ? 0.0f : swapAnimatedEmojiDrawable.isNotEmpty();
                }
                themedPaint.setAlpha((int) (alpha * this.timeAlpha * f12 * 0.6f));
                int i9 = this.documentAttachType;
                if (i9 == 7 || i9 == 6 || this.currentMessageObject.type == 19) {
                    int dp3 = AndroidUtilities.dp(4.0f);
                    MessageObject messageObject5 = this.currentMessageObject;
                    dp2 = dp3 + ((messageObject5 == null || !messageObject5.isAnyKindOfSticker()) ? 0 : AndroidUtilities.dp(8.0f));
                    z12 = false;
                } else {
                    int[] roundRadius = this.photoImage.getRoundRadius();
                    dp2 = Math.min(AndroidUtilities.dp(8.0f), Math.max(roundRadius[2], roundRadius[3]));
                    z12 = SharedConfig.bubbleRadius >= 10;
                }
                MessageObject messageObject6 = this.currentMessageObject;
                float dp4 = f21 + ((messageObject6 == null || !messageObject6.isAnyKindOfSticker()) ? 0 : AndroidUtilities.dp(-6.0f));
                if (this.effectId != 0) {
                    dp4 -= AndroidUtilities.dp(18.0f);
                }
                float dp5 = dp4 - AndroidUtilities.dp(z12 ? 6.0f : 4.0f);
                MessageObject messageObject7 = this.currentMessageObject;
                float dp6 = (messageObject7 == null || !messageObject7.isAnyKindOfSticker()) ? 0.0f : AndroidUtilities.dp(2.0f);
                if (this.documentAttachType != 7 || ((messageObject = this.currentMessageObject) != null && messageObject.isRoundOnce())) {
                    str2 = "paintChatTimeBackground";
                    photoBottom = getPhotoBottom() + this.additionalTimeOffsetY;
                } else {
                    str2 = "paintChatTimeBackground";
                    photoBottom = f19 - ((AndroidUtilities.dp(this.drawPinnedBottom ? 4.0f : 5.0f) + this.reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress)) * (1.0f - getVideoTranscriptionProgress()));
                }
                float f23 = photoBottom;
                float dp7 = f23 - AndroidUtilities.dp(23.0f);
                float max = Math.max(AndroidUtilities.dp(17.0f), Theme.chat_timePaint.getTextSize() + AndroidUtilities.dp(5.0f));
                RectF rectF = this.rect;
                float f24 = dp5 - dp6;
                float f25 = dp6 + dp5 + f3;
                if (z12) {
                    i5 = 12;
                    z3 = z12;
                } else {
                    z3 = z12;
                    i5 = 8;
                }
                if (this.currentMessageObject.isOutOwner()) {
                    i6 = (this.currentMessageObject.type == 19 ? 4 : 0) + 20;
                } else {
                    i6 = 0;
                }
                rectF.set(f24, dp7, f25 + AndroidUtilities.dp(i5 + i6), max + dp7);
                GroupMedia groupMedia = this.groupMedia;
                if (groupMedia != null) {
                    groupMedia.drawBlurRect(canvas, this.rect, dp2, this.timeAlpha * 0.5f * f12);
                } else if (!this.currentMessageObject.isQuickReply()) {
                    if (!this.currentMessageObject.hasMediaSpoilers()) {
                        str3 = str2;
                    } else if (this.currentMessageObject.type != 5) {
                        this.rectPath.rewind();
                        float f26 = dp2;
                        this.rectPath.addRoundRect(this.rect, f26, f26, Path.Direction.CW);
                        canvas.save();
                        canvas.clipPath(this.rectPath);
                        ImageReceiver imageReceiver = this.currentMessageObject.needDrawBluredPreview() ? this.photoImage : this.blurredPhotoImage;
                        float alpha2 = imageReceiver.getAlpha();
                        imageReceiver.setAlpha(0.5f * alpha2);
                        imageReceiver.draw(canvas);
                        imageReceiver.setAlpha(alpha2);
                        canvas.restore();
                        str3 = str2;
                        Paint themedPaint2 = getThemedPaint(str3);
                        int alpha3 = themedPaint2.getAlpha();
                        themedPaint2.setAlpha((int) (alpha3 * this.controlsAlpha * 0.4f));
                        canvas.drawRoundRect(this.rect, f26, f26, themedPaint2);
                        themedPaint2.setAlpha(alpha3);
                        themedPaint.setAlpha(alpha);
                        float f27 = -staticLayout.getLineLeft(0);
                        MessageObject messageObject8 = this.currentMessageObject;
                        float dp8 = f27 + ((messageObject8 == null && messageObject8.isAnyKindOfSticker()) ? AndroidUtilities.dp(-6.0f) : 0);
                        if (!this.currentMessageObject.shouldDrawReactions() && this.reactionsLayoutInBubble.isSmall) {
                            updateReactionLayoutPosition();
                            this.reactionsLayoutInBubble.setScrimProgress(0.0f, false);
                            this.reactionsLayoutInBubble.draw(canvas, this.transitionParams.animateChangeProgress, null);
                        }
                        if ((ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) && (this.currentMessageObject.messageOwner.flags & 1024) == 0 && this.repliesLayout == null && !this.isPinned) {
                            z13 = z;
                            str = str3;
                            i7 = i8;
                            c = 4;
                            c2 = 6;
                            c3 = 7;
                        } else {
                            float lineWidth = dp8 + (this.timeWidth - staticLayout.getLineWidth(0));
                            ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
                            if (reactionsLayoutInBubble2.isSmall && !reactionsLayoutInBubble2.isEmpty) {
                                lineWidth -= reactionsLayoutInBubble2.width;
                            }
                            float f28 = lineWidth;
                            int createStatusDrawableParams = this.transitionParams.createStatusDrawableParams();
                            int i10 = this.transitionParams.lastStatusDrawableParams;
                            if (i10 < 0 || i10 == createStatusDrawableParams || this.statusDrawableAnimationInProgress) {
                                z13 = z;
                            } else {
                                z13 = z;
                                createStatusDrawableAnimator(i10, createStatusDrawableParams, z13);
                            }
                            boolean z15 = this.statusDrawableAnimationInProgress;
                            if (z15) {
                                createStatusDrawableParams = this.animateToStatusDrawableParams;
                            }
                            boolean z16 = (createStatusDrawableParams & 4) != 0;
                            boolean z17 = (createStatusDrawableParams & 8) != 0;
                            if (z15) {
                                int i11 = this.animateFromStatusDrawableParams;
                                boolean z18 = (i11 & 4) != 0;
                                boolean z19 = (i11 & 8) != 0;
                                float f29 = i8;
                                c = 4;
                                f13 = f28;
                                float f30 = f14;
                                str = str3;
                                i7 = i8;
                                c3 = 7;
                                float f31 = dp4;
                                c2 = 6;
                                drawClockOrErrorLayout(canvas, z18, z19, f19, f30, f29, f31, 1.0f - this.statusDrawableProgress, z2);
                                drawClockOrErrorLayout(canvas, z16, z17, f19, f30, f29, f31, this.statusDrawableProgress, z2);
                                if (!this.currentMessageObject.isOutOwner()) {
                                    if (!z18 && !z19) {
                                        drawViewsAndRepliesLayout(canvas, f19, f14, f29, dp4, 1.0f - this.statusDrawableProgress, z2);
                                    }
                                    if (!z16 && !z17) {
                                        drawViewsAndRepliesLayout(canvas, f19, f14, f29, dp4, this.statusDrawableProgress, z2);
                                    }
                                }
                            } else {
                                str = str3;
                                f13 = f28;
                                i7 = i8;
                                c = 4;
                                c2 = 6;
                                c3 = 7;
                                if (!this.currentMessageObject.isOutOwner() && !z16 && !z17) {
                                    drawViewsAndRepliesLayout(canvas, f19, f14, i7, dp4, 1.0f, z2);
                                }
                                drawClockOrErrorLayout(canvas, z16, z17, f19, f14, i7, dp4, 1.0f, z2);
                            }
                            if (this.currentMessageObject.isOutOwner()) {
                                drawViewsAndRepliesLayout(canvas, f19, f14, i7, dp4, 1.0f, z2);
                            }
                            TransitionParams transitionParams3 = this.transitionParams;
                            transitionParams3.lastStatusDrawableParams = transitionParams3.createStatusDrawableParams();
                            if (z16 && z13 && getParent() != null) {
                                ((View) getParent()).invalidate();
                            }
                            dp8 = f13;
                        }
                        canvas.save();
                        float f32 = f22 + dp8;
                        this.drawTimeX = f32;
                        float dp9 = (f23 - AndroidUtilities.dp(7.3f)) - staticLayout.getHeight();
                        this.drawTimeY = dp9;
                        canvas.translate(f32, dp9);
                        SpoilerEffect.layoutDrawMaybe(staticLayout, canvas);
                        canvas.restore();
                        Theme.chat_timePaint.setAlpha(NotificationCenter.newLocationAvailable);
                        i4 = i7;
                        f6 = 0.0f;
                    } else {
                        str3 = str2;
                    }
                    applyServiceShaderMatrix();
                    float f33 = dp2;
                    canvas.drawRoundRect(this.rect, f33, f33, themedPaint);
                    if (themedPaint == getThemedPaint("paintChatActionBackground") && hasGradientService()) {
                        int alpha4 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha4 * this.timeAlpha * f12));
                        canvas.drawRoundRect(this.rect, f33, f33, Theme.chat_actionBackgroundGradientDarkenPaint);
                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha4);
                    }
                    themedPaint.setAlpha(alpha);
                    float f272 = -staticLayout.getLineLeft(0);
                    MessageObject messageObject82 = this.currentMessageObject;
                    float dp82 = f272 + ((messageObject82 == null && messageObject82.isAnyKindOfSticker()) ? AndroidUtilities.dp(-6.0f) : 0);
                    if (!this.currentMessageObject.shouldDrawReactions()) {
                    }
                    if (ChatObject.isChannel(this.currentChat)) {
                    }
                    z13 = z;
                    str = str3;
                    i7 = i8;
                    c = 4;
                    c2 = 6;
                    c3 = 7;
                    canvas.save();
                    float f322 = f22 + dp82;
                    this.drawTimeX = f322;
                    float dp92 = (f23 - AndroidUtilities.dp(7.3f)) - staticLayout.getHeight();
                    this.drawTimeY = dp92;
                    canvas.translate(f322, dp92);
                    SpoilerEffect.layoutDrawMaybe(staticLayout, canvas);
                    canvas.restore();
                    Theme.chat_timePaint.setAlpha(NotificationCenter.newLocationAvailable);
                    i4 = i7;
                    f6 = 0.0f;
                }
                str3 = str2;
                themedPaint.setAlpha(alpha);
                float f2722 = -staticLayout.getLineLeft(0);
                MessageObject messageObject822 = this.currentMessageObject;
                float dp822 = f2722 + ((messageObject822 == null && messageObject822.isAnyKindOfSticker()) ? AndroidUtilities.dp(-6.0f) : 0);
                if (!this.currentMessageObject.shouldDrawReactions()) {
                }
                if (ChatObject.isChannel(this.currentChat)) {
                }
                z13 = z;
                str = str3;
                i7 = i8;
                c = 4;
                c2 = 6;
                c3 = 7;
                canvas.save();
                float f3222 = f22 + dp822;
                this.drawTimeX = f3222;
                float dp922 = (f23 - AndroidUtilities.dp(7.3f)) - staticLayout.getHeight();
                this.drawTimeY = dp922;
                canvas.translate(f3222, dp922);
                SpoilerEffect.layoutDrawMaybe(staticLayout, canvas);
                canvas.restore();
                Theme.chat_timePaint.setAlpha(NotificationCenter.newLocationAvailable);
                i4 = i7;
                f6 = 0.0f;
            } else {
                str = "paintChatTimeBackground";
                c = 4;
                c2 = 6;
                c3 = 7;
                if (this.currentMessageObject.isSponsored()) {
                    i3 = -AndroidUtilities.dp(48.0f);
                    if (this.hasNewLineForTime) {
                        i3 -= AndroidUtilities.dp(4.0f);
                    }
                } else {
                    i3 = -(this.drawCommentButton ? AndroidUtilities.dp(43.0f) : 0);
                }
                int i12 = i3;
                float f34 = -staticLayout.getLineLeft(0);
                if (this.currentMessageObject.shouldDrawReactions() && this.reactionsLayoutInBubble.isSmall) {
                    updateReactionLayoutPosition();
                    this.reactionsLayoutInBubble.setScrimProgress(0.0f, false);
                    this.reactionsLayoutInBubble.draw(canvas, this.transitionParams.animateChangeProgress, null);
                }
                if ((!ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) && (this.currentMessageObject.messageOwner.flags & 1024) == 0 && this.repliesLayout == null && !this.transitionParams.animateReplies && !this.isPinned && !this.transitionParams.animatePinned) {
                    f6 = 0.0f;
                } else {
                    float lineWidth2 = f34 + (f3 - staticLayout.getLineWidth(0));
                    ReactionsLayoutInBubble reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
                    if (reactionsLayoutInBubble3.isSmall && !reactionsLayoutInBubble3.isEmpty) {
                        lineWidth2 -= reactionsLayoutInBubble3.width;
                    }
                    float f35 = lineWidth2;
                    int createStatusDrawableParams2 = this.transitionParams.createStatusDrawableParams();
                    int i13 = this.transitionParams.lastStatusDrawableParams;
                    if (i13 >= 0 && i13 != createStatusDrawableParams2 && !this.statusDrawableAnimationInProgress) {
                        createStatusDrawableAnimator(i13, createStatusDrawableParams2, z13);
                    }
                    boolean z20 = this.statusDrawableAnimationInProgress;
                    if (z20) {
                        createStatusDrawableParams2 = this.animateToStatusDrawableParams;
                    }
                    boolean z21 = (createStatusDrawableParams2 & 4) != 0;
                    boolean z22 = (createStatusDrawableParams2 & 8) != 0;
                    if (z20) {
                        int i14 = this.animateFromStatusDrawableParams;
                        boolean z23 = (i14 & 4) != 0;
                        boolean z24 = (i14 & 8) != 0;
                        float f36 = i12;
                        float f37 = f14;
                        f6 = 0.0f;
                        drawClockOrErrorLayout(canvas, z23, z24, f19, f37, f36, f21, 1.0f - this.statusDrawableProgress, z2);
                        drawClockOrErrorLayout(canvas, z21, z22, f19, f37, f36, f21, this.statusDrawableProgress, z2);
                        if (!this.currentMessageObject.isOutOwner()) {
                            if (!z23 && !z24) {
                                drawViewsAndRepliesLayout(canvas, f19, f14, f36, f21, 1.0f - this.statusDrawableProgress, z2);
                            }
                            if (!z21 && !z22) {
                                drawViewsAndRepliesLayout(canvas, f19, f14, f36, f21, this.statusDrawableProgress, z2);
                            }
                        }
                    } else {
                        f6 = 0.0f;
                        if (!this.currentMessageObject.isOutOwner() && !z21 && !z22) {
                            drawViewsAndRepliesLayout(canvas, f19, f14, i12, f21, 1.0f, z2);
                        }
                        drawClockOrErrorLayout(canvas, z21, z22, f19, f14, i12, f21, 1.0f, z2);
                    }
                    if (this.currentMessageObject.isOutOwner()) {
                        drawViewsAndRepliesLayout(canvas, f19, f14, i12, f21, 1.0f, z2);
                    }
                    TransitionParams transitionParams4 = this.transitionParams;
                    transitionParams4.lastStatusDrawableParams = transitionParams4.createStatusDrawableParams();
                    if (z21 && z13 && getParent() != null) {
                        ((View) getParent()).invalidate();
                    }
                    f34 = f35;
                }
                canvas.save();
                float f38 = 7.5f;
                if (this.transitionParams.animateEditedEnter) {
                    TransitionParams transitionParams5 = this.transitionParams;
                    if (transitionParams5.animateChangeProgress != 1.0f) {
                        if (transitionParams5.animateEditedLayout != null) {
                            float f39 = f22 + f34;
                            if (!this.pinnedBottom && !this.pinnedTop) {
                                f38 = 6.5f;
                            }
                            canvas.translate(f39, ((f19 - AndroidUtilities.dp(f38)) - staticLayout.getHeight()) + i12);
                            int alpha5 = Theme.chat_timePaint.getAlpha();
                            Theme.chat_timePaint.setAlpha((int) (alpha5 * this.transitionParams.animateChangeProgress));
                            this.transitionParams.animateEditedLayout.draw(canvas);
                            Theme.chat_timePaint.setAlpha(alpha5);
                            SpoilerEffect.layoutDrawMaybe(this.transitionParams.animateTimeLayout, canvas);
                        } else {
                            int alpha6 = Theme.chat_timePaint.getAlpha();
                            canvas.save();
                            float f40 = i12;
                            canvas.translate(this.transitionParams.animateFromTimeX + f34, ((f19 - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 7.5f : 6.5f)) - staticLayout.getHeight()) + f40);
                            float f41 = alpha6;
                            Theme.chat_timePaint.setAlpha((int) ((1.0f - this.transitionParams.animateChangeProgress) * f41));
                            SpoilerEffect.layoutDrawMaybe(this.transitionParams.animateTimeLayout, canvas);
                            canvas.restore();
                            float f42 = f22 + f34;
                            if (!this.pinnedBottom && !this.pinnedTop) {
                                f38 = 6.5f;
                            }
                            canvas.translate(f42, ((f19 - AndroidUtilities.dp(f38)) - staticLayout.getHeight()) + f40);
                            Theme.chat_timePaint.setAlpha((int) (f41 * this.transitionParams.animateChangeProgress));
                            SpoilerEffect.layoutDrawMaybe(staticLayout, canvas);
                            Theme.chat_timePaint.setAlpha(alpha6);
                        }
                        canvas.restore();
                        i4 = i12;
                        z3 = false;
                    }
                }
                float f43 = f22 + f34;
                this.drawTimeX = f43;
                if (!this.pinnedBottom && !this.pinnedTop) {
                    f38 = 6.5f;
                }
                float dp10 = ((f19 - AndroidUtilities.dp(f38)) - staticLayout.getHeight()) + i12;
                this.drawTimeY = dp10;
                canvas.translate(f43, dp10);
                SpoilerEffect.layoutDrawMaybe(staticLayout, canvas);
                canvas.restore();
                i4 = i12;
                z3 = false;
            }
            if (this.currentMessageObject.isOutOwner()) {
                int createStatusDrawableParams3 = this.transitionParams.createStatusDrawableParams();
                int i15 = this.transitionParams.lastStatusDrawableParams;
                if (i15 >= 0 && i15 != createStatusDrawableParams3 && !this.statusDrawableAnimationInProgress) {
                    createStatusDrawableAnimator(i15, createStatusDrawableParams3, z13);
                }
                if (this.statusDrawableAnimationInProgress) {
                    createStatusDrawableParams3 = this.animateToStatusDrawableParams;
                }
                boolean z25 = (createStatusDrawableParams3 & 1) != 0;
                boolean z26 = (createStatusDrawableParams3 & 2) != 0;
                boolean z27 = (createStatusDrawableParams3 & 4) != 0;
                boolean z28 = (createStatusDrawableParams3 & 8) != 0;
                if (this.transitionYOffsetForDrawables != f6) {
                    canvas.save();
                    canvas.translate(f6, this.transitionYOffsetForDrawables);
                    z4 = true;
                } else {
                    z4 = false;
                }
                if (this.statusDrawableAnimationInProgress) {
                    int i16 = this.animateFromStatusDrawableParams;
                    boolean z29 = (i16 & 1) != 0;
                    boolean z30 = (i16 & 2) != 0;
                    boolean z31 = (i16 & 4) != 0;
                    boolean z32 = (i16 & 8) != 0;
                    if (!z31 && z30 && z26 && !z29 && z25) {
                        f8 = i4;
                        f9 = this.statusDrawableProgress;
                        chatMessageCell = this;
                        canvas2 = canvas;
                        z6 = z25;
                        z7 = z26;
                        z8 = z27;
                        z9 = z28;
                        f10 = f14;
                        z10 = z3;
                        f11 = f19;
                        f7 = 0.0f;
                        z5 = true;
                        c4 = 5;
                    } else {
                        f7 = 0.0f;
                        c4 = 5;
                        float f44 = i4;
                        z5 = false;
                        chatMessageCell = this;
                        canvas2 = canvas;
                        boolean z33 = z29;
                        boolean z34 = z30;
                        boolean z35 = z31;
                        boolean z36 = z32;
                        f10 = f14;
                        z10 = z3;
                        f11 = f19;
                        z11 = z2;
                        chatMessageCell.drawStatusDrawable(canvas2, z33, z34, z35, z36, f10, z10, f44, f11, 1.0f - this.statusDrawableProgress, false, z11);
                        f9 = this.statusDrawableProgress;
                        z6 = z25;
                        z7 = z26;
                        z8 = z27;
                        z9 = z28;
                        f8 = f44;
                        chatMessageCell.drawStatusDrawable(canvas2, z6, z7, z8, z9, f10, z10, f8, f11, f9, z5, z11);
                        if (z4) {
                            canvas.restore();
                        }
                        TransitionParams transitionParams6 = this.transitionParams;
                        transitionParams6.lastStatusDrawableParams = transitionParams6.createStatusDrawableParams();
                        if (z13 && z27 && getParent() != null) {
                            ((View) getParent()).invalidate();
                        }
                    }
                } else {
                    f7 = 0.0f;
                    c4 = 5;
                    f8 = i4;
                    f9 = 1.0f;
                    z5 = false;
                    chatMessageCell = this;
                    canvas2 = canvas;
                    z6 = z25;
                    z7 = z26;
                    z8 = z27;
                    z9 = z28;
                    f10 = f14;
                    z10 = z3;
                    f11 = f19;
                }
                z11 = z2;
                chatMessageCell.drawStatusDrawable(canvas2, z6, z7, z8, z9, f10, z10, f8, f11, f9, z5, z11);
                if (z4) {
                }
                TransitionParams transitionParams62 = this.transitionParams;
                transitionParams62.lastStatusDrawableParams = transitionParams62.createStatusDrawableParams();
                if (z13) {
                    ((View) getParent()).invalidate();
                }
            } else {
                f7 = 0.0f;
                c4 = 5;
            }
            canvas.restore();
            if (this.unlockLayout != null) {
                if (this.unlockX == f7 || this.unlockY == f7) {
                    calculateUnlockXY();
                }
                this.unlockSpoilerPath.rewind();
                RectF rectF2 = AndroidUtilities.rectTmp;
                rectF2.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
                int[] roundRadius2 = this.photoImage.getRoundRadius();
                float[] fArr = this.unlockSpoilerRadii;
                float f45 = roundRadius2[0];
                fArr[1] = f45;
                fArr[0] = f45;
                float f46 = roundRadius2[1];
                fArr[3] = f46;
                fArr[2] = f46;
                float f47 = roundRadius2[2];
                fArr[c4] = f47;
                fArr[c] = f47;
                float f48 = roundRadius2[3];
                fArr[c3] = f48;
                fArr[c2] = f48;
                Path path = this.unlockSpoilerPath;
                Path.Direction direction = Path.Direction.CW;
                path.addRoundRect(rectF2, fArr, direction);
                canvas.save();
                canvas.clipPath(this.unlockSpoilerPath);
                this.unlockSpoilerPath.rewind();
                rectF2.set(this.unlockX - AndroidUtilities.dp(12.0f), this.unlockY - AndroidUtilities.dp(8.0f), this.unlockX + Theme.chat_msgUnlockDrawable.getIntrinsicWidth() + AndroidUtilities.dp(14.0f) + this.unlockLayout.getWidth() + AndroidUtilities.dp(12.0f), this.unlockY + this.unlockLayout.getHeight() + AndroidUtilities.dp(8.0f));
                this.unlockSpoilerPath.addRoundRect(rectF2, AndroidUtilities.dp(32.0f), AndroidUtilities.dp(32.0f), direction);
                canvas.clipPath(this.unlockSpoilerPath, Region.Op.DIFFERENCE);
                if (this.mediaSpoilerEffect2 == null) {
                    this.unlockSpoilerEffect.setColor(ColorUtils.setAlphaComponent(-1, (int) (Color.alpha(-1) * 0.325f)));
                    this.unlockSpoilerEffect.setBounds((int) this.photoImage.getImageX(), (int) this.photoImage.getImageY(), (int) this.photoImage.getImageX2(), (int) this.photoImage.getImageY2());
                    this.unlockSpoilerEffect.draw(canvas);
                }
                invalidate();
                canvas.restore();
                canvas.saveLayerAlpha(0.0f, 0.0f, getWidth(), getHeight(), (int) (this.unlockAlpha * 255.0f), 31);
                int alpha7 = Theme.chat_timeBackgroundPaint.getAlpha();
                Theme.chat_timeBackgroundPaint.setAlpha((int) (alpha7 * 0.7f));
                canvas.drawRoundRect(rectF2, AndroidUtilities.dp(32.0f), AndroidUtilities.dp(32.0f), Theme.chat_timeBackgroundPaint);
                Theme.chat_timeBackgroundPaint.setAlpha(alpha7);
                canvas.translate(this.unlockX + AndroidUtilities.dp(4.0f), this.unlockY);
                Drawable drawable = Theme.chat_msgUnlockDrawable;
                drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), Theme.chat_msgUnlockDrawable.getIntrinsicHeight());
                Theme.chat_msgUnlockDrawable.draw(canvas);
                canvas.translate(AndroidUtilities.dp(6.0f) + Theme.chat_msgUnlockDrawable.getIntrinsicWidth(), 0.0f);
                SpoilerEffect.layoutDrawMaybe(this.unlockLayout, canvas);
                canvas.restore();
                if (this.videoInfoLayout != null && this.photoImage.getVisible() && this.imageBackgroundSideColor == 0) {
                    int i17 = SharedConfig.bubbleRadius;
                    if (i17 > 2) {
                        dp = AndroidUtilities.dp(i17 - 2);
                        if (SharedConfig.bubbleRadius < 10) {
                            z14 = false;
                        }
                    } else {
                        dp = AndroidUtilities.dp(i17);
                        z14 = z3;
                    }
                    int imageX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(9.0f));
                    int imageY = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(6.0f));
                    this.rect.set(imageX - AndroidUtilities.dp(4.0f), imageY - AndroidUtilities.dp(1.5f), this.durationWidth + imageX + AndroidUtilities.dp(4.0f) + AndroidUtilities.dp(z14 ? 2.0f : 0.0f), this.videoInfoLayout.getHeight() + imageY + AndroidUtilities.dp(1.5f));
                    canvas.drawRoundRect(this.rect, dp, dp, getThemedPaint(str));
                    canvas.save();
                    canvas.translate(imageX + (z14 ? 2 : 0), imageY);
                    SpoilerEffect.layoutDrawMaybe(this.videoInfoLayout, canvas);
                    canvas.restore();
                }
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:100:0x0434  */
    /* JADX WARN: Removed duplicated region for block: B:105:0x0413  */
    /* JADX WARN: Removed duplicated region for block: B:118:0x02a0  */
    /* JADX WARN: Removed duplicated region for block: B:177:0x0110  */
    /* JADX WARN: Removed duplicated region for block: B:181:0x0129  */
    /* JADX WARN: Removed duplicated region for block: B:184:0x0153  */
    /* JADX WARN: Removed duplicated region for block: B:192:0x01ca  */
    /* JADX WARN: Removed duplicated region for block: B:194:0x01d9  */
    /* JADX WARN: Removed duplicated region for block: B:197:0x01e4  */
    /* JADX WARN: Removed duplicated region for block: B:199:0x01b4  */
    /* JADX WARN: Removed duplicated region for block: B:203:0x019a  */
    /* JADX WARN: Removed duplicated region for block: B:204:0x0117  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x027e  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x02b6  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x030d  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x0325  */
    /* JADX WARN: Removed duplicated region for block: B:92:0x03d9  */
    /* JADX WARN: Removed duplicated region for block: B:97:0x041a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void drawViewsAndRepliesLayout(Canvas canvas, float f, float f2, float f3, float f4, float f5, boolean z) {
        String str;
        Drawable drawable;
        float f6;
        float f7;
        float f8;
        float f9;
        StaticLayout staticLayout;
        float f10;
        String str2;
        Drawable drawable2;
        float f11;
        float f12;
        float textSize;
        String str3;
        Drawable drawable3;
        boolean z2 = f5 != 1.0f;
        float f13 = (f5 * 0.5f) + 0.5f;
        float f14 = f2 * f5;
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        float currentWidth = reactionsLayoutInBubble.isSmall ? reactionsLayoutInBubble.getCurrentWidth(1.0f) : 0.0f;
        int alpha = Theme.chat_timePaint.getAlpha();
        float timeY = getTimeY(f3);
        if (this.repliesLayout != null || this.transitionParams.animateReplies) {
            TransitionParams transitionParams = this.transitionParams;
            float f15 = (transitionParams.shouldAnimateTimeX ? this.timeX : f4) + currentWidth;
            boolean z3 = transitionParams.animateReplies && this.transitionParams.animateRepliesLayout == null && this.repliesLayout != null;
            boolean z4 = this.transitionParams.animateReplies && this.transitionParams.animateRepliesLayout != null && this.repliesLayout == null;
            boolean z5 = (!this.transitionParams.animateReplies || this.transitionParams.animateRepliesLayout == null || this.repliesLayout == null) ? false : true;
            if (!this.isRoundVideo || !this.transitionParams.animateDrawBackground) {
                TransitionParams transitionParams2 = this.transitionParams;
                if (!transitionParams2.shouldAnimateTimeX || z3) {
                    f15 += transitionParams2.deltaRight;
                } else if (z4) {
                    f15 = transitionParams2.animateFromTimeXReplies;
                } else {
                    float f16 = transitionParams2.animateFromTimeXReplies;
                    float f17 = this.transitionParams.animateChangeProgress;
                    f15 = (f15 * f17) + (f16 * (1.0f - f17));
                }
            }
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams3 = groupedMessages.transitionParams;
                if (transitionParams3.backgroundChangeBounds) {
                    f15 += transitionParams3.offsetRight;
                }
            }
            if (this.transitionParams.animateBackgroundBoundsInner) {
                f15 += this.animationOffsetX;
            }
            if (shouldDrawTimeOnMedia()) {
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    str = "drawableMsgStickerReplies";
                    drawable = getThemedDrawable(str);
                    float drawableBounds = BaseCell.setDrawableBounds(drawable, f15, timeY, Theme.chat_timePaint.getTextSize());
                    if (!z3) {
                        f7 = this.transitionParams.animateChangeProgress;
                    } else if (z4) {
                        f7 = 1.0f - this.transitionParams.animateChangeProgress;
                    } else {
                        f6 = f14;
                        drawable.setAlpha((int) (f6 * 255.0f));
                        if (z2) {
                            canvas.save();
                            canvas.scale(f13, f13, (((AndroidUtilities.dp(3.0f) + drawableBounds) + this.repliesTextWidth) / 2.0f) + f15, drawable.getBounds().centerY());
                        }
                        drawable.draw(canvas);
                        drawable.setAlpha(NotificationCenter.newLocationAvailable);
                        if (this.transitionParams.animateReplies) {
                            if (z5) {
                                canvas.save();
                                TextPaint textPaint = Theme.chat_timePaint;
                                double d = alpha;
                                f8 = f14;
                                f9 = f13;
                                double d2 = this.transitionParams.animateChangeProgress;
                                Double.isNaN(d2);
                                Double.isNaN(d);
                                textPaint.setAlpha((int) (d * (1.0d - d2)));
                                canvas.translate(f15 + drawableBounds + AndroidUtilities.dp(3.0f), timeY);
                                this.transitionParams.animateRepliesLayout.draw(canvas);
                                canvas.restore();
                            } else {
                                f8 = f14;
                                f9 = f13;
                            }
                            Theme.chat_timePaint.setAlpha((int) (alpha * f6));
                        } else {
                            f8 = f14;
                            f9 = f13;
                        }
                        canvas.save();
                        canvas.translate(f15 + drawableBounds + AndroidUtilities.dp(3.0f), timeY);
                        staticLayout = this.repliesLayout;
                        if (staticLayout == null) {
                            if (this.transitionParams.animateRepliesLayout != null) {
                                staticLayout = this.transitionParams.animateRepliesLayout;
                            }
                            canvas.restore();
                            if (this.repliesLayout != null) {
                                currentWidth += drawableBounds + this.repliesTextWidth + AndroidUtilities.dp(10.0f);
                            }
                            if (z2) {
                                canvas.restore();
                            }
                            if (this.transitionParams.animateReplies) {
                                Theme.chat_timePaint.setAlpha(alpha);
                            }
                            this.transitionParams.lastTimeXReplies = f15;
                        }
                        staticLayout.draw(canvas);
                        canvas.restore();
                        if (this.repliesLayout != null) {
                        }
                        if (z2) {
                        }
                        if (this.transitionParams.animateReplies) {
                        }
                        this.transitionParams.lastTimeXReplies = f15;
                    }
                    f6 = f7 * f14;
                    drawable.setAlpha((int) (f6 * 255.0f));
                    if (z2) {
                    }
                    drawable.draw(canvas);
                    drawable.setAlpha(NotificationCenter.newLocationAvailable);
                    if (this.transitionParams.animateReplies) {
                    }
                    canvas.save();
                    canvas.translate(f15 + drawableBounds + AndroidUtilities.dp(3.0f), timeY);
                    staticLayout = this.repliesLayout;
                    if (staticLayout == null) {
                    }
                    staticLayout.draw(canvas);
                    canvas.restore();
                    if (this.repliesLayout != null) {
                    }
                    if (z2) {
                    }
                    if (this.transitionParams.animateReplies) {
                    }
                    this.transitionParams.lastTimeXReplies = f15;
                } else {
                    drawable = Theme.chat_msgMediaRepliesDrawable;
                    float drawableBounds2 = BaseCell.setDrawableBounds(drawable, f15, timeY, Theme.chat_timePaint.getTextSize());
                    if (!z3) {
                    }
                    f6 = f7 * f14;
                    drawable.setAlpha((int) (f6 * 255.0f));
                    if (z2) {
                    }
                    drawable.draw(canvas);
                    drawable.setAlpha(NotificationCenter.newLocationAvailable);
                    if (this.transitionParams.animateReplies) {
                    }
                    canvas.save();
                    canvas.translate(f15 + drawableBounds2 + AndroidUtilities.dp(3.0f), timeY);
                    staticLayout = this.repliesLayout;
                    if (staticLayout == null) {
                    }
                    staticLayout.draw(canvas);
                    canvas.restore();
                    if (this.repliesLayout != null) {
                    }
                    if (z2) {
                    }
                    if (this.transitionParams.animateReplies) {
                    }
                    this.transitionParams.lastTimeXReplies = f15;
                }
            } else if (this.currentMessageObject.isOutOwner()) {
                str = "drawableMsgOutReplies";
                drawable = getThemedDrawable(str);
                float drawableBounds22 = BaseCell.setDrawableBounds(drawable, f15, timeY, Theme.chat_timePaint.getTextSize());
                if (!z3) {
                }
                f6 = f7 * f14;
                drawable.setAlpha((int) (f6 * 255.0f));
                if (z2) {
                }
                drawable.draw(canvas);
                drawable.setAlpha(NotificationCenter.newLocationAvailable);
                if (this.transitionParams.animateReplies) {
                }
                canvas.save();
                canvas.translate(f15 + drawableBounds22 + AndroidUtilities.dp(3.0f), timeY);
                staticLayout = this.repliesLayout;
                if (staticLayout == null) {
                }
                staticLayout.draw(canvas);
                canvas.restore();
                if (this.repliesLayout != null) {
                }
                if (z2) {
                }
                if (this.transitionParams.animateReplies) {
                }
                this.transitionParams.lastTimeXReplies = f15;
            } else {
                drawable = z ? Theme.chat_msgInRepliesSelectedDrawable : Theme.chat_msgInRepliesDrawable;
                float drawableBounds222 = BaseCell.setDrawableBounds(drawable, f15, timeY, Theme.chat_timePaint.getTextSize());
                if (!z3) {
                }
                f6 = f7 * f14;
                drawable.setAlpha((int) (f6 * 255.0f));
                if (z2) {
                }
                drawable.draw(canvas);
                drawable.setAlpha(NotificationCenter.newLocationAvailable);
                if (this.transitionParams.animateReplies) {
                }
                canvas.save();
                canvas.translate(f15 + drawableBounds222 + AndroidUtilities.dp(3.0f), timeY);
                staticLayout = this.repliesLayout;
                if (staticLayout == null) {
                }
                staticLayout.draw(canvas);
                canvas.restore();
                if (this.repliesLayout != null) {
                }
                if (z2) {
                }
                if (this.transitionParams.animateReplies) {
                }
                this.transitionParams.lastTimeXReplies = f15;
            }
        } else {
            f8 = f14;
            f9 = f13;
        }
        if (this.viewsLayout != null) {
            TransitionParams transitionParams4 = this.transitionParams;
            boolean z6 = transitionParams4.shouldAnimateTimeX;
            float f18 = (z6 ? this.timeX : f4) + currentWidth;
            if (!this.isRoundVideo || !transitionParams4.animateDrawBackground) {
                if (z6) {
                    float f19 = transitionParams4.animateFromTimeXViews;
                    float f20 = this.transitionParams.animateChangeProgress;
                    f18 = (f18 * f20) + (f19 * (1.0f - f20));
                } else {
                    f18 += transitionParams4.deltaRight;
                }
            }
            MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
            if (groupedMessages2 != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams5 = groupedMessages2.transitionParams;
                if (transitionParams5.backgroundChangeBounds) {
                    f18 += transitionParams5.offsetRight;
                }
            }
            if (this.transitionParams.animateBackgroundBoundsInner) {
                f18 += this.animationOffsetX;
            }
            if (shouldDrawTimeOnMedia()) {
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    str3 = "drawableMsgStickerViews";
                    drawable3 = getThemedDrawable(str3);
                    float drawableBounds3 = BaseCell.setDrawableBounds(drawable3, f18, AndroidUtilities.dp(1.5f) + timeY, Theme.chat_timePaint.getTextSize() - AndroidUtilities.dp(2.0f));
                    if (z2) {
                        f10 = f9;
                    } else {
                        canvas.save();
                        f10 = f9;
                        canvas.scale(f10, f10, (((drawable3.getIntrinsicWidth() + AndroidUtilities.dp(3.0f)) + this.viewsTextWidth) / 2.0f) + f18, drawable3.getBounds().centerY());
                    }
                    drawable3.setAlpha((int) (f8 * 255.0f));
                    drawable3.draw(canvas);
                    drawable3.setAlpha(NotificationCenter.newLocationAvailable);
                    if (this.transitionParams.animateViewsLayout != null) {
                        canvas.save();
                        TextPaint textPaint2 = Theme.chat_timePaint;
                        double d3 = alpha;
                        double d4 = this.transitionParams.animateChangeProgress;
                        Double.isNaN(d4);
                        Double.isNaN(d3);
                        textPaint2.setAlpha((int) (d3 * (1.0d - d4)));
                        canvas.translate(f18 + drawableBounds3 + AndroidUtilities.dp(3.0f), timeY);
                        SpoilerEffect.layoutDrawMaybe(this.transitionParams.animateViewsLayout, canvas);
                        canvas.restore();
                        Theme.chat_timePaint.setAlpha((int) (alpha * this.transitionParams.animateChangeProgress));
                    }
                    canvas.save();
                    canvas.translate(f18 + drawableBounds3 + AndroidUtilities.dp(3.0f), timeY);
                    SpoilerEffect.layoutDrawMaybe(this.viewsLayout, canvas);
                    canvas.restore();
                    if (z2) {
                        canvas.restore();
                    }
                    currentWidth += this.viewsTextWidth + drawableBounds3 + AndroidUtilities.dp(10.0f);
                    if (this.transitionParams.animateViewsLayout != null) {
                        Theme.chat_timePaint.setAlpha(alpha);
                    }
                    this.transitionParams.lastTimeXViews = f18;
                } else {
                    drawable3 = Theme.chat_msgMediaViewsDrawable;
                    float drawableBounds32 = BaseCell.setDrawableBounds(drawable3, f18, AndroidUtilities.dp(1.5f) + timeY, Theme.chat_timePaint.getTextSize() - AndroidUtilities.dp(2.0f));
                    if (z2) {
                    }
                    drawable3.setAlpha((int) (f8 * 255.0f));
                    drawable3.draw(canvas);
                    drawable3.setAlpha(NotificationCenter.newLocationAvailable);
                    if (this.transitionParams.animateViewsLayout != null) {
                    }
                    canvas.save();
                    canvas.translate(f18 + drawableBounds32 + AndroidUtilities.dp(3.0f), timeY);
                    SpoilerEffect.layoutDrawMaybe(this.viewsLayout, canvas);
                    canvas.restore();
                    if (z2) {
                    }
                    currentWidth += this.viewsTextWidth + drawableBounds32 + AndroidUtilities.dp(10.0f);
                    if (this.transitionParams.animateViewsLayout != null) {
                    }
                    this.transitionParams.lastTimeXViews = f18;
                }
            } else if (this.currentMessageObject.isOutOwner()) {
                str3 = z ? "drawableMsgOutViewsSelected" : "drawableMsgOutViews";
                drawable3 = getThemedDrawable(str3);
                float drawableBounds322 = BaseCell.setDrawableBounds(drawable3, f18, AndroidUtilities.dp(1.5f) + timeY, Theme.chat_timePaint.getTextSize() - AndroidUtilities.dp(2.0f));
                if (z2) {
                }
                drawable3.setAlpha((int) (f8 * 255.0f));
                drawable3.draw(canvas);
                drawable3.setAlpha(NotificationCenter.newLocationAvailable);
                if (this.transitionParams.animateViewsLayout != null) {
                }
                canvas.save();
                canvas.translate(f18 + drawableBounds322 + AndroidUtilities.dp(3.0f), timeY);
                SpoilerEffect.layoutDrawMaybe(this.viewsLayout, canvas);
                canvas.restore();
                if (z2) {
                }
                currentWidth += this.viewsTextWidth + drawableBounds322 + AndroidUtilities.dp(10.0f);
                if (this.transitionParams.animateViewsLayout != null) {
                }
                this.transitionParams.lastTimeXViews = f18;
            } else {
                drawable3 = z ? Theme.chat_msgInViewsSelectedDrawable : Theme.chat_msgInViewsDrawable;
                float drawableBounds3222 = BaseCell.setDrawableBounds(drawable3, f18, AndroidUtilities.dp(1.5f) + timeY, Theme.chat_timePaint.getTextSize() - AndroidUtilities.dp(2.0f));
                if (z2) {
                }
                drawable3.setAlpha((int) (f8 * 255.0f));
                drawable3.draw(canvas);
                drawable3.setAlpha(NotificationCenter.newLocationAvailable);
                if (this.transitionParams.animateViewsLayout != null) {
                }
                canvas.save();
                canvas.translate(f18 + drawableBounds3222 + AndroidUtilities.dp(3.0f), timeY);
                SpoilerEffect.layoutDrawMaybe(this.viewsLayout, canvas);
                canvas.restore();
                if (z2) {
                }
                currentWidth += this.viewsTextWidth + drawableBounds3222 + AndroidUtilities.dp(10.0f);
                if (this.transitionParams.animateViewsLayout != null) {
                }
                this.transitionParams.lastTimeXViews = f18;
            }
        } else {
            f10 = f9;
        }
        if (this.isPinned || this.transitionParams.animatePinned) {
            TransitionParams transitionParams6 = this.transitionParams;
            float f21 = (transitionParams6.shouldAnimateTimeX ? this.timeX : f4) + currentWidth;
            boolean z7 = transitionParams6.animatePinned && this.isPinned;
            boolean z8 = this.transitionParams.animatePinned && !this.isPinned;
            if (!this.isRoundVideo) {
                TransitionParams transitionParams7 = this.transitionParams;
                if (!transitionParams7.shouldAnimateTimeX || z7) {
                    f21 += transitionParams7.deltaRight;
                } else if (z8) {
                    f21 = transitionParams7.animateFromTimeXPinned;
                } else {
                    float f22 = transitionParams7.animateFromTimeXPinned;
                    float f23 = transitionParams7.animateChangeProgress;
                    f21 = (f21 * f23) + (f22 * (1.0f - f23));
                }
            }
            MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
            if (groupedMessages3 != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams8 = groupedMessages3.transitionParams;
                if (transitionParams8.backgroundChangeBounds) {
                    f21 += transitionParams8.offsetRight;
                }
            }
            if (this.transitionParams.animateBackgroundBoundsInner) {
                f21 += this.animationOffsetX;
            }
            if (!shouldDrawTimeOnMedia()) {
                if (!this.currentMessageObject.isOutOwner()) {
                    drawable2 = z ? Theme.chat_msgInPinnedSelectedDrawable : Theme.chat_msgInPinnedDrawable;
                    if (this.transitionParams.animatePinned) {
                    }
                    drawable2.setAlpha((int) f12);
                    textSize = Theme.chat_timePaint.getTextSize();
                    float drawableBounds4 = BaseCell.setDrawableBounds(drawable2, f21, timeY, textSize + AndroidUtilities.dp(f11));
                    if (z2) {
                    }
                    drawable2.draw(canvas);
                    drawable2.setAlpha(NotificationCenter.newLocationAvailable);
                    if (z2) {
                    }
                    this.transitionParams.lastTimeXPinned = f21;
                }
                str2 = z ? "drawableMsgOutPinnedSelected" : "drawableMsgOutPinned";
                drawable2 = getThemedDrawable(str2);
                if (this.transitionParams.animatePinned) {
                }
                drawable2.setAlpha((int) f12);
                textSize = Theme.chat_timePaint.getTextSize();
                float drawableBounds42 = BaseCell.setDrawableBounds(drawable2, f21, timeY, textSize + AndroidUtilities.dp(f11));
                if (z2) {
                }
                drawable2.draw(canvas);
                drawable2.setAlpha(NotificationCenter.newLocationAvailable);
                if (z2) {
                }
                this.transitionParams.lastTimeXPinned = f21;
            }
            if (!this.currentMessageObject.shouldDrawWithoutBackground()) {
                drawable2 = Theme.chat_msgMediaPinnedDrawable;
                if (this.transitionParams.animatePinned) {
                }
                drawable2.setAlpha((int) f12);
                textSize = Theme.chat_timePaint.getTextSize();
                float drawableBounds422 = BaseCell.setDrawableBounds(drawable2, f21, timeY, textSize + AndroidUtilities.dp(f11));
                if (z2) {
                }
                drawable2.draw(canvas);
                drawable2.setAlpha(NotificationCenter.newLocationAvailable);
                if (z2) {
                }
                this.transitionParams.lastTimeXPinned = f21;
            }
            str2 = "drawableMsgStickerPinned";
            drawable2 = getThemedDrawable(str2);
            if (this.transitionParams.animatePinned) {
                f11 = 1.0f;
                f12 = f8 * 255.0f;
            } else {
                if (this.isPinned) {
                    drawable2.setAlpha((int) (f8 * 255.0f * this.transitionParams.animateChangeProgress));
                    textSize = Theme.chat_timePaint.getTextSize();
                    f11 = 1.0f;
                    float drawableBounds4222 = BaseCell.setDrawableBounds(drawable2, f21, timeY, textSize + AndroidUtilities.dp(f11));
                    if (z2) {
                        canvas.save();
                        canvas.scale(f10, f10, (drawableBounds4222 / 2.0f) + f21, drawable2.getBounds().centerY());
                    }
                    drawable2.draw(canvas);
                    drawable2.setAlpha(NotificationCenter.newLocationAvailable);
                    if (z2) {
                        canvas.restore();
                    }
                    this.transitionParams.lastTimeXPinned = f21;
                }
                f11 = 1.0f;
                f12 = f8 * 255.0f * (1.0f - this.transitionParams.animateChangeProgress);
            }
            drawable2.setAlpha((int) f12);
            textSize = Theme.chat_timePaint.getTextSize();
            float drawableBounds42222 = BaseCell.setDrawableBounds(drawable2, f21, timeY, textSize + AndroidUtilities.dp(f11));
            if (z2) {
            }
            drawable2.draw(canvas);
            drawable2.setAlpha(NotificationCenter.newLocationAvailable);
            if (z2) {
            }
            this.transitionParams.lastTimeXPinned = f21;
        }
    }

    private void fileAttach(boolean z, MessageObject messageObject) {
        ImageReceiver imageReceiver = this.photoImage;
        if (imageReceiver != null) {
            imageReceiver.setFileLoadingPriority(1);
        }
        if (z && messageObject != null && (this.isRoundVideo || messageObject.isVideo())) {
            checkVideoPlayback(true, null);
        }
        if (messageObject == null || messageObject.mediaExists) {
            return;
        }
        int canDownloadMediaType = DownloadController.getInstance(this.currentAccount).canDownloadMediaType(messageObject);
        TLRPC.Document document = messageObject.getDocument();
        if (!MessageObject.isStickerDocument(document) && !MessageObject.isAnimatedStickerDocument(document, true) && !MessageObject.isGifDocument(document) && !MessageObject.isRoundVideoDocument(document) && !messageObject.hasVideoQualities() && !this.isSmallImage) {
            TLRPC.PhotoSize closestPhotoSizeWithSize = document == null ? FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize()) : null;
            if (canDownloadMediaType == 2 || (canDownloadMediaType == 1 && messageObject.isVideo())) {
                if (canDownloadMediaType != 2 && document != null && !messageObject.shouldEncryptPhotoOrVideo() && messageObject.canStreamVideo()) {
                    FileLoader.getInstance(this.currentAccount).loadFile(document, messageObject, 1, 0);
                }
            } else if (canDownloadMediaType != 0) {
                if (document != null) {
                    FileLoader.getInstance(this.currentAccount).loadFile(document, messageObject, 1, ((MessageObject.isVideoDocument(document) || messageObject.isVoiceOnce() || messageObject.isRoundOnce()) && messageObject.shouldEncryptPhotoOrVideo()) ? 2 : 0);
                } else if (closestPhotoSizeWithSize != null) {
                    FileLoader.getInstance(this.currentAccount).loadFile(ImageLocation.getForObject(closestPhotoSizeWithSize, messageObject.photoThumbsObject), messageObject, null, 1, messageObject.shouldEncryptPhotoOrVideo() ? 2 : 0);
                }
            }
            if (z) {
                updateButtonState(false, false, false);
            }
        }
        if (messageObject.hasVideoQualities()) {
            VideoPlayer.VideoUri videoUri = messageObject.highestQuality;
            if (videoUri != null && !videoUri.isManifestCached()) {
                FileLoader.getInstance(this.currentAccount).loadFile(messageObject.highestQuality.manifestDocument, messageObject, 1, 0);
            }
            VideoPlayer.VideoUri videoUri2 = messageObject.thumbQuality;
            if (videoUri2 == null || videoUri2.isManifestCached()) {
                return;
            }
            FileLoader.getInstance(this.currentAccount).loadFile(messageObject.thumbQuality.manifestDocument, messageObject, 1, 0);
        }
    }

    private void fileDetach(MessageObject messageObject) {
        ImageReceiver imageReceiver = this.photoImage;
        if (imageReceiver != null) {
            imageReceiver.setFileLoadingPriority(0);
        }
        cancelLoading(messageObject);
    }

    private boolean findProgressLoadingLink(LoadingDrawableLocation loadingDrawableLocation, LinkPath linkPath, Layout layout, float f, int i) {
        if (layout == null || !(layout.getText() instanceof Spanned)) {
            return false;
        }
        Spanned spanned = (Spanned) layout.getText();
        CharacterStyle[] characterStyleArr = (CharacterStyle[]) spanned.getSpans(0, spanned.length(), CharacterStyle.class);
        if (characterStyleArr != null) {
            int i2 = 0;
            while (true) {
                if (i2 >= characterStyleArr.length) {
                    break;
                }
                if (characterStyleArr[i2] == this.progressLoadingLink) {
                    loadingDrawableLocation.blockNum = i;
                    break;
                }
                i2++;
            }
        }
        if (loadingDrawableLocation.blockNum != i) {
            return false;
        }
        linkPath.rewind();
        int spanStart = spanned.getSpanStart(this.progressLoadingLink);
        int spanEnd = spanned.getSpanEnd(this.progressLoadingLink);
        linkPath.setUseCornerPathImplementation(true);
        linkPath.setCurrentLayout(layout, spanStart, f);
        layout.getSelectionPath(spanStart, spanEnd, linkPath);
        linkPath.closeRects();
        this.progressLoadingLinkCurrentDrawable.updateBounds();
        return true;
    }

    private boolean findProgressLoadingLink(LoadingDrawableLocation loadingDrawableLocation, LinkPath linkPath, ArrayList arrayList) {
        if (arrayList == null) {
            return false;
        }
        for (int i = 0; i < arrayList.size(); i++) {
            if (findProgressLoadingLink(loadingDrawableLocation, linkPath, ((MessageObject.TextLayoutBlock) arrayList.get(i)).textLayout, 0.0f, i)) {
                return true;
            }
        }
        return false;
    }

    public static StaticLayout generateStaticLayout(CharSequence charSequence, TextPaint textPaint, int i, int i2, int i3, int i4) {
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(charSequence);
        StaticLayout staticLayout = new StaticLayout(charSequence, textPaint, i2, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        int i5 = i;
        int i6 = 0;
        for (int i7 = 0; i7 < i3; i7++) {
            staticLayout.getLineDirections(i7);
            if (staticLayout.getLineLeft(i7) != 0.0f || staticLayout.isRtlCharAt(staticLayout.getLineStart(i7)) || staticLayout.isRtlCharAt(staticLayout.getLineEnd(i7))) {
                i5 = i2;
            }
            int lineEnd = staticLayout.getLineEnd(i7);
            if (lineEnd == charSequence.length()) {
                break;
            }
            int i8 = (lineEnd - 1) + i6;
            if (spannableStringBuilder.charAt(i8) == ' ') {
                spannableStringBuilder.replace(i8, i8 + 1, (CharSequence) "\n");
            } else if (spannableStringBuilder.charAt(i8) != '\n') {
                spannableStringBuilder.insert(i8, (CharSequence) "\n");
                i6++;
            }
            if (i7 == staticLayout.getLineCount() - 1 || i7 == i4 - 1) {
                break;
            }
        }
        int i9 = i5;
        return StaticLayoutEx.createStaticLayout(spannableStringBuilder, textPaint, i9, Layout.Alignment.ALIGN_NORMAL, 1.0f, AndroidUtilities.dp(1.0f), false, TextUtils.TruncateAt.END, i9, i4, true);
    }

    private ColorFilter getAdaptiveEmojiColorFilter(int i, int i2) {
        if (this.adaptiveEmojiColorFilter == null) {
            this.adaptiveEmojiColor = new int[3];
            this.adaptiveEmojiColorFilter = new ColorFilter[3];
        }
        if (i2 != this.adaptiveEmojiColor[i] || this.adaptiveEmojiColorFilter[i] == null) {
            ColorFilter[] colorFilterArr = this.adaptiveEmojiColorFilter;
            this.adaptiveEmojiColor[i] = i2;
            colorFilterArr[i] = new PorterDuffColorFilter(i2, PorterDuff.Mode.SRC_IN);
        }
        return this.adaptiveEmojiColorFilter[i];
    }

    private int getAdditionalWidthForPosition(MessageObject.GroupedMessagePosition groupedMessagePosition) {
        if (groupedMessagePosition == null) {
            return 0;
        }
        int dp = (groupedMessagePosition.flags & 2) == 0 ? AndroidUtilities.dp(4.0f) : 0;
        return (groupedMessagePosition.flags & 1) == 0 ? dp + AndroidUtilities.dp(4.0f) : dp;
    }

    private long getAuthorBotVerificationId() {
        MessageObject messageObject;
        TLRPC.User user = this.currentUser;
        if (user != null) {
            return DialogObject.getBotVerificationIcon(user);
        }
        if (this.currentChat != null && (messageObject = this.currentMessageObject) != null && messageObject.getDialogId() != UserObject.REPLY_BOT && this.currentChat.signature_profiles) {
            long peerDialogId = DialogObject.getPeerDialogId(this.currentMessageObject.messageOwner.from_id);
            if (peerDialogId >= 0) {
                TLRPC.User user2 = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(peerDialogId));
                if (user2 != null) {
                    return DialogObject.getBotVerificationIcon(user2);
                }
            } else {
                TLRPC.Chat chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-peerDialogId));
                if (chat != null) {
                    return DialogObject.getBotVerificationIcon(chat);
                }
            }
        }
        return 0L;
    }

    private String getAuthorName() {
        TLRPC.User user = this.currentUser;
        if (user != null) {
            return UserObject.getUserName(user);
        }
        if (this.currentChat == null) {
            MessageObject messageObject = this.currentMessageObject;
            return (messageObject == null || !messageObject.isSponsored()) ? "DELETED" : this.currentMessageObject.sponsoredTitle;
        }
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2 != null && messageObject2.getDialogId() != UserObject.REPLY_BOT && this.currentChat.signature_profiles) {
            long peerDialogId = DialogObject.getPeerDialogId(this.currentMessageObject.messageOwner.from_id);
            MessagesController messagesController = MessagesController.getInstance(this.currentAccount);
            if (peerDialogId >= 0) {
                TLRPC.User user2 = messagesController.getUser(Long.valueOf(peerDialogId));
                if (user2 != null) {
                    return UserObject.getUserName(user2);
                }
            } else {
                TLRPC.Chat chat = messagesController.getChat(Long.valueOf(-peerDialogId));
                if (chat != null) {
                    return chat.title;
                }
            }
        }
        return this.currentChat.title;
    }

    private Object getAuthorStatus() {
        MessageObject messageObject;
        TLRPC.User user = this.currentUser;
        if (user != null) {
            Long emojiStatusDocumentId = UserObject.getEmojiStatusDocumentId(user);
            if (emojiStatusDocumentId == null) {
                if (this.currentUser.premium) {
                    return ContextCompat.getDrawable(ApplicationLoader.applicationContext, R.drawable.msg_premium_liststar).mutate();
                }
                return null;
            }
            TLRPC.EmojiStatus emojiStatus = this.currentUser.emoji_status;
            if (emojiStatus instanceof TLRPC.TL_emojiStatusCollectible) {
                this.nameStatusSlug = ((TLRPC.TL_emojiStatusCollectible) emojiStatus).slug;
            }
            return emojiStatusDocumentId;
        }
        if (this.currentChat == null || (messageObject = this.currentMessageObject) == null || messageObject.getDialogId() == UserObject.REPLY_BOT || !this.currentChat.signature_profiles) {
            return null;
        }
        long peerDialogId = DialogObject.getPeerDialogId(this.currentMessageObject.messageOwner.from_id);
        MessagesController messagesController = MessagesController.getInstance(this.currentAccount);
        if (peerDialogId >= 0) {
            TLRPC.User user2 = messagesController.getUser(Long.valueOf(peerDialogId));
            if (user2 != null) {
                TLRPC.EmojiStatus emojiStatus2 = user2.emoji_status;
                if (emojiStatus2 instanceof TLRPC.TL_emojiStatusCollectible) {
                    this.nameStatusSlug = ((TLRPC.TL_emojiStatusCollectible) emojiStatus2).slug;
                }
            }
            return UserObject.getEmojiStatusDocumentId(user2);
        }
        TLRPC.Chat chat = messagesController.getChat(Long.valueOf(-peerDialogId));
        if (chat == null) {
            return null;
        }
        TLRPC.EmojiStatus emojiStatus3 = chat.emoji_status;
        if (emojiStatus3 instanceof TLRPC.TL_emojiStatusCollectible) {
            this.nameStatusSlug = ((TLRPC.TL_emojiStatusCollectible) emojiStatus3).slug;
        }
        return Long.valueOf(DialogObject.getEmojiStatusDocumentId(emojiStatus3));
    }

    private int getExtraTimeX() {
        int i;
        if (!this.currentMessageObject.isOutOwner() && ((!this.mediaBackground || this.captionLayout != null) && (i = SharedConfig.bubbleRadius) > 11)) {
            return AndroidUtilities.dp((i - 11) / 1.5f);
        }
        if (!this.currentMessageObject.isOutOwner() && this.isPlayingRound && this.isAvatarVisible && this.currentMessageObject.type == 5) {
            return (int) ((AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize) * 0.7f);
        }
        return 0;
    }

    private ColorMatrixColorFilter getFancyBlurFilter() {
        if (this.fancyBlurFilter == null) {
            ColorMatrix colorMatrix = new ColorMatrix();
            AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix, 0.9f);
            AndroidUtilities.adjustSaturationColorMatrix(colorMatrix, 0.6f);
            this.fancyBlurFilter = new ColorMatrixColorFilter(colorMatrix);
        }
        return this.fancyBlurFilter;
    }

    private String getForwardedMessageText(MessageObject messageObject) {
        if (!this.hasPsaHint) {
            return LocaleController.getString(R.string.ForwardedFrom);
        }
        String string = LocaleController.getString("PsaMessage_" + messageObject.messageOwner.fwd_from.psa_type);
        return string == null ? LocaleController.getString("PsaMessageDefault", R.string.PsaMessageDefault) : string;
    }

    private int getGroupPhotosWidth() {
        int parentWidth = getParentWidth();
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && messageObject.preview) {
            parentWidth = this.parentWidth;
        }
        if (AndroidUtilities.isInMultiwindow || !AndroidUtilities.isTablet()) {
            return parentWidth;
        }
        if (AndroidUtilities.isSmallTablet() && getResources().getConfiguration().orientation != 2) {
            return parentWidth;
        }
        int i = (parentWidth / 100) * 35;
        if (i < AndroidUtilities.dp(320.0f)) {
            i = AndroidUtilities.dp(320.0f);
        }
        return parentWidth - i;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:30:0x009a A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:31:0x009b  */
    /* JADX WARN: Removed duplicated region for block: B:93:0x016b A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:94:0x016c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public int getIconForCurrentState() {
        RadialProgress2 radialProgress2;
        int i;
        int i2;
        int i3;
        int i4;
        int i5;
        RadialProgress2 radialProgress22;
        int i6;
        int i7;
        int i8;
        int i9;
        int i10;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.hasExtendedMedia()) {
            return 4;
        }
        if (this.documentAttachType == 7 && this.currentMessageObject.isVoiceTranscriptionOpen() && this.canStreamVideo) {
            int i11 = this.buttonState;
            return (i11 == 1 || i11 == 4) ? 1 : 0;
        }
        int i12 = this.documentAttachType;
        if (i12 != 3 && i12 != 5) {
            if (i12 != 1 || this.drawPhotoImage) {
                RadialProgress2 radialProgress23 = this.radialProgress;
                int i13 = Theme.key_chat_mediaLoaderPhoto;
                int i14 = Theme.key_chat_mediaLoaderPhotoSelected;
                int i15 = Theme.key_chat_mediaLoaderPhotoIcon;
                int i16 = Theme.key_chat_mediaLoaderPhotoIconSelected;
                radialProgress23.setColorKeys(i13, i14, i15, i16);
                this.videoRadialProgress.setColorKeys(i13, i14, i15, i16);
                int i17 = this.buttonState;
                if (i17 >= 0 && i17 < 4) {
                    if (i17 == 0) {
                        return 2;
                    }
                    if (i17 == 1) {
                        return 3;
                    }
                    return (i17 != 2 && this.autoPlayingMedia) ? 4 : 0;
                }
                if (i17 == -1) {
                    if (this.documentAttachType == 1) {
                        return (!this.drawPhotoImage || (this.currentPhotoObject == null && this.currentPhotoObjectThumb == null) || !(this.photoImage.hasBitmapImage() || this.currentMessageObject.mediaExists() || this.currentMessageObject.attachPathExists)) ? 5 : 4;
                    }
                    if (this.currentMessageObject.needDrawBluredPreview()) {
                        return 7;
                    }
                    if (this.hasEmbed) {
                        return 0;
                    }
                }
            } else {
                if (this.currentMessageObject.isOutOwner()) {
                    radialProgress22 = this.radialProgress;
                    i6 = Theme.key_chat_outLoader;
                    i7 = Theme.key_chat_outLoaderSelected;
                    i8 = Theme.key_chat_outMediaIcon;
                    i9 = Theme.key_chat_outMediaIconSelected;
                } else {
                    ReplyMessageLine replyMessageLine = this.linkLine;
                    if (replyMessageLine == null || !this.hasLinkPreview) {
                        radialProgress22 = this.radialProgress;
                        i6 = Theme.key_chat_inLoader;
                        i7 = Theme.key_chat_inLoaderSelected;
                        i8 = Theme.key_chat_inMediaIcon;
                        i9 = Theme.key_chat_inMediaIconSelected;
                    } else {
                        this.radialProgress.setColors(replyMessageLine.getColor(), this.linkLine.getColor(), Theme.blendOver(-1, Theme.multAlpha(this.linkLine.getColor(), 0.01f)), Theme.blendOver(-1, Theme.multAlpha(this.linkLine.getColor(), 0.05f)));
                        i10 = this.buttonState;
                        if (i10 != -1) {
                            return 5;
                        }
                        if (i10 == 0) {
                            return 2;
                        }
                        if (i10 == 1) {
                            return 3;
                        }
                    }
                }
                radialProgress22.setColorKeys(i6, i7, i8, i9);
                i10 = this.buttonState;
                if (i10 != -1) {
                }
            }
            MessageObject messageObject2 = this.currentMessageObject;
            return (messageObject2 != null && this.isRoundVideo && messageObject2.isVoiceTranscriptionOpen()) ? 0 : 4;
        }
        if (this.currentMessageObject.isOutOwner()) {
            radialProgress2 = this.radialProgress;
            i = Theme.key_chat_outLoader;
            i2 = Theme.key_chat_outLoaderSelected;
            i3 = Theme.key_chat_outMediaIcon;
            i4 = Theme.key_chat_outMediaIconSelected;
        } else {
            ReplyMessageLine replyMessageLine2 = this.linkLine;
            if (replyMessageLine2 != null && this.hasLinkPreview) {
                this.radialProgress.setColors(replyMessageLine2.getColor(), this.linkLine.getColor(), Theme.blendOver(-1, Theme.multAlpha(this.linkLine.getColor(), 0.01f)), Theme.blendOver(-1, Theme.multAlpha(this.linkLine.getColor(), 0.05f)));
                i5 = this.buttonState;
                if (i5 != 1) {
                    return 1;
                }
                if (i5 == 2) {
                    return 2;
                }
                return i5 == 4 ? 3 : 0;
            }
            radialProgress2 = this.radialProgress;
            i = Theme.key_chat_inLoader;
            i2 = Theme.key_chat_inLoaderSelected;
            i3 = Theme.key_chat_inMediaIcon;
            i4 = Theme.key_chat_inMediaIconSelected;
        }
        radialProgress2.setColorKeys(i, i2, i3, i4);
        i5 = this.buttonState;
        if (i5 != 1) {
        }
    }

    public static Point getMessageSize(int i, int i2) {
        return getMessageSize(i, i2, 0, 0);
    }

    /* JADX WARN: Removed duplicated region for block: B:25:0x0040  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x004a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private static Point getMessageSize(int i, int i2, int i3, int i4) {
        int min;
        if (i4 == 0 || i3 == 0) {
            if (AndroidUtilities.isTablet()) {
                min = AndroidUtilities.getMinTabletSide();
            } else {
                android.graphics.Point point = AndroidUtilities.displaySize;
                if (i >= i2) {
                    i3 = Math.min(point.x, point.y) - AndroidUtilities.dp(64.0f);
                    i4 = AndroidUtilities.dp(100.0f) + i3;
                    if (i3 > AndroidUtilities.getPhotoSize()) {
                        i3 = AndroidUtilities.getPhotoSize();
                    }
                    if (i4 > AndroidUtilities.getPhotoSize()) {
                        i4 = AndroidUtilities.getPhotoSize();
                    }
                } else {
                    min = Math.min(point.x, point.y);
                }
            }
            i3 = (int) (min * 0.7f);
            i4 = AndroidUtilities.dp(100.0f) + i3;
            if (i3 > AndroidUtilities.getPhotoSize()) {
            }
            if (i4 > AndroidUtilities.getPhotoSize()) {
            }
        }
        float f = i;
        float f2 = i3;
        float f3 = f / f2;
        int i5 = (int) (f / f3);
        float f4 = i2;
        int i6 = (int) (f4 / f3);
        if (i5 == 0) {
            i5 = AndroidUtilities.dp(150.0f);
        }
        if (i6 == 0) {
            i6 = AndroidUtilities.dp(150.0f);
        }
        if (i6 > i4) {
            i5 = (int) (i5 / (i6 / i4));
        } else if (i6 < AndroidUtilities.dp(120.0f)) {
            i4 = AndroidUtilities.dp(120.0f);
            float f5 = f / (f4 / i4);
            if (f5 < f2) {
                i5 = (int) f5;
            }
        } else {
            i4 = i6;
        }
        return new Point(i5, i4);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getMiniIconForCurrentState() {
        int i = this.miniButtonState;
        if (i < 0) {
            return 4;
        }
        return i == 0 ? 2 : 3;
    }

    private String getNameFromDialogId(long j) {
        TLRPC.Chat chat;
        if (j > 0) {
            TLRPC.User user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(j));
            if (user != null) {
                return UserObject.getUserName(user);
            }
        } else if (j < 0 && (chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-j))) != null) {
            return chat.title;
        }
        return null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int[] getRealSpanStartAndEnd(Spannable spannable, CharacterStyle characterStyle) {
        int i;
        int i2;
        boolean z;
        TextStyleSpan.TextStyleRun style;
        TLRPC.MessageEntity messageEntity;
        if (!(characterStyle instanceof URLSpanBrowser) || (style = ((URLSpanBrowser) characterStyle).getStyle()) == null || (messageEntity = style.urlEntity) == null) {
            i = 0;
            i2 = 0;
            z = false;
        } else {
            i = messageEntity.offset;
            i2 = messageEntity.length + i;
            z = true;
        }
        if (!z) {
            i = spannable.getSpanStart(characterStyle);
            i2 = spannable.getSpanEnd(characterStyle);
        }
        return new int[]{i, i2};
    }

    private ArrayList<TLRPC.Peer> getRecentRepliers() {
        TLRPC.MessageReplies messageReplies;
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && !groupedMessages.messages.isEmpty() && (messageReplies = this.currentMessagesGroup.messages.get(0).messageOwner.replies) != null) {
            return messageReplies.recent_repliers;
        }
        TLRPC.MessageReplies messageReplies2 = this.currentMessageObject.messageOwner.replies;
        if (messageReplies2 != null) {
            return messageReplies2.recent_repliers;
        }
        return null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getRepliesCount() {
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        return ((groupedMessages == null || groupedMessages.messages.isEmpty()) ? this.currentMessageObject : this.currentMessagesGroup.messages.get(0)).getRepliesCount();
    }

    private int getSelectionOverlayColor() {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        if (resourcesProvider == null) {
            return 0;
        }
        MessageObject messageObject = this.currentMessageObject;
        return resourcesProvider.getColor((messageObject == null || !messageObject.isOut()) ? Theme.key_chat_inBubbleSelectedOverlay : Theme.key_chat_outBubbleSelectedOverlay);
    }

    private Drawable getThemedDrawable(String str) {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        Drawable drawable = resourcesProvider != null ? resourcesProvider.getDrawable(str) : null;
        return drawable != null ? drawable : Theme.getThemeDrawable(str);
    }

    private float getUseTranscribeButtonProgress() {
        TransitionParams transitionParams = this.transitionParams;
        if (!transitionParams.animateUseTranscribeButton) {
            return this.useTranscribeButton ? 1.0f : 0.0f;
        }
        boolean z = this.useTranscribeButton;
        float f = transitionParams.animateChangeProgress;
        return z ? f : 1.0f - f;
    }

    private boolean hasSelectionOverlay() {
        int selectionOverlayColor = getSelectionOverlayColor();
        return (selectionOverlayColor == 0 || selectionOverlayColor == -65536) ? false : true;
    }

    private void highlight(int i, int i2, ArrayList arrayList) {
        if (arrayList == null) {
            return;
        }
        int i3 = i2 - i;
        int i4 = 0;
        while (true) {
            if (i4 >= arrayList.size()) {
                break;
            }
            MessageObject.TextLayoutBlock textLayoutBlock = (MessageObject.TextLayoutBlock) arrayList.get(i4);
            if (i < textLayoutBlock.charactersOffset || i >= textLayoutBlock.charactersEnd) {
                i4++;
            } else {
                this.linkSelectionBlockNum = i4;
                resetUrlPaths();
                try {
                    LinkPath obtainNewUrlPath = obtainNewUrlPath();
                    obtainNewUrlPath.setUseCornerPathImplementation(true);
                    obtainNewUrlPath.setCurrentLayout(textLayoutBlock.textLayout, i, 0.0f);
                    textLayoutBlock.textLayout.getSelectionPath(i, i2, obtainNewUrlPath);
                    obtainNewUrlPath.closeRects();
                    float f = textLayoutBlock.height + textLayoutBlock.padBottom;
                    if (i2 >= textLayoutBlock.charactersOffset + i3) {
                        for (int i5 = i4 + 1; i5 < arrayList.size(); i5++) {
                            MessageObject.TextLayoutBlock textLayoutBlock2 = (MessageObject.TextLayoutBlock) arrayList.get(i5);
                            int i6 = textLayoutBlock2.charactersEnd - textLayoutBlock2.charactersOffset;
                            LinkPath obtainNewUrlPath2 = obtainNewUrlPath();
                            obtainNewUrlPath2.setUseCornerPathImplementation(true);
                            float f2 = f + textLayoutBlock2.padTop;
                            obtainNewUrlPath2.setCurrentLayout(textLayoutBlock2.textLayout, 0, f2);
                            f = f2 + textLayoutBlock2.height + textLayoutBlock2.padBottom;
                            textLayoutBlock2.textLayout.getSelectionPath(0, i2 - textLayoutBlock2.charactersOffset, obtainNewUrlPath2);
                            obtainNewUrlPath2.closeRects();
                            if (i2 < (textLayoutBlock.charactersOffset + i6) - 1) {
                                break;
                            }
                        }
                    }
                    if (this.highlightedQuote) {
                        this.isHighlightedAnimated = true;
                        this.highlightProgress = 2500;
                    }
                } catch (Exception e) {
                    FileLog.e(e);
                }
                invalidate();
            }
        }
        this.highlightCaptionToSetStart = -1;
        this.highlightCaptionToSetEnd = -1;
    }

    private boolean intersect(float f, float f2, float f3, float f4) {
        return f <= f3 ? f2 >= f3 : f <= f4;
    }

    private boolean invalidateParentForce() {
        MessageObject messageObject;
        return (this.links.isEmpty() && this.reactionsLayoutInBubble.isEmpty && ((messageObject = this.currentMessageObject) == null || !messageObject.preview)) ? false : true;
    }

    private void invalidateWithParent() {
        if (this.currentMessagesGroup != null && getParent() != null) {
            ((ViewGroup) getParent()).invalidate();
        }
        invalidate();
    }

    private boolean isCurrentLocationTimeExpired(MessageObject messageObject) {
        int i = MessageObject.getMedia(this.currentMessageObject.messageOwner).period;
        int currentTime = ConnectionsManager.getInstance(this.currentAccount).getCurrentTime();
        if (i == Integer.MAX_VALUE) {
            return false;
        }
        int i2 = i % 60;
        int abs = Math.abs(currentTime - messageObject.messageOwner.date);
        return i2 == 0 ? abs > i : abs > i + (-5);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isOpenChatByShare(MessageObject messageObject) {
        ChatMessageCellDelegate chatMessageCellDelegate;
        TLRPC.MessageFwdHeader messageFwdHeader = messageObject.messageOwner.fwd_from;
        return (messageFwdHeader == null || messageFwdHeader.saved_from_peer == null || ((chatMessageCellDelegate = this.delegate) != null && !chatMessageCellDelegate.isReplyOrSelf())) ? false : true;
    }

    /* JADX WARN: Removed duplicated region for block: B:19:0x0048  */
    /* JADX WARN: Removed duplicated region for block: B:22:0x00ce  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean isPhotoDataChanged(MessageObject messageObject) {
        int i;
        TLRPC.MessageMedia messageMedia;
        int i2;
        int dp;
        String formapMapUrl;
        int i3;
        int i4 = messageObject.type;
        if (i4 == 0 || i4 == 14) {
            return false;
        }
        if (i4 != 4) {
            TLRPC.PhotoSize photoSize = this.currentPhotoObject;
            if (photoSize == null || (photoSize.location instanceof TLRPC.TL_fileLocationUnavailable)) {
                return i4 == 1 || i4 == 20 || i4 == 5 || i4 == 3 || i4 == 8 || messageObject.isAnyKindOfSticker();
            }
            if (this.currentMessageObject == null || !this.photoNotSet) {
                return false;
            }
            return FileLoader.getInstance(this.currentAccount).getPathToMessage(this.currentMessageObject.messageOwner).exists();
        }
        if (this.currentUrl == null) {
            return true;
        }
        TLRPC.GeoPoint geoPoint = messageObject.messageOwner.media.geo;
        double d = geoPoint.lat;
        double d2 = geoPoint._long;
        if (((int) messageObject.getDialogId()) == 0 && (i3 = SharedConfig.mapPreviewType) != 0) {
            if (i3 == 1) {
                i = 4;
            } else if (i3 == 3) {
                i = 1;
            }
            messageMedia = messageObject.messageOwner.media;
            if (messageMedia instanceof TLRPC.TL_messageMediaGeoLive) {
                if (TextUtils.isEmpty(messageMedia.title)) {
                    i2 = this.backgroundWidth;
                    dp = AndroidUtilities.dp(12.0f);
                } else {
                    i2 = this.backgroundWidth;
                    dp = AndroidUtilities.dp(21.0f);
                }
                int i5 = i2 - dp;
                int dp2 = AndroidUtilities.dp(195.0f);
                int i6 = this.currentAccount;
                float f = AndroidUtilities.density;
                formapMapUrl = AndroidUtilities.formapMapUrl(i6, d, d2, (int) (i5 / f), (int) (dp2 / f), true, 15, i);
            } else {
                int dp3 = this.backgroundWidth - AndroidUtilities.dp(21.0f);
                int dp4 = AndroidUtilities.dp(195.0f);
                double d3 = 268435456;
                Double.isNaN(d3);
                double d4 = d3 / 3.141592653589793d;
                double d5 = (d * 3.141592653589793d) / 180.0d;
                double log = (Math.log((Math.sin(d5) + 1.0d) / (1.0d - Math.sin(d5))) * d4) / 2.0d;
                Double.isNaN(d3);
                double round = Math.round(d3 - log) - (AndroidUtilities.dp(10.3f) << 6);
                Double.isNaN(round);
                Double.isNaN(d3);
                double atan = ((1.5707963267948966d - (Math.atan(Math.exp((round - d3) / d4)) * 2.0d)) * 180.0d) / 3.141592653589793d;
                int i7 = this.currentAccount;
                float f2 = AndroidUtilities.density;
                formapMapUrl = AndroidUtilities.formapMapUrl(i7, atan, d2, (int) (dp3 / f2), (int) (dp4 / f2), false, 15, i);
            }
            return !formapMapUrl.equals(this.currentUrl);
        }
        i = -1;
        messageMedia = messageObject.messageOwner.media;
        if (messageMedia instanceof TLRPC.TL_messageMediaGeoLive) {
        }
        return !formapMapUrl.equals(this.currentUrl);
    }

    private float isSmallImage() {
        TransitionParams transitionParams = this.transitionParams;
        if (!transitionParams.animateSmallImage) {
            return this.isSmallImage ? 1.0f : 0.0f;
        }
        boolean z = this.isSmallImage;
        float f = transitionParams.animateChangeProgress;
        return z ? f : 1.0f - f;
    }

    /* JADX WARN: Removed duplicated region for block: B:75:0x00da  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean isUserDataChanged() {
        TLRPC.FileLocation fileLocation;
        TLRPC.FileLocation fileLocation2;
        TLRPC.PhotoSize photoSize;
        String str;
        String forwardedName;
        String str2;
        MessageObject messageObject;
        MessageObject messageObject2;
        TLRPC.MessageFwdHeader messageFwdHeader;
        TLRPC.ChatPhoto chatPhoto;
        TLRPC.UserProfilePhoto userProfilePhoto;
        MessageObject messageObject3 = this.currentMessageObject;
        if (messageObject3 != null && !this.hasLinkPreview && MessageObject.getMedia(messageObject3.messageOwner) != null && (MessageObject.getMedia(this.currentMessageObject.messageOwner).webpage instanceof TLRPC.TL_webPage)) {
            return true;
        }
        MessageObject messageObject4 = this.currentMessageObject;
        if (messageObject4 != null && (this.currentUser != null || this.currentChat != null)) {
            int i = this.lastSendState;
            TLRPC.Message message = messageObject4.messageOwner;
            if (i != message.send_state || this.lastDeleteDate != message.destroyTime || this.lastViewsCount != message.views || this.lastRepliesCount != getRepliesCount() || this.lastReactions != this.currentMessageObject.messageOwner.reactions) {
                return true;
            }
            updateCurrentUserAndChat();
            if (this.isAvatarVisible) {
                TLRPC.User user = this.currentUser;
                if (user == null || (userProfilePhoto = user.photo) == null) {
                    TLRPC.Chat chat = this.currentChat;
                    if (chat != null && (chatPhoto = chat.photo) != null) {
                        fileLocation = chatPhoto.photo_small;
                    }
                } else {
                    fileLocation = userProfilePhoto.photo_small;
                }
                if (this.replyTextLayout != null && (messageObject2 = this.currentMessageObject.replyMessageObject) != null && (!this.isThreadChat || (messageFwdHeader = messageObject2.messageOwner.fwd_from) == null || messageFwdHeader.channel_post == 0)) {
                    return true;
                }
                fileLocation2 = this.currentPhoto;
                if ((fileLocation2 != null && fileLocation != null) || ((fileLocation2 != null && fileLocation == null) || (fileLocation2 != null && (fileLocation2.local_id != fileLocation.local_id || fileLocation2.volume_id != fileLocation.volume_id)))) {
                    return true;
                }
                if (this.replyNameLayout != null || (messageObject = this.currentMessageObject.replyMessageObject) == null || (photoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 40)) == null || this.currentMessageObject.replyMessageObject.isAnyKindOfSticker()) {
                    photoSize = null;
                }
                if (this.currentReplyPhoto != null && photoSize != null) {
                    return true;
                }
                String authorName = isNeedAuthorName() ? getAuthorName() : null;
                str = this.currentNameString;
                if ((str != null && authorName != null) || ((str != null && authorName == null) || (str != null && !str.equals(authorName)))) {
                    return true;
                }
                if (this.drawForwardedName && this.currentMessageObject.needDrawForwarded()) {
                    forwardedName = this.currentMessageObject.getForwardedName();
                    str2 = this.currentForwardNameString;
                    if (str2 != null && forwardedName != null) {
                        return true;
                    }
                    if (str2 == null && forwardedName == null) {
                        return true;
                    }
                    return str2 == null && !str2.equals(forwardedName);
                }
            }
            fileLocation = null;
            if (this.replyTextLayout != null) {
            }
            fileLocation2 = this.currentPhoto;
            if (fileLocation2 != null) {
            }
            if (this.replyNameLayout != null) {
            }
            photoSize = null;
            if (this.currentReplyPhoto != null) {
            }
            if (isNeedAuthorName()) {
            }
            str = this.currentNameString;
            if (str != null) {
            }
            if (this.drawForwardedName) {
                forwardedName = this.currentMessageObject.getForwardedName();
                str2 = this.currentForwardNameString;
                if (str2 != null) {
                }
                if (str2 == null) {
                }
                if (str2 == null) {
                }
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkBotButtonMotionEvent$4(int i) {
        int i2 = this.pressedBotButton;
        if (i == i2) {
            BotButton botButton = (BotButton) this.botButtons.get(i2);
            if (botButton != null) {
                if (botButton.selectorDrawable != null) {
                    botButton.selectorDrawable.setState(StateSet.NOTHING);
                }
                botButton.setPressed(false);
                if (!this.currentMessageObject.scheduled && botButton.button != null) {
                    cancelCheckLongPress();
                    ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                    if (chatMessageCellDelegate != null) {
                        chatMessageCellDelegate.didLongPressBotButton(this, botButton.button);
                    }
                }
            }
            this.pressedBotButton = -1;
            invalidateOutbounds();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkReplyTouchEvent$5() {
        if (this.replyPressed && !this.replySelectorPressed && this.replySelectorCanBePressed) {
            this.replySelectorPressed = true;
            this.replySelector.setState(new int[]{android.R.attr.state_pressed, android.R.attr.state_enabled});
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkReplyTouchEvent$6() {
        this.replySelector.setState(new int[0]);
        invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSpoilersMotionEvent$0() {
        this.isSpoilerRevealing = false;
        getMessageObject().isSpoilersRevealed = true;
        MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
        if (textLayoutBlocks != null) {
            Iterator<MessageObject.TextLayoutBlock> it = textLayoutBlocks.textLayoutBlocks.iterator();
            while (it.hasNext()) {
                it.next().spoilers.clear();
            }
        } else {
            ArrayList<MessageObject.TextLayoutBlock> arrayList = this.currentMessageObject.textLayoutBlocks;
            if (arrayList != null) {
                Iterator<MessageObject.TextLayoutBlock> it2 = arrayList.iterator();
                while (it2.hasNext()) {
                    it2.next().spoilers.clear();
                }
            }
        }
        invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSpoilersMotionEvent$1() {
        post(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda15
            @Override // java.lang.Runnable
            public final void run() {
                ChatMessageCell.this.lambda$checkSpoilersMotionEvent$0();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$checkSpoilersMotionEvent$2(ChatMessageCell chatMessageCell) {
        chatMessageCell.getMessageObject().replyMessageObject.isSpoilersRevealed = true;
        chatMessageCell.replySpoilers.clear();
        chatMessageCell.invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkSpoilersMotionEvent$3(final ChatMessageCell chatMessageCell) {
        post(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda16
            @Override // java.lang.Runnable
            public final void run() {
                ChatMessageCell.lambda$checkSpoilersMotionEvent$2(ChatMessageCell.this);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$createStatusDrawableAnimator$13(boolean z, ValueAnimator valueAnimator) {
        this.statusDrawableProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidate();
        if (!z || getParent() == null) {
            return;
        }
        ((View) getParent()).invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$drawContent$11(Canvas canvas) {
        this.radialProgress.draw(canvas);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$onLongPress$10() {
        this.replySelector.setState(new int[0]);
        invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setMessageContent$7(TLRPC.User user, int i, TLRPC.Chat chat, long j) {
        if (user != null) {
            this.commentAvatarDrawables[i].setInfo(this.currentAccount, user);
            this.commentAvatarImages[i].setForUserOrChat(user, this.commentAvatarDrawables[i]);
            return;
        }
        AvatarDrawable[] avatarDrawableArr = this.commentAvatarDrawables;
        if (chat == null) {
            avatarDrawableArr[i].setInfo(j, "", "");
        } else {
            avatarDrawableArr[i].setInfo(this.currentAccount, chat);
            this.commentAvatarImages[i].setForUserOrChat(chat, this.commentAvatarDrawables[i]);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ int lambda$setMessageContent$8(PollButton pollButton, PollButton pollButton2) {
        if (pollButton.decimal > pollButton2.decimal) {
            return -1;
        }
        if (pollButton.decimal < pollButton2.decimal) {
            return 1;
        }
        if (pollButton.decimal != pollButton2.decimal) {
            return 0;
        }
        if (pollButton.percent > pollButton2.percent) {
            return 1;
        }
        return pollButton.percent < pollButton2.percent ? -1 : 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$startRevealMedia$12(ValueAnimator valueAnimator) {
        this.mediaSpoilerRevealProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidate();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$updateFlagSecure$9() {
        TLRPC.Message message;
        GroupMedia groupMedia;
        MessageObject messageObject = this.currentMessageObject;
        return (messageObject == null || (message = messageObject.messageOwner) == null || ((messageObject.type != 29 || ((groupMedia = this.groupMedia) != null && groupMedia.hidden)) && !message.noforwards && !messageObject.isVoiceOnce() && !this.currentMessageObject.hasRevealedExtendedMedia())) ? false : true;
    }

    /* JADX WARN: Code restructure failed: missing block: B:32:0x01e1, code lost:
    
        if ((r6.getLineRight(r6.getLineCount() - 1) - r27.factCheckText2LayoutLeft) > (r27.factCheckWidth - org.telegram.messenger.AndroidUtilities.dp(50.0f))) goto L44;
     */
    /* JADX WARN: Removed duplicated region for block: B:46:0x0226  */
    /* JADX WARN: Removed duplicated region for block: B:49:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private int layoutFactCheck(int i) {
        int i2;
        String str;
        MessageObject primaryMessageObject = getPrimaryMessageObject();
        this.factCheckHeight = 0;
        this.factCheckWidth = 0;
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        boolean z = true;
        boolean z2 = ((groupedMessagePosition != null && (groupedMessagePosition.flags & 8) == 0) || primaryMessageObject == null || primaryMessageObject.getFactCheck() == null || primaryMessageObject.isRepostPreview) ? false : true;
        this.hasFactCheck = z2;
        if (z2) {
            TLRPC.TL_factCheck factCheck = primaryMessageObject.getFactCheck();
            CharSequence factCheckText = primaryMessageObject.getFactCheckText();
            if (!factCheck.need_check && factCheckText != null) {
                this.factCheckHeight += AndroidUtilities.dp(4.66f);
                this.factCheckTitle = new Text(LocaleController.getString(R.string.FactCheck), 14.0f, AndroidUtilities.bold());
                this.factCheckWhat = new Text(LocaleController.getString(R.string.FactCheckWhat), 11.0f);
                this.factCheckHeight += AndroidUtilities.dp(17.33f);
                this.factCheckWidth = (int) (AndroidUtilities.dp(20.0f) + this.factCheckTitle.getCurrentWidth() + this.factCheckWhat.getCurrentWidth() + AndroidUtilities.dp(18.0f));
                try {
                    str = new Locale("", factCheck.country).getDisplayCountry(LocaleController.getInstance().getCurrentLocale());
                } catch (Exception e) {
                    FileLog.e(e);
                    str = factCheck.country;
                }
                TextPaint textPaint = Theme.chat_replyTextPaint;
                Layout.Alignment alignment = Layout.Alignment.ALIGN_NORMAL;
                float dp = AndroidUtilities.dp(1.0f);
                TextUtils.TruncateAt truncateAt = TextUtils.TruncateAt.END;
                this.factCheckTextLayout = StaticLayoutEx.createStaticLayout(factCheckText, textPaint, i, alignment, 1.0f, dp, false, truncateAt, i, 99999);
                this.factCheckText2Layout = StaticLayoutEx.createStaticLayout(LocaleController.formatString(R.string.FactCheckFooter, str), Theme.chat_titleLabelTextPaint, i, alignment, 1.0f, AndroidUtilities.dp(1.0f), false, truncateAt, i, 99999);
                this.factCheckTextLayoutLeft = this.factCheckTextLayout.getWidth();
                int i3 = 0;
                for (int i4 = 0; i4 < this.factCheckTextLayout.getLineCount(); i4++) {
                    this.factCheckTextLayoutLeft = (int) Math.min(this.factCheckTextLayoutLeft, this.factCheckTextLayout.getLineLeft(i4));
                    i3 = (int) Math.max(i3, this.factCheckTextLayout.getLineRight(i4));
                }
                this.factCheckWidth = Math.max(this.factCheckWidth, Math.abs(i3 - this.factCheckTextLayoutLeft) + AndroidUtilities.dp(20.0f));
                this.factCheckText2LayoutLeft = this.factCheckText2Layout.getWidth();
                int i5 = 0;
                for (int i6 = 0; i6 < this.factCheckText2Layout.getLineCount(); i6++) {
                    this.factCheckText2LayoutLeft = (int) Math.min(this.factCheckText2LayoutLeft, this.factCheckText2Layout.getLineLeft(i6));
                    i5 = (int) Math.max(i5, this.factCheckText2Layout.getLineRight(i6));
                }
                this.factCheckWidth = Math.max(this.factCheckWidth, Math.abs(i5 - this.factCheckText2LayoutLeft) + AndroidUtilities.dp(20.0f));
                StaticLayout staticLayout = this.factCheckTextLayout;
                int lineBottom = staticLayout.getLineBottom(staticLayout.getLineCount() - 1);
                this.factCheckTextLayoutHeight = lineBottom;
                int dp2 = lineBottom + AndroidUtilities.dp(12.66f);
                StaticLayout staticLayout2 = this.factCheckText2Layout;
                int lineBottom2 = dp2 + staticLayout2.getLineBottom(staticLayout2.getLineCount() - 1);
                int textSize = (int) (Theme.chat_replyTextPaint.getTextSize() * 3.5f * 1.4f);
                boolean z3 = this.factCheckTextLayout.getLineCount() > 3 && AndroidUtilities.dp(10.0f) + lineBottom2 > textSize;
                this.factCheckLarge = z3;
                if (z3) {
                    StaticLayout staticLayout3 = this.factCheckText2Layout;
                }
                z = false;
                this.factCheckTextLayoutLastLineEnd = z;
                if (this.factCheckLarge && !primaryMessageObject.factCheckExpanded) {
                    if (lineBottom2 < textSize) {
                        this.factCheckLarge = false;
                    }
                    lineBottom2 = Math.min(textSize, lineBottom2);
                }
                if (this.factCheckTextLayoutLastLineEnd) {
                    lineBottom2 = (int) (lineBottom2 + (Theme.chat_replyTextPaint.getTextSize() * 1.3f));
                }
                int i7 = this.factCheckHeight + lineBottom2;
                this.factCheckHeight = i7;
                this.factCheckHeight = i7 + AndroidUtilities.dp(6.66f);
                i2 = AndroidUtilities.dp(2.0f);
                if (this.hasFactCheck) {
                    return 0;
                }
                return this.factCheckHeight + i2;
            }
            this.hasFactCheck = false;
        }
        i2 = 0;
        if (this.hasFactCheck) {
        }
    }

    private boolean loopStickers() {
        return LiteMode.isEnabled(2);
    }

    /* JADX WARN: Removed duplicated region for block: B:103:0x03cd  */
    /* JADX WARN: Removed duplicated region for block: B:111:0x042e  */
    /* JADX WARN: Removed duplicated region for block: B:114:0x0446  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x0476  */
    /* JADX WARN: Removed duplicated region for block: B:130:0x0494  */
    /* JADX WARN: Removed duplicated region for block: B:133:0x049d  */
    /* JADX WARN: Removed duplicated region for block: B:151:0x04f4  */
    /* JADX WARN: Removed duplicated region for block: B:153:0x04f7  */
    /* JADX WARN: Removed duplicated region for block: B:161:0x050b  */
    /* JADX WARN: Removed duplicated region for block: B:165:0x051c  */
    /* JADX WARN: Removed duplicated region for block: B:187:0x05a2  */
    /* JADX WARN: Removed duplicated region for block: B:189:0x0497  */
    /* JADX WARN: Removed duplicated region for block: B:193:0x02e3  */
    /* JADX WARN: Removed duplicated region for block: B:194:0x0220  */
    /* JADX WARN: Removed duplicated region for block: B:19:0x010c  */
    /* JADX WARN: Removed duplicated region for block: B:223:0x011b  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x01cc  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x01f0  */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0296  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x02a2  */
    /* JADX WARN: Removed duplicated region for block: B:86:0x02e1  */
    /* JADX WARN: Removed duplicated region for block: B:89:0x02fb  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x031c  */
    /* JADX WARN: Removed duplicated region for block: B:97:0x0373  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void measureTime(MessageObject messageObject) {
        String str;
        MessageObject messageObject2;
        String str2;
        MessageObject messageObject3;
        TLRPC.Message message;
        TLRPC.TL_availableEffect effect;
        AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable;
        Emoji.EmojiDrawable emojiDrawable;
        StringBuilder sb;
        MessageObject messageObject4;
        TLRPC.MessageFwdHeader messageFwdHeader;
        int i;
        StringBuilder sb2;
        FastDateFormat formatterDay;
        int i2;
        TLRPC.Message message2;
        MessageObject.GroupedMessages groupedMessages;
        TLRPC.Chat chat;
        TLRPC.User user;
        String str3;
        int i3 = 0;
        MessageObject primaryMessageObject = getPrimaryMessageObject();
        long fromChatId = messageObject.getFromChatId();
        CharSequence charSequence = "";
        if (!messageObject.scheduled) {
            if (primaryMessageObject.messageOwner.via_business_bot_id != 0) {
                TLRPC.User user2 = MessagesController.getInstance(messageObject.currentAccount).getUser(Long.valueOf(primaryMessageObject.messageOwner.via_business_bot_id));
                if (user2 != null) {
                    str = UserObject.getUserName(user2);
                }
            } else {
                TLRPC.Message message3 = messageObject.messageOwner;
                if (message3.post_author == null) {
                    TLRPC.MessageFwdHeader messageFwdHeader2 = message3.fwd_from;
                    if (messageFwdHeader2 != null && (str3 = messageFwdHeader2.post_author) != null) {
                        str = str3.replace("\n", "");
                    } else if (messageFwdHeader2 == null || !messageFwdHeader2.imported) {
                        if (!messageObject.isOutOwner() && fromChatId > 0 && messageObject.messageOwner.post && (user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(fromChatId))) != null) {
                            str = ContactsController.formatName(user.first_name, user.last_name).replace('\n', ' ');
                        }
                    } else if (messageFwdHeader2.date == message3.date) {
                        str = LocaleController.getString("ImportedMessage", R.string.ImportedMessage);
                    } else {
                        str = LocaleController.formatImportedDate(messageObject.messageOwner.fwd_from.date) + " " + LocaleController.getString("ImportedMessage", R.string.ImportedMessage);
                    }
                } else if (!this.isMegagroup || messageObject.getFromChatId() != messageObject.getDialogId()) {
                    str = messageObject.messageOwner.post_author.replace("\n", "");
                }
            }
            if (messageObject.getDialogId() < 0 && (chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-messageObject.getDialogId()))) != null && chat.signature_profiles && (messageObject.messageOwner.flags & 256) != 0) {
                str = null;
            }
            TLRPC.User user3 = !this.currentMessageObject.isFromUser() ? MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(fromChatId)) : null;
            boolean hasReplies = messageObject.hasReplies();
            if (!messageObject.scheduled && !messageObject.isLiveLocation() && !messageObject.messageOwner.edit_hide && messageObject.getDialogId() != 777000) {
                message2 = messageObject.messageOwner;
                if (message2.via_bot_id == 0 && message2.via_bot_name == null && (user3 == null || !user3.bot)) {
                    if (this.currentPosition != null || (groupedMessages = this.currentMessagesGroup) == null || groupedMessages.messages.isEmpty()) {
                        this.edited = (messageObject.messageOwner.flags & 32768) == 0 || messageObject.isEditing();
                    } else {
                        this.edited = false;
                        hasReplies = this.currentMessagesGroup.messages.get(0).hasReplies();
                        if (!this.currentMessagesGroup.messages.get(0).messageOwner.edit_hide) {
                            int size = this.currentMessagesGroup.messages.size();
                            for (int i4 = 0; i4 < size; i4++) {
                                MessageObject messageObject5 = this.currentMessagesGroup.messages.get(i4);
                                if ((messageObject5.messageOwner.flags & 32768) != 0 || messageObject5.isEditing()) {
                                    this.edited = true;
                                    break;
                                }
                            }
                        }
                    }
                    messageObject2 = this.currentMessageObject;
                    if (!messageObject2.notime && !messageObject2.isSponsored() && !this.currentMessageObject.isQuickReply()) {
                        messageObject4 = this.currentMessageObject;
                        if (messageObject4.scheduled || messageObject4.messageOwner.date != 2147483646) {
                            if (messageObject4.realDate == 0) {
                                sb2 = new StringBuilder();
                                sb2.append(LocaleController.formatSmallDateChat(this.currentMessageObject.realDate));
                                sb2.append(", ");
                                formatterDay = LocaleController.getInstance().getFormatterDay();
                                i2 = this.currentMessageObject.realDate;
                            } else {
                                if (messageObject4.isRepostPreview) {
                                    sb2 = new StringBuilder();
                                    sb2.append(LocaleController.formatSmallDateChat(messageObject.messageOwner.date));
                                    sb2.append(", ");
                                } else {
                                    if (!this.edited) {
                                        if (!messageObject4.isSaved || (messageFwdHeader = messageObject4.messageOwner.fwd_from) == null || ((i = messageFwdHeader.date) == 0 && messageFwdHeader.saved_date == 0)) {
                                            str2 = LocaleController.getInstance().getFormatterDay().format(messageObject.messageOwner.date * 1000);
                                        } else {
                                            int i5 = messageFwdHeader.saved_date;
                                            if (i5 != 0) {
                                                i = i5;
                                            }
                                            str2 = LocaleController.formatSeenDate(i);
                                        }
                                        if (this.currentMessageObject.messageOwner.video_processing_pending) {
                                            str2 = LocaleController.formatString(R.string.ScheduledTimeApprox, str2);
                                        }
                                        if (str != null) {
                                            TLRPC.Message message4 = messageObject.messageOwner;
                                            if (message4.via_business_bot_id != 0) {
                                                sb = new StringBuilder();
                                                sb.append(str2);
                                                sb.append(", ");
                                            } else {
                                                TLRPC.MessageFwdHeader messageFwdHeader3 = message4.fwd_from;
                                                if (messageFwdHeader3 == null || !messageFwdHeader3.imported) {
                                                    sb = new StringBuilder();
                                                    sb.append(", ");
                                                } else {
                                                    sb = new StringBuilder();
                                                    sb.append(" ");
                                                }
                                                sb.append(str2);
                                            }
                                            str2 = sb.toString();
                                        }
                                        this.currentTimeString = str2;
                                        TextPaint textPaint = Theme.chat_timePaint;
                                        int ceil = (int) Math.ceil(textPaint.measureText(r7, 0, this.currentTimeString == null ? 0 : r7.length()));
                                        this.timeWidth = ceil;
                                        this.timeTextWidth = ceil;
                                        messageObject3 = this.currentMessageObject;
                                        if ((messageObject3.scheduled && messageObject3.messageOwner.date == 2147483646) || messageObject3.notime) {
                                            this.timeWidth = ceil - AndroidUtilities.dp(8.0f);
                                        }
                                        message = messageObject.messageOwner;
                                        if ((message.flags & 1024) != 0) {
                                            this.currentViewsString = String.format("%s", LocaleController.formatShortNumber(Math.max(1, message.views), null));
                                            this.viewsTextWidth = (int) Math.ceil(Theme.chat_timePaint.measureText(r5));
                                            this.timeWidth = (int) (this.timeWidth + this.viewsTextWidth + ((Theme.chat_msgInViewsDrawable.getIntrinsicWidth() * (Theme.chat_timePaint.getTextSize() - AndroidUtilities.dp(2.0f))) / Theme.chat_msgInViewsDrawable.getIntrinsicHeight()) + AndroidUtilities.dp(10.0f));
                                        }
                                        if (messageObject.type == 20) {
                                            int i6 = R.string.PaymentCheckoutPay;
                                            LocaleController localeController = LocaleController.getInstance();
                                            TLRPC.MessageMedia messageMedia = messageObject.messageOwner.media;
                                            String formatCurrencyString = localeController.formatCurrencyString(messageMedia.total_amount, messageMedia.currency);
                                            Locale locale = Locale.ROOT;
                                            String formatString = LocaleController.formatString(i6, formatCurrencyString.toUpperCase(locale));
                                            if (formatString.length() >= 2) {
                                                formatString = formatString.substring(0, 1).toUpperCase(locale) + formatString.substring(1).toLowerCase(locale);
                                            }
                                            this.currentUnlockString = formatString;
                                            this.unlockTextWidth = (int) Math.ceil(Theme.chat_unlockExtendedMediaTextPaint.measureText(formatString));
                                        }
                                        if (this.isChat || !this.isMegagroup || this.isThreadChat || !hasReplies) {
                                            this.currentRepliesString = null;
                                        } else {
                                            this.currentRepliesString = String.format("%s", LocaleController.formatShortNumber(getRepliesCount(), null));
                                            this.repliesTextWidth = (int) Math.ceil(Theme.chat_timePaint.measureText(r5));
                                            this.timeWidth = (int) (this.timeWidth + this.repliesTextWidth + ((Theme.chat_msgInRepliesDrawable.getIntrinsicWidth() * (Theme.chat_timePaint.getTextSize() - AndroidUtilities.dp(2.0f))) / Theme.chat_msgInRepliesDrawable.getIntrinsicHeight()) + AndroidUtilities.dp(10.0f));
                                        }
                                        if (this.isPinned) {
                                            this.timeWidth += Theme.chat_msgInPinnedDrawable.getIntrinsicWidth() + AndroidUtilities.dp(3.0f);
                                        }
                                        if (messageObject.scheduled && (messageObject.isSendError() || (messageObject.isSending() && messageObject.messageOwner.peer_id.channel_id != 0 && !messageObject.isSupergroup()))) {
                                            this.timeWidth += AndroidUtilities.dp(18.0f);
                                        }
                                        if (this.currentMessageObject.shouldDrawReactions()) {
                                            ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                                            if (reactionsLayoutInBubble.isSmall) {
                                                reactionsLayoutInBubble.measure(ConnectionsManager.DEFAULT_DATACENTER_ID, 3);
                                                this.timeWidth += this.reactionsLayoutInBubble.width;
                                            }
                                        }
                                        effect = getEffect();
                                        if (this.effectId != (effect == null ? effect.id : 0L)) {
                                            if (this.effectDrawable == null) {
                                                ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                                                this.effectDrawable = new AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable(this, chatMessageCellDelegate == null || !chatMessageCellDelegate.canDrawOutboundsContent(), AndroidUtilities.dp(14.0f), 23);
                                            }
                                            boolean z = this.effectMessageId == this.currentMessageObject.getId();
                                            if (effect == null) {
                                                swapAnimatedEmojiDrawable = this.effectDrawable;
                                                emojiDrawable = null;
                                            } else if (TextUtils.isEmpty(effect.emoticon)) {
                                                if ((1 & effect.flags) != 0) {
                                                    this.effectDrawable.set(effect.static_icon_id, z);
                                                }
                                                this.effectId = effect == null ? effect.id : 0L;
                                                this.effectMessageId = this.currentMessageObject.getId();
                                            } else {
                                                swapAnimatedEmojiDrawable = this.effectDrawable;
                                                emojiDrawable = Emoji.getEmojiDrawable(effect.emoticon);
                                            }
                                            swapAnimatedEmojiDrawable.set(emojiDrawable, z);
                                            this.effectId = effect == null ? effect.id : 0L;
                                            this.effectMessageId = this.currentMessageObject.getId();
                                        }
                                        if (this.effectId != 0 && !this.currentMessageObject.notime) {
                                            this.timeWidth += AndroidUtilities.dp(18.0f);
                                        }
                                        if (str != null) {
                                            this.signWidth = 0;
                                            return;
                                        }
                                        if (this.availableTimeWidth == 0) {
                                            this.availableTimeWidth = AndroidUtilities.dp(1000.0f);
                                        }
                                        int i7 = this.availableTimeWidth - this.timeWidth;
                                        if (messageObject.isOutOwner()) {
                                            i7 -= AndroidUtilities.dp(messageObject.type == 5 ? 20.0f : 96.0f);
                                        }
                                        CharSequence replaceEmoji = Emoji.replaceEmoji(str, Theme.chat_timePaint.getFontMetricsInt(), false);
                                        int ceil2 = (int) Math.ceil(Theme.chat_timePaint.measureText(replaceEmoji, 0, replaceEmoji.length()));
                                        this.signWidth = Math.min(ceil2, i7);
                                        if (ceil2 <= i7) {
                                            charSequence = replaceEmoji;
                                            i3 = ceil2;
                                        } else if (i7 > 0) {
                                            charSequence = TextUtils.ellipsize(replaceEmoji, Theme.chat_timePaint, i7, TextUtils.TruncateAt.END);
                                            i3 = i7;
                                        }
                                        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
                                        if (messageObject.messageOwner.via_business_bot_id != 0) {
                                            spannableStringBuilder.append(this.currentTimeString);
                                            spannableStringBuilder.append(charSequence);
                                        } else {
                                            spannableStringBuilder.append(charSequence);
                                            spannableStringBuilder.append(this.currentTimeString);
                                        }
                                        this.currentTimeString = spannableStringBuilder;
                                        this.timeTextWidth += i3;
                                        this.timeWidth += i3;
                                        return;
                                    }
                                    sb2 = new StringBuilder();
                                    sb2.append(LocaleController.getString(R.string.EditedMessage));
                                    sb2.append(" ");
                                }
                                formatterDay = LocaleController.getInstance().getFormatterDay();
                                i2 = messageObject.messageOwner.date;
                            }
                            sb2.append(formatterDay.format(i2 * 1000));
                            str2 = sb2.toString();
                            if (this.currentMessageObject.messageOwner.video_processing_pending) {
                            }
                            if (str != null) {
                            }
                            this.currentTimeString = str2;
                            TextPaint textPaint2 = Theme.chat_timePaint;
                            int ceil3 = (int) Math.ceil(textPaint2.measureText(r7, 0, this.currentTimeString == null ? 0 : r7.length()));
                            this.timeWidth = ceil3;
                            this.timeTextWidth = ceil3;
                            messageObject3 = this.currentMessageObject;
                            if (messageObject3.scheduled) {
                                this.timeWidth = ceil3 - AndroidUtilities.dp(8.0f);
                                message = messageObject.messageOwner;
                                if ((message.flags & 1024) != 0) {
                                }
                                if (messageObject.type == 20) {
                                }
                                if (this.isChat) {
                                }
                                this.currentRepliesString = null;
                                if (this.isPinned) {
                                }
                                if (messageObject.scheduled) {
                                    this.timeWidth += AndroidUtilities.dp(18.0f);
                                }
                                if (this.currentMessageObject.shouldDrawReactions()) {
                                }
                                effect = getEffect();
                                if (this.effectId != (effect == null ? effect.id : 0L)) {
                                }
                                if (this.effectId != 0) {
                                    this.timeWidth += AndroidUtilities.dp(18.0f);
                                }
                                if (str != null) {
                                }
                            }
                            this.timeWidth = ceil3 - AndroidUtilities.dp(8.0f);
                            message = messageObject.messageOwner;
                            if ((message.flags & 1024) != 0) {
                            }
                            if (messageObject.type == 20) {
                            }
                            if (this.isChat) {
                            }
                            this.currentRepliesString = null;
                            if (this.isPinned) {
                            }
                            if (messageObject.scheduled) {
                            }
                            if (this.currentMessageObject.shouldDrawReactions()) {
                            }
                            effect = getEffect();
                            if (this.effectId != (effect == null ? effect.id : 0L)) {
                            }
                            if (this.effectId != 0) {
                            }
                            if (str != null) {
                            }
                        }
                    }
                    str2 = "";
                    if (this.currentMessageObject.messageOwner.video_processing_pending) {
                    }
                    if (str != null) {
                    }
                    this.currentTimeString = str2;
                    TextPaint textPaint22 = Theme.chat_timePaint;
                    int ceil32 = (int) Math.ceil(textPaint22.measureText(r7, 0, this.currentTimeString == null ? 0 : r7.length()));
                    this.timeWidth = ceil32;
                    this.timeTextWidth = ceil32;
                    messageObject3 = this.currentMessageObject;
                    if (messageObject3.scheduled) {
                    }
                    this.timeWidth = ceil32 - AndroidUtilities.dp(8.0f);
                    message = messageObject.messageOwner;
                    if ((message.flags & 1024) != 0) {
                    }
                    if (messageObject.type == 20) {
                    }
                    if (this.isChat) {
                    }
                    this.currentRepliesString = null;
                    if (this.isPinned) {
                    }
                    if (messageObject.scheduled) {
                    }
                    if (this.currentMessageObject.shouldDrawReactions()) {
                    }
                    effect = getEffect();
                    if (this.effectId != (effect == null ? effect.id : 0L)) {
                    }
                    if (this.effectId != 0) {
                    }
                    if (str != null) {
                    }
                }
            }
            this.edited = false;
            messageObject2 = this.currentMessageObject;
            if (!messageObject2.notime) {
                messageObject4 = this.currentMessageObject;
                if (messageObject4.scheduled) {
                }
                if (messageObject4.realDate == 0) {
                }
                sb2.append(formatterDay.format(i2 * 1000));
                str2 = sb2.toString();
                if (this.currentMessageObject.messageOwner.video_processing_pending) {
                }
                if (str != null) {
                }
                this.currentTimeString = str2;
                TextPaint textPaint222 = Theme.chat_timePaint;
                int ceil322 = (int) Math.ceil(textPaint222.measureText(r7, 0, this.currentTimeString == null ? 0 : r7.length()));
                this.timeWidth = ceil322;
                this.timeTextWidth = ceil322;
                messageObject3 = this.currentMessageObject;
                if (messageObject3.scheduled) {
                }
                this.timeWidth = ceil322 - AndroidUtilities.dp(8.0f);
                message = messageObject.messageOwner;
                if ((message.flags & 1024) != 0) {
                }
                if (messageObject.type == 20) {
                }
                if (this.isChat) {
                }
                this.currentRepliesString = null;
                if (this.isPinned) {
                }
                if (messageObject.scheduled) {
                }
                if (this.currentMessageObject.shouldDrawReactions()) {
                }
                effect = getEffect();
                if (this.effectId != (effect == null ? effect.id : 0L)) {
                }
                if (this.effectId != 0) {
                }
                if (str != null) {
                }
            }
            str2 = "";
            if (this.currentMessageObject.messageOwner.video_processing_pending) {
            }
            if (str != null) {
            }
            this.currentTimeString = str2;
            TextPaint textPaint2222 = Theme.chat_timePaint;
            int ceil3222 = (int) Math.ceil(textPaint2222.measureText(r7, 0, this.currentTimeString == null ? 0 : r7.length()));
            this.timeWidth = ceil3222;
            this.timeTextWidth = ceil3222;
            messageObject3 = this.currentMessageObject;
            if (messageObject3.scheduled) {
            }
            this.timeWidth = ceil3222 - AndroidUtilities.dp(8.0f);
            message = messageObject.messageOwner;
            if ((message.flags & 1024) != 0) {
            }
            if (messageObject.type == 20) {
            }
            if (this.isChat) {
            }
            this.currentRepliesString = null;
            if (this.isPinned) {
            }
            if (messageObject.scheduled) {
            }
            if (this.currentMessageObject.shouldDrawReactions()) {
            }
            effect = getEffect();
            if (this.effectId != (effect == null ? effect.id : 0L)) {
            }
            if (this.effectId != 0) {
            }
            if (str != null) {
            }
        }
        str = null;
        if (messageObject.getDialogId() < 0) {
            str = null;
        }
        if (!this.currentMessageObject.isFromUser()) {
        }
        boolean hasReplies2 = messageObject.hasReplies();
        if (!messageObject.scheduled) {
            message2 = messageObject.messageOwner;
            if (message2.via_bot_id == 0) {
                if (this.currentPosition != null) {
                }
                this.edited = (messageObject.messageOwner.flags & 32768) == 0 || messageObject.isEditing();
                messageObject2 = this.currentMessageObject;
                if (!messageObject2.notime) {
                }
                str2 = "";
                if (this.currentMessageObject.messageOwner.video_processing_pending) {
                }
                if (str != null) {
                }
                this.currentTimeString = str2;
                TextPaint textPaint22222 = Theme.chat_timePaint;
                int ceil32222 = (int) Math.ceil(textPaint22222.measureText(r7, 0, this.currentTimeString == null ? 0 : r7.length()));
                this.timeWidth = ceil32222;
                this.timeTextWidth = ceil32222;
                messageObject3 = this.currentMessageObject;
                if (messageObject3.scheduled) {
                }
                this.timeWidth = ceil32222 - AndroidUtilities.dp(8.0f);
                message = messageObject.messageOwner;
                if ((message.flags & 1024) != 0) {
                }
                if (messageObject.type == 20) {
                }
                if (this.isChat) {
                }
                this.currentRepliesString = null;
                if (this.isPinned) {
                }
                if (messageObject.scheduled) {
                }
                if (this.currentMessageObject.shouldDrawReactions()) {
                }
                effect = getEffect();
                if (this.effectId != (effect == null ? effect.id : 0L)) {
                }
                if (this.effectId != 0) {
                }
                if (str != null) {
                }
            }
        }
        this.edited = false;
        messageObject2 = this.currentMessageObject;
        if (!messageObject2.notime) {
        }
        str2 = "";
        if (this.currentMessageObject.messageOwner.video_processing_pending) {
        }
        if (str != null) {
        }
        this.currentTimeString = str2;
        TextPaint textPaint222222 = Theme.chat_timePaint;
        int ceil322222 = (int) Math.ceil(textPaint222222.measureText(r7, 0, this.currentTimeString == null ? 0 : r7.length()));
        this.timeWidth = ceil322222;
        this.timeTextWidth = ceil322222;
        messageObject3 = this.currentMessageObject;
        if (messageObject3.scheduled) {
        }
        this.timeWidth = ceil322222 - AndroidUtilities.dp(8.0f);
        message = messageObject.messageOwner;
        if ((message.flags & 1024) != 0) {
        }
        if (messageObject.type == 20) {
        }
        if (this.isChat) {
        }
        this.currentRepliesString = null;
        if (this.isPinned) {
        }
        if (messageObject.scheduled) {
        }
        if (this.currentMessageObject.shouldDrawReactions()) {
        }
        effect = getEffect();
        if (this.effectId != (effect == null ? effect.id : 0L)) {
        }
        if (this.effectId != 0) {
        }
        if (str != null) {
        }
    }

    private float mediaAbove() {
        TransitionParams transitionParams = this.transitionParams;
        if (!transitionParams.animateMediaAbove) {
            return this.captionAbove ? 1.0f : 0.0f;
        }
        boolean z = this.captionAbove;
        return AndroidUtilities.lerp(z ? 0.0f : 1.0f, z ? 1.0f : 0.0f, transitionParams.animateChangeProgress);
    }

    private LinkPath obtainNewUrlPath() {
        LinkPath linkPath;
        if (this.urlPathCache.isEmpty()) {
            linkPath = new LinkPath(true);
        } else {
            linkPath = (LinkPath) this.urlPathCache.get(0);
            this.urlPathCache.remove(0);
        }
        linkPath.reset();
        this.urlPathSelection.add(linkPath);
        return linkPath;
    }

    private void resetCodeSelectors() {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && messageObject.textLayoutBlocks != null) {
            for (int i = 0; i < this.currentMessageObject.textLayoutBlocks.size(); i++) {
                MessageObject.TextLayoutBlock textLayoutBlock = this.currentMessageObject.textLayoutBlocks.get(i);
                Drawable drawable = textLayoutBlock.copySelector;
                if (drawable != null) {
                    drawable.setCallback(this);
                    textLayoutBlock.copySelector.setState(StateSet.NOTHING);
                }
            }
        }
        if (this.captionLayout != null) {
            for (int i2 = 0; i2 < this.captionLayout.textLayoutBlocks.size(); i2++) {
                MessageObject.TextLayoutBlock textLayoutBlock2 = this.captionLayout.textLayoutBlocks.get(i2);
                Drawable drawable2 = textLayoutBlock2.copySelector;
                if (drawable2 != null) {
                    drawable2.setCallback(this);
                    textLayoutBlock2.copySelector.setState(StateSet.NOTHING);
                }
            }
        }
    }

    private void resetContactButtonsPressedState() {
        Drawable drawable;
        this.contactPressed = false;
        ButtonBounce buttonBounce = this.contactBounce;
        if (buttonBounce != null) {
            buttonBounce.setPressed(false);
        }
        if (Build.VERSION.SDK_INT >= 21 && (drawable = this.selectorDrawable[0]) != null) {
            drawable.setState(StateSet.NOTHING);
        }
        if (this.contactButtons != null) {
            for (int i = 0; i < this.contactButtons.size(); i++) {
                InstantViewButton instantViewButton = (InstantViewButton) this.contactButtons.get(i);
                if (instantViewButton.buttonBounce != null) {
                    instantViewButton.buttonBounce.setPressed(false);
                }
                if (instantViewButton.selectorDrawable != null) {
                    instantViewButton.selectorDrawable.setState(StateSet.NOTHING);
                }
            }
        }
    }

    private void resetUrlPaths() {
        if (this.quoteHighlight != null) {
            this.quoteHighlight = null;
        }
        if (this.urlPathSelection.isEmpty()) {
            return;
        }
        this.urlPathCache.addAll(this.urlPathSelection);
        this.urlPathSelection.clear();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void sendAccessibilityEventForVirtualView(int i, int i2) {
        sendAccessibilityEventForVirtualView(i, i2, null);
    }

    private void sendAccessibilityEventForVirtualView(int i, int i2, String str) {
        if (((AccessibilityManager) getContext().getSystemService("accessibility")).isTouchExplorationEnabled()) {
            AccessibilityEvent obtain = AccessibilityEvent.obtain(i2);
            obtain.setPackageName(getContext().getPackageName());
            obtain.setSource(this, i);
            if (str != null) {
                obtain.getText().add(str);
            }
            if (getParent() != null) {
                getParent().requestSendAccessibilityEvent(this, obtain);
            }
        }
    }

    private void setInstantButtonPressed(boolean z) {
        if (this.instantButtonBounce == null) {
            this.instantButtonBounce = new ButtonBounce(this);
        }
        ButtonBounce buttonBounce = this.instantButtonBounce;
        this.instantButtonPressed = z;
        buttonBounce.setPressed(z);
    }

    /*  JADX ERROR: Type inference failed
        jadx.core.utils.exceptions.JadxOverflowException: Type inference error: updates count limit reached
        	at jadx.core.utils.ErrorsCounter.addError(ErrorsCounter.java:59)
        	at jadx.core.utils.ErrorsCounter.error(ErrorsCounter.java:31)
        	at jadx.core.dex.attributes.nodes.NotificationAttrNode.addError(NotificationAttrNode.java:19)
        	at jadx.core.dex.visitors.typeinference.TypeInferenceVisitor.visit(TypeInferenceVisitor.java:77)
        */
    private void setMessageContent(org.telegram.messenger.MessageObject r88, org.telegram.messenger.MessageObject.GroupedMessages r89, boolean r90, boolean r91) {
        /*
            Method dump skipped, instructions count: 29137
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.Cells.ChatMessageCell.setMessageContent(org.telegram.messenger.MessageObject, org.telegram.messenger.MessageObject$GroupedMessages, boolean, boolean):void");
    }

    /* JADX WARN: Can't wrap try/catch for region: R(42:231|(3:235|(1:(1:745))(1:239)|240)|241|(1:743)(1:245)|246|(4:248|(1:250)|251|(3:734|(1:738)|739))(2:740|(1:742))|255|(1:733)(1:261)|262|(1:732)(1:266)|267|(1:731)(1:271)|(1:276)|277|(1:730)(1:281)|282|283|(24:438|(9:516|517|(1:519)(1:727)|520|(4:522|(3:524|(3:526|(1:528)(1:723)|529)(1:724)|530)(1:725)|531|(1:533))(1:726)|534|(3:690|(12:704|(1:706)(1:722)|707|708|(1:710)(1:721)|711|(1:713)(1:720)|714|715|(1:717)(1:719)|718|684)|546)(4:540|(1:542)(3:687|(1:689)|(2:545|546)(9:673|(1:675)|676|(1:678)(1:686)|679|680|(1:682)(1:685)|683|684))|543|(0)(0))|547|(2:549|(8:623|(6:625|555|556|(1:558)|559|(2:620|(1:622))(1:(2:573|(4:578|(1:580)(2:583|(1:585)(2:586|(2:601|(1:619)(8:607|(1:609)|610|(1:612)|613|(1:615)|616|(2:618|582)))(6:590|(1:592)|593|(1:595)|596|(2:598|(2:600|582)))))|581|582)(1:577))(1:572)))|626|(0)|559|(3:561|563|565)|620|(0))(9:553|554|555|556|(0)|559|(0)|620|(0)))(8:627|(2:632|(2:634|(2:636|(1:638)(8:641|555|556|(0)|559|(0)|620|(0)))(9:642|554|555|556|(0)|559|(0)|620|(0)))(8:643|(2:645|(7:(8:652|(1:654)(1:672)|(2:656|(2:658|(1:660))(2:661|(2:665|640)))|(0)|559|(0)|620|(0))|626|(0)|559|(0)|620|(0)))|556|(0)|559|(0)|620|(0)))|631|(0)|559|(0)|620|(0)))(4:454|(5:456|(1:458)(2:463|(1:465)(4:466|(1:468)|460|(1:462)))|459|460|(0))|469|(18:476|(1:478)|479|(2:481|(1:483)(13:511|485|486|(1:488)(1:510)|489|(1:491)(1:509)|492|(1:494)(1:508)|495|(1:499)|500|(1:506)(1:504)|505))(2:512|(1:514)(13:515|486|(0)(0)|489|(0)(0)|492|(0)(0)|495|(1:507)(2:497|499)|500|(1:502)|506|505))|484|485|486|(0)(0)|489|(0)(0)|492|(0)(0)|495|(0)(0)|500|(0)|506|505)(1:475))|294|295|296|(1:298)|299|(1:301)(1:430)|302|303|(1:305)(1:426)|306|(2:308|(1:310))|311|(1:425)(3:316|(1:318)(1:424)|319)|320|321|322|323|(1:325)(1:419)|326|(22:328|(3:330|(2:332|333)(1:335)|334)|336|337|(1:341)|342|(1:417)(2:(1:349)|350)|(13:352|(1:354)|355|356|(4:358|(1:362)|363|(4:365|(2:367|(2:369|370))|371|370))(1:415)|372|(1:376)|377|(4:379|(4:382|(1:396)(4:384|(1:386)(1:395)|(1:388)(1:394)|(2:390|391)(1:393))|392|380)|397|398)|399|(2:406|407)|412|407)|416|355|356|(0)(0)|372|(8:374|376|377|(0)|399|(3:401|406|407)|412|407)|413|376|377|(0)|399|(0)|412|407)(1:418)|408|(1:410))(3:287|(3:(1:434)(1:437)|435|436)(1:291)|292)|293|294|295|296|(0)|299|(0)(0)|302|303|(0)(0)|306|(0)|311|(0)|425|320|321|322|323|(0)(0)|326|(0)(0)|408|(0)) */
    /* JADX WARN: Can't wrap try/catch for region: R(44:21|22|(1:24)|25|(1:968)(2:31|(38:33|34|(3:(1:37)|38|(1:40)(1:41))|(1:43)(1:936)|44|45|(1:47)(1:(1:934)(1:935))|48|(1:50)(1:932)|51|52|53|54|(1:56)(1:929)|57|(8:59|(1:61)|62|(1:64)(2:924|(1:926)(1:927))|65|66|(3:68|(1:70)|71)(1:923)|72)(1:928)|73|74|75|(3:77|(1:79)|80)(1:919)|81|82|(1:84)|85|(1:87)|88|(1:90)(1:918)|91|(2:95|(1:97))|98|(2:100|(1:102)(2:103|(1:105)(2:106|(1:108))))|109|(2:113|(1:115))|116|(2:118|(1:120)(1:916))(1:917)|121|(1:123)|124)(1:937))|938|(3:945|(4:958|(1:960)(1:967)|961|(3:963|(1:965)|966))|949)(1:944)|34|(0)|(0)(0)|44|45|(0)(0)|48|(0)(0)|51|52|53|54|(0)(0)|57|(0)(0)|73|74|75|(0)(0)|81|82|(0)|85|(0)|88|(0)(0)|91|(3:93|95|(0))|98|(0)|109|(3:111|113|(0))|116|(0)(0)|121|(0)|124) */
    /* JADX WARN: Code restructure failed: missing block: B:206:0x14f6, code lost:
    
        if ((r0.action instanceof org.telegram.tgnet.TLRPC.TL_messageActionTopicCreate) == false) goto L961;
     */
    /* JADX WARN: Code restructure failed: missing block: B:427:0x1233, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:429:0x12ab, code lost:
    
        org.telegram.messenger.FileLog.e(r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:639:0x0fc7, code lost:
    
        if (r4 != null) goto L746;
     */
    /* JADX WARN: Code restructure failed: missing block: B:920:0x0436, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:922:0x04ae, code lost:
    
        org.telegram.messenger.FileLog.e(r0);
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:100:0x04d0  */
    /* JADX WARN: Removed duplicated region for block: B:115:0x050e  */
    /* JADX WARN: Removed duplicated region for block: B:118:0x0515  */
    /* JADX WARN: Removed duplicated region for block: B:123:0x0532  */
    /* JADX WARN: Removed duplicated region for block: B:202:0x14ea  */
    /* JADX WARN: Removed duplicated region for block: B:217:0x152b  */
    /* JADX WARN: Removed duplicated region for block: B:220:0x153e  */
    /* JADX WARN: Removed duplicated region for block: B:223:0x1576  */
    /* JADX WARN: Removed duplicated region for block: B:224:0x1544  */
    /* JADX WARN: Removed duplicated region for block: B:298:0x11fb  */
    /* JADX WARN: Removed duplicated region for block: B:301:0x1205  */
    /* JADX WARN: Removed duplicated region for block: B:305:0x121f A[Catch: Exception -> 0x1233, TryCatch #5 {Exception -> 0x1233, blocks: (B:303:0x1217, B:305:0x121f, B:306:0x1237, B:308:0x123c, B:310:0x125d, B:311:0x127e, B:314:0x1284, B:316:0x1288, B:319:0x1291, B:320:0x129f, B:321:0x12a8, B:425:0x12a1), top: B:302:0x1217 }] */
    /* JADX WARN: Removed duplicated region for block: B:308:0x123c A[Catch: Exception -> 0x1233, TryCatch #5 {Exception -> 0x1233, blocks: (B:303:0x1217, B:305:0x121f, B:306:0x1237, B:308:0x123c, B:310:0x125d, B:311:0x127e, B:314:0x1284, B:316:0x1288, B:319:0x1291, B:320:0x129f, B:321:0x12a8, B:425:0x12a1), top: B:302:0x1217 }] */
    /* JADX WARN: Removed duplicated region for block: B:325:0x12b6 A[Catch: Exception -> 0x12bd, TryCatch #1 {Exception -> 0x12bd, blocks: (B:323:0x12ae, B:325:0x12b6, B:326:0x12c1, B:328:0x12c6, B:330:0x12dd, B:332:0x12e9, B:334:0x12ed, B:337:0x12ef, B:339:0x12f9, B:341:0x1301, B:342:0x1306, B:344:0x130a, B:346:0x130e, B:350:0x1316, B:352:0x134c, B:356:0x135b, B:358:0x1363, B:360:0x137c, B:362:0x1382, B:363:0x138c, B:365:0x1398, B:367:0x139e, B:370:0x13ae, B:372:0x13d2, B:374:0x13e0, B:376:0x13eb, B:377:0x1409, B:379:0x1411, B:380:0x141b, B:382:0x1423, B:384:0x1441, B:390:0x144f, B:392:0x1455, B:398:0x145f, B:399:0x1469, B:401:0x1472, B:403:0x147a, B:407:0x149e, B:408:0x14af, B:410:0x14b5, B:412:0x1489, B:413:0x13e5, B:415:0x13b1, B:416:0x1353), top: B:322:0x12ae }] */
    /* JADX WARN: Removed duplicated region for block: B:328:0x12c6 A[Catch: Exception -> 0x12bd, TryCatch #1 {Exception -> 0x12bd, blocks: (B:323:0x12ae, B:325:0x12b6, B:326:0x12c1, B:328:0x12c6, B:330:0x12dd, B:332:0x12e9, B:334:0x12ed, B:337:0x12ef, B:339:0x12f9, B:341:0x1301, B:342:0x1306, B:344:0x130a, B:346:0x130e, B:350:0x1316, B:352:0x134c, B:356:0x135b, B:358:0x1363, B:360:0x137c, B:362:0x1382, B:363:0x138c, B:365:0x1398, B:367:0x139e, B:370:0x13ae, B:372:0x13d2, B:374:0x13e0, B:376:0x13eb, B:377:0x1409, B:379:0x1411, B:380:0x141b, B:382:0x1423, B:384:0x1441, B:390:0x144f, B:392:0x1455, B:398:0x145f, B:399:0x1469, B:401:0x1472, B:403:0x147a, B:407:0x149e, B:408:0x14af, B:410:0x14b5, B:412:0x1489, B:413:0x13e5, B:415:0x13b1, B:416:0x1353), top: B:322:0x12ae }] */
    /* JADX WARN: Removed duplicated region for block: B:358:0x1363 A[Catch: Exception -> 0x12bd, TryCatch #1 {Exception -> 0x12bd, blocks: (B:323:0x12ae, B:325:0x12b6, B:326:0x12c1, B:328:0x12c6, B:330:0x12dd, B:332:0x12e9, B:334:0x12ed, B:337:0x12ef, B:339:0x12f9, B:341:0x1301, B:342:0x1306, B:344:0x130a, B:346:0x130e, B:350:0x1316, B:352:0x134c, B:356:0x135b, B:358:0x1363, B:360:0x137c, B:362:0x1382, B:363:0x138c, B:365:0x1398, B:367:0x139e, B:370:0x13ae, B:372:0x13d2, B:374:0x13e0, B:376:0x13eb, B:377:0x1409, B:379:0x1411, B:380:0x141b, B:382:0x1423, B:384:0x1441, B:390:0x144f, B:392:0x1455, B:398:0x145f, B:399:0x1469, B:401:0x1472, B:403:0x147a, B:407:0x149e, B:408:0x14af, B:410:0x14b5, B:412:0x1489, B:413:0x13e5, B:415:0x13b1, B:416:0x1353), top: B:322:0x12ae }] */
    /* JADX WARN: Removed duplicated region for block: B:36:0x01f4  */
    /* JADX WARN: Removed duplicated region for block: B:379:0x1411 A[Catch: Exception -> 0x12bd, TryCatch #1 {Exception -> 0x12bd, blocks: (B:323:0x12ae, B:325:0x12b6, B:326:0x12c1, B:328:0x12c6, B:330:0x12dd, B:332:0x12e9, B:334:0x12ed, B:337:0x12ef, B:339:0x12f9, B:341:0x1301, B:342:0x1306, B:344:0x130a, B:346:0x130e, B:350:0x1316, B:352:0x134c, B:356:0x135b, B:358:0x1363, B:360:0x137c, B:362:0x1382, B:363:0x138c, B:365:0x1398, B:367:0x139e, B:370:0x13ae, B:372:0x13d2, B:374:0x13e0, B:376:0x13eb, B:377:0x1409, B:379:0x1411, B:380:0x141b, B:382:0x1423, B:384:0x1441, B:390:0x144f, B:392:0x1455, B:398:0x145f, B:399:0x1469, B:401:0x1472, B:403:0x147a, B:407:0x149e, B:408:0x14af, B:410:0x14b5, B:412:0x1489, B:413:0x13e5, B:415:0x13b1, B:416:0x1353), top: B:322:0x12ae }] */
    /* JADX WARN: Removed duplicated region for block: B:401:0x1472 A[Catch: Exception -> 0x12bd, TryCatch #1 {Exception -> 0x12bd, blocks: (B:323:0x12ae, B:325:0x12b6, B:326:0x12c1, B:328:0x12c6, B:330:0x12dd, B:332:0x12e9, B:334:0x12ed, B:337:0x12ef, B:339:0x12f9, B:341:0x1301, B:342:0x1306, B:344:0x130a, B:346:0x130e, B:350:0x1316, B:352:0x134c, B:356:0x135b, B:358:0x1363, B:360:0x137c, B:362:0x1382, B:363:0x138c, B:365:0x1398, B:367:0x139e, B:370:0x13ae, B:372:0x13d2, B:374:0x13e0, B:376:0x13eb, B:377:0x1409, B:379:0x1411, B:380:0x141b, B:382:0x1423, B:384:0x1441, B:390:0x144f, B:392:0x1455, B:398:0x145f, B:399:0x1469, B:401:0x1472, B:403:0x147a, B:407:0x149e, B:408:0x14af, B:410:0x14b5, B:412:0x1489, B:413:0x13e5, B:415:0x13b1, B:416:0x1353), top: B:322:0x12ae }] */
    /* JADX WARN: Removed duplicated region for block: B:410:0x14b5 A[Catch: Exception -> 0x12bd, TRY_LEAVE, TryCatch #1 {Exception -> 0x12bd, blocks: (B:323:0x12ae, B:325:0x12b6, B:326:0x12c1, B:328:0x12c6, B:330:0x12dd, B:332:0x12e9, B:334:0x12ed, B:337:0x12ef, B:339:0x12f9, B:341:0x1301, B:342:0x1306, B:344:0x130a, B:346:0x130e, B:350:0x1316, B:352:0x134c, B:356:0x135b, B:358:0x1363, B:360:0x137c, B:362:0x1382, B:363:0x138c, B:365:0x1398, B:367:0x139e, B:370:0x13ae, B:372:0x13d2, B:374:0x13e0, B:376:0x13eb, B:377:0x1409, B:379:0x1411, B:380:0x141b, B:382:0x1423, B:384:0x1441, B:390:0x144f, B:392:0x1455, B:398:0x145f, B:399:0x1469, B:401:0x1472, B:403:0x147a, B:407:0x149e, B:408:0x14af, B:410:0x14b5, B:412:0x1489, B:413:0x13e5, B:415:0x13b1, B:416:0x1353), top: B:322:0x12ae }] */
    /* JADX WARN: Removed duplicated region for block: B:415:0x13b1 A[Catch: Exception -> 0x12bd, TryCatch #1 {Exception -> 0x12bd, blocks: (B:323:0x12ae, B:325:0x12b6, B:326:0x12c1, B:328:0x12c6, B:330:0x12dd, B:332:0x12e9, B:334:0x12ed, B:337:0x12ef, B:339:0x12f9, B:341:0x1301, B:342:0x1306, B:344:0x130a, B:346:0x130e, B:350:0x1316, B:352:0x134c, B:356:0x135b, B:358:0x1363, B:360:0x137c, B:362:0x1382, B:363:0x138c, B:365:0x1398, B:367:0x139e, B:370:0x13ae, B:372:0x13d2, B:374:0x13e0, B:376:0x13eb, B:377:0x1409, B:379:0x1411, B:380:0x141b, B:382:0x1423, B:384:0x1441, B:390:0x144f, B:392:0x1455, B:398:0x145f, B:399:0x1469, B:401:0x1472, B:403:0x147a, B:407:0x149e, B:408:0x14af, B:410:0x14b5, B:412:0x1489, B:413:0x13e5, B:415:0x13b1, B:416:0x1353), top: B:322:0x12ae }] */
    /* JADX WARN: Removed duplicated region for block: B:418:0x14ad  */
    /* JADX WARN: Removed duplicated region for block: B:419:0x12c0  */
    /* JADX WARN: Removed duplicated region for block: B:426:0x1236  */
    /* JADX WARN: Removed duplicated region for block: B:430:0x1208  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0221  */
    /* JADX WARN: Removed duplicated region for block: B:462:0x0c87  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0255  */
    /* JADX WARN: Removed duplicated region for block: B:488:0x0d14  */
    /* JADX WARN: Removed duplicated region for block: B:491:0x0d26  */
    /* JADX WARN: Removed duplicated region for block: B:494:0x0d39  */
    /* JADX WARN: Removed duplicated region for block: B:497:0x0d53  */
    /* JADX WARN: Removed duplicated region for block: B:502:0x0d68  */
    /* JADX WARN: Removed duplicated region for block: B:507:0x0d63 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:508:0x0d3d  */
    /* JADX WARN: Removed duplicated region for block: B:509:0x0d29  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x0277  */
    /* JADX WARN: Removed duplicated region for block: B:510:0x0d17  */
    /* JADX WARN: Removed duplicated region for block: B:545:0x0e3b  */
    /* JADX WARN: Removed duplicated region for block: B:558:0x1078  */
    /* JADX WARN: Removed duplicated region for block: B:561:0x1084  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x02ab  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x02b9  */
    /* JADX WARN: Removed duplicated region for block: B:622:0x11cd  */
    /* JADX WARN: Removed duplicated region for block: B:673:0x0e44  */
    /* JADX WARN: Removed duplicated region for block: B:77:0x040b A[Catch: Exception -> 0x0436, TryCatch #3 {Exception -> 0x0436, blocks: (B:75:0x03e5, B:77:0x040b, B:79:0x0422, B:80:0x0439, B:81:0x0440, B:82:0x044a, B:84:0x044e, B:85:0x0457, B:87:0x045f, B:88:0x0468, B:90:0x046f, B:918:0x04a8, B:919:0x0443), top: B:74:0x03e5 }] */
    /* JADX WARN: Removed duplicated region for block: B:799:0x0a08  */
    /* JADX WARN: Removed duplicated region for block: B:802:0x0a11  */
    /* JADX WARN: Removed duplicated region for block: B:84:0x044e A[Catch: Exception -> 0x0436, TryCatch #3 {Exception -> 0x0436, blocks: (B:75:0x03e5, B:77:0x040b, B:79:0x0422, B:80:0x0439, B:81:0x0440, B:82:0x044a, B:84:0x044e, B:85:0x0457, B:87:0x045f, B:88:0x0468, B:90:0x046f, B:918:0x04a8, B:919:0x0443), top: B:74:0x03e5 }] */
    /* JADX WARN: Removed duplicated region for block: B:87:0x045f A[Catch: Exception -> 0x0436, TryCatch #3 {Exception -> 0x0436, blocks: (B:75:0x03e5, B:77:0x040b, B:79:0x0422, B:80:0x0439, B:81:0x0440, B:82:0x044a, B:84:0x044e, B:85:0x0457, B:87:0x045f, B:88:0x0468, B:90:0x046f, B:918:0x04a8, B:919:0x0443), top: B:74:0x03e5 }] */
    /* JADX WARN: Removed duplicated region for block: B:883:0x073d  */
    /* JADX WARN: Removed duplicated region for block: B:886:0x074d  */
    /* JADX WARN: Removed duplicated region for block: B:889:0x076f  */
    /* JADX WARN: Removed duplicated region for block: B:892:0x078a  */
    /* JADX WARN: Removed duplicated region for block: B:894:0x07df  */
    /* JADX WARN: Removed duplicated region for block: B:899:0x0805  */
    /* JADX WARN: Removed duplicated region for block: B:905:0x07d5  */
    /* JADX WARN: Removed duplicated region for block: B:906:0x0773  */
    /* JADX WARN: Removed duplicated region for block: B:907:0x0750  */
    /* JADX WARN: Removed duplicated region for block: B:90:0x046f A[Catch: Exception -> 0x0436, TryCatch #3 {Exception -> 0x0436, blocks: (B:75:0x03e5, B:77:0x040b, B:79:0x0422, B:80:0x0439, B:81:0x0440, B:82:0x044a, B:84:0x044e, B:85:0x0457, B:87:0x045f, B:88:0x0468, B:90:0x046f, B:918:0x04a8, B:919:0x0443), top: B:74:0x03e5 }] */
    /* JADX WARN: Removed duplicated region for block: B:917:0x0529  */
    /* JADX WARN: Removed duplicated region for block: B:918:0x04a8 A[Catch: Exception -> 0x0436, TRY_LEAVE, TryCatch #3 {Exception -> 0x0436, blocks: (B:75:0x03e5, B:77:0x040b, B:79:0x0422, B:80:0x0439, B:81:0x0440, B:82:0x044a, B:84:0x044e, B:85:0x0457, B:87:0x045f, B:88:0x0468, B:90:0x046f, B:918:0x04a8, B:919:0x0443), top: B:74:0x03e5 }] */
    /* JADX WARN: Removed duplicated region for block: B:919:0x0443 A[Catch: Exception -> 0x0436, TryCatch #3 {Exception -> 0x0436, blocks: (B:75:0x03e5, B:77:0x040b, B:79:0x0422, B:80:0x0439, B:81:0x0440, B:82:0x044a, B:84:0x044e, B:85:0x0457, B:87:0x045f, B:88:0x0468, B:90:0x046f, B:918:0x04a8, B:919:0x0443), top: B:74:0x03e5 }] */
    /* JADX WARN: Removed duplicated region for block: B:928:0x03dc  */
    /* JADX WARN: Removed duplicated region for block: B:929:0x02ae  */
    /* JADX WARN: Removed duplicated region for block: B:932:0x027a  */
    /* JADX WARN: Removed duplicated region for block: B:933:0x0258  */
    /* JADX WARN: Removed duplicated region for block: B:936:0x0247  */
    /* JADX WARN: Removed duplicated region for block: B:97:0x04c9  */
    /* JADX WARN: Type inference failed for: r0v0, types: [android.text.StaticLayout[]] */
    /* JADX WARN: Type inference failed for: r0v137, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r2v1 */
    /* JADX WARN: Type inference failed for: r2v100 */
    /* JADX WARN: Type inference failed for: r2v101 */
    /* JADX WARN: Type inference failed for: r2v102 */
    /* JADX WARN: Type inference failed for: r2v103 */
    /* JADX WARN: Type inference failed for: r2v104 */
    /* JADX WARN: Type inference failed for: r2v2, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r2v23, types: [org.telegram.tgnet.TLRPC$Photo] */
    /* JADX WARN: Type inference failed for: r2v28 */
    /* JADX WARN: Type inference failed for: r2v30, types: [int] */
    /* JADX WARN: Type inference failed for: r2v64 */
    /* JADX WARN: Type inference failed for: r2v95 */
    /* JADX WARN: Type inference failed for: r2v96 */
    /* JADX WARN: Type inference failed for: r2v97 */
    /* JADX WARN: Type inference failed for: r2v98 */
    /* JADX WARN: Type inference failed for: r2v99 */
    /* JADX WARN: Type inference failed for: r4v14 */
    /* JADX WARN: Type inference failed for: r4v15, types: [java.lang.String, org.telegram.tgnet.TLRPC$Chat, org.telegram.tgnet.TLRPC$User] */
    /* JADX WARN: Type inference failed for: r4v223 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void setMessageObjectInternal(MessageObject messageObject) {
        String str;
        SpannableStringBuilder replaceTags;
        String str2;
        String str3;
        String str4;
        SpannableStringBuilder spannableStringBuilder;
        String str5;
        String str6;
        String str7;
        String str8;
        ?? r4;
        ?? r2;
        String str9;
        boolean z;
        String userName;
        int i;
        int i2;
        SpannableStringBuilder spannableStringBuilder2;
        int i3;
        boolean z2;
        String str10;
        CharSequence charSequence;
        boolean z3;
        String str11;
        ChatMessageCellDelegate chatMessageCellDelegate;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        TLObject peerObject;
        int i4;
        int i5;
        TLRPC.MessageReplyHeader messageReplyHeader;
        MessageObject messageObject2;
        ChatMessageCellDelegate chatMessageCellDelegate2;
        StaticLayout staticLayout;
        int i6;
        boolean z4;
        TLRPC.PhotoSize photoSize;
        int i7;
        TLRPC.PhotoSize photoSize2;
        TLObject tLObject;
        int i8;
        CharSequence charSequence2;
        String str12;
        TextPaint textPaint;
        String str13;
        boolean z5;
        MessageObject messageObject3;
        ImageReceiver imageReceiver;
        int dp;
        boolean z6;
        CharSequence charSequence3;
        boolean z7;
        String str14;
        CharSequence removeDiacritics;
        TLRPC.Message message;
        TLRPC.Chat chat;
        TLRPC.Chat chat2;
        TLRPC.MessageReplyHeader messageReplyHeader2;
        UserConfig userConfig;
        TLRPC.User user;
        CharSequence replaceEmoji;
        ArrayList<TLRPC.MessageEntity> arrayList;
        TLRPC.MessageReplyHeader messageReplyHeader3;
        CharSequence charSequence4;
        float f;
        TextUtils.TruncateAt truncateAt;
        String str15;
        CharSequence charSequence5;
        TLRPC.MessageMedia messageMedia;
        TLRPC.MessageReplyHeader messageReplyHeader4;
        TLRPC.MessageMedia messageMedia2;
        ArrayList<TLRPC.PhotoSize> arrayList2;
        TLRPC.Document document;
        int i9;
        int i10;
        int i11;
        TLRPC.MessageReplyHeader messageReplyHeader5;
        boolean z8;
        String userName2;
        SpannableStringBuilder spannableStringBuilder3;
        int i12;
        ?? r22;
        boolean z9;
        MessagesController messagesController;
        long j;
        String str16;
        String ellipsize;
        float f2;
        int i13;
        int i14;
        CharSequence charSequence6;
        int i15;
        StaticLayout.Builder obtain;
        StaticLayout.Builder alignment;
        StaticLayout.Builder includePad;
        StaticLayout build;
        boolean z10;
        StaticLayout.Builder maxLines;
        int i16;
        int dp2;
        int dp3;
        MessageTopicButton messageTopicButton;
        ChatMessageCellDelegate chatMessageCellDelegate3;
        float f3;
        MessageObject.GroupedMessagePosition groupedMessagePosition2;
        MessagesController messagesController2;
        long j2;
        String str17;
        ChatMessageCellDelegate chatMessageCellDelegate4;
        SpannableStringBuilder spannableStringBuilder4;
        int i17;
        int i18;
        String str18;
        AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable;
        AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable2;
        String str19;
        StaticLayout staticLayout2;
        float f4;
        SpannableStringBuilder spannableStringBuilder5;
        TLRPC.Chat chat3;
        TLRPC.Message message2 = messageObject.messageOwner;
        if ((message2.flags & 1024) != 0 || message2.replies != null) {
            MessageObject messageObject4 = this.currentMessageObject;
            if (!messageObject4.scheduled && !messageObject4.isSponsored() && !this.currentMessageObject.viewsReloaded) {
                MessagesController.getInstance(this.currentAccount).addToViewsQueue(this.currentMessageObject);
                this.currentMessageObject.viewsReloaded = true;
            }
        }
        updateCurrentUserAndChat();
        setAvatar(messageObject);
        measureTime(messageObject);
        this.namesOffset = 0;
        TLRPC.Message message3 = messageObject.messageOwner;
        if (message3.via_bot_id != 0) {
            TLRPC.User user2 = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(messageObject.messageOwner.via_bot_id));
            if (user2 != null && !TextUtils.isEmpty(user2.username)) {
                str = "@" + user2.username;
                replaceTags = AndroidUtilities.replaceTags(String.format(" %s <b>%s</b>", LocaleController.getString("ViaBot", R.string.ViaBot), str));
                this.viaWidth = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(replaceTags, 0, replaceTags.length()));
                this.currentViaBotUser = user2;
            }
            str = null;
            replaceTags = null;
        } else {
            if (!TextUtils.isEmpty(message3.via_bot_name)) {
                str = "@" + messageObject.messageOwner.via_bot_name;
                replaceTags = AndroidUtilities.replaceTags(String.format(" %s <b>%s</b>", LocaleController.getString("ViaBot", R.string.ViaBot), str));
                this.viaWidth = (int) Math.ceil(Theme.chat_replyNamePaint.measureText(replaceTags, 0, replaceTags.length()));
            }
            str = null;
            replaceTags = null;
        }
        boolean isNeedAuthorName = isNeedAuthorName();
        boolean z11 = (messageObject.messageOwner.fwd_from == null || messageObject.type == 14) && str != null;
        String str20 = "";
        str2 = "5_5_b";
        if (this.hasPsaHint || !(isNeedAuthorName || z11)) {
            str3 = "";
            str4 = "ViaBot";
            spannableStringBuilder = replaceTags;
            str5 = "%s (%s)";
            str6 = "Loading";
            str7 = "A ";
            str8 = "\n";
            r4 = 0;
            this.currentNameString = null;
            this.nameLayout = null;
            r2 = 0;
            this.nameWidth = 0;
            this.nameOffsetX = 0.0f;
        } else {
            this.drawNameLayout = true;
            int maxNameWidth = getMaxNameWidth();
            this.nameWidth = maxNameWidth;
            if (maxNameWidth < 0) {
                this.nameWidth = AndroidUtilities.dp(100.0f);
            }
            if (!this.isMegagroup || (chat3 = this.currentChat) == null || messageObject.messageOwner.post_author == null) {
                str6 = "Loading";
                str17 = "A ";
            } else {
                long j3 = chat3.id;
                str6 = "Loading";
                str17 = "A ";
                if (j3 == (-this.currentMessageObject.getFromChatId())) {
                    str20 = "";
                    spannableStringBuilder4 = new SpannableStringBuilder(messageObject.messageOwner.post_author.replace("\n", str20));
                    i17 = this.currentMessageObject.messageOwner.from_boosts_applied;
                    if (i17 > 0) {
                        if (spannableStringBuilder4 == null) {
                            spannableStringBuilder4 = new SpannableStringBuilder();
                        }
                        Pair create = BoostCounterSpan.create(this, Theme.chat_namePaint, i17);
                        BoostCounterSpan boostCounterSpan = (BoostCounterSpan) create.second;
                        this.boostCounterSpan = boostCounterSpan;
                        boostCounterSpan.isRtl = AndroidUtilities.isRTL(spannableStringBuilder4);
                        boolean z12 = this.boostCounterSpan.isRtl;
                        CharSequence charSequence7 = (CharSequence) create.first;
                        if (z12) {
                            spannableStringBuilder4.insert(0, charSequence7);
                        } else {
                            spannableStringBuilder4.append(charSequence7);
                        }
                    }
                    if (spannableStringBuilder4 == null) {
                        i18 = (int) new StaticLayout(spannableStringBuilder4, Theme.chat_adminPaint, AndroidUtilities.dp(300.0f), Layout.Alignment.ALIGN_NORMAL, 0.0f, 0.0f, false).getLineWidth(0);
                        this.nameWidth -= i18;
                    } else {
                        i18 = 0;
                    }
                    this.currentNameStatus = null;
                    this.nameStatusSlug = null;
                    this.currentNameBotVerificationId = 0L;
                    str18 = messageObject.customName;
                    if (str18 == null) {
                        this.currentNameString = str18;
                    } else if (isNeedAuthorName) {
                        this.currentNameString = getAuthorName();
                        this.currentNameStatus = getAuthorStatus();
                        this.currentNameBotVerificationId = getAuthorBotVerificationId();
                    } else {
                        this.currentNameString = str20;
                    }
                    int dp4 = AndroidUtilities.dp(!this.currentMessageObject.isSponsored() ? -24.0f : 0.0f);
                    str3 = str20;
                    CharSequence removeDiacritics2 = AndroidUtilities.removeDiacritics(this.currentNameString.replace('\n', ' ').replace((char) 8207, ' '));
                    removeDiacritics2 = Emoji.replaceEmoji(removeDiacritics2, Theme.chat_namePaint.getFontMetricsInt(), false);
                    TextPaint textPaint2 = Theme.chat_namePaint;
                    str7 = str17;
                    float f5 = (this.nameWidth + dp4) - (!z11 ? this.viaWidth : 0);
                    TextUtils.TruncateAt truncateAt2 = TextUtils.TruncateAt.END;
                    CharSequence ellipsize2 = TextUtils.ellipsize(removeDiacritics2, textPaint2, f5, truncateAt2);
                    if (z11) {
                        str4 = "ViaBot";
                        spannableStringBuilder = replaceTags;
                        str5 = "%s (%s)";
                        str8 = "\n";
                    } else {
                        int ceil = (int) Math.ceil(Theme.chat_namePaint.measureText(ellipsize2, 0, ellipsize2.length()));
                        this.viaNameWidth = ceil;
                        if (ceil != 0) {
                            this.viaNameWidth = ceil + AndroidUtilities.dp(4.0f);
                        }
                        int themedColor = getThemedColor(this.currentMessageObject.shouldDrawWithoutBackground() ? Theme.key_chat_stickerViaBotNameText : this.currentMessageObject.isOutOwner() ? Theme.key_chat_outViaBotNameText : Theme.key_chat_inViaBotNameText);
                        String string = LocaleController.getString(R.string.ViaBot);
                        if (this.currentNameString.length() > 0) {
                            SpannableStringBuilder spannableStringBuilder6 = new SpannableStringBuilder();
                            str8 = "\n";
                            spannableStringBuilder6.append(ellipsize2).append((CharSequence) " ").append((CharSequence) string).append((CharSequence) " ").append((CharSequence) str);
                            str4 = "ViaBot";
                            spannableStringBuilder = replaceTags;
                            TypefaceSpan typefaceSpan = new TypefaceSpan(Typeface.DEFAULT, 0, themedColor);
                            this.viaSpan1 = typefaceSpan;
                            str5 = "%s (%s)";
                            spannableStringBuilder6.setSpan(typefaceSpan, ellipsize2.length() + 1, ellipsize2.length() + 1 + string.length(), 33);
                            if (this.currentNameStatus != null) {
                                this.viaNameWidth += AndroidUtilities.dp(28.0f);
                                spannableStringBuilder6.setSpan(new DialogCell.FixedWidthSpan(AndroidUtilities.dp(28.0f)), ellipsize2.length(), ellipsize2.length() + 1, 33);
                            }
                            TypefaceSpan typefaceSpan2 = new TypefaceSpan(AndroidUtilities.bold(), 0, themedColor);
                            this.viaSpan2 = typefaceSpan2;
                            spannableStringBuilder6.setSpan(typefaceSpan2, ellipsize2.length() + 2 + string.length(), spannableStringBuilder6.length(), 33);
                            spannableStringBuilder5 = spannableStringBuilder6;
                        } else {
                            str4 = "ViaBot";
                            spannableStringBuilder = replaceTags;
                            str5 = "%s (%s)";
                            str8 = "\n";
                            this.viaOnly = true;
                            SpannableStringBuilder spannableStringBuilder7 = new SpannableStringBuilder();
                            spannableStringBuilder7.append((CharSequence) string).append((CharSequence) " ").append((CharSequence) str);
                            TypefaceSpan typefaceSpan3 = new TypefaceSpan(Typeface.DEFAULT, 0, themedColor);
                            this.viaSpan1 = typefaceSpan3;
                            spannableStringBuilder7.setSpan(typefaceSpan3, 0, string.length() + 1, 33);
                            TypefaceSpan typefaceSpan4 = new TypefaceSpan(AndroidUtilities.bold(), 0, themedColor);
                            this.viaSpan2 = typefaceSpan4;
                            spannableStringBuilder7.setSpan(typefaceSpan4, string.length() + 1, spannableStringBuilder7.length(), 33);
                            spannableStringBuilder5 = spannableStringBuilder7;
                        }
                        ellipsize2 = TextUtils.ellipsize(spannableStringBuilder5, Theme.chat_namePaint, this.nameWidth + dp4, truncateAt2);
                    }
                    CharSequence charSequence8 = ellipsize2;
                    TextPaint textPaint3 = Theme.chat_namePaint;
                    int dp5 = this.nameWidth + dp4 + AndroidUtilities.dp(2.0f);
                    Layout.Alignment alignment2 = Layout.Alignment.ALIGN_NORMAL;
                    staticLayout2 = new StaticLayout(charSequence8, textPaint3, dp5, alignment2, 1.0f, 0.0f, false);
                    this.nameLayout = staticLayout2;
                    if (staticLayout2.getLineCount() <= 0) {
                        int ceil2 = (int) Math.ceil(this.nameLayout.getLineWidth(0));
                        this.nameLayoutWidth = ceil2;
                        this.nameWidth = ceil2;
                        if (!messageObject.isAnyKindOfSticker()) {
                            this.namesOffset = (int) (this.namesOffset + AndroidUtilities.dp(5.0f) + Theme.chat_namePaint.getTextSize());
                        }
                        f4 = this.nameLayout.getLineLeft(0);
                    } else {
                        this.nameLayoutWidth = 0;
                        this.nameWidth = 0;
                        f4 = 0.0f;
                    }
                    this.nameOffsetX = f4;
                    if (this.currentNameStatus != null) {
                        this.nameWidth += AndroidUtilities.dp(20.0f);
                    }
                    if (this.currentNameBotVerificationId != 0) {
                        this.nameWidth += AndroidUtilities.dp(20.0f);
                    }
                    this.nameWidth -= dp4;
                    if (spannableStringBuilder4 == null) {
                        StaticLayout staticLayout3 = new StaticLayout(spannableStringBuilder4, Theme.chat_adminPaint, i18 + AndroidUtilities.dp(2.0f), alignment2, 1.0f, 0.0f, false);
                        this.adminLayout = staticLayout3;
                        this.nameWidth = (int) (this.nameWidth + staticLayout3.getLineWidth(0) + AndroidUtilities.dp(8.0f));
                        this.boostCounterBounds = new RectF();
                    } else {
                        this.adminLayout = null;
                        this.boostCounterBounds = null;
                    }
                    if (this.currentNameStatusDrawable == null && this.currentNameStatus != null) {
                        AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable3 = new AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable((View) this, true, AndroidUtilities.dp(20.0f));
                        this.currentNameStatusDrawable = swapAnimatedEmojiDrawable3;
                        if (this.attachedToWindow) {
                            swapAnimatedEmojiDrawable3.attach();
                        }
                    }
                    swapAnimatedEmojiDrawable = this.currentNameStatusDrawable;
                    if (swapAnimatedEmojiDrawable != null) {
                        Object obj = this.currentNameStatus;
                        if (obj == null) {
                            swapAnimatedEmojiDrawable.set((Drawable) null, false);
                        } else if (obj instanceof Long) {
                            swapAnimatedEmojiDrawable.set(((Long) obj).longValue(), false);
                        } else if (obj instanceof Drawable) {
                            swapAnimatedEmojiDrawable.set((Drawable) obj, false);
                        }
                    }
                    if (this.currentNameEmojiStatusDrawable == null && this.currentNameBotVerificationId != 0) {
                        AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable4 = new AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable((View) this, true, AndroidUtilities.dp(18.0f));
                        this.currentNameEmojiStatusDrawable = swapAnimatedEmojiDrawable4;
                        if (this.attachedToWindow) {
                            swapAnimatedEmojiDrawable4.attach();
                        }
                    }
                    swapAnimatedEmojiDrawable2 = this.currentNameEmojiStatusDrawable;
                    if (swapAnimatedEmojiDrawable2 == null) {
                        long j4 = this.currentNameBotVerificationId;
                        if (j4 == 0) {
                            str19 = null;
                            swapAnimatedEmojiDrawable2.set((Drawable) null, false);
                        } else {
                            str19 = null;
                            swapAnimatedEmojiDrawable2.set(j4, false);
                        }
                    } else {
                        str19 = null;
                    }
                    if (this.currentNameString.length() == 0) {
                        this.currentNameString = str19;
                    }
                    r2 = 0;
                    r4 = str19;
                } else {
                    str20 = "";
                }
            }
            if (this.isMegagroup && this.currentChat != null && this.currentMessageObject.isForwardedChannelPost()) {
                spannableStringBuilder4 = new SpannableStringBuilder(LocaleController.getString(R.string.DiscussChannel));
            } else {
                if ((this.currentUser != null || this.currentChat != null) && !this.currentMessageObject.isOutOwner() && !this.currentMessageObject.isAnyKindOfSticker() && this.currentMessageObject.type != 5 && (chatMessageCellDelegate4 = this.delegate) != null) {
                    TLRPC.User user3 = this.currentUser;
                    String adminRank = chatMessageCellDelegate4.getAdminRank(user3 != null ? user3.id : this.currentChat.id);
                    if (adminRank != null) {
                        if (adminRank.length() == 0) {
                            adminRank = LocaleController.getString(R.string.ChatAdmin);
                        }
                        spannableStringBuilder4 = new SpannableStringBuilder(adminRank);
                    }
                }
                spannableStringBuilder4 = null;
            }
            i17 = this.currentMessageObject.messageOwner.from_boosts_applied;
            if (i17 > 0) {
            }
            if (spannableStringBuilder4 == null) {
            }
            this.currentNameStatus = null;
            this.nameStatusSlug = null;
            this.currentNameBotVerificationId = 0L;
            str18 = messageObject.customName;
            if (str18 == null) {
            }
            int dp42 = AndroidUtilities.dp(!this.currentMessageObject.isSponsored() ? -24.0f : 0.0f);
            str3 = str20;
            CharSequence removeDiacritics22 = AndroidUtilities.removeDiacritics(this.currentNameString.replace('\n', ' ').replace((char) 8207, ' '));
            removeDiacritics22 = Emoji.replaceEmoji(removeDiacritics22, Theme.chat_namePaint.getFontMetricsInt(), false);
            TextPaint textPaint22 = Theme.chat_namePaint;
            str7 = str17;
            float f52 = (this.nameWidth + dp42) - (!z11 ? this.viaWidth : 0);
            TextUtils.TruncateAt truncateAt22 = TextUtils.TruncateAt.END;
            CharSequence ellipsize22 = TextUtils.ellipsize(removeDiacritics22, textPaint22, f52, truncateAt22);
            if (z11) {
            }
            CharSequence charSequence82 = ellipsize22;
            TextPaint textPaint32 = Theme.chat_namePaint;
            int dp52 = this.nameWidth + dp42 + AndroidUtilities.dp(2.0f);
            Layout.Alignment alignment22 = Layout.Alignment.ALIGN_NORMAL;
            staticLayout2 = new StaticLayout(charSequence82, textPaint32, dp52, alignment22, 1.0f, 0.0f, false);
            this.nameLayout = staticLayout2;
            if (staticLayout2.getLineCount() <= 0) {
            }
            this.nameOffsetX = f4;
            if (this.currentNameStatus != null) {
            }
            if (this.currentNameBotVerificationId != 0) {
            }
            this.nameWidth -= dp42;
            if (spannableStringBuilder4 == null) {
            }
            if (this.currentNameStatusDrawable == null) {
                AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable32 = new AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable((View) this, true, AndroidUtilities.dp(20.0f));
                this.currentNameStatusDrawable = swapAnimatedEmojiDrawable32;
                if (this.attachedToWindow) {
                }
            }
            swapAnimatedEmojiDrawable = this.currentNameStatusDrawable;
            if (swapAnimatedEmojiDrawable != null) {
            }
            if (this.currentNameEmojiStatusDrawable == null) {
                AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable42 = new AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable((View) this, true, AndroidUtilities.dp(18.0f));
                this.currentNameEmojiStatusDrawable = swapAnimatedEmojiDrawable42;
                if (this.attachedToWindow) {
                }
            }
            swapAnimatedEmojiDrawable2 = this.currentNameEmojiStatusDrawable;
            if (swapAnimatedEmojiDrawable2 == null) {
            }
            if (this.currentNameString.length() == 0) {
            }
            r2 = 0;
            r4 = str19;
        }
        this.currentForwardUser = r4;
        this.currentForwardNameString = r4;
        this.currentForwardChannel = r4;
        this.currentForwardName = r4;
        ?? r0 = this.forwardedNameLayout;
        r0[r2] = r4;
        r0[1] = r4;
        this.replyPanelIsForward = r2;
        this.forwardedNameWidth = r2;
        if (messageObject.isForwarded()) {
            TLRPC.Peer peer = messageObject.messageOwner.fwd_from.from_id;
            if (peer instanceof TLRPC.TL_peerChannel) {
                messagesController2 = MessagesController.getInstance(this.currentAccount);
                j2 = messageObject.messageOwner.fwd_from.from_id.channel_id;
            } else if (peer instanceof TLRPC.TL_peerChat) {
                messagesController2 = MessagesController.getInstance(this.currentAccount);
                j2 = messageObject.messageOwner.fwd_from.from_id.chat_id;
            } else if (peer instanceof TLRPC.TL_peerUser) {
                this.currentForwardUser = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.user_id));
            }
            this.currentForwardChannel = messagesController2.getChat(Long.valueOf(j2));
        }
        if (messageObject.type == 23 || (this.drawForwardedName && messageObject.needDrawForwarded() && ((groupedMessagePosition2 = this.currentPosition) == null || groupedMessagePosition2.minY == 0))) {
            int i19 = messageObject.type;
            if (i19 != 23 && (str11 = messageObject.messageOwner.fwd_from.from_name) != null) {
                this.currentForwardName = str11;
            }
            if (i19 == 23 || this.currentForwardUser != null || this.currentForwardChannel != null || this.currentForwardName != null) {
                if (this.forwardAvatar == null) {
                    AvatarSpan avatarSpan = new AvatarSpan(this, this.currentAccount);
                    this.forwardAvatar = avatarSpan;
                    avatarSpan.translate(0.0f, AndroidUtilities.dp(-0.33f));
                }
                this.forwardAvatar.setSize((((int) Theme.chat_forwardNamePaint.getTextSize()) * 1.23f) / AndroidUtilities.density);
                if (messageObject.type == 23) {
                    str10 = LocaleController.getString(R.string.ForwardedStory);
                    this.currentForwardNameString = str10;
                    long peerDialogId = DialogObject.getPeerDialogId(messageObject.messageOwner.media.peer);
                    if (peerDialogId > 0) {
                        AvatarSpan avatarSpan2 = this.forwardAvatar;
                        TLRPC.User user4 = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(peerDialogId));
                        this.currentForwardUser = user4;
                        avatarSpan2.setUser(user4);
                    } else {
                        AvatarSpan avatarSpan3 = this.forwardAvatar;
                        TLRPC.Chat chat4 = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-peerDialogId));
                        this.currentForwardChannel = chat4;
                        avatarSpan3.setChat(chat4);
                    }
                    String removeDiacritics3 = AndroidUtilities.removeDiacritics(getNameFromDialogId(peerDialogId));
                    if (peerDialogId >= 0 || this.currentForwardChannel != null) {
                        z3 = true;
                    } else {
                        removeDiacritics3 = LocaleController.getString("ChannelPrivate", R.string.ChannelPrivate);
                        z3 = false;
                    }
                    StringBuilder sb = new StringBuilder();
                    sb.append(z3 ? str7 : str3);
                    sb.append(removeDiacritics3);
                    SpannableStringBuilder spannableStringBuilder8 = new SpannableStringBuilder(sb.toString());
                    spannableStringBuilder8.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, spannableStringBuilder8.length(), 33);
                    if (z3) {
                        spannableStringBuilder8.setSpan(this.forwardAvatar, 0, 1, 33);
                    }
                    this.forwardedNameWidth = getMaxNameWidth();
                    str9 = str5;
                    z2 = false;
                    charSequence = spannableStringBuilder8;
                } else {
                    TLRPC.Chat chat5 = this.currentForwardChannel;
                    if (chat5 != null) {
                        TLRPC.User user5 = this.currentForwardUser;
                        if (user5 != null) {
                            Object[] objArr = {chat5.title, UserObject.getUserName(user5)};
                            str9 = str5;
                            userName = String.format(str9, objArr);
                        } else {
                            str9 = str5;
                            if (TextUtils.isEmpty(messageObject.messageOwner.fwd_from.post_author)) {
                                TLRPC.Chat chat6 = this.currentForwardChannel;
                                this.currentForwardNameString = chat6.title;
                                this.forwardAvatar.setChat(chat6);
                            } else {
                                this.currentForwardNameString = String.format(str9, this.currentForwardChannel.title, messageObject.messageOwner.fwd_from.post_author);
                                this.forwardAvatar.setChat(this.currentForwardChannel);
                            }
                            z = true;
                            this.forwardedNameWidth = getMaxNameWidth();
                            String forwardedMessageText = getForwardedMessageText(messageObject);
                            if (this.hasPsaHint) {
                                this.forwardedNameWidth -= AndroidUtilities.dp(36.0f);
                            }
                            StringBuilder sb2 = new StringBuilder();
                            sb2.append(z ? str7 : str3);
                            sb2.append(this.currentForwardNameString.replace('\n', ' '));
                            String removeDiacritics4 = AndroidUtilities.removeDiacritics(TextUtils.ellipsize(sb2.toString(), Theme.chat_replyNamePaint, (this.forwardedNameWidth - this.viaWidth) - AndroidUtilities.dp(z ? 17.33f : 0.0f), TextUtils.TruncateAt.END).toString());
                            if (spannableStringBuilder != null) {
                                spannableStringBuilder2 = new SpannableStringBuilder(String.format("%s %s %s", removeDiacritics4, LocaleController.getString(str4, R.string.ViaBot), str));
                                this.viaNameWidth = (int) Math.ceil(Theme.chat_forwardNamePaint.measureText(removeDiacritics4));
                                TypefaceSpan typefaceSpan5 = new TypefaceSpan(AndroidUtilities.bold());
                                int length = spannableStringBuilder2.length() - str.length();
                                i = 1;
                                i2 = 33;
                                spannableStringBuilder2.setSpan(typefaceSpan5, length - 1, spannableStringBuilder2.length(), 33);
                            } else {
                                i = 1;
                                i2 = 33;
                                spannableStringBuilder2 = new SpannableStringBuilder(removeDiacritics4);
                            }
                            if (z || spannableStringBuilder2.length() <= i) {
                                i3 = 0;
                            } else {
                                i3 = 0;
                                spannableStringBuilder2.setSpan(this.forwardAvatar, 0, i, i2);
                            }
                            this.forwardNameCenterX = ((int) Math.ceil(Theme.chat_forwardNamePaint.measureText(r8, i3, r8.length()))) / 2;
                            if (this.currentForwardName == null && messageObject.messageOwner.fwd_from.from_id == null) {
                                z2 = false;
                            } else {
                                z2 = false;
                                spannableStringBuilder2.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, spannableStringBuilder2.length(), 33);
                            }
                            str10 = forwardedMessageText;
                            charSequence = spannableStringBuilder2;
                        }
                    } else {
                        str9 = str5;
                        TLRPC.User user6 = this.currentForwardUser;
                        if (user6 != null) {
                            userName = UserObject.getUserName(user6);
                        } else {
                            this.currentForwardNameString = this.currentForwardName;
                            z = false;
                            this.forwardedNameWidth = getMaxNameWidth();
                            String forwardedMessageText2 = getForwardedMessageText(messageObject);
                            if (this.hasPsaHint) {
                            }
                            StringBuilder sb22 = new StringBuilder();
                            sb22.append(z ? str7 : str3);
                            sb22.append(this.currentForwardNameString.replace('\n', ' '));
                            String removeDiacritics42 = AndroidUtilities.removeDiacritics(TextUtils.ellipsize(sb22.toString(), Theme.chat_replyNamePaint, (this.forwardedNameWidth - this.viaWidth) - AndroidUtilities.dp(z ? 17.33f : 0.0f), TextUtils.TruncateAt.END).toString());
                            if (spannableStringBuilder != null) {
                            }
                            if (z) {
                            }
                            i3 = 0;
                            this.forwardNameCenterX = ((int) Math.ceil(Theme.chat_forwardNamePaint.measureText(r8, i3, r8.length()))) / 2;
                            if (this.currentForwardName == null) {
                            }
                            z2 = false;
                            spannableStringBuilder2.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, spannableStringBuilder2.length(), 33);
                            str10 = forwardedMessageText2;
                            charSequence = spannableStringBuilder2;
                        }
                    }
                    this.currentForwardNameString = userName;
                    this.forwardAvatar.setUser(this.currentForwardUser);
                    z = true;
                    this.forwardedNameWidth = getMaxNameWidth();
                    String forwardedMessageText22 = getForwardedMessageText(messageObject);
                    if (this.hasPsaHint) {
                    }
                    StringBuilder sb222 = new StringBuilder();
                    sb222.append(z ? str7 : str3);
                    sb222.append(this.currentForwardNameString.replace('\n', ' '));
                    String removeDiacritics422 = AndroidUtilities.removeDiacritics(TextUtils.ellipsize(sb222.toString(), Theme.chat_replyNamePaint, (this.forwardedNameWidth - this.viaWidth) - AndroidUtilities.dp(z ? 17.33f : 0.0f), TextUtils.TruncateAt.END).toString());
                    if (spannableStringBuilder != null) {
                    }
                    if (z) {
                    }
                    i3 = 0;
                    this.forwardNameCenterX = ((int) Math.ceil(Theme.chat_forwardNamePaint.measureText(r8, i3, r8.length()))) / 2;
                    if (this.currentForwardName == null) {
                    }
                    z2 = false;
                    spannableStringBuilder2.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, spannableStringBuilder2.length(), 33);
                    str10 = forwardedMessageText22;
                    charSequence = spannableStringBuilder2;
                }
                try {
                    charSequence = Emoji.replaceEmoji(charSequence, Theme.chat_forwardNamePaint.getFontMetricsInt(), z2);
                } catch (Exception unused) {
                }
                TextPaint textPaint4 = Theme.chat_forwardNamePaint;
                float f6 = this.forwardedNameWidth;
                TextUtils.TruncateAt truncateAt3 = TextUtils.TruncateAt.END;
                CharSequence ellipsize3 = TextUtils.ellipsize(charSequence, textPaint4, f6, truncateAt3);
                try {
                    StaticLayout[] staticLayoutArr = this.forwardedNameLayout;
                    TextPaint textPaint5 = Theme.chat_forwardNamePaint;
                    int dp6 = this.forwardedNameWidth + AndroidUtilities.dp(2.0f);
                    Layout.Alignment alignment3 = Layout.Alignment.ALIGN_NORMAL;
                    staticLayoutArr[1] = new StaticLayout(ellipsize3, textPaint5, dp6, alignment3, 1.0f, 0.0f, false);
                    this.forwardedNameLayout[0] = new StaticLayout(TextUtils.ellipsize(AndroidUtilities.replaceTags(str10), Theme.chat_forwardNamePaint, this.forwardedNameWidth, truncateAt3), Theme.chat_forwardNamePaint, this.forwardedNameWidth + AndroidUtilities.dp(2.0f), alignment3, 1.0f, 0.0f, false);
                    if (this.forwardBg == null) {
                        this.forwardBg = new ForwardBackground(this);
                    }
                    this.forwardBg.set(this.forwardedNameLayout, !this.currentMessageObject.isOutOwner() && (!this.drawNameLayout || this.nameLayout == null) && this.pinnedTop);
                    int max = Math.max((int) Math.ceil(this.forwardedNameLayout[0].getLineWidth(0)), (int) Math.ceil(this.forwardedNameLayout[1].getLineWidth(0)));
                    this.forwardedNameWidth = max;
                    if (this.hasPsaHint) {
                        this.forwardedNameWidth = max + AndroidUtilities.dp(36.0f);
                    }
                    this.forwardNameOffsetX[0] = this.forwardedNameLayout[0].getLineLeft(0);
                    this.forwardNameOffsetX[1] = this.forwardedNameLayout[1].getLineLeft(0);
                    if ((messageObject.type != 5 && !messageObject.isAnyKindOfSticker()) || messageObject.type == 19) {
                        int dp7 = (int) (this.namesOffset + AndroidUtilities.dp(8.0f) + (Theme.chat_forwardNamePaint.getTextSize() * 2.0f));
                        this.namesOffset = dp7;
                        if (messageObject.type == 19) {
                            this.namesOffset = dp7 + AndroidUtilities.dp(8.0f);
                        }
                    }
                } catch (Exception e) {
                    FileLog.e(e);
                }
                this.drawTopic = false;
                float f7 = 10.0f;
                if (!this.isThreadChat || (chatMessageCellDelegate3 = this.delegate) == null || !chatMessageCellDelegate3.shouldShowTopicButton(this) || this.pinnedTop || (MessageObject.getTopicId(this.currentAccount, messageObject.messageOwner, true) == 0 && messageObject.replyToForumTopic == null)) {
                    chatMessageCellDelegate = this.delegate;
                    if (chatMessageCellDelegate != null && chatMessageCellDelegate.shouldShowDialogButton(this) && !this.pinnedTop && messageObject.searchType == 1 && (((groupedMessagePosition = this.currentPosition) == null || groupedMessagePosition.minY == 0) && (peerObject = messageObject.getPeerObject()) != null)) {
                        this.drawTopic = true;
                        int maxNameWidth2 = getMaxNameWidth();
                        if (!messageObject.shouldDrawWithoutBackground()) {
                            maxNameWidth2 -= AndroidUtilities.dp(10.0f);
                        }
                        if (this.topicButton == null) {
                            this.topicButton = new MessageTopicButton(getContext(), this.resourcesProvider) { // from class: org.telegram.ui.Cells.ChatMessageCell.10
                                @Override // org.telegram.ui.Components.Forum.MessageTopicButton
                                protected void onClick() {
                                    if (ChatMessageCell.this.delegate != null) {
                                        ChatMessageCell.this.delegate.didPressDialogButton(ChatMessageCell.this);
                                    }
                                }
                            };
                        }
                        i4 = this.namesOffset;
                        i5 = this.topicButton.set(this, messageObject, peerObject, maxNameWidth2);
                        this.namesOffset = i4 + i5;
                    }
                } else {
                    MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
                    if (groupedMessagePosition3 == null || groupedMessagePosition3.minY == 0) {
                        long topicId = messageObject.replyToForumTopic == null ? MessageObject.getTopicId(this.currentAccount, messageObject.messageOwner, true) : r0.id;
                        TLRPC.TL_forumTopic tL_forumTopic = messageObject.replyToForumTopic;
                        if (tL_forumTopic == null) {
                            tL_forumTopic = MessagesController.getInstance(this.currentAccount).getTopicsController().findTopic(-messageObject.getDialogId(), topicId);
                        }
                        if (tL_forumTopic != null) {
                            this.drawTopic = true;
                            int maxNameWidth3 = getMaxNameWidth();
                            if (messageObject.shouldDrawWithoutBackground()) {
                                if (messageObject.type != 5) {
                                    f3 = messageObject.isAnyKindOfSticker() ? 25.0f : 48.0f;
                                }
                                maxNameWidth3 += AndroidUtilities.dp(f3);
                            } else {
                                maxNameWidth3 -= AndroidUtilities.dp(10.0f);
                            }
                            if (this.topicButton == null) {
                                this.topicButton = new MessageTopicButton(getContext(), this.resourcesProvider) { // from class: org.telegram.ui.Cells.ChatMessageCell.9
                                    @Override // org.telegram.ui.Components.Forum.MessageTopicButton
                                    protected void onClick() {
                                        if (ChatMessageCell.this.delegate != null) {
                                            ChatMessageCell.this.delegate.didPressTopicButton(ChatMessageCell.this);
                                        }
                                    }
                                };
                            }
                            i4 = this.namesOffset;
                            i5 = this.topicButton.set(this, messageObject, tL_forumTopic, maxNameWidth3);
                            this.namesOffset = i4 + i5;
                        }
                    }
                }
                if (!this.drawTopic && (messageTopicButton = this.topicButton) != null) {
                    messageTopicButton.onDetached(this);
                    this.topicButton = null;
                }
                if ((!(messageObject.isGiveawayResults() && ((!this.isThreadChat || messageObject.isQuickReply() || this.isSavedChat || messageObject.getReplyTopMsgId(this.isForum) != 0 || this.isForumGeneral) && messageObject.hasValidReplyMessageObject())) && ((messageObject.messageOwner.fwd_from == null || !messageObject.isDice()) && ((messageReplyHeader = messageObject.messageOwner.reply_to) == null || (messageReplyHeader.story_id == 0 && TextUtils.isEmpty(messageReplyHeader.quote_text) && messageObject.messageOwner.reply_to.reply_from == null)))) || messageObject.isRepostPreview) {
                    String str21 = str6;
                    if ((this.isThreadChat || messageObject.isQuickReply()) && messageObject.getReplyMsgId() != 0 && !messageObject.isGiveawayResults() && !messageObject.isRepostPreview) {
                        messageObject2 = messageObject.replyMessageObject;
                        if (messageObject2 != null) {
                            TLRPC.Message message4 = messageObject2.messageOwner;
                            if (!(message4 instanceof TLRPC.TL_messageEmpty)) {
                                if (message4 != null) {
                                }
                            }
                        }
                        chatMessageCellDelegate2 = this.delegate;
                        if (chatMessageCellDelegate2 != null || chatMessageCellDelegate2.doNotShowLoadingReply(messageObject)) {
                            if (!messageObject.isAnyKindOfSticker() && messageObject.type != 5) {
                                int dp8 = (int) (this.namesOffset + AndroidUtilities.dp(18.0f) + Theme.chat_replyTextPaint.getTextSize() + Theme.chat_replyNamePaint.getTextSize());
                                this.namesOffset = dp8;
                                if (messageObject.type != 0) {
                                    this.namesOffset = dp8 + AndroidUtilities.dp(5.0f);
                                }
                            }
                            this.needReplyImage = false;
                            int maxNameWidth4 = getMaxNameWidth();
                            if (messageObject.shouldDrawWithoutBackground()) {
                                maxNameWidth4 -= AndroidUtilities.dp(10.0f);
                            } else if (messageObject.type == 5) {
                                maxNameWidth4 += AndroidUtilities.dp(13.0f);
                            }
                            staticLayout = new StaticLayout(LocaleController.getString(str21, R.string.Loading), Theme.chat_replyNamePaint, maxNameWidth4 + AndroidUtilities.dp(6.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                            this.replyNameLayout = staticLayout;
                            if (staticLayout.getLineCount() > 0) {
                                this.replyNameWidth += ((int) Math.ceil(this.replyNameLayout.getLineWidth(0))) + AndroidUtilities.dp(8.0f);
                                this.replyNameOffset = (int) this.replyNameLayout.getLineLeft(0);
                            }
                        }
                    }
                } else {
                    MessageObject.GroupedMessagePosition groupedMessagePosition4 = this.currentPosition;
                    if (groupedMessagePosition4 == null || groupedMessagePosition4.minY == 0) {
                        if ((!messageObject.isAnyKindOfSticker() && messageObject.type != 5) || messageObject.type == 19) {
                            int dp9 = (int) (this.namesOffset + AndroidUtilities.dp(20.0f) + Theme.chat_replyTextPaint.getTextSize() + Theme.chat_replyNamePaint.getTextSize());
                            this.namesOffset = dp9;
                            int i20 = messageObject.type;
                            if (i20 == 19 && !this.drawForwardedName) {
                                dp3 = AndroidUtilities.dp(12.0f);
                            } else if (i20 != 0) {
                                dp3 = AndroidUtilities.dp(5.0f);
                            }
                            this.namesOffset = dp9 + dp3;
                        }
                        if (this.drawForwardedName && this.forwardedNameLayout[0] != null) {
                            this.namesOffset += AndroidUtilities.dp(2.0f);
                        }
                        int maxNameWidth5 = getMaxNameWidth();
                        if (!messageObject.shouldDrawWithoutBackground()) {
                            maxNameWidth5 -= AndroidUtilities.dp(messageObject.isOutOwner() ? 20.0f : 10.0f);
                            if (messageObject.type != 0 || messageObject.needDrawShareButton()) {
                                if (messageObject.isSaved && messageObject.isOutOwner()) {
                                    f7 = 35.0f;
                                }
                                maxNameWidth5 -= AndroidUtilities.dp(f7);
                            }
                        } else if (messageObject.type == 5) {
                            maxNameWidth5 += AndroidUtilities.dp(13.0f);
                        }
                        TLRPC.MessageReplyHeader messageReplyHeader6 = messageObject.messageOwner.reply_to;
                        boolean z13 = (messageReplyHeader6 == null || (messageReplyHeader6.flags & 64) == 0 || messageReplyHeader6.quote_text == null) ? false : true;
                        this.hasReplyQuote = z13;
                        boolean z14 = z13 && messageReplyHeader6.quote;
                        this.isReplyQuote = z14;
                        boolean z15 = z14 && messageReplyHeader6.quote;
                        if (z14 && z15 && this.replyQuoteDrawable == null) {
                            this.replyQuoteDrawable = getContext().getResources().getDrawable(R.drawable.mini_quote).mutate();
                            this.replyQuoteDrawableColor = -1;
                        }
                        TextPaint textPaint6 = (this.isReplyQuote && messageObject.shouldDrawWithoutBackground()) ? Theme.chat_quoteTextPaint : Theme.chat_replyTextPaint;
                        TLRPC.MessageReplyHeader messageReplyHeader7 = messageObject.messageOwner.reply_to;
                        try {
                            if (messageReplyHeader7 == null || messageReplyHeader7.story_id == 0) {
                                String str22 = str6;
                                if (((!this.isThreadChat || messageObject.isQuickReply() || this.isSavedChat || messageObject.getReplyTopMsgId(this.isForum) != 0 || this.isForumGeneral) && messageObject.hasValidReplyMessageObject()) || this.hasReplyQuote || !((messageReplyHeader5 = messageObject.messageOwner.reply_to) == null || messageReplyHeader5.reply_from == null)) {
                                    i6 = 2;
                                    MessageObject messageObject5 = messageObject.replyMessageObject;
                                    this.lastReplyMessage = messageObject5 == null ? null : messageObject5.messageOwner;
                                    if (messageObject5 != null) {
                                        z4 = messageObject5.hasMediaSpoilers();
                                        photoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.replyMessageObject.photoThumbs2, 320);
                                        TLRPC.PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.replyMessageObject.photoThumbs2, 40);
                                        MessageObject messageObject6 = messageObject.replyMessageObject;
                                        TLObject tLObject2 = messageObject6.photoThumbsObject2;
                                        if (photoSize == null) {
                                            if (messageObject6.mediaExists) {
                                                photoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject6.photoThumbs, AndroidUtilities.getPhotoSize());
                                                i10 = photoSize != null ? photoSize.size : 0;
                                                i11 = 0;
                                            } else {
                                                photoSize = FileLoader.getClosestPhotoSizeWithSize(messageObject6.photoThumbs, 320);
                                                i10 = 0;
                                                i11 = 1;
                                            }
                                            photoSize2 = FileLoader.getClosestPhotoSizeWithSize(messageObject.replyMessageObject.photoThumbs, 40);
                                            tLObject = messageObject.replyMessageObject.photoThumbsObject;
                                            int i21 = i11;
                                            i7 = i10;
                                            i9 = i21;
                                        } else {
                                            tLObject = tLObject2;
                                            i7 = 0;
                                            photoSize2 = closestPhotoSizeWithSize;
                                            i9 = 1;
                                        }
                                        i8 = i9;
                                        if (photoSize2 == photoSize) {
                                            photoSize2 = null;
                                        }
                                    } else {
                                        z4 = false;
                                        photoSize = null;
                                        i7 = 0;
                                        photoSize2 = null;
                                        tLObject = null;
                                        i8 = 1;
                                    }
                                    TLRPC.Message message5 = messageObject.messageOwner;
                                    if (message5 == null || (messageReplyHeader4 = message5.reply_to) == null || (messageMedia2 = messageReplyHeader4.reply_media) == null) {
                                        charSequence2 = " ";
                                        str12 = str22;
                                        textPaint = textPaint6;
                                        str13 = str8;
                                        z5 = true;
                                        z5 = true;
                                        z6 = true;
                                        z5 = true;
                                        z5 = true;
                                        z5 = true;
                                        z5 = true;
                                        if (photoSize != null && (messageObject3 = messageObject.replyMessageObject) != null && !messageObject3.isAnyKindOfSticker() && ((!messageObject.isAnyKindOfSticker() || AndroidUtilities.isTablet()) && !messageObject.replyMessageObject.isSecretMedia() && !messageObject.replyMessageObject.isWebpageDocument())) {
                                            if (messageObject.replyMessageObject.isRoundVideo()) {
                                                imageReceiver = this.replyImageReceiver;
                                                dp = AndroidUtilities.dp(32.0f);
                                            } else {
                                                imageReceiver = this.replyImageReceiver;
                                                dp = AndroidUtilities.dp(4.0f);
                                            }
                                            imageReceiver.setRoundRadius(dp);
                                            this.currentReplyPhoto = photoSize;
                                            this.replyImageReceiver.setImage(ImageLocation.getForObject(photoSize, tLObject), z4 ? str2 : "50_50", ImageLocation.getForObject(photoSize2, tLObject), z4 ? "50_50_b4" : "50_50_b", i7, null, messageObject.replyMessageObject, i8);
                                            this.needReplyImage = true;
                                            maxNameWidth5 = (int) (maxNameWidth5 - ((AndroidUtilities.dp(this.isReplyQuote ? 3.0f : 7.0f) + Theme.chat_replyNamePaint.getTextSize()) + Theme.chat_replyTextPaint.getTextSize()));
                                            charSequence3 = null;
                                            z7 = z6;
                                        }
                                        charSequence3 = null;
                                        this.replyImageReceiver.setImageBitmap((Drawable) null);
                                        this.needReplyImage = false;
                                        z7 = z5;
                                    } else {
                                        TLRPC.Document document2 = messageMedia2.document;
                                        if (document2 != null) {
                                            arrayList2 = document2.thumbs;
                                            document = document2;
                                        } else {
                                            ?? r23 = messageMedia2.photo;
                                            if (r23 != 0) {
                                                arrayList2 = r23.sizes;
                                                document = r23;
                                            }
                                            if (photoSize != null) {
                                                charSequence2 = " ";
                                                str12 = str22;
                                                textPaint = textPaint6;
                                                str13 = str8;
                                                z5 = true;
                                                charSequence3 = null;
                                                this.replyImageReceiver.setImageBitmap((Drawable) null);
                                                this.needReplyImage = false;
                                                z7 = z5;
                                            } else {
                                                this.currentReplyPhoto = photoSize;
                                                ImageReceiver imageReceiver2 = this.replyImageReceiver;
                                                ImageLocation forObject = ImageLocation.getForObject(photoSize, tLObject);
                                                str2 = z4 ? "5_5_b" : "50_50";
                                                ImageLocation forObject2 = ImageLocation.getForObject(photoSize2, tLObject);
                                                String str23 = z4 ? "50_50_b4" : "50_50_b";
                                                z6 = true;
                                                str12 = str22;
                                                charSequence2 = " ";
                                                textPaint = textPaint6;
                                                String str24 = str8;
                                                imageReceiver2.setImage(forObject, str2, forObject2, str23, i7, null, messageObject, i8);
                                                this.needReplyImage = true;
                                                maxNameWidth5 = (int) (maxNameWidth5 - ((AndroidUtilities.dp(this.isReplyQuote ? 3.0f : 7.0f) + Theme.chat_replyNamePaint.getTextSize()) + Theme.chat_replyTextPaint.getTextSize()));
                                                str13 = str24;
                                                charSequence3 = null;
                                                z7 = z6;
                                            }
                                        }
                                        photoSize = FileLoader.getClosestPhotoSizeWithSize(arrayList2, 320);
                                        tLObject = document;
                                        if (photoSize != null) {
                                        }
                                    }
                                    if (DialogObject.isEncryptedDialog(messageObject.getDialogId())) {
                                        MessageObject messageObject7 = messageObject.replyMessageObject;
                                        if (messageObject7 == null || !messageObject7.isOutOwner()) {
                                            TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance(this.currentAccount).getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(this.currentMessageObject.getDialogId())));
                                            if (encryptedChat != null) {
                                                user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(encryptedChat.user_id));
                                                str14 = UserObject.getUserName(user);
                                                removeDiacritics = AndroidUtilities.removeDiacritics(str14);
                                                if (removeDiacritics == null) {
                                                    removeDiacritics = LocaleController.getString(str12, R.string.Loading);
                                                }
                                                if (!this.hasReplyQuote || ((messageReplyHeader3 = messageObject.messageOwner.reply_to) != null && messageReplyHeader3.quote_text != null && messageReplyHeader3.reply_from != null)) {
                                                    replaceEmoji = Emoji.replaceEmoji(new SpannableStringBuilder(messageObject.messageOwner.reply_to.quote_text.replace('\n', ' ')), textPaint.getFontMetricsInt(), false);
                                                    arrayList = messageObject.messageOwner.reply_to.quote_entities;
                                                    r22 = z7;
                                                    if (arrayList != null) {
                                                        replaceEmoji = MessageObject.replaceAnimatedEmoji(replaceEmoji, arrayList, textPaint.getFontMetricsInt(), z7);
                                                        MessageObject.addEntitiesToText(replaceEmoji, messageObject.messageOwner.reply_to.quote_entities, this.currentMessageObject.isOutOwner(), false, false, false);
                                                        r22 = z7;
                                                    }
                                                } else if (messageReplyHeader3 == null || messageReplyHeader3.reply_from == null || (messageMedia = messageReplyHeader3.reply_media) == null) {
                                                    MessageObject messageObject8 = messageObject.replyMessageObject;
                                                    if (messageObject8 == null || (charSequence5 = messageObject8.messageTextForReply) == null) {
                                                        if (MessageObject.getMedia(messageObject8) instanceof TLRPC.TL_messageMediaGame) {
                                                            str15 = MessageObject.getMedia(messageObject.replyMessageObject).game.title;
                                                        } else if (MessageObject.getMedia(messageObject.replyMessageObject) instanceof TLRPC.TL_messageMediaInvoice) {
                                                            str15 = MessageObject.getMedia(messageObject.replyMessageObject).title;
                                                        } else {
                                                            MessageObject messageObject9 = messageObject.replyMessageObject;
                                                            if (messageObject9 == null || TextUtils.isEmpty(messageObject9.caption)) {
                                                                MessageObject messageObject10 = messageObject.replyMessageObject;
                                                                if (messageObject10 == null || (charSequence4 = messageObject10.messageText) == null || charSequence4.length() <= 0) {
                                                                    replaceEmoji = charSequence3;
                                                                    r22 = z7;
                                                                } else {
                                                                    CharSequence charSequence9 = messageObject.replyMessageObject.messageText;
                                                                    if (charSequence9.length() > 150) {
                                                                        charSequence9 = charSequence9.subSequence(0, 150);
                                                                    }
                                                                    if (!(charSequence9 instanceof SpannableStringBuilder)) {
                                                                        charSequence9 = new SpannableStringBuilder(charSequence9);
                                                                    }
                                                                    CharSequence replaceEmoji2 = Emoji.replaceEmoji(AndroidUtilities.replaceNewLines(AndroidUtilities.removeSpans(AndroidUtilities.removeSpans(charSequence9, QuoteSpan.class), QuoteSpan.QuoteStyleSpan.class)), textPaint.getFontMetricsInt(), z7);
                                                                    TLRPC.Message message6 = messageObject.replyMessageObject.messageOwner;
                                                                    if (message6 != null) {
                                                                        replaceEmoji2 = MessageObject.replaceAnimatedEmoji(replaceEmoji2, message6.entities, textPaint.getFontMetricsInt(), z7);
                                                                    }
                                                                    f = maxNameWidth5;
                                                                    truncateAt = TextUtils.TruncateAt.END;
                                                                    replaceEmoji = TextUtils.ellipsize(replaceEmoji2, textPaint, f, truncateAt);
                                                                    r22 = z7;
                                                                    if (replaceEmoji instanceof Spannable) {
                                                                        MediaDataController.addTextStyleRuns(messageObject.replyMessageObject, (Spannable) replaceEmoji);
                                                                        replaceEmoji = TextUtils.ellipsize(replaceEmoji, textPaint, f, truncateAt);
                                                                        r22 = z7;
                                                                    }
                                                                }
                                                            } else {
                                                                String charSequence10 = messageObject.replyMessageObject.caption.toString();
                                                                if (charSequence10.length() > 150) {
                                                                    charSequence10 = charSequence10.substring(0, 150);
                                                                }
                                                                CharSequence replaceEmoji3 = Emoji.replaceEmoji(charSequence10.replace('\n', ' '), textPaint.getFontMetricsInt(), z7);
                                                                TLRPC.Message message7 = messageObject.replyMessageObject.messageOwner;
                                                                if (message7 != null) {
                                                                    replaceEmoji3 = MessageObject.replaceAnimatedEmoji(replaceEmoji3, message7.entities, textPaint.getFontMetricsInt(), z7);
                                                                }
                                                                f = maxNameWidth5;
                                                                truncateAt = TextUtils.TruncateAt.END;
                                                                replaceEmoji = TextUtils.ellipsize(replaceEmoji3, textPaint, f, truncateAt);
                                                                r22 = z7;
                                                                if (replaceEmoji instanceof Spannable) {
                                                                    MessageObject messageObject11 = messageObject.replyMessageObject;
                                                                    TLRPC.Message message8 = messageObject11.messageOwner;
                                                                    r22 = z7;
                                                                    if (message8 != null) {
                                                                        MediaDataController.addTextStyleRuns(message8.entities, messageObject11.caption, (Spannable) replaceEmoji);
                                                                        replaceEmoji = TextUtils.ellipsize(replaceEmoji, textPaint, f, truncateAt);
                                                                        r22 = z7;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        replaceEmoji = Emoji.replaceEmoji(str15, textPaint.getFontMetricsInt(), false);
                                                        f = maxNameWidth5;
                                                        truncateAt = TextUtils.TruncateAt.END;
                                                        replaceEmoji = TextUtils.ellipsize(replaceEmoji, textPaint, f, truncateAt);
                                                        r22 = z7;
                                                    } else {
                                                        replaceEmoji = charSequence5;
                                                        r22 = z7;
                                                    }
                                                } else {
                                                    replaceEmoji = messageObject.getMediaTitle(messageMedia);
                                                    r22 = z7;
                                                }
                                            }
                                            removeDiacritics = charSequence3;
                                            if (removeDiacritics == null) {
                                            }
                                            if (!this.hasReplyQuote) {
                                            }
                                            replaceEmoji = Emoji.replaceEmoji(new SpannableStringBuilder(messageObject.messageOwner.reply_to.quote_text.replace('\n', ' ')), textPaint.getFontMetricsInt(), false);
                                            arrayList = messageObject.messageOwner.reply_to.quote_entities;
                                            r22 = z7;
                                            if (arrayList != null) {
                                            }
                                        } else {
                                            userConfig = UserConfig.getInstance(this.currentAccount);
                                            user = userConfig.getCurrentUser();
                                            str14 = UserObject.getUserName(user);
                                            removeDiacritics = AndroidUtilities.removeDiacritics(str14);
                                            if (removeDiacritics == null) {
                                            }
                                            if (!this.hasReplyQuote) {
                                            }
                                            replaceEmoji = Emoji.replaceEmoji(new SpannableStringBuilder(messageObject.messageOwner.reply_to.quote_text.replace('\n', ' ')), textPaint.getFontMetricsInt(), false);
                                            arrayList = messageObject.messageOwner.reply_to.quote_entities;
                                            r22 = z7;
                                            if (arrayList != null) {
                                            }
                                        }
                                    } else {
                                        if (!this.hasReplyQuote || DialogObject.isEncryptedDialog(messageObject.getDialogId())) {
                                            if (messageObject.hideSendersName) {
                                                TLRPC.Peer peer2 = messageObject.sendAsPeer;
                                                if (peer2 == null) {
                                                    userConfig = AccountInstance.getInstance(this.currentAccount).getUserConfig();
                                                    user = userConfig.getCurrentUser();
                                                    str14 = UserObject.getUserName(user);
                                                    removeDiacritics = AndroidUtilities.removeDiacritics(str14);
                                                    if (removeDiacritics == null) {
                                                    }
                                                    if (!this.hasReplyQuote) {
                                                    }
                                                    replaceEmoji = Emoji.replaceEmoji(new SpannableStringBuilder(messageObject.messageOwner.reply_to.quote_text.replace('\n', ' ')), textPaint.getFontMetricsInt(), false);
                                                    arrayList = messageObject.messageOwner.reply_to.quote_entities;
                                                    r22 = z7;
                                                    if (arrayList != null) {
                                                    }
                                                } else if (peer2.channel_id != 0) {
                                                    chat2 = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.sendAsPeer.channel_id));
                                                } else {
                                                    user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(messageObject.sendAsPeer.user_id));
                                                    str14 = UserObject.getUserName(user);
                                                    removeDiacritics = AndroidUtilities.removeDiacritics(str14);
                                                    if (removeDiacritics == null) {
                                                    }
                                                    if (!this.hasReplyQuote) {
                                                    }
                                                    replaceEmoji = Emoji.replaceEmoji(new SpannableStringBuilder(messageObject.messageOwner.reply_to.quote_text.replace('\n', ' ')), textPaint.getFontMetricsInt(), false);
                                                    arrayList = messageObject.messageOwner.reply_to.quote_entities;
                                                    r22 = z7;
                                                    if (arrayList != null) {
                                                    }
                                                }
                                            } else {
                                                str14 = messageObject.customReplyName;
                                                if (str14 == null) {
                                                    MessageObject messageObject12 = messageObject.replyMessageObject;
                                                    if (messageObject12 != null || (messageReplyHeader2 = messageObject.messageOwner.reply_to) == null || messageReplyHeader2.reply_from == null) {
                                                        if (messageObject12 != null) {
                                                            removeDiacritics = this.drawForwardedName ? AndroidUtilities.removeDiacritics(messageObject12.getForwardedName()) : charSequence3;
                                                            if (removeDiacritics == null) {
                                                                long fromChatId = messageObject.replyMessageObject.getFromChatId();
                                                                if (fromChatId > 0) {
                                                                    TLRPC.User user7 = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(fromChatId));
                                                                    if (user7 != null) {
                                                                        str14 = UserObject.getUserName(user7);
                                                                    }
                                                                } else if (fromChatId >= 0 ? !((message = messageObject.replyMessageObject.messageOwner) == null || message.peer_id == null || (chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(messageObject.replyMessageObject.messageOwner.peer_id.channel_id))) == null) : (chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-fromChatId))) != null) {
                                                                    chat2 = chat;
                                                                    str14 = chat2.title;
                                                                }
                                                            }
                                                            if (removeDiacritics == null) {
                                                            }
                                                            if (!this.hasReplyQuote) {
                                                            }
                                                            replaceEmoji = Emoji.replaceEmoji(new SpannableStringBuilder(messageObject.messageOwner.reply_to.quote_text.replace('\n', ' ')), textPaint.getFontMetricsInt(), false);
                                                            arrayList = messageObject.messageOwner.reply_to.quote_entities;
                                                            r22 = z7;
                                                            if (arrayList != null) {
                                                            }
                                                        }
                                                        removeDiacritics = charSequence3;
                                                        if (removeDiacritics == null) {
                                                        }
                                                        if (!this.hasReplyQuote) {
                                                        }
                                                        replaceEmoji = Emoji.replaceEmoji(new SpannableStringBuilder(messageObject.messageOwner.reply_to.quote_text.replace('\n', ' ')), textPaint.getFontMetricsInt(), false);
                                                        arrayList = messageObject.messageOwner.reply_to.quote_entities;
                                                        r22 = z7;
                                                        if (arrayList != null) {
                                                        }
                                                    }
                                                }
                                                removeDiacritics = AndroidUtilities.removeDiacritics(str14);
                                                if (removeDiacritics == null) {
                                                }
                                                if (!this.hasReplyQuote) {
                                                }
                                                replaceEmoji = Emoji.replaceEmoji(new SpannableStringBuilder(messageObject.messageOwner.reply_to.quote_text.replace('\n', ' ')), textPaint.getFontMetricsInt(), false);
                                                arrayList = messageObject.messageOwner.reply_to.quote_entities;
                                                r22 = z7;
                                                if (arrayList != null) {
                                                }
                                            }
                                        }
                                        removeDiacritics = messageObject.getReplyQuoteNameWithIcon();
                                        if (removeDiacritics == null) {
                                        }
                                        if (!this.hasReplyQuote) {
                                        }
                                        replaceEmoji = Emoji.replaceEmoji(new SpannableStringBuilder(messageObject.messageOwner.reply_to.quote_text.replace('\n', ' ')), textPaint.getFontMetricsInt(), false);
                                        arrayList = messageObject.messageOwner.reply_to.quote_entities;
                                        r22 = z7;
                                        if (arrayList != null) {
                                        }
                                    }
                                } else {
                                    this.replyImageReceiver.setImageBitmap((Drawable) null);
                                    this.needReplyImage = false;
                                    this.replyPanelIsForward = true;
                                    TLRPC.MessageFwdHeader messageFwdHeader = messageObject.messageOwner.fwd_from;
                                    if (messageFwdHeader != null) {
                                        TLRPC.Peer peer3 = messageFwdHeader.from_id;
                                        if (peer3 instanceof TLRPC.TL_peerChannel) {
                                            messagesController = MessagesController.getInstance(this.currentAccount);
                                            j = messageObject.messageOwner.fwd_from.from_id.channel_id;
                                        } else if (peer3 instanceof TLRPC.TL_peerChat) {
                                            messagesController = MessagesController.getInstance(this.currentAccount);
                                            j = messageObject.messageOwner.fwd_from.from_id.chat_id;
                                        } else {
                                            if (peer3 instanceof TLRPC.TL_peerUser) {
                                                this.currentForwardUser = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(messageObject.messageOwner.fwd_from.from_id.user_id));
                                            }
                                            str16 = messageObject.messageOwner.fwd_from.from_name;
                                            if (str16 != null) {
                                                this.currentForwardName = str16;
                                            }
                                        }
                                        this.currentForwardChannel = messagesController.getChat(Long.valueOf(j));
                                        str16 = messageObject.messageOwner.fwd_from.from_name;
                                        if (str16 != null) {
                                        }
                                    }
                                    if (this.currentForwardUser == null && this.currentForwardChannel == null && this.currentForwardName == null) {
                                        charSequence2 = " ";
                                        textPaint = textPaint6;
                                        str13 = str8;
                                        z9 = true;
                                        removeDiacritics = null;
                                        replaceEmoji = null;
                                    } else {
                                        if (this.forwardAvatar == null) {
                                            AvatarSpan avatarSpan4 = new AvatarSpan(this, this.currentAccount);
                                            this.forwardAvatar = avatarSpan4;
                                            avatarSpan4.translate(0.0f, AndroidUtilities.dp(-0.33f));
                                        }
                                        this.forwardAvatar.setSize((((int) Theme.chat_forwardNamePaint.getTextSize()) * 1.23f) / AndroidUtilities.density);
                                        TLRPC.Chat chat7 = this.currentForwardChannel;
                                        if (chat7 != null) {
                                            TLRPC.User user8 = this.currentForwardUser;
                                            if (user8 != null) {
                                                userName2 = String.format(str9, chat7.title, UserObject.getUserName(user8));
                                            } else {
                                                this.currentForwardNameString = chat7.title;
                                                this.forwardAvatar.setChat(chat7);
                                                z8 = true;
                                                String forwardedMessageText3 = getForwardedMessageText(messageObject);
                                                String str25 = this.currentForwardNameString;
                                                String replace = str25 == null ? str3 : str25.replace('\n', ' ');
                                                StringBuilder sb3 = new StringBuilder();
                                                sb3.append(z8 ? str7 : str3);
                                                sb3.append((Object) replace);
                                                String sb4 = sb3.toString();
                                                TextPaint textPaint7 = Theme.chat_replyNamePaint;
                                                float dp10 = maxNameWidth5 - AndroidUtilities.dp(z8 ? 17.33f : 0.0f);
                                                TextUtils.TruncateAt truncateAt4 = TextUtils.TruncateAt.END;
                                                CharSequence ellipsize4 = TextUtils.ellipsize(sb4, textPaint7, dp10, truncateAt4);
                                                spannableStringBuilder3 = new SpannableStringBuilder(ellipsize4);
                                                if (!z8 && spannableStringBuilder3.length() > 1) {
                                                    spannableStringBuilder3.setSpan(this.forwardAvatar, 0, 1, 33);
                                                }
                                                if (this.currentForwardName == null && messageObject.messageOwner.fwd_from.from_id == null) {
                                                    i12 = 0;
                                                } else {
                                                    i12 = 0;
                                                    spannableStringBuilder3.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, ellipsize4.length(), 33);
                                                }
                                                CharSequence ellipsize5 = TextUtils.ellipsize(spannableStringBuilder3, textPaint6, maxNameWidth5, truncateAt4);
                                                i6 = 2;
                                                this.forwardNameCenterX = ((int) Math.ceil(Theme.chat_replyNamePaint.measureText(ellipsize4, i12, ellipsize4.length()))) / 2;
                                                charSequence2 = " ";
                                                textPaint = textPaint6;
                                                str13 = str8;
                                                r22 = 1;
                                                replaceEmoji = ellipsize5;
                                                removeDiacritics = forwardedMessageText3;
                                            }
                                        } else {
                                            TLRPC.User user9 = this.currentForwardUser;
                                            if (user9 != null) {
                                                userName2 = UserObject.getUserName(user9);
                                            } else {
                                                this.currentForwardNameString = this.currentForwardName;
                                                z8 = false;
                                                String forwardedMessageText32 = getForwardedMessageText(messageObject);
                                                String str252 = this.currentForwardNameString;
                                                if (str252 == null) {
                                                }
                                                StringBuilder sb32 = new StringBuilder();
                                                sb32.append(z8 ? str7 : str3);
                                                sb32.append((Object) replace);
                                                String sb42 = sb32.toString();
                                                TextPaint textPaint72 = Theme.chat_replyNamePaint;
                                                float dp102 = maxNameWidth5 - AndroidUtilities.dp(z8 ? 17.33f : 0.0f);
                                                TextUtils.TruncateAt truncateAt42 = TextUtils.TruncateAt.END;
                                                CharSequence ellipsize42 = TextUtils.ellipsize(sb42, textPaint72, dp102, truncateAt42);
                                                spannableStringBuilder3 = new SpannableStringBuilder(ellipsize42);
                                                if (!z8) {
                                                    spannableStringBuilder3.setSpan(this.forwardAvatar, 0, 1, 33);
                                                }
                                                if (this.currentForwardName == null) {
                                                }
                                                i12 = 0;
                                                spannableStringBuilder3.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, ellipsize42.length(), 33);
                                                CharSequence ellipsize52 = TextUtils.ellipsize(spannableStringBuilder3, textPaint6, maxNameWidth5, truncateAt42);
                                                i6 = 2;
                                                this.forwardNameCenterX = ((int) Math.ceil(Theme.chat_replyNamePaint.measureText(ellipsize42, i12, ellipsize42.length()))) / 2;
                                                charSequence2 = " ";
                                                textPaint = textPaint6;
                                                str13 = str8;
                                                r22 = 1;
                                                replaceEmoji = ellipsize52;
                                                removeDiacritics = forwardedMessageText32;
                                            }
                                        }
                                        this.currentForwardNameString = userName2;
                                        this.forwardAvatar.setUser(this.currentForwardUser);
                                        z8 = true;
                                        String forwardedMessageText322 = getForwardedMessageText(messageObject);
                                        String str2522 = this.currentForwardNameString;
                                        if (str2522 == null) {
                                        }
                                        StringBuilder sb322 = new StringBuilder();
                                        sb322.append(z8 ? str7 : str3);
                                        sb322.append((Object) replace);
                                        String sb422 = sb322.toString();
                                        TextPaint textPaint722 = Theme.chat_replyNamePaint;
                                        float dp1022 = maxNameWidth5 - AndroidUtilities.dp(z8 ? 17.33f : 0.0f);
                                        TextUtils.TruncateAt truncateAt422 = TextUtils.TruncateAt.END;
                                        CharSequence ellipsize422 = TextUtils.ellipsize(sb422, textPaint722, dp1022, truncateAt422);
                                        spannableStringBuilder3 = new SpannableStringBuilder(ellipsize422);
                                        if (!z8) {
                                        }
                                        if (this.currentForwardName == null) {
                                        }
                                        i12 = 0;
                                        spannableStringBuilder3.setSpan(new TypefaceSpan(AndroidUtilities.bold()), 0, ellipsize422.length(), 33);
                                        CharSequence ellipsize522 = TextUtils.ellipsize(spannableStringBuilder3, textPaint6, maxNameWidth5, truncateAt422);
                                        i6 = 2;
                                        this.forwardNameCenterX = ((int) Math.ceil(Theme.chat_replyNamePaint.measureText(ellipsize422, i12, ellipsize422.length()))) / 2;
                                        charSequence2 = " ";
                                        textPaint = textPaint6;
                                        str13 = str8;
                                        r22 = 1;
                                        replaceEmoji = ellipsize522;
                                        removeDiacritics = forwardedMessageText322;
                                    }
                                }
                                removeDiacritics = Emoji.replaceEmoji(removeDiacritics, Theme.chat_replyNamePaint.getFontMetricsInt(), false);
                                if (this.isReplyQuote) {
                                    maxNameWidth5 -= AndroidUtilities.dp(24.0f);
                                }
                                int i22 = maxNameWidth5;
                                ellipsize = removeDiacritics != null ? str3 : TextUtils.ellipsize(AndroidUtilities.replaceCharSequence(str13, removeDiacritics, charSequence2), Theme.chat_replyNamePaint, i22, TextUtils.TruncateAt.END);
                                this.replyNameWidth = AndroidUtilities.dp(4.0f) + (!this.needReplyImage ? AndroidUtilities.dp(16.0f) + ((int) (textPaint.getTextSize() + Theme.chat_replyNamePaint.getTextSize())) : 0);
                                if (ellipsize != null) {
                                    StaticLayout staticLayout4 = new StaticLayout(ellipsize, Theme.chat_replyNamePaint, i22 + AndroidUtilities.dp(6.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                                    this.replyNameLayout = staticLayout4;
                                    if (staticLayout4.getLineCount() > 0) {
                                        this.replyNameWidth += ((int) Math.ceil(this.replyNameLayout.getLineWidth(0))) + AndroidUtilities.dp(4.0f);
                                        this.replyNameOffset = (int) this.replyNameLayout.getLineLeft(0);
                                    }
                                }
                                if (this.isReplyQuote || !z15 || this.replyQuoteDrawable == null) {
                                    i16 = this.replyNameWidth;
                                    dp2 = AndroidUtilities.dp(3.0f);
                                } else {
                                    i16 = this.replyNameWidth;
                                    if (this.drawPinnedTop) {
                                        i6 = 0;
                                    }
                                    dp2 = AndroidUtilities.dp(i6 + 6) + this.replyQuoteDrawable.getIntrinsicWidth();
                                }
                                this.replyNameWidth = i16 + dp2;
                                this.replyTextWidth = AndroidUtilities.dp(4.0f) + (!this.needReplyImage ? AndroidUtilities.dp(33.0f) : 0);
                                if (replaceEmoji == null) {
                                    SpannableStringBuilder spannableStringBuilder9 = new SpannableStringBuilder(replaceEmoji);
                                    TextStyleSpan[] textStyleSpanArr = (TextStyleSpan[]) spannableStringBuilder9.getSpans(0, spannableStringBuilder9.length(), TextStyleSpan.class);
                                    int length2 = textStyleSpanArr.length;
                                    boolean z16 = false;
                                    for (int i23 = 0; i23 < length2; i23 += r22) {
                                        TextStyleSpan textStyleSpan = textStyleSpanArr[i23];
                                        if ((textStyleSpan.getTextStyleRun().flags & 4) != 0) {
                                            spannableStringBuilder9.removeSpan(textStyleSpan);
                                            z16 = true;
                                        }
                                    }
                                    this.replyTextRTL = AndroidUtilities.isRTL(spannableStringBuilder9);
                                    if (this.isReplyQuote && !this.currentMessageObject.shouldDrawWithoutBackground()) {
                                        i22 += AndroidUtilities.dp(36.0f);
                                    }
                                    boolean z17 = this.isReplyQuote;
                                    if (z17 && this.needReplyImage && !this.replyTextRTL) {
                                        float dp11 = AndroidUtilities.dp(z17 ? 3.0f : 7.0f) + Theme.chat_replyNamePaint.getTextSize() + Theme.chat_replyTextPaint.getTextSize();
                                        spannableStringBuilder9.setSpan(new LeadingMarginSpan.Standard(((int) dp11) + AndroidUtilities.dp(4.0f), 0), 0, spannableStringBuilder9.length(), 33);
                                        this.replyTextWidth = (int) (this.replyTextWidth - dp11);
                                        i14 = (int) (i22 + dp11);
                                    } else {
                                        i14 = i22;
                                    }
                                    if (!z16) {
                                        charSequence6 = spannableStringBuilder9;
                                        if (!this.isReplyQuote) {
                                        }
                                        this.replyTextOffset = 0;
                                        if (Build.VERSION.SDK_INT < 23) {
                                            obtain = StaticLayout.Builder.obtain(charSequence6, 0, charSequence6.length(), textPaint, i14);
                                            alignment = obtain.setAlignment(Layout.Alignment.ALIGN_NORMAL);
                                            includePad = alignment.setIncludePad(false);
                                            includePad.setBreakStrategy(0);
                                            if (this.isReplyQuote && !this.currentMessageObject.replyTextRevealed) {
                                                maxLines = includePad.setMaxLines(5);
                                                maxLines.setEllipsize(TextUtils.TruncateAt.END);
                                            }
                                            build = includePad.build();
                                            this.replyTextLayout = build;
                                            MessageObject messageObject13 = this.currentMessageObject;
                                            if (!messageObject13.replyTextRevealed) {
                                                if (build.getLineCount() > 0) {
                                                    StaticLayout staticLayout5 = this.replyTextLayout;
                                                    if (staticLayout5.getEllipsisCount(staticLayout5.getLineCount() - r22) > 0) {
                                                        z10 = true;
                                                        messageObject13.replyTextEllipsized = z10;
                                                    }
                                                }
                                                z10 = false;
                                                messageObject13.replyTextEllipsized = z10;
                                            }
                                        } else {
                                            this.replyTextLayout = new StaticLayout(charSequence6, 0, charSequence6.length(), textPaint, i14, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, i14);
                                        }
                                        this.replyTextHeight = this.replyTextLayout.getHeight();
                                        if ((!messageObject.isAnyKindOfSticker() && messageObject.type != 5) || messageObject.type == 19) {
                                            this.namesOffset = (int) (this.namesOffset + Math.max(0.0f, (this.replyTextHeight - AndroidUtilities.dp(3.66f)) - Theme.chat_replyTextPaint.getTextSize()));
                                        }
                                        if (this.replyTextLayout.getLineCount() > 0) {
                                            this.replyTextOffset = this.replyTextLayout.getWidth();
                                            int i24 = 0;
                                            for (int i25 = 0; i25 < this.replyTextLayout.getLineCount(); i25 += r22) {
                                                i24 = Math.max(i24, (int) Math.ceil(this.replyTextLayout.getLineWidth(i25)));
                                                int ceil3 = (int) Math.ceil(this.replyTextLayout.getLineLeft(i25));
                                                if (i25 > 0) {
                                                    if ((this.replyTextOffset == 0) != (ceil3 == 0)) {
                                                        i24 = this.replyTextLayout.getWidth();
                                                    }
                                                }
                                                this.replyTextOffset = Math.min(this.replyTextOffset, ceil3);
                                            }
                                            this.replyTextWidth += i24 + AndroidUtilities.dp(18.0f);
                                        }
                                        this.replySpoilers.clear();
                                        if (!this.hasReplyQuote && (getMessageObject().replyMessageObject == null || getMessageObject().replyMessageObject.isSpoilersRevealed)) {
                                            i15 = 1;
                                            f2 = 2.0f;
                                            AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans = this.animatedEmojiReplyStack;
                                            Layout[] layoutArr = new Layout[i15];
                                            layoutArr[0] = this.replyTextLayout;
                                            this.animatedEmojiReplyStack = AnimatedEmojiSpan.update(0, (View) this, false, emojiGroupedSpans, layoutArr);
                                        }
                                        StaticLayout staticLayout6 = this.replyTextLayout;
                                        int i26 = this.replyTextOffset;
                                        i15 = 1;
                                        f2 = 2.0f;
                                        SpoilerEffect.addSpoilers(this, staticLayout6, i26, i26 + this.replyTextWidth, this.replySpoilersPool, this.replySpoilers);
                                        AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans2 = this.animatedEmojiReplyStack;
                                        Layout[] layoutArr2 = new Layout[i15];
                                        layoutArr2[0] = this.replyTextLayout;
                                        this.animatedEmojiReplyStack = AnimatedEmojiSpan.update(0, (View) this, false, emojiGroupedSpans2, layoutArr2);
                                    }
                                    charSequence6 = TextUtils.ellipsize(spannableStringBuilder9, textPaint, i14, TextUtils.TruncateAt.END);
                                    this.replyTextOffset = 0;
                                    if (Build.VERSION.SDK_INT < 23) {
                                    }
                                    this.replyTextHeight = this.replyTextLayout.getHeight();
                                    if (!messageObject.isAnyKindOfSticker()) {
                                        this.namesOffset = (int) (this.namesOffset + Math.max(0.0f, (this.replyTextHeight - AndroidUtilities.dp(3.66f)) - Theme.chat_replyTextPaint.getTextSize()));
                                        if (this.replyTextLayout.getLineCount() > 0) {
                                        }
                                        this.replySpoilers.clear();
                                        if (!this.hasReplyQuote) {
                                            i15 = 1;
                                            f2 = 2.0f;
                                            AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans22 = this.animatedEmojiReplyStack;
                                            Layout[] layoutArr22 = new Layout[i15];
                                            layoutArr22[0] = this.replyTextLayout;
                                            this.animatedEmojiReplyStack = AnimatedEmojiSpan.update(0, (View) this, false, emojiGroupedSpans22, layoutArr22);
                                        }
                                        StaticLayout staticLayout62 = this.replyTextLayout;
                                        int i262 = this.replyTextOffset;
                                        i15 = 1;
                                        f2 = 2.0f;
                                        SpoilerEffect.addSpoilers(this, staticLayout62, i262, i262 + this.replyTextWidth, this.replySpoilersPool, this.replySpoilers);
                                        AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans222 = this.animatedEmojiReplyStack;
                                        Layout[] layoutArr222 = new Layout[i15];
                                        layoutArr222[0] = this.replyTextLayout;
                                        this.animatedEmojiReplyStack = AnimatedEmojiSpan.update(0, (View) this, false, emojiGroupedSpans222, layoutArr222);
                                    }
                                    this.namesOffset = (int) (this.namesOffset + Math.max(0.0f, (this.replyTextHeight - AndroidUtilities.dp(3.66f)) - Theme.chat_replyTextPaint.getTextSize()));
                                    if (this.replyTextLayout.getLineCount() > 0) {
                                    }
                                    this.replySpoilers.clear();
                                    if (!this.hasReplyQuote) {
                                    }
                                    StaticLayout staticLayout622 = this.replyTextLayout;
                                    int i2622 = this.replyTextOffset;
                                    i15 = 1;
                                    f2 = 2.0f;
                                    SpoilerEffect.addSpoilers(this, staticLayout622, i2622, i2622 + this.replyTextWidth, this.replySpoilersPool, this.replySpoilers);
                                    AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans2222 = this.animatedEmojiReplyStack;
                                    Layout[] layoutArr2222 = new Layout[i15];
                                    layoutArr2222[0] = this.replyTextLayout;
                                    this.animatedEmojiReplyStack = AnimatedEmojiSpan.update(0, (View) this, false, emojiGroupedSpans2222, layoutArr2222);
                                } else {
                                    f2 = 2.0f;
                                }
                                i13 = this.replyNameWidth;
                                if (i13 > this.replyTextWidth) {
                                    this.replyNameWidth = i13 + AndroidUtilities.dp(Math.max(f2, SharedConfig.bubbleRadius / 4.0f));
                                }
                            } else {
                                removeDiacritics = AndroidUtilities.removeDiacritics(getNameFromDialogId(DialogObject.getPeerDialogId(messageReplyHeader7.peer)));
                                TL_stories.StoryItem storyItem = messageObject.messageOwner.replyStory;
                                if (storyItem == null || (storyItem instanceof TL_stories.TL_storyItemDeleted)) {
                                    replaceEmoji = storyItem == null ? LocaleController.getString(str6, R.string.Loading) : StoriesUtilities.createExpiredStoryString();
                                    this.needReplyImage = false;
                                } else {
                                    this.needReplyImage = true;
                                    StoriesUtilities.setStoryMiniImage(this.replyImageReceiver, storyItem);
                                    replaceEmoji = StoriesUtilities.createReplyStoryString();
                                    maxNameWidth5 = (int) (maxNameWidth5 - (AndroidUtilities.dp(16.0f) + (textPaint6.getTextSize() + Theme.chat_replyNamePaint.getTextSize())));
                                }
                                charSequence2 = " ";
                                textPaint = textPaint6;
                                str13 = str8;
                                z9 = true;
                            }
                            this.replyTextWidth = AndroidUtilities.dp(4.0f) + (!this.needReplyImage ? AndroidUtilities.dp(33.0f) : 0);
                            if (replaceEmoji == null) {
                            }
                            i13 = this.replyNameWidth;
                            if (i13 > this.replyTextWidth) {
                            }
                        } catch (Exception e2) {
                            FileLog.e(e2);
                        }
                        i6 = 2;
                        r22 = z9;
                        removeDiacritics = Emoji.replaceEmoji(removeDiacritics, Theme.chat_replyNamePaint.getFontMetricsInt(), false);
                        if (this.isReplyQuote) {
                        }
                        int i222 = maxNameWidth5;
                        if (removeDiacritics != null) {
                        }
                        this.replyNameWidth = AndroidUtilities.dp(4.0f) + (!this.needReplyImage ? AndroidUtilities.dp(16.0f) + ((int) (textPaint.getTextSize() + Theme.chat_replyNamePaint.getTextSize())) : 0);
                        if (ellipsize != null) {
                        }
                        if (this.isReplyQuote) {
                        }
                        i16 = this.replyNameWidth;
                        dp2 = AndroidUtilities.dp(3.0f);
                        this.replyNameWidth = i16 + dp2;
                    }
                }
                requestLayout();
            }
        }
        str9 = str5;
        this.drawTopic = false;
        float f72 = 10.0f;
        if (this.isThreadChat) {
        }
        chatMessageCellDelegate = this.delegate;
        if (chatMessageCellDelegate != null) {
            this.drawTopic = true;
            int maxNameWidth22 = getMaxNameWidth();
            if (!messageObject.shouldDrawWithoutBackground()) {
            }
            if (this.topicButton == null) {
            }
            i4 = this.namesOffset;
            i5 = this.topicButton.set(this, messageObject, peerObject, maxNameWidth22);
            this.namesOffset = i4 + i5;
        }
        if (!this.drawTopic) {
            messageTopicButton.onDetached(this);
            this.topicButton = null;
        }
        if (messageObject.isGiveawayResults()) {
        }
        String str212 = str6;
        if (this.isThreadChat) {
        }
        messageObject2 = messageObject.replyMessageObject;
        if (messageObject2 != null) {
        }
        chatMessageCellDelegate2 = this.delegate;
        if (chatMessageCellDelegate2 != null) {
        }
        if (!messageObject.isAnyKindOfSticker()) {
            int dp82 = (int) (this.namesOffset + AndroidUtilities.dp(18.0f) + Theme.chat_replyTextPaint.getTextSize() + Theme.chat_replyNamePaint.getTextSize());
            this.namesOffset = dp82;
            if (messageObject.type != 0) {
            }
        }
        this.needReplyImage = false;
        int maxNameWidth42 = getMaxNameWidth();
        if (messageObject.shouldDrawWithoutBackground()) {
        }
        staticLayout = new StaticLayout(LocaleController.getString(str212, R.string.Loading), Theme.chat_replyNamePaint, maxNameWidth42 + AndroidUtilities.dp(6.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        this.replyNameLayout = staticLayout;
        if (staticLayout.getLineCount() > 0) {
        }
        requestLayout();
    }

    private boolean shouldDrawCaptionLayout() {
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        MessageObject.GroupedMessages groupedMessages;
        MessageObject messageObject = this.currentMessageObject;
        return (messageObject == null || messageObject.preview || messageObject.isSponsored() || ((groupedMessagePosition = this.currentPosition) != null && ((groupedMessages = this.currentMessagesGroup) == null || !groupedMessages.isDocuments || (groupedMessagePosition.flags & 8) != 0)) || this.transitionParams.animateBackgroundBoundsInner || (this.enterTransitionInProgress && this.currentMessageObject.isVoice())) ? false : true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean shouldDrawMenuDrawable() {
        MessageObject messageObject;
        return (this.currentMessagesGroup == null || (this.currentPosition.flags & 4) != 0) && !this.hasLinkPreview && ((messageObject = this.currentMessageObject) == null || !(messageObject.isRepostPreview || messageObject.isSponsored()));
    }

    private boolean shouldDrawSelectionOverlay() {
        return hasSelectionOverlay() && ((isPressed() && this.isCheckPressed) || ((!this.isCheckPressed && this.isPressed) || this.isHighlighted || this.isHighlightedAnimated)) && !textIsSelectionMode() && ((this.currentMessagesGroup == null || this.drawSelectionBackground) && this.currentBackgroundDrawable != null);
    }

    private static boolean spanSupportsLongPress(CharacterStyle characterStyle) {
        return (characterStyle instanceof URLSpanMono) || (characterStyle instanceof URLSpan);
    }

    private void startRevealMedia(float f, float f2, float f3) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.isMediaSpoilersRevealed || this.mediaSpoilerRevealProgress != 0.0f) {
            return;
        }
        if (messageObject.type == 3) {
            messageObject.forceUpdate = true;
            messageObject.revealingMediaSpoilers = true;
            setMessageContent(messageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
            MessageObject messageObject2 = this.currentMessageObject;
            messageObject2.revealingMediaSpoilers = false;
            messageObject2.forceUpdate = false;
            if (this.currentMessagesGroup != null) {
                this.radialProgress.setProgress(0.0f, false);
            }
        }
        this.mediaSpoilerRevealX = f;
        this.mediaSpoilerRevealY = f2;
        ValueAnimator duration = ValueAnimator.ofFloat(0.0f, 1.0f).setDuration((long) MathUtils.clamp(this.mediaSpoilerRevealMaxRadius * 0.3f, 250.0f, 550.0f));
        duration.setInterpolator(CubicBezierInterpolator.EASE_BOTH);
        duration.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda7
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                ChatMessageCell.this.lambda$startRevealMedia$12(valueAnimator);
            }
        });
        duration.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.Cells.ChatMessageCell.8
            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
            public void onAnimationEnd(Animator animator) {
                ChatMessageCell.this.currentMessageObject.isMediaSpoilersRevealed = true;
                ChatMessageCell.this.invalidate();
            }
        });
        duration.start();
    }

    private boolean textIsSelectionMode() {
        ChatMessageCellDelegate chatMessageCellDelegate;
        return getCurrentMessagesGroup() == null && (chatMessageCellDelegate = this.delegate) != null && chatMessageCellDelegate.getTextSelectionHelper() != null && this.delegate.getTextSelectionHelper().isSelected(this.currentMessageObject);
    }

    /* JADX WARN: Code restructure failed: missing block: B:37:0x008d, code lost:
    
        if ((r1 instanceof org.telegram.tgnet.TLRPC.TL_peerUser) != false) goto L50;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateCurrentUserAndChat() {
        TLRPC.Peer peer;
        Long valueOf;
        long j;
        TLRPC.User currentUser;
        TLRPC.TL_user tL_user;
        String str;
        TLRPC.Peer peer2;
        TLRPC.Peer peer3;
        Long valueOf2;
        long j2;
        if (this.currentMessageObject == null) {
            return;
        }
        MessagesController messagesController = MessagesController.getInstance(this.currentAccount);
        TLRPC.MessageFwdHeader messageFwdHeader = this.currentMessageObject.messageOwner.fwd_from;
        long clientUserId = UserConfig.getInstance(this.currentAccount).getClientUserId();
        if (messageFwdHeader == null || !(messageFwdHeader.from_id instanceof TLRPC.TL_peerChannel) || (this.currentMessageObject.getDialogId() != clientUserId && this.currentMessageObject.getDialogId() != UserObject.REPLY_BOT)) {
            if (messageFwdHeader == null || this.currentMessageObject.getDialogId() != UserObject.VERIFY) {
                if (messageFwdHeader != null && (peer3 = messageFwdHeader.saved_from_peer) != null) {
                    long j3 = peer3.user_id;
                    if (j3 != 0) {
                        if (!this.isSavedChat) {
                            peer2 = messageFwdHeader.from_id;
                        }
                        valueOf = Long.valueOf(j3);
                        currentUser = messagesController.getUser(valueOf);
                    } else if (peer3.channel_id != 0) {
                        if (this.currentMessageObject.isSavedFromMegagroup()) {
                            TLRPC.Peer peer4 = messageFwdHeader.from_id;
                            if (peer4 instanceof TLRPC.TL_peerUser) {
                                j = peer4.user_id;
                            }
                        }
                        peer = messageFwdHeader.saved_from_peer;
                    } else {
                        long j4 = peer3.chat_id;
                        if (j4 == 0) {
                            return;
                        }
                        peer2 = messageFwdHeader.from_id;
                        if (!(peer2 instanceof TLRPC.TL_peerUser)) {
                            valueOf2 = Long.valueOf(j4);
                            this.currentChat = messagesController.getChat(valueOf2);
                        }
                    }
                    j = peer2.user_id;
                } else {
                    if (messageFwdHeader == null || !(messageFwdHeader.from_id instanceof TLRPC.TL_peerUser) || (!messageFwdHeader.imported && this.currentMessageObject.getDialogId() != clientUserId)) {
                        if (messageFwdHeader != null && !TextUtils.isEmpty(messageFwdHeader.saved_from_name) && (messageFwdHeader.imported || this.currentMessageObject.getDialogId() == clientUserId)) {
                            tL_user = new TLRPC.TL_user();
                            this.currentUser = tL_user;
                            str = messageFwdHeader.saved_from_name;
                        } else if (messageFwdHeader == null || TextUtils.isEmpty(messageFwdHeader.from_name) || !(messageFwdHeader.imported || this.currentMessageObject.getDialogId() == clientUserId)) {
                            long dialogId = this.currentMessageObject.getDialogId();
                            long fromChatId = this.currentMessageObject.getFromChatId();
                            TLRPC.Chat chat = DialogObject.isChatDialog(fromChatId) ? messagesController.getChat(Long.valueOf(-fromChatId)) : null;
                            TLRPC.Chat chat2 = DialogObject.isChatDialog(dialogId) ? messagesController.getChat(Long.valueOf(-dialogId)) : null;
                            if (DialogObject.isEncryptedDialog(this.currentMessageObject.getDialogId())) {
                                if (this.currentMessageObject.isOutOwner()) {
                                    currentUser = UserConfig.getInstance(this.currentAccount).getCurrentUser();
                                } else {
                                    TLRPC.EncryptedChat encryptedChat = messagesController.getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(this.currentMessageObject.getDialogId())));
                                    if (encryptedChat == null) {
                                        return;
                                    } else {
                                        j = encryptedChat.user_id;
                                    }
                                }
                            } else if (DialogObject.isUserDialog(fromChatId) && (!this.currentMessageObject.messageOwner.post || (chat != null && chat.signature_profiles))) {
                                valueOf = Long.valueOf(fromChatId);
                                currentUser = messagesController.getUser(valueOf);
                            } else if (this.currentMessageObject.messageOwner.post && chat2 != null && !chat2.signature_profiles) {
                                this.currentChat = chat2;
                                return;
                            } else {
                                if (DialogObject.isChatDialog(fromChatId)) {
                                    this.currentChat = chat;
                                    return;
                                }
                                TLRPC.Message message = this.currentMessageObject.messageOwner;
                                if (!message.post) {
                                    return;
                                } else {
                                    peer = message.peer_id;
                                }
                            }
                        } else {
                            tL_user = new TLRPC.TL_user();
                            this.currentUser = tL_user;
                            str = messageFwdHeader.from_name;
                        }
                        tL_user.first_name = str;
                        return;
                    }
                    peer2 = messageFwdHeader.from_id;
                    j = peer2.user_id;
                }
                this.currentUser = currentUser;
                return;
            }
            j = DialogObject.getPeerDialogId(messageFwdHeader.from_id);
            if (j < 0) {
                j2 = -j;
                valueOf2 = Long.valueOf(j2);
                this.currentChat = messagesController.getChat(valueOf2);
            }
            valueOf = Long.valueOf(j);
            currentUser = messagesController.getUser(valueOf);
            this.currentUser = currentUser;
            return;
        }
        messagesController = MessagesController.getInstance(this.currentAccount);
        peer = messageFwdHeader.from_id;
        j2 = peer.channel_id;
        valueOf2 = Long.valueOf(j2);
        this.currentChat = messagesController.getChat(valueOf2);
    }

    private void updateFlagSecure() {
        if (this.flagSecure == null) {
            Activity findActivity = AndroidUtilities.findActivity(getContext());
            Window window = findActivity == null ? null : findActivity.getWindow();
            if (window != null) {
                FlagSecureReason flagSecureReason = new FlagSecureReason(window, new FlagSecureReason.FlagSecureCondition() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda6
                    @Override // org.telegram.messenger.FlagSecureReason.FlagSecureCondition
                    public final boolean run() {
                        boolean lambda$updateFlagSecure$9;
                        lambda$updateFlagSecure$9 = ChatMessageCell.this.lambda$updateFlagSecure$9();
                        return lambda$updateFlagSecure$9;
                    }
                });
                this.flagSecure = flagSecureReason;
                if (this.attachedToWindow) {
                    flagSecureReason.attach();
                }
            }
        }
        FlagSecureReason flagSecureReason2 = this.flagSecure;
        if (flagSecureReason2 != null) {
            flagSecureReason2.invalidate();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:33:0x00b3  */
    /* JADX WARN: Removed duplicated region for block: B:54:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updatePollAnimations(long j) {
        if (this.pollVoteInProgress) {
            this.voteRadOffset = (this.voteRadOffset + ((360 * j) / 2000.0f)) - (((int) (r0 / 360.0f)) * 360);
            float f = this.voteCurrentProgressTime + j;
            this.voteCurrentProgressTime = f;
            if (f >= 500.0f) {
                this.voteCurrentProgressTime = 500.0f;
            }
            if (this.voteRisingCircleLength) {
                this.voteCurrentCircleLength = (AndroidUtilities.accelerateInterpolator.getInterpolation(this.voteCurrentProgressTime / 500.0f) * 266.0f) + 4.0f;
            } else {
                this.voteCurrentCircleLength = 4.0f - ((this.firstCircleLength ? 360 : NotificationCenter.emojiPreviewThemesChanged) * (1.0f - AndroidUtilities.decelerateInterpolator.getInterpolation(this.voteCurrentProgressTime / 500.0f)));
            }
            if (this.voteCurrentProgressTime == 500.0f) {
                boolean z = this.voteRisingCircleLength;
                if (z) {
                    this.voteRadOffset += 270.0f;
                    this.voteCurrentCircleLength = -266.0f;
                }
                this.voteRisingCircleLength = !z;
                if (this.firstCircleLength) {
                    this.firstCircleLength = false;
                }
                this.voteCurrentProgressTime = 0.0f;
            }
            invalidate();
        }
        boolean z2 = this.hintButtonVisible;
        if (z2) {
            float f2 = this.hintButtonProgress;
            if (f2 < 1.0f) {
                float f3 = f2 + (j / 180.0f);
                this.hintButtonProgress = f3;
                if (f3 > 1.0f) {
                    this.hintButtonProgress = 1.0f;
                }
                invalidate();
                if (this.animatePollAnswer) {
                    return;
                }
                float f4 = this.pollAnimationProgressTime + j;
                this.pollAnimationProgressTime = f4;
                if (f4 >= 300.0f) {
                    this.pollAnimationProgressTime = 300.0f;
                }
                float interpolation = AndroidUtilities.decelerateInterpolator.getInterpolation(this.pollAnimationProgressTime / 300.0f);
                this.pollAnimationProgress = interpolation;
                if (interpolation >= 1.0f) {
                    this.pollAnimationProgress = 1.0f;
                    this.animatePollAnswer = false;
                    this.animatePollAnswerAlpha = false;
                    this.pollVoteInProgress = false;
                    if (this.pollUnvoteInProgress && this.animatePollAvatars) {
                        int i = 0;
                        while (true) {
                            ImageReceiver[] imageReceiverArr = this.pollAvatarImages;
                            if (i >= imageReceiverArr.length) {
                                break;
                            }
                            imageReceiverArr[i].setImageBitmap((Drawable) null);
                            this.pollAvatarImagesVisible[i] = false;
                            i++;
                        }
                    }
                    this.pollUnvoteInProgress = false;
                    int size = this.pollButtons.size();
                    for (int i2 = 0; i2 < size; i2++) {
                        ((PollButton) this.pollButtons.get(i2)).prevChosen = false;
                    }
                }
                invalidate();
                return;
            }
        }
        if (!z2) {
            float f5 = this.hintButtonProgress;
            if (f5 > 0.0f) {
                float f6 = f5 - (j / 180.0f);
                this.hintButtonProgress = f6;
                if (f6 < 0.0f) {
                    this.hintButtonProgress = 0.0f;
                }
                invalidate();
            }
        }
        if (this.animatePollAnswer) {
        }
    }

    private void updateRadialProgressBackground() {
        if (this.drawRadialCheckBackground) {
            return;
        }
        boolean z = true;
        boolean z2 = (this.isHighlighted || this.isPressed || isPressed()) && !(this.drawPhotoImage && this.photoImage.hasBitmapImage());
        this.radialProgress.setPressed(z2 || this.buttonPressed != 0, false);
        if (this.hasMiniProgress != 0) {
            this.radialProgress.setPressed(z2 || this.miniButtonPressed != 0, true);
        }
        RadialProgress2 radialProgress2 = this.videoRadialProgress;
        if (!z2 && this.videoButtonPressed == 0) {
            z = false;
        }
        radialProgress2.setPressed(z, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:12:0x0020, code lost:
    
        if ((r1 & 1) != 0) goto L13;
     */
    /* JADX WARN: Removed duplicated region for block: B:26:0x00f6  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0114  */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0134  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x010c  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x01b4  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x01ce  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateReactionLayoutPosition() {
        int i;
        float dp;
        ReactionsLayoutInBubble reactionsLayoutInBubble;
        int currentBackgroundLeft;
        int measuredWidth;
        int dp2;
        int i2;
        int i3;
        if (this.currentMessageObject.shouldDrawReactions()) {
            ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
            int i4 = 0;
            if (!reactionsLayoutInBubble2.isEmpty) {
                MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                if (groupedMessagePosition != null) {
                    int i5 = groupedMessagePosition.flags;
                    if ((i5 & 8) != 0) {
                    }
                }
                if (!reactionsLayoutInBubble2.isSmall) {
                    MessageObject messageObject = this.currentMessageObject;
                    if (messageObject.type != 19 && !messageObject.isAnimatedEmoji() && !this.currentMessageObject.isAnyKindOfSticker()) {
                        if (this.currentMessageObject.isOutOwner()) {
                            this.reactionsLayoutInBubble.x = getCurrentBackgroundLeft() + AndroidUtilities.dp(11.0f);
                        } else if (this.isRoundVideo) {
                            this.reactionsLayoutInBubble.x = getCurrentBackgroundLeft() + AndroidUtilities.dp(11.0f) + AndroidUtilities.dp(AndroidUtilities.lerp(0, !this.drawPinnedBottom ? 6 : 0, getVideoTranscriptionProgress()));
                            reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                            measuredWidth = reactionsLayoutInBubble.x;
                            dp2 = (int) ((1.0f - getVideoTranscriptionProgress()) * AndroidUtilities.dp(9.0f));
                        } else {
                            this.reactionsLayoutInBubble.x = getCurrentBackgroundLeft() + AndroidUtilities.dp((this.mediaBackground || !this.drawPinnedBottom) ? 17.0f : 11.0f);
                            if (this.mediaBackground) {
                                reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                                measuredWidth = reactionsLayoutInBubble.x;
                                dp2 = AndroidUtilities.dp(9.0f);
                            }
                        }
                        ReactionsLayoutInBubble reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
                        int backgroundDrawableBottom = getBackgroundDrawableBottom() - AndroidUtilities.dp(10.0f);
                        ReactionsLayoutInBubble reactionsLayoutInBubble4 = this.reactionsLayoutInBubble;
                        reactionsLayoutInBubble3.y = backgroundDrawableBottom - reactionsLayoutInBubble4.height;
                        int i6 = reactionsLayoutInBubble4.y;
                        if (this.drawCommentButton) {
                        }
                        reactionsLayoutInBubble4.y = i6 - i2;
                        if (this.hasNewLineForTime) {
                            this.reactionsLayoutInBubble.y -= AndroidUtilities.dp(16.0f);
                        }
                        MessageObject messageObject2 = this.currentMessageObject;
                        i3 = messageObject2.type;
                        if (i3 != 9) {
                            this.reactionsLayoutInBubble.y -= AndroidUtilities.dp(14.0f);
                        }
                        ReactionsLayoutInBubble reactionsLayoutInBubble5 = this.reactionsLayoutInBubble;
                        reactionsLayoutInBubble5.y += reactionsLayoutInBubble5.positionOffsetY;
                    } else if (this.currentMessageObject.isOutOwner()) {
                        reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                        measuredWidth = getMeasuredWidth() - this.reactionsLayoutInBubble.width;
                        dp2 = AndroidUtilities.dp(16.0f);
                    } else {
                        reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                        currentBackgroundLeft = getCurrentBackgroundLeft();
                        reactionsLayoutInBubble.x = currentBackgroundLeft;
                        ReactionsLayoutInBubble reactionsLayoutInBubble32 = this.reactionsLayoutInBubble;
                        int backgroundDrawableBottom2 = getBackgroundDrawableBottom() - AndroidUtilities.dp(10.0f);
                        ReactionsLayoutInBubble reactionsLayoutInBubble42 = this.reactionsLayoutInBubble;
                        reactionsLayoutInBubble32.y = backgroundDrawableBottom2 - reactionsLayoutInBubble42.height;
                        int i62 = reactionsLayoutInBubble42.y;
                        if (this.drawCommentButton) {
                            i2 = AndroidUtilities.dp((this.currentMessageObject.type == 29 && hasCaptionLayout()) ? 28.0f : 43.0f);
                        } else {
                            i2 = 0;
                        }
                        reactionsLayoutInBubble42.y = i62 - i2;
                        if (this.hasNewLineForTime && (!this.drawForwardedName || !this.hasLinkPreview || this.documentAttachType != 3)) {
                            this.reactionsLayoutInBubble.y -= AndroidUtilities.dp(16.0f);
                        }
                        MessageObject messageObject22 = this.currentMessageObject;
                        i3 = messageObject22.type;
                        if (i3 != 9 && this.captionLayout != null && ((i3 != 2 && (!messageObject22.isOut() || !this.drawForwardedName || this.drawPhotoImage)) || ((this.currentPosition != null && this.currentMessagesGroup != null) || this.currentMessageObject.type == 29))) {
                            this.reactionsLayoutInBubble.y -= AndroidUtilities.dp(14.0f);
                        }
                        ReactionsLayoutInBubble reactionsLayoutInBubble52 = this.reactionsLayoutInBubble;
                        reactionsLayoutInBubble52.y += reactionsLayoutInBubble52.positionOffsetY;
                    }
                    currentBackgroundLeft = measuredWidth - dp2;
                    reactionsLayoutInBubble.x = currentBackgroundLeft;
                    ReactionsLayoutInBubble reactionsLayoutInBubble322 = this.reactionsLayoutInBubble;
                    int backgroundDrawableBottom22 = getBackgroundDrawableBottom() - AndroidUtilities.dp(10.0f);
                    ReactionsLayoutInBubble reactionsLayoutInBubble422 = this.reactionsLayoutInBubble;
                    reactionsLayoutInBubble322.y = backgroundDrawableBottom22 - reactionsLayoutInBubble422.height;
                    int i622 = reactionsLayoutInBubble422.y;
                    if (this.drawCommentButton) {
                    }
                    reactionsLayoutInBubble422.y = i622 - i2;
                    if (this.hasNewLineForTime) {
                    }
                    MessageObject messageObject222 = this.currentMessageObject;
                    i3 = messageObject222.type;
                    if (i3 != 9) {
                    }
                    ReactionsLayoutInBubble reactionsLayoutInBubble522 = this.reactionsLayoutInBubble;
                    reactionsLayoutInBubble522.y += reactionsLayoutInBubble522.positionOffsetY;
                }
            }
            ReactionsLayoutInBubble reactionsLayoutInBubble6 = this.reactionsLayoutInBubble;
            if (!reactionsLayoutInBubble6.isSmall || reactionsLayoutInBubble6.isEmpty) {
                return;
            }
            if (shouldDrawTimeOnMedia()) {
                if (this.drawCommentButton) {
                    i4 = AndroidUtilities.dp(41.3f);
                }
            } else {
                if (this.currentMessageObject.isSponsored()) {
                    i = -AndroidUtilities.dp(48.0f);
                    if (this.hasNewLineForTime) {
                        i -= AndroidUtilities.dp(16.0f);
                    }
                    ReactionsLayoutInBubble reactionsLayoutInBubble7 = this.reactionsLayoutInBubble;
                    if (shouldDrawTimeOnMedia()) {
                        dp = ((this.layoutHeight - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 7.5f : 6.5f)) - this.timeLayout.getHeight()) + i;
                    } else {
                        dp = ((getPhotoBottom() + this.additionalTimeOffsetY) - AndroidUtilities.dp(7.3f)) - this.timeLayout.getHeight();
                    }
                    reactionsLayoutInBubble7.y = (int) dp;
                    this.reactionsLayoutInBubble.y = (int) (r0.y + ((this.timeLayout.getHeight() / 2.0f) - AndroidUtilities.dp(7.0f)));
                    this.reactionsLayoutInBubble.x = this.timeX;
                }
                if (this.drawCommentButton) {
                    i4 = AndroidUtilities.dp(43.0f);
                }
            }
            i = -i4;
            ReactionsLayoutInBubble reactionsLayoutInBubble72 = this.reactionsLayoutInBubble;
            if (shouldDrawTimeOnMedia()) {
            }
            reactionsLayoutInBubble72.y = (int) dp;
            this.reactionsLayoutInBubble.y = (int) (r0.y + ((this.timeLayout.getHeight() / 2.0f) - AndroidUtilities.dp(7.0f)));
            this.reactionsLayoutInBubble.x = this.timeX;
        }
    }

    private void updateSecretTimeText(MessageObject messageObject) {
        CharSequence secretTimeString;
        if (messageObject == null || !messageObject.needDrawBluredPreview() || (secretTimeString = messageObject.getSecretTimeString()) == null) {
            return;
        }
        if (secretTimeString instanceof String) {
            int ceil = (int) Math.ceil(Theme.chat_infoPaint.measureText((String) secretTimeString));
            this.infoWidth = ceil;
            this.infoLayout = new StaticLayout(TextUtils.ellipsize(secretTimeString, Theme.chat_infoPaint, ceil, TextUtils.TruncateAt.END), Theme.chat_infoPaint, this.infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
        } else {
            StaticLayout staticLayout = new StaticLayout(secretTimeString, Theme.chat_infoBoldPaint, getMeasuredWidth() > 0 ? getMeasuredWidth() : 9999, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            this.infoLayout = staticLayout;
            this.infoWidth = staticLayout.getLineCount() > 0 ? (int) this.infoLayout.getLineWidth(0) : 0;
        }
        invalidate();
    }

    /* JADX WARN: Code restructure failed: missing block: B:47:0x0107, code lost:
    
        if (r17.hasLinkPreview != false) goto L86;
     */
    /* JADX WARN: Code restructure failed: missing block: B:51:0x01a0, code lost:
    
        r1 = 20;
     */
    /* JADX WARN: Code restructure failed: missing block: B:83:0x019e, code lost:
    
        if (r17.hasLinkPreview != false) goto L86;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateSeekBarWaveformWidth(Canvas canvas) {
        SeekBar seekBar;
        int useTranscribeButtonProgress;
        int i;
        int i2;
        int dp;
        int dp2;
        int dp3;
        int dp4;
        int i3 = 0;
        this.seekBarWaveformTranslateX = 0;
        this.seekBarTranslateX = 0;
        int i4 = -AndroidUtilities.dp((this.hasLinkPreview ? 10 : 0) + 92);
        TransitionParams transitionParams = this.transitionParams;
        if (transitionParams.animateBackgroundBoundsInner && ((i2 = this.documentAttachType) == 3 || i2 == 7)) {
            int i5 = this.backgroundWidth;
            float f = i5;
            int i6 = (int) ((f - transitionParams.toDeltaLeft) + transitionParams.toDeltaRight);
            int i7 = (int) ((f - transitionParams.deltaLeft) + transitionParams.deltaRight);
            if (this.isRoundVideo && !this.drawBackground) {
                i7 = (int) (i7 + (getVideoTranscriptionProgress() * AndroidUtilities.dp(8.0f)));
                i6 += AndroidUtilities.dp(8.0f);
            }
            TransitionParams transitionParams2 = this.transitionParams;
            if (transitionParams2.toDeltaLeft == 0.0f && transitionParams2.toDeltaRight == 0.0f) {
                i6 = i7;
            }
            SeekBarWaveform seekBarWaveform = this.seekBarWaveform;
            if (seekBarWaveform != null) {
                if (transitionParams2.animateUseTranscribeButton) {
                    dp = ((i7 + i4) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress()))) - AndroidUtilities.dp(this.hasLinkPreview ? 10.0f : 0.0f);
                    dp2 = AndroidUtilities.dp(30.0f);
                    dp3 = i5 + i4 + (!this.useTranscribeButton ? -AndroidUtilities.dp(34.0f) : 0);
                    dp4 = i6 + i4 + (this.useTranscribeButton ? -AndroidUtilities.dp(34.0f) : 0);
                } else {
                    dp = ((i7 + i4) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress()))) - AndroidUtilities.dp(this.hasLinkPreview ? 10.0f : 0.0f);
                    dp2 = AndroidUtilities.dp(30.0f);
                    dp3 = (i5 + i4) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress()));
                    dp4 = (i6 + i4) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress()));
                }
                seekBarWaveform.setSize(dp, dp2, dp3, dp4);
            }
            seekBar = this.seekBar;
            if (seekBar == null) {
                return;
            }
            useTranscribeButtonProgress = i7 - ((int) (getUseTranscribeButtonProgress() * AndroidUtilities.dp(34.0f)));
            i = this.documentAttachType == 5 ? 65 : 72;
        } else {
            SeekBarWaveform seekBarWaveform2 = this.seekBarWaveform;
            if (seekBarWaveform2 != null) {
                if (transitionParams.animateUseTranscribeButton) {
                    seekBarWaveform2.setSize(((this.backgroundWidth + i4) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress()))) - AndroidUtilities.dp(this.hasLinkPreview ? 10.0f : 0.0f), AndroidUtilities.dp(30.0f), ((this.backgroundWidth + i4) + (!this.useTranscribeButton ? -AndroidUtilities.dp(34.0f) : 0)) - AndroidUtilities.dp(this.hasLinkPreview ? 10.0f : 0.0f), this.backgroundWidth + i4 + (this.useTranscribeButton ? -AndroidUtilities.dp(34.0f) : 0));
                } else {
                    seekBarWaveform2.setSize(((this.backgroundWidth + i4) - ((int) (AndroidUtilities.dp(34.0f) * getUseTranscribeButtonProgress()))) - AndroidUtilities.dp(this.hasLinkPreview ? 10.0f : 0.0f), AndroidUtilities.dp(30.0f));
                }
            }
            seekBar = this.seekBar;
            if (seekBar == null) {
                return;
            }
            useTranscribeButtonProgress = this.backgroundWidth - ((int) (getUseTranscribeButtonProgress() * AndroidUtilities.dp(34.0f)));
            i = this.documentAttachType == 5 ? 65 : 72;
        }
        seekBar.setSize(useTranscribeButtonProgress - AndroidUtilities.dp(i + i3), AndroidUtilities.dp(30.0f));
    }

    private void updateSelectionTextPosition() {
        TextSelectionHelper.ChatListTextSelectionHelper textSelectionHelper;
        int i;
        int i2;
        int i3;
        int dp;
        if (getDelegate() == null || getDelegate().getTextSelectionHelper() == null || !getDelegate().getTextSelectionHelper().isSelected(this.currentMessageObject)) {
            return;
        }
        int textSelectionType = getDelegate().getTextSelectionHelper().getTextSelectionType(this);
        if (textSelectionType == TextSelectionHelper.ChatListTextSelectionHelper.TYPE_DESCRIPTION) {
            getDelegate().getTextSelectionHelper().updateTextPosition((this.hasGamePreview ? this.unmovedTextX - AndroidUtilities.dp(10.0f) : this.unmovedTextX + AndroidUtilities.dp(1.0f)) + AndroidUtilities.dp(10.0f) + this.descriptionX, this.descriptionY);
            return;
        }
        if (textSelectionType == TextSelectionHelper.ChatListTextSelectionHelper.TYPE_CAPTION) {
            updateCaptionLayout();
            textSelectionHelper = getDelegate().getTextSelectionHelper();
            i = (int) this.captionX;
            i2 = (int) this.captionY;
        } else {
            if (textSelectionType == TextSelectionHelper.ChatListTextSelectionHelper.TYPE_FACTCHECK) {
                MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
                if (groupedMessages == null || groupedMessages.isDocuments) {
                    float f = 12.0f;
                    if (this.currentMessageObject.isOutOwner()) {
                        dp = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                        if (this.currentMessageObject.type == 19) {
                            dp -= Math.max(0, ((Math.max(this.replyNameWidth, this.replyTextWidth) + dp) + AndroidUtilities.dp(14.0f)) - AndroidUtilities.displaySize.x);
                        }
                    } else {
                        if (this.mediaBackground) {
                            i3 = this.backgroundDrawableLeft;
                        } else {
                            i3 = this.backgroundDrawableLeft;
                            if (!this.drawPinnedBottom) {
                                f = 18.0f;
                            }
                        }
                        dp = i3 + AndroidUtilities.dp(f) + getExtraTextX();
                    }
                } else {
                    dp = (int) this.captionX;
                }
                int dp2 = ((int) (dp + this.transitionParams.deltaLeft)) - AndroidUtilities.dp(1.33f);
                int i4 = this.factCheckY;
                updateCaptionLayout();
                getDelegate().getTextSelectionHelper().updateTextPosition((dp2 + AndroidUtilities.dp(10.0f)) - this.factCheckTextLayoutLeft, i4 + AndroidUtilities.dp(22.0f));
                return;
            }
            textSelectionHelper = getDelegate().getTextSelectionHelper();
            i = this.textX;
            i2 = this.textY;
        }
        textSelectionHelper.updateTextPosition(i, i2);
    }

    private void updateSpoilersVisiblePart(int i, int i2) {
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
        if (textLayoutBlocks != null && (arrayList = textLayoutBlocks.textLayoutBlocks) != null) {
            Iterator<MessageObject.TextLayoutBlock> it = arrayList.iterator();
            while (it.hasNext()) {
                MessageObject.TextLayoutBlock next = it.next();
                Iterator<SpoilerEffect> it2 = next.spoilers.iterator();
                while (it2.hasNext()) {
                    it2.next().setVisibleBounds(0.0f, (i - next.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams)) - this.captionX, getWidth(), (i2 - next.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams)) - this.captionY);
                }
            }
        }
        StaticLayout staticLayout = this.replyTextLayout;
        if (staticLayout != null) {
            float height = (-this.replyStartY) - staticLayout.getHeight();
            Iterator it3 = this.replySpoilers.iterator();
            while (it3.hasNext()) {
                ((SpoilerEffect) it3.next()).setVisibleBounds(0.0f, i + height, getWidth(), i2 + height);
            }
        }
        if (getMessageObject() == null || getMessageObject().textLayoutBlocks == null) {
            return;
        }
        Iterator<MessageObject.TextLayoutBlock> it4 = getMessageObject().textLayoutBlocks.iterator();
        while (it4.hasNext()) {
            MessageObject.TextLayoutBlock next2 = it4.next();
            Iterator<SpoilerEffect> it5 = next2.spoilers.iterator();
            while (it5.hasNext()) {
                it5.next().setVisibleBounds(0.0f, (i - next2.textYOffset(getMessageObject().textLayoutBlocks, this.transitionParams)) - this.textY, getWidth(), (i2 - next2.textYOffset(getMessageObject().textLayoutBlocks, this.transitionParams)) - this.textY);
            }
        }
    }

    private void updateTranslation() {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        setTranslationX(this.slidingOffsetX + this.animationOffsetX + ((!messageObject.isOutOwner() || this.currentMessageObject.hasWideCode) ? this.checkBoxTranslation : 0));
    }

    /* JADX WARN: Code restructure failed: missing block: B:51:0x00bf, code lost:
    
        if (r3.voiceTranscriptionForce != false) goto L55;
     */
    /* JADX WARN: Code restructure failed: missing block: B:53:0x00c9, code lost:
    
        if (r0.getDuration() >= 60.0d) goto L55;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void updateWaveform() {
        TLRPC.Message message;
        TLRPC.MessageMedia messageMedia;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null) {
            int i = this.documentAttachType;
            if (i == 3 || i == 7) {
                byte[] waveform = messageObject.getWaveform();
                boolean z = false;
                this.useSeekBarWaveform = waveform != null;
                SeekBarWaveform seekBarWaveform = this.seekBarWaveform;
                if (seekBarWaveform != null) {
                    seekBarWaveform.setWaveform(waveform);
                }
                MessageObject messageObject2 = this.currentMessageObject;
                if (messageObject2 != null && !messageObject2.isQuickReply()) {
                    MessageObject messageObject3 = this.currentMessageObject;
                    if (!messageObject3.isRepostPreview && (!messageObject3.isOutOwner() || this.currentMessageObject.isSent())) {
                        if (!UserConfig.getInstance(this.currentAccount).isPremium() && !TranscribeButton.isFreeTranscribeInChat(this.currentMessageObject)) {
                            if (MessagesController.getInstance(this.currentAccount).transcribeAudioTrialWeeklyNumber > 0 && this.currentMessageObject.getDuration() <= MessagesController.getInstance(this.currentAccount).transcribeAudioTrialDurationMax) {
                                TLRPC.Message message2 = this.currentMessageObject.messageOwner;
                                if (message2 == null || (TextUtils.isEmpty(message2.voiceTranscription) && !this.currentMessageObject.messageOwner.voiceTranscriptionFinal)) {
                                    TranscribeButton.canTranscribeTrial(this.currentMessageObject);
                                }
                            } else if (MessagesController.getInstance(this.currentAccount).transcribeAudioTrialWeeklyNumber <= 0) {
                                if (!MessagesController.getInstance(this.currentAccount).premiumFeaturesBlocked()) {
                                    if (!MessagesController.getInstance(this.currentAccount).didPressTranscribeButtonEnough()) {
                                        if (!this.currentMessageObject.isOutOwner()) {
                                            MessageObject messageObject4 = this.currentMessageObject;
                                            TLRPC.Message message3 = messageObject4.messageOwner;
                                            if (message3 != null) {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (((this.currentMessageObject.isVoice() && this.useSeekBarWaveform) || this.currentMessageObject.isRoundVideo()) && (message = this.currentMessageObject.messageOwner) != null && !(MessageObject.getMedia(message) instanceof TLRPC.TL_messageMediaWebPage) && ((messageMedia = this.currentMessageObject.messageOwner.media) == null || messageMedia.ttl_seconds == 0)) {
                            z = true;
                        }
                    }
                }
                this.useTranscribeButton = z;
                updateSeekBarWaveformWidth(null);
            }
        }
    }

    public void applyServiceShaderMatrix() {
        applyServiceShaderMatrix(getMeasuredWidth(), this.backgroundHeight, getX(), this.viewTop);
    }

    public boolean areTags() {
        TLRPC.Message message;
        TLRPC.TL_messageReactions tL_messageReactions;
        MessageObject primaryMessageObject = getPrimaryMessageObject();
        if (primaryMessageObject == null || (message = primaryMessageObject.messageOwner) == null || (tL_messageReactions = message.reactions) == null) {
            return false;
        }
        return tL_messageReactions.reactions_as_tags;
    }

    public int captionFlag() {
        return this.captionAbove ? 4 : 8;
    }

    public boolean checkLoadCaughtPremiumFloodWait() {
        return FileLoader.getInstance(this.currentAccount).checkLoadCaughtPremiumFloodWait(getFilename());
    }

    /* JADX WARN: Code restructure failed: missing block: B:19:0x002b, code lost:
    
        if ((r0 & (r5.isOutOwner() ? 1 : 2)) != 0) goto L23;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    protected boolean checkNeedDrawShareButton(MessageObject messageObject) {
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        boolean z;
        MessageObject messageObject2 = this.currentMessageObject;
        if ((messageObject2.deleted && !messageObject2.deletedByThanos) || messageObject2.isSponsored()) {
            return false;
        }
        if (this.currentMessagesGroup != null && (groupedMessagePosition = this.currentPosition) != null) {
            int i = groupedMessagePosition.flags;
            if ((i & 8) != 0) {
                z = true;
            }
            z = false;
            if (!this.currentMessagesGroup.isDocuments && !z) {
                return false;
            }
        }
        return messageObject.needDrawShareButton();
    }

    public boolean checkSpoilersMotionEvent(MotionEvent motionEvent, int i) {
        int i2;
        MessageObject.GroupedMessages groupedMessages;
        if (i <= 15 && getParent() != null) {
            if (this.currentMessageObject.hasValidGroupId() && (groupedMessages = this.currentMessagesGroup) != null && !groupedMessages.isDocuments) {
                ViewGroup viewGroup = (ViewGroup) getParent();
                for (int i3 = 0; i3 < viewGroup.getChildCount(); i3++) {
                    View childAt = viewGroup.getChildAt(i3);
                    if (childAt instanceof ChatMessageCell) {
                        ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                        MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                        MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                        if (currentMessagesGroup != null && currentMessagesGroup.groupId == this.currentMessagesGroup.groupId) {
                            int i4 = currentPosition.flags;
                            if ((i4 & 8) != 0 && (i4 & 1) != 0 && chatMessageCell != this) {
                                motionEvent.offsetLocation(getLeft() - chatMessageCell.getLeft(), getTop() - chatMessageCell.getTop());
                                boolean checkSpoilersMotionEvent = chatMessageCell.checkSpoilersMotionEvent(motionEvent, i + 1);
                                motionEvent.offsetLocation(-(getLeft() - chatMessageCell.getLeft()), -(getTop() - chatMessageCell.getTop()));
                                return checkSpoilersMotionEvent;
                            }
                        }
                    }
                }
            }
            if (this.isSpoilerRevealing) {
                return false;
            }
            int x = (int) motionEvent.getX();
            int y = (int) motionEvent.getY();
            int actionMasked = motionEvent.getActionMasked();
            if (actionMasked == 0) {
                int i5 = this.textX;
                if (x >= i5 && y >= (i2 = this.textY)) {
                    MessageObject messageObject = this.currentMessageObject;
                    if (x <= i5 + messageObject.textWidth && y <= i2 + messageObject.textHeight(this.transitionParams)) {
                        ArrayList<MessageObject.TextLayoutBlock> arrayList = this.currentMessageObject.textLayoutBlocks;
                        for (int i6 = 0; i6 < arrayList.size() && arrayList.get(i6).textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams) <= y; i6++) {
                            MessageObject.TextLayoutBlock textLayoutBlock = arrayList.get(i6);
                            int i7 = textLayoutBlock.isRtl() ? (int) this.currentMessageObject.textXOffset : 0;
                            for (SpoilerEffect spoilerEffect : textLayoutBlock.spoilers) {
                                if (spoilerEffect.getBounds().contains((x - this.textX) + i7, (int) ((y - this.textY) - textLayoutBlock.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams)))) {
                                    this.spoilerPressed = spoilerEffect;
                                    return true;
                                }
                            }
                        }
                    }
                }
                if (this.captionLayout != null) {
                    float f = x;
                    float f2 = this.captionX;
                    if (f >= f2) {
                        float f3 = y;
                        float f4 = this.captionY;
                        if (f3 >= f4 && f <= f2 + r14.textWidth && f3 <= f4 + r14.textHeight(this.transitionParams)) {
                            ArrayList<MessageObject.TextLayoutBlock> arrayList2 = this.captionLayout.textLayoutBlocks;
                            for (int i8 = 0; i8 < arrayList2.size() && arrayList2.get(i8).textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams) <= f3; i8++) {
                                MessageObject.TextLayoutBlock textLayoutBlock2 = arrayList2.get(i8);
                                int i9 = textLayoutBlock2.isRtl() ? (int) this.captionLayout.textXOffset : 0;
                                for (SpoilerEffect spoilerEffect2 : textLayoutBlock2.spoilers) {
                                    if (spoilerEffect2.getBounds().contains((int) ((f - this.captionX) + i9), (int) ((f3 - this.captionY) - textLayoutBlock2.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams)))) {
                                        this.spoilerPressed = spoilerEffect2;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            } else if (actionMasked == 1 && this.spoilerPressed != null) {
                playSoundEffect(0);
                this.sPath.rewind();
                MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
                if (textLayoutBlocks != null) {
                    Iterator<MessageObject.TextLayoutBlock> it = textLayoutBlocks.textLayoutBlocks.iterator();
                    while (it.hasNext()) {
                        MessageObject.TextLayoutBlock next = it.next();
                        Iterator<SpoilerEffect> it2 = next.spoilers.iterator();
                        while (it2.hasNext()) {
                            Rect bounds = it2.next().getBounds();
                            this.sPath.addRect(bounds.left, bounds.top + next.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams), bounds.right, next.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams) + bounds.bottom, Path.Direction.CW);
                        }
                    }
                } else {
                    Iterator<MessageObject.TextLayoutBlock> it3 = this.currentMessageObject.textLayoutBlocks.iterator();
                    while (it3.hasNext()) {
                        MessageObject.TextLayoutBlock next2 = it3.next();
                        Iterator<SpoilerEffect> it4 = next2.spoilers.iterator();
                        while (it4.hasNext()) {
                            Rect bounds2 = it4.next().getBounds();
                            this.sPath.addRect(bounds2.left, bounds2.top + next2.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams), bounds2.right, next2.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams) + bounds2.bottom, Path.Direction.CW);
                        }
                    }
                }
                this.sPath.computeBounds(this.rect, false);
                float sqrt = (float) Math.sqrt(Math.pow(this.rect.width(), 2.0d) + Math.pow(this.rect.height(), 2.0d));
                this.isSpoilerRevealing = true;
                this.spoilerPressed.setOnRippleEndCallback(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda8
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatMessageCell.this.lambda$checkSpoilersMotionEvent$1();
                    }
                });
                MessageObject.TextLayoutBlocks textLayoutBlocks2 = this.captionLayout;
                if (textLayoutBlocks2 != null) {
                    Iterator<MessageObject.TextLayoutBlock> it5 = textLayoutBlocks2.textLayoutBlocks.iterator();
                    while (it5.hasNext()) {
                        MessageObject.TextLayoutBlock next3 = it5.next();
                        int i10 = next3.isRtl() ? (int) this.captionLayout.textXOffset : 0;
                        Iterator<SpoilerEffect> it6 = next3.spoilers.iterator();
                        while (it6.hasNext()) {
                            it6.next().startRipple((x - this.captionX) + i10, (y - next3.textYOffset(this.captionLayout.textLayoutBlocks, this.transitionParams)) - this.captionY, sqrt);
                        }
                    }
                } else {
                    ArrayList<MessageObject.TextLayoutBlock> arrayList3 = this.currentMessageObject.textLayoutBlocks;
                    if (arrayList3 != null) {
                        Iterator<MessageObject.TextLayoutBlock> it7 = arrayList3.iterator();
                        while (it7.hasNext()) {
                            MessageObject.TextLayoutBlock next4 = it7.next();
                            int i11 = next4.isRtl() ? (int) this.currentMessageObject.textXOffset : 0;
                            Iterator<SpoilerEffect> it8 = next4.spoilers.iterator();
                            while (it8.hasNext()) {
                                it8.next().startRipple((x - this.textX) + i11, (y - next4.textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams)) - this.textY, sqrt);
                            }
                        }
                    }
                }
                if (getParent() instanceof RecyclerListView) {
                    ViewGroup viewGroup2 = (ViewGroup) getParent();
                    for (int i12 = 0; i12 < viewGroup2.getChildCount(); i12++) {
                        View childAt2 = viewGroup2.getChildAt(i12);
                        if (childAt2 instanceof ChatMessageCell) {
                            final ChatMessageCell chatMessageCell2 = (ChatMessageCell) childAt2;
                            if (chatMessageCell2.getMessageObject() != null && chatMessageCell2.getMessageObject().getReplyMsgId() == getMessageObject().getId() && !chatMessageCell2.replySpoilers.isEmpty()) {
                                ((SpoilerEffect) chatMessageCell2.replySpoilers.get(0)).setOnRippleEndCallback(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda9
                                    @Override // java.lang.Runnable
                                    public final void run() {
                                        ChatMessageCell.this.lambda$checkSpoilersMotionEvent$3(chatMessageCell2);
                                    }
                                });
                                Iterator it9 = chatMessageCell2.replySpoilers.iterator();
                                while (it9.hasNext()) {
                                    ((SpoilerEffect) it9.next()).startRipple(r4.getBounds().centerX(), r4.getBounds().centerY(), sqrt);
                                }
                            }
                        }
                    }
                }
                this.spoilerPressed = null;
                return true;
            }
        }
        return false;
    }

    public boolean checkUnreadReactions(float f, int i) {
        if (!this.reactionsLayoutInBubble.hasUnreadReactions) {
            return false;
        }
        float y = getY();
        float f2 = y + r2.y;
        return f2 > f && (f2 + ((float) this.reactionsLayoutInBubble.height)) - ((float) AndroidUtilities.dp(16.0f)) < ((float) i);
    }

    public boolean checkUploadCaughtPremiumFloodWait() {
        return FileLoader.getInstance(this.currentAccount).checkUploadCaughtPremiumFloodWait(getFilename());
    }

    /* JADX WARN: Code restructure failed: missing block: B:22:0x004e, code lost:
    
        if (r4 != false) goto L9;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void checkVideoPlayback(boolean z, Bitmap bitmap) {
        if (this.currentMessageObject.isVideo()) {
            if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                this.photoImage.setAllowStartAnimation(false);
                this.photoImage.stopAnimation();
                return;
            } else {
                this.photoImage.setAllowStartAnimation(true);
                this.photoImage.startAnimation();
                return;
            }
        }
        if (z) {
            MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
            z = playingMessageObject == null || !playingMessageObject.isRoundVideo();
        }
        this.photoImage.setAllowStartAnimation(z);
        if (bitmap != null) {
            this.photoImage.startCrossfadeFromStaticThumb(bitmap);
        }
    }

    public int computeHeight(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, boolean z) {
        this.photoImage.setIgnoreImageSet(true);
        this.avatarImage.setIgnoreImageSet(true);
        this.replyImageReceiver.setIgnoreImageSet(true);
        this.locationImageReceiver.setIgnoreImageSet(true);
        if (groupedMessages == null || groupedMessages.messages.size() == 1) {
            setMessageContent(messageObject, groupedMessages, false, false);
            this.photoImage.setIgnoreImageSet(false);
            this.avatarImage.setIgnoreImageSet(false);
            this.replyImageReceiver.setIgnoreImageSet(false);
            this.locationImageReceiver.setIgnoreImageSet(false);
            updateCaptionLayout();
            return this.totalHeight + this.keyboardHeight;
        }
        if (groupedMessages.messages.size() != groupedMessages.positions.size()) {
            groupedMessages.calculate();
        }
        this.computedGroupCaptionY = 0;
        int i = 0;
        for (int i2 = 0; i2 < groupedMessages.messages.size(); i2++) {
            MessageObject messageObject2 = groupedMessages.messages.get(i2);
            MessageObject.GroupedMessagePosition position = groupedMessages.getPosition(messageObject2);
            if (position != null && (position.flags & 1) != 0) {
                setMessageContent(messageObject2, groupedMessages, false, false);
                if (z && !TextUtils.isEmpty(this.currentCaption)) {
                    updateCaptionLayout();
                    this.computedGroupCaptionY = (int) (i + this.captionY);
                    this.computedCaptionLayout = this.captionLayout;
                }
                i += this.totalHeight + this.keyboardHeight;
            }
        }
        return i;
    }

    @Override // android.view.View
    public void computeScroll() {
        super.computeScroll();
        ChannelRecommendationsCell channelRecommendationsCell = this.channelRecommendationsCell;
        if (channelRecommendationsCell != null) {
            channelRecommendationsCell.computeScroll();
        }
    }

    public int computeWidth(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages) {
        this.photoImage.setIgnoreImageSet(true);
        this.avatarImage.setIgnoreImageSet(true);
        this.replyImageReceiver.setIgnoreImageSet(true);
        this.locationImageReceiver.setIgnoreImageSet(true);
        if (groupedMessages == null || groupedMessages.messages.size() == 1) {
            setMessageContent(messageObject, groupedMessages, false, false);
            this.photoImage.setIgnoreImageSet(false);
            this.avatarImage.setIgnoreImageSet(false);
            this.replyImageReceiver.setIgnoreImageSet(false);
            this.locationImageReceiver.setIgnoreImageSet(false);
            updateCaptionLayout();
            return this.backgroundWidth;
        }
        if (groupedMessages.messages.size() != groupedMessages.positions.size()) {
            groupedMessages.calculate();
        }
        this.computedGroupCaptionY = 0;
        int i = 0;
        for (int i2 = 0; i2 < groupedMessages.messages.size(); i2++) {
            MessageObject messageObject2 = groupedMessages.messages.get(i2);
            MessageObject.GroupedMessagePosition position = groupedMessages.getPosition(messageObject2);
            if (position != null && (position.flags & 4) != 0) {
                setMessageContent(messageObject2, groupedMessages, false, false);
                i += this.backgroundWidth;
            }
        }
        return i;
    }

    public void copySpoilerEffect2AttachIndexFrom(ChatMessageCell chatMessageCell) {
        SpoilerEffect2 spoilerEffect2;
        if (chatMessageCell == null || (spoilerEffect2 = chatMessageCell.mediaSpoilerEffect2) == null) {
            return;
        }
        int attachIndex = spoilerEffect2.getAttachIndex(chatMessageCell);
        this.mediaSpoilerEffect2Index = Integer.valueOf(attachIndex);
        SpoilerEffect2 spoilerEffect22 = this.mediaSpoilerEffect2;
        if (spoilerEffect22 != null) {
            spoilerEffect22.reassignAttach(this, attachIndex);
        }
    }

    public void copyVisiblePartTo(ChatMessageCell chatMessageCell) {
        if (chatMessageCell == null) {
            return;
        }
        chatMessageCell.setVisiblePart(this.childPosition, this.visibleHeight, this.visibleParent, this.visibleParentOffset, this.visibleTop, this.parentWidth, this.parentHeight, this.blurredViewTopOffset, this.blurredViewBottomOffset);
    }

    /* JADX WARN: Code restructure failed: missing block: B:21:0x0048, code lost:
    
        r2 = org.telegram.ui.ActionBar.Theme.key_chat_outPreviewInstantText;
     */
    /* JADX WARN: Code restructure failed: missing block: B:37:0x0046, code lost:
    
        if (r7.currentMessageObject.isOutOwner() != false) goto L27;
     */
    /* JADX WARN: Code restructure failed: missing block: B:8:0x0017, code lost:
    
        if (r7.currentMessageObject.isOutOwner() != false) goto L27;
     */
    /* JADX WARN: Code restructure failed: missing block: B:9:0x004b, code lost:
    
        r2 = org.telegram.ui.ActionBar.Theme.key_chat_inPreviewInstantText;
     */
    /* JADX WARN: Removed duplicated region for block: B:13:0x005a  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x009a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void createSelectorDrawable(final int i) {
        ReplyMessageLine replyMessageLine;
        int color;
        int i2;
        Drawable drawable;
        if (Build.VERSION.SDK_INT < 21) {
            return;
        }
        if (!this.currentMessageObject.isUnsupported()) {
            if (i == 0 && this.psaHintPressed) {
                i2 = this.currentMessageObject.isOutOwner() ? Theme.key_chat_outViews : Theme.key_chat_inViews;
            } else if ((i == 0 && (replyMessageLine = this.linkLine) != null) || (i == 0 && (replyMessageLine = this.contactLine) != null)) {
                color = replyMessageLine.getColor();
                drawable = this.selectorDrawable[i];
                if (drawable != null) {
                    this.selectorMaskDrawable[i] = new MaskDrawable() { // from class: org.telegram.ui.Cells.ChatMessageCell.6
                        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                        {
                            super();
                        }

                        @Override // org.telegram.ui.Cells.ChatMessageCell.MaskDrawable
                        public void updatePath() {
                            Rect bounds = getBounds();
                            RectF rectF = this.rect;
                            int i3 = bounds.left;
                            this.pathX = i3;
                            int i4 = bounds.top;
                            this.pathY = i4;
                            rectF.set(i3, i4, bounds.right, bounds.bottom);
                            this.path.rewind();
                            if (ChatMessageCell.this.selectorDrawableMaskType[i] == 3 || ChatMessageCell.this.selectorDrawableMaskType[i] == 4) {
                                this.path.addCircle(this.rect.centerX(), this.rect.centerY(), AndroidUtilities.dp(ChatMessageCell.this.selectorDrawableMaskType[i] == 3 ? 16.0f : 20.0f), Path.Direction.CW);
                                return;
                            }
                            if (ChatMessageCell.this.selectorDrawableMaskType[i] != 2) {
                                float dp = ChatMessageCell.this.selectorDrawableMaskType[i] == 0 ? AndroidUtilities.dp(6.0f) : 0.0f;
                                this.path.addRoundRect(this.rect, dp, dp, Path.Direction.CW);
                                return;
                            }
                            boolean z = ChatMessageCell.this.currentMessageObject != null && ChatMessageCell.this.currentMessageObject.isOutOwner();
                            for (int i5 = 0; i5 < 4; i5++) {
                                if (!ChatMessageCell.this.instantTextNewLine) {
                                    if (i5 == (z ? 3 : 2)) {
                                        float[] fArr = ChatMessageCell.radii;
                                        int i6 = i5 * 2;
                                        float dp2 = AndroidUtilities.dp(SharedConfig.bubbleRadius);
                                        ChatMessageCell.radii[i6 + 1] = dp2;
                                        fArr[i6] = dp2;
                                    } else if (((ChatMessageCell.this.mediaBackground && ChatMessageCell.this.currentPosition == null) || ChatMessageCell.this.pinnedBottom) && (i5 == 2 || i5 == 3)) {
                                        float[] fArr2 = ChatMessageCell.radii;
                                        int i7 = i5 * 2;
                                        float[] fArr3 = ChatMessageCell.radii;
                                        int i8 = i7 + 1;
                                        float dp3 = AndroidUtilities.dp(ChatMessageCell.this.pinnedBottom ? Math.min(5, SharedConfig.bubbleRadius) : SharedConfig.bubbleRadius);
                                        fArr3[i8] = dp3;
                                        fArr2[i7] = dp3;
                                    }
                                }
                                float[] fArr4 = ChatMessageCell.radii;
                                int i9 = i5 * 2;
                                ChatMessageCell.radii[i9 + 1] = 0.0f;
                                fArr4[i9] = 0.0f;
                            }
                            if (!z) {
                                ChatMessageCell chatMessageCell = ChatMessageCell.this;
                                if (!chatMessageCell.drawPinnedBottom && chatMessageCell.currentPosition == null && (ChatMessageCell.this.currentPosition == null || ChatMessageCell.this.pollInstantViewTouchesBottom)) {
                                    this.path.moveTo(this.rect.left + AndroidUtilities.dp(6.0f), this.rect.top);
                                    this.path.lineTo(this.rect.left + AndroidUtilities.dp(6.0f), (this.rect.bottom - AndroidUtilities.dp(6.0f)) - AndroidUtilities.dp(5.0f));
                                    RectF rectF2 = AndroidUtilities.rectTmp;
                                    rectF2.set(this.rect.left + AndroidUtilities.dp(-7.0f), this.rect.bottom - AndroidUtilities.dp(23.0f), this.rect.left + AndroidUtilities.dp(6.0f), this.rect.bottom);
                                    this.path.arcTo(rectF2, 0.0f, 83.0f, false);
                                    float f = this.rect.right - (ChatMessageCell.radii[4] * 2.0f);
                                    float f2 = this.rect.bottom - (ChatMessageCell.radii[5] * 2.0f);
                                    RectF rectF3 = this.rect;
                                    rectF2.set(f, f2, rectF3.right, rectF3.bottom);
                                    this.path.arcTo(rectF2, 90.0f, -90.0f, false);
                                    Path path = this.path;
                                    RectF rectF4 = this.rect;
                                    path.lineTo(rectF4.right, rectF4.top);
                                    this.path.close();
                                    this.path.close();
                                }
                            }
                            this.path.addRoundRect(this.rect, ChatMessageCell.radii, Path.Direction.CW);
                            this.path.close();
                        }
                    };
                    this.selectorDrawable[i] = new BaseCell.RippleDrawableSafe(new ColorStateList(new int[][]{StateSet.WILD_CARD}, new int[]{436207615 & getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outPreviewInstantText : Theme.key_chat_inPreviewInstantText)}), null, this.selectorMaskDrawable[i]);
                    this.selectorDrawable[i].setCallback(this);
                } else {
                    Theme.setSelectorDrawableColor(drawable, color & 436207615, true);
                }
                this.selectorDrawable[i].setVisible(true, false);
            }
        }
        color = getThemedColor(i2);
        drawable = this.selectorDrawable[i];
        if (drawable != null) {
        }
        this.selectorDrawable[i].setVisible(true, false);
    }

    @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
    public void didReceivedNotification(int i, int i2, Object... objArr) {
        MessageObject messageObject;
        if (i == NotificationCenter.startSpoilers) {
            setSpoilersSuppressed(false);
            return;
        }
        if (i == NotificationCenter.stopSpoilers) {
            setSpoilersSuppressed(true);
            return;
        }
        if (i == NotificationCenter.userInfoDidLoad) {
            TLRPC.User user = this.currentUser;
            if (user != null) {
                if (user.id == ((Long) objArr[0]).longValue()) {
                    setAvatar(this.currentMessageObject);
                    return;
                }
                return;
            }
            return;
        }
        if (i == NotificationCenter.emojiLoaded) {
            invalidate();
            return;
        }
        if (i != NotificationCenter.didUpdatePremiumGiftStickers || (messageObject = this.currentMessageObject) == null) {
            return;
        }
        TLRPC.MessageMedia messageMedia = messageObject.messageOwner.media;
        if ((messageMedia instanceof TLRPC.TL_messageMediaGiveaway) || (messageMedia instanceof TLRPC.TL_messageMediaGiveawayResults)) {
            setMessageObject(messageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:17:0x0024, code lost:
    
        if (r8.mediaExists == false) goto L32;
     */
    /* JADX WARN: Code restructure failed: missing block: B:30:0x003f, code lost:
    
        if (r8 == 6) goto L32;
     */
    /* JADX WARN: Code restructure failed: missing block: B:31:0x0041, code lost:
    
        if (r7 == 1) goto L32;
     */
    @Override // org.telegram.messenger.ImageReceiver.ImageReceiverDelegate
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void didSetImage(ImageReceiver imageReceiver, boolean z, boolean z2, boolean z3) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && z) {
            if (setCurrentDiceValue((z3 || messageObject.wasUnread) ? false : true)) {
                return;
            }
            if (z2) {
                MessageObject messageObject2 = this.currentMessageObject;
                if (messageObject2.type == 20) {
                }
            }
            if (!z2) {
                MessageObject messageObject3 = this.currentMessageObject;
                if (!messageObject3.mediaExists) {
                    if (!messageObject3.attachPathExists) {
                        int i = messageObject3.type;
                        if (i == 0) {
                            int i2 = this.documentAttachType;
                            if (i2 != 8) {
                                if (i2 != 0) {
                                }
                            }
                            this.currentMessageObject.mediaExists = true;
                            updateButtonState(false, true, false);
                        }
                    }
                }
            }
        }
        if (!z || this.currentMessageObject == null) {
            return;
        }
        if (this.blurredPhotoImage.getBitmap() != null) {
            this.blurredPhotoImage.getBitmap().recycle();
            this.blurredPhotoImage.setImageBitmap((Bitmap) null);
        }
        if ((!this.currentMessageObject.hasMediaSpoilers() && !this.fitPhotoImage) || imageReceiver.getBitmap() == null || imageReceiver.getBitmap().isRecycled()) {
            return;
        }
        this.blurredPhotoImage.setImageBitmap(Utilities.stackBlurBitmapMax(imageReceiver.getBitmap(), this.currentMessageObject.isRoundVideo()));
        this.blurredPhotoImage.setColorFilter(getFancyBlurFilter());
    }

    @Override // org.telegram.messenger.ImageReceiver.ImageReceiverDelegate
    public /* synthetic */ void didSetImageBitmap(int i, String str, Drawable drawable) {
        ImageReceiver.ImageReceiverDelegate.-CC.$default$didSetImageBitmap(this, i, str, drawable);
    }

    /* JADX WARN: Code restructure failed: missing block: B:49:0x0055, code lost:
    
        if (android.text.TextUtils.isEmpty(r16.currentMessageObject.caption) != false) goto L11;
     */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00cb  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x00d4  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00d8  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x00cf  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawAnimatedEmojiCaption(Canvas canvas, float f) {
        float f2;
        float f3;
        TransitionParams transitionParams;
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans;
        float f4;
        boolean z;
        boolean z2;
        ChatMessageCell chatMessageCell;
        float f5;
        float f6;
        Canvas canvas2;
        float f7;
        if (this.captionLayout == null) {
            return;
        }
        float f8 = this.captionY;
        float f9 = this.captionX;
        TransitionParams transitionParams2 = this.transitionParams;
        if (transitionParams2.animateBackgroundBoundsInner) {
            if (transitionParams2.transformGroupToSingleMessage) {
                f8 -= getTranslationY();
            } else {
                if (transitionParams2.moveCaption) {
                    float f10 = this.captionX;
                    TransitionParams transitionParams3 = this.transitionParams;
                    float f11 = transitionParams3.animateChangeProgress;
                    float f12 = 1.0f - f11;
                    f3 = (f10 * f11) + (transitionParams3.captionFromX * f12);
                    f2 = (this.captionY * f11) + (transitionParams3.captionFromY * f12);
                    transitionParams = this.transitionParams;
                    if (transitionParams.animateReplaceCaptionLayout || transitionParams.animateChangeProgress == 1.0f) {
                        MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
                        arrayList = textLayoutBlocks == null ? textLayoutBlocks.textLayoutBlocks : null;
                        emojiGroupedSpans = this.animatedEmojiStack;
                        f4 = textLayoutBlocks == null ? textLayoutBlocks.textXOffset : 0.0f;
                        z = true;
                        z2 = true;
                        chatMessageCell = this;
                        f5 = f3;
                        f6 = f2;
                        canvas2 = canvas;
                        f7 = f;
                    } else {
                        ArrayList<MessageObject.TextLayoutBlock> arrayList2 = transitionParams.animateOutCaptionLayout != null ? this.transitionParams.animateOutCaptionLayout.textLayoutBlocks : null;
                        AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans2 = this.transitionParams.animateOutAnimateEmoji;
                        TransitionParams transitionParams4 = this.transitionParams;
                        drawAnimatedEmojiMessageText(f3, f2, canvas, arrayList2, emojiGroupedSpans2, false, f * (1.0f - transitionParams4.animateChangeProgress), transitionParams4.animateOutCaptionLayout != null ? this.transitionParams.animateOutCaptionLayout.textXOffset : 0.0f, true);
                        MessageObject.TextLayoutBlocks textLayoutBlocks2 = this.captionLayout;
                        arrayList = textLayoutBlocks2 != null ? textLayoutBlocks2.textLayoutBlocks : null;
                        emojiGroupedSpans = this.animatedEmojiStack;
                        f7 = f * this.transitionParams.animateChangeProgress;
                        f4 = textLayoutBlocks2 != null ? textLayoutBlocks2.textXOffset : 0.0f;
                        z = true;
                        z2 = true;
                        chatMessageCell = this;
                        f5 = f3;
                        f6 = f2;
                        canvas2 = canvas;
                    }
                    chatMessageCell.drawAnimatedEmojiMessageText(f5, f6, canvas2, arrayList, emojiGroupedSpans, z2, f7, f4, z);
                }
                if (this.currentMessageObject.isVoice()) {
                }
            }
            f9 += this.transitionParams.deltaLeft;
        }
        f2 = f8;
        f3 = f9;
        transitionParams = this.transitionParams;
        if (transitionParams.animateReplaceCaptionLayout) {
        }
        MessageObject.TextLayoutBlocks textLayoutBlocks3 = this.captionLayout;
        if (textLayoutBlocks3 == null) {
        }
        emojiGroupedSpans = this.animatedEmojiStack;
        if (textLayoutBlocks3 == null) {
        }
        z = true;
        z2 = true;
        chatMessageCell = this;
        f5 = f3;
        f6 = f2;
        canvas2 = canvas;
        f7 = f;
        chatMessageCell.drawAnimatedEmojiMessageText(f5, f6, canvas2, arrayList, emojiGroupedSpans, z2, f7, f4, z);
    }

    public void drawAnimatedEmojis(Canvas canvas, float f) {
        drawAnimatedEmojiMessageText(canvas, f);
        if (shouldDrawCaptionLayout()) {
            drawAnimatedEmojiCaption(canvas, f);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:17:0x0075  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawBackground(Canvas canvas, int i, int i2, int i3, int i4, boolean z, boolean z2, boolean z3, int i5) {
        int i6;
        int i7;
        Theme.MessageDrawable messageDrawable;
        MessageObject messageObject = this.currentMessageObject;
        this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable((messageObject == null || !messageObject.isOutOwner()) ? (this.mediaBackground || z2) ? z3 ? "drawableMsgInMediaSelected" : "drawableMsgInMedia" : z3 ? "drawableMsgInSelected" : "drawableMsgIn" : (this.mediaBackground || z2) ? z3 ? "drawableMsgOutMediaSelected" : "drawableMsgOutMedia" : z3 ? "drawableMsgOutSelected" : "drawableMsgOut");
        int i8 = this.parentWidth;
        int i9 = this.parentHeight;
        if (i9 == 0) {
            i8 = getParentWidth();
            i9 = AndroidUtilities.displaySize.y;
            if (getParent() instanceof View) {
                View view = (View) getParent();
                int measuredWidth = view.getMeasuredWidth();
                i7 = view.getMeasuredHeight();
                i6 = measuredWidth;
                messageDrawable = this.currentBackgroundDrawable;
                if (messageDrawable != null) {
                    messageDrawable.setTop(i5, i6, i7, (int) this.parentViewTopOffset, this.blurredViewTopOffset, this.blurredViewBottomOffset, z, z2);
                    Theme.MessageDrawable messageDrawable2 = this.currentBackgroundDrawable;
                    MessageObject messageObject2 = this.currentMessageObject;
                    messageDrawable2.setBotButtonsBottom(messageObject2 != null && messageObject2.hasInlineBotButtons());
                    Drawable shadowDrawable = this.currentBackgroundDrawable.getShadowDrawable();
                    if (shadowDrawable != null) {
                        shadowDrawable.setAlpha((int) (getAlpha() * 255.0f));
                        shadowDrawable.setBounds(i, i2, i3, i4);
                        shadowDrawable.draw(canvas);
                        shadowDrawable.setAlpha(NotificationCenter.newLocationAvailable);
                    }
                    this.currentBackgroundDrawable.setAlpha((int) (getAlpha() * 255.0f));
                    this.currentBackgroundDrawable.setBounds(i, i2, i3, i4);
                    this.currentBackgroundDrawable.drawCached(canvas, this.backgroundCacheParams);
                    this.currentBackgroundDrawable.setAlpha(NotificationCenter.newLocationAvailable);
                }
                animateCheckboxTranslation();
            }
        }
        i6 = i8;
        i7 = i9;
        messageDrawable = this.currentBackgroundDrawable;
        if (messageDrawable != null) {
        }
        animateCheckboxTranslation();
    }

    public boolean drawBackgroundInParent() {
        MessageObject messageObject;
        return this.canDrawBackgroundInParent && (messageObject = this.currentMessageObject) != null && messageObject.isOutOwner() && getThemedColor(Theme.key_chat_outBubbleGradient1) != 0;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:210:0x073a  */
    /* JADX WARN: Removed duplicated region for block: B:229:0x07fb  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawBackgroundInternal(Canvas canvas, boolean z) {
        Drawable shadowDrawable;
        int i;
        int i2;
        int i3;
        int i4;
        int i5;
        int i6;
        int i7;
        int i8;
        ChatMessageCell chatMessageCell;
        Drawable drawable;
        int i9;
        int i10;
        int i11;
        MessageObject messageObject;
        Canvas canvas2;
        String str;
        String str2;
        String str3;
        float f;
        float f2;
        MessageObject messageObject2;
        MessageObject.GroupedMessages groupedMessages;
        Theme.MessageDrawable messageDrawable;
        int i12;
        int i13;
        int i14;
        int i15;
        int i16;
        int i17;
        ChatMessageCell chatMessageCell2;
        int i18;
        int i19;
        Theme.MessageDrawable messageDrawable2;
        int i20;
        int i21;
        if (this.currentMessageObject == null) {
            return;
        }
        boolean z2 = this.wasLayout;
        if (!z2 && !this.animationRunning) {
            forceLayout();
            return;
        }
        if (!z2) {
            onLayout(false, getLeft(), getTop(), getRight(), getBottom());
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        boolean z3 = groupedMessagePosition != null && (groupedMessagePosition.flags & 8) == 0 && this.currentMessagesGroup.isDocuments && !this.drawPinnedBottom;
        if (this.currentMessageObject.isOutOwner()) {
            if (this.transitionParams.changePinnedBottomProgress < 1.0f || this.mediaBackground || this.drawPinnedBottom || z3) {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMedia");
                this.currentBackgroundSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutMediaSelected");
                this.transitionParams.drawPinnedBottomBackground = true;
            } else {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOut");
                this.currentBackgroundSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgOutSelected");
                this.transitionParams.drawPinnedBottomBackground = false;
            }
            setBackgroundTopY(true);
            shadowDrawable = ((!isDrawSelectionBackground() || (this.currentPosition != null && getBackground() == null)) ? this.currentBackgroundDrawable : this.currentBackgroundSelectedDrawable).getShadowDrawable();
            this.backgroundDrawableLeft = (this.layoutWidth - this.backgroundWidth) - (!this.mediaBackground ? 0 : AndroidUtilities.dp(9.0f));
            int dp = this.backgroundWidth - (this.mediaBackground ? 0 : AndroidUtilities.dp(3.0f));
            this.backgroundDrawableRight = dp;
            MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
            if (groupedMessages2 != null && !groupedMessages2.isDocuments && !this.currentPosition.edge) {
                this.backgroundDrawableRight = dp + AndroidUtilities.dp(10.0f);
            }
            int i22 = this.backgroundDrawableLeft;
            if (z3 || this.transitionParams.changePinnedBottomProgress == 1.0f ? !(this.mediaBackground || !this.drawPinnedBottom) : !this.mediaBackground) {
                this.backgroundDrawableRight -= AndroidUtilities.dp(6.0f);
            }
            MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
            if (groupedMessagePosition2 != null) {
                if ((groupedMessagePosition2.flags & 2) == 0) {
                    this.backgroundDrawableRight += AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                }
                if ((this.currentPosition.flags & 1) == 0) {
                    i22 -= AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                    this.backgroundDrawableRight += AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                }
                if ((this.currentPosition.flags & 4) == 0) {
                    i16 = 0 - AndroidUtilities.dp(SharedConfig.bubbleRadius + 3);
                    i17 = AndroidUtilities.dp(SharedConfig.bubbleRadius + 3);
                } else {
                    i16 = 0;
                    i17 = 0;
                }
                if ((this.currentPosition.flags & 8) == 0) {
                    i17 += AndroidUtilities.dp(SharedConfig.bubbleRadius + 3);
                }
                i15 = i22;
            } else {
                i15 = i22;
                i16 = 0;
                i17 = 0;
            }
            boolean z4 = this.drawPinnedBottom;
            int dp2 = (z4 && this.drawPinnedTop) ? 0 : z4 ? AndroidUtilities.dp(1.0f) : AndroidUtilities.dp(2.0f);
            int dp3 = (this.drawPinnedTop ? 0 : AndroidUtilities.dp(1.0f)) + i16;
            this.backgroundDrawableTop = dp3;
            int i23 = (this.layoutHeight - dp2) + i17;
            this.backgroundDrawableBottom = dp3 + i23;
            if (!this.mediaBackground) {
                if (this.drawPinnedTop) {
                    this.backgroundDrawableTop = dp3 - AndroidUtilities.dp(1.0f);
                    i23 += AndroidUtilities.dp(1.0f);
                }
                if (this.drawPinnedBottom) {
                    this.backgroundDrawableBottom += AndroidUtilities.dp(1.0f);
                    i23 += AndroidUtilities.dp(1.0f);
                }
            }
            int i24 = i23;
            Theme.MessageDrawable messageDrawable3 = this.currentBackgroundDrawable;
            if (z3) {
                setDrawableBoundsInner(messageDrawable3, i15, this.backgroundDrawableTop - i16, this.backgroundDrawableRight, (i24 - i17) + 10);
                messageDrawable2 = this.currentBackgroundSelectedDrawable;
                i18 = this.backgroundDrawableLeft;
                i20 = this.backgroundDrawableTop;
                i21 = this.backgroundDrawableRight - AndroidUtilities.dp(6.0f);
                chatMessageCell2 = this;
                i19 = i24;
            } else {
                chatMessageCell2 = this;
                i18 = i15;
                i19 = i24;
                chatMessageCell2.setDrawableBoundsInner(messageDrawable3, i18, this.backgroundDrawableTop, this.backgroundDrawableRight, i19);
                messageDrawable2 = this.currentBackgroundSelectedDrawable;
                i20 = this.backgroundDrawableTop;
                i21 = this.backgroundDrawableRight;
            }
            chatMessageCell2.setDrawableBoundsInner(messageDrawable2, i18, i20, i21, i19);
            i7 = this.backgroundDrawableTop;
            i8 = this.backgroundDrawableRight;
            chatMessageCell = this;
            drawable = shadowDrawable;
            i6 = i15;
            i9 = i24;
        } else {
            if (this.transitionParams.changePinnedBottomProgress < 1.0f || this.mediaBackground || this.drawPinnedBottom || z3) {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMedia");
                this.currentBackgroundSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInMediaSelected");
                this.transitionParams.drawPinnedBottomBackground = true;
            } else {
                this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgIn");
                this.currentBackgroundSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable("drawableMsgInSelected");
                this.transitionParams.drawPinnedBottomBackground = false;
            }
            setBackgroundTopY(true);
            shadowDrawable = ((!isDrawSelectionBackground() || (this.currentPosition != null && getBackground() == null)) ? this.currentBackgroundDrawable : this.currentBackgroundSelectedDrawable).getShadowDrawable();
            this.backgroundDrawableLeft = AndroidUtilities.dp((((this.isChat || (((messageObject = this.currentMessageObject) != null && (messageObject.isRepostPreview || messageObject.forceAvatar)) || messageObject.getDialogId() == UserObject.VERIFY)) && this.isAvatarVisible) ? 48 : 0) + (!this.mediaBackground ? 3 : 9));
            this.backgroundDrawableRight = this.backgroundWidth - (this.mediaBackground ? 0 : AndroidUtilities.dp(3.0f));
            MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
            if (groupedMessages3 != null && !groupedMessages3.isDocuments) {
                if (!this.currentPosition.edge) {
                    this.backgroundDrawableLeft -= AndroidUtilities.dp(10.0f);
                    this.backgroundDrawableRight += AndroidUtilities.dp(10.0f);
                }
                if (this.currentPosition.leftSpanOffset != 0) {
                    this.backgroundDrawableLeft += (int) Math.ceil((r0 / 1000.0f) * getGroupPhotosWidth());
                }
            }
            boolean z5 = this.mediaBackground;
            if ((!z5 && this.drawPinnedBottom) || (!z3 && this.transitionParams.changePinnedBottomProgress != 1.0f)) {
                if (this.drawPinnedBottom || !z5) {
                    this.backgroundDrawableRight -= AndroidUtilities.dp(6.0f);
                }
                if (!this.mediaBackground) {
                    this.backgroundDrawableLeft += AndroidUtilities.dp(6.0f);
                }
            }
            MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
            if (groupedMessagePosition3 != null) {
                if ((groupedMessagePosition3.flags & 2) == 0) {
                    this.backgroundDrawableRight += AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                }
                if ((this.currentPosition.flags & 1) == 0) {
                    this.backgroundDrawableLeft -= AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                    this.backgroundDrawableRight += AndroidUtilities.dp(SharedConfig.bubbleRadius + 2);
                }
                if ((this.currentPosition.flags & 4) == 0) {
                    i11 = 0 - AndroidUtilities.dp(SharedConfig.bubbleRadius + 3);
                    i10 = AndroidUtilities.dp(SharedConfig.bubbleRadius + 3);
                } else {
                    i10 = 0;
                    i11 = 0;
                }
                if ((this.currentPosition.flags & 8) == 0) {
                    i10 += AndroidUtilities.dp(SharedConfig.bubbleRadius + 4);
                }
                i = i10;
                i2 = i11;
            } else {
                i = 0;
                i2 = 0;
            }
            boolean z6 = this.drawPinnedBottom;
            int dp4 = (z6 && this.drawPinnedTop) ? 0 : z6 ? AndroidUtilities.dp(1.0f) : AndroidUtilities.dp(2.0f);
            int dp5 = i2 + (this.drawPinnedTop ? 0 : AndroidUtilities.dp(1.0f));
            this.backgroundDrawableTop = dp5;
            int i25 = (this.layoutHeight - dp4) + i;
            this.backgroundDrawableBottom = dp5 + i25;
            if (!this.mediaBackground) {
                if (this.drawPinnedTop) {
                    this.backgroundDrawableTop = dp5 - AndroidUtilities.dp(1.0f);
                    i25 += AndroidUtilities.dp(1.0f);
                }
                if (this.drawPinnedBottom) {
                    this.backgroundDrawableBottom += AndroidUtilities.dp(1.0f);
                    i25 += AndroidUtilities.dp(1.0f);
                }
            }
            int i26 = i25;
            setDrawableBoundsInner(this.currentBackgroundDrawable, this.backgroundDrawableLeft, this.backgroundDrawableTop, this.backgroundDrawableRight, i26);
            Theme.MessageDrawable messageDrawable4 = this.currentBackgroundSelectedDrawable;
            if (z3) {
                i3 = AndroidUtilities.dp(6.0f) + this.backgroundDrawableLeft;
                i4 = this.backgroundDrawableTop;
                i5 = this.backgroundDrawableRight - AndroidUtilities.dp(6.0f);
            } else {
                i3 = this.backgroundDrawableLeft;
                i4 = this.backgroundDrawableTop;
                i5 = this.backgroundDrawableRight;
            }
            setDrawableBoundsInner(messageDrawable4, i3, i4, i5, i26);
            i6 = this.backgroundDrawableLeft;
            i7 = this.backgroundDrawableTop;
            i8 = this.backgroundDrawableRight;
            chatMessageCell = this;
            drawable = shadowDrawable;
            i9 = i26;
        }
        chatMessageCell.setDrawableBoundsInner(drawable, i6, i7, i8, i9);
        Drawable drawable2 = shadowDrawable;
        if (!this.currentMessageObject.isOutOwner() && this.transitionParams.changePinnedBottomProgress != 1.0f && !this.mediaBackground && !this.drawPinnedBottom) {
            this.backgroundDrawableLeft -= AndroidUtilities.dp(6.0f);
            this.backgroundDrawableRight += AndroidUtilities.dp(6.0f);
        }
        if (this.hasPsaHint) {
            MessageObject.GroupedMessagePosition groupedMessagePosition4 = this.currentPosition;
            if (groupedMessagePosition4 != null && (groupedMessagePosition4.flags & 2) == 0) {
                int groupPhotosWidth = getGroupPhotosWidth();
                i14 = 0;
                for (int i27 = 0; i27 < this.currentMessagesGroup.posArray.size(); i27++) {
                    if (this.currentMessagesGroup.posArray.get(i27).minY != 0) {
                        break;
                    }
                    double d = i14;
                    double ceil = Math.ceil(((r4.pw + r4.leftSpanOffset) / 1000.0f) * groupPhotosWidth);
                    Double.isNaN(d);
                    i14 = (int) (d + ceil);
                }
            } else {
                i14 = this.currentBackgroundDrawable.getBounds().right;
            }
            Drawable drawable3 = Theme.chat_psaHelpDrawable[this.currentMessageObject.isOutOwner() ? 1 : 0];
            int dp6 = AndroidUtilities.dp(this.currentMessageObject.type == 5 ? 12.0f : (this.drawNameLayout ? 19 : 0) + 10);
            this.psaHelpX = (i14 - drawable3.getIntrinsicWidth()) - AndroidUtilities.dp(this.currentMessageObject.isOutOwner() ? 20.0f : 14.0f);
            this.psaHelpY = dp6 + AndroidUtilities.dp(4.0f);
        }
        if (this.checkBoxVisible || this.checkBoxAnimationInProgress) {
            animateCheckboxTranslation();
            int dp7 = AndroidUtilities.dp(21.0f);
            this.checkBox.setBounds(AndroidUtilities.dp(-27.0f) + this.checkBoxTranslation, (this.currentBackgroundDrawable.getBounds().bottom - AndroidUtilities.dp(8.0f)) - dp7, dp7, dp7);
        }
        if (z || !drawBackgroundInParent()) {
            int saveCount = canvas.getSaveCount();
            if (this.transitionYOffsetForDrawables != 0.0f) {
                canvas.save();
                canvas2 = canvas;
                canvas2.translate(0.0f, this.transitionYOffsetForDrawables);
            } else {
                canvas2 = canvas;
            }
            MessageObject messageObject3 = this.currentMessageObject;
            if (messageObject3 == null || !messageObject3.isRoundVideo()) {
                str = "drawableMsgOut";
                str2 = "drawableMsgIn";
                str3 = "drawableMsgInMedia";
                this.roundVideoPlayPipFloat.set(0.0f, true);
                f = 0.0f;
            } else {
                float videoTranscriptionProgress = getVideoTranscriptionProgress();
                this.currentBackgroundDrawable.setRoundingRadius(1.0f - videoTranscriptionProgress);
                f = AndroidUtilities.lerp(this.backgroundWidth / 2, 0, videoTranscriptionProgress);
                str = "drawableMsgOut";
                str2 = "drawableMsgIn";
                str3 = "drawableMsgInMedia";
                canvas.saveLayerAlpha(0.0f, 0.0f, getWidth(), Math.max(this.currentBackgroundDrawable.getBounds().bottom, getHeight()), (int) (videoTranscriptionProgress * 255.0f), 31);
                this.roundVideoPlayPipFloat.set((((MediaController.getInstance().isPiPShown() && MediaController.getInstance().isPlayingMessageAndReadyToDraw(this.currentMessageObject)) || this.wouldBeInPip) && canvas.isHardwareAccelerated()) ? 1.0f : 0.0f);
                if (MediaController.getInstance().isPiPShown()) {
                    this.wouldBeInPip = false;
                }
            }
            if ((this.drawBackground || this.transitionParams.animateDrawBackground) && this.currentBackgroundDrawable != null && ((this.currentPosition == null || (isDrawSelectionBackground() && (this.currentMessageObject.isMusic() || this.currentMessageObject.isDocument()))) && (!this.enterTransitionInProgress || this.currentMessageObject.isVoice()))) {
                float f3 = this.alphaInternal;
                if (z) {
                    f3 *= getAlpha();
                }
                if (hasSelectionOverlay()) {
                    this.currentSelectedBackgroundAlpha = 0.0f;
                    int i28 = (int) (f3 * 255.0f);
                    this.currentBackgroundDrawable.setAlpha(i28);
                    this.currentBackgroundDrawable.drawCached(canvas2, this.backgroundCacheParams);
                    if (drawable2 != null && this.currentPosition == null) {
                        drawable2.setAlpha(i28);
                        drawable2.draw(canvas2);
                    }
                } else {
                    if (this.isHighlightedAnimated) {
                        this.currentBackgroundDrawable.setAlpha((int) (f3 * 255.0f));
                        this.currentBackgroundDrawable.drawCached(canvas2, this.backgroundCacheParams);
                        float highlightAlpha = getHighlightAlpha();
                        this.currentSelectedBackgroundAlpha = highlightAlpha;
                        if (this.currentPosition == null) {
                            this.currentBackgroundSelectedDrawable.setAlpha((int) (highlightAlpha * f3 * 255.0f));
                            this.currentBackgroundSelectedDrawable.drawCached(canvas2, this.backgroundCacheParams);
                        }
                    } else if (this.selectedBackgroundProgress == 0.0f || (((messageObject2 = this.currentMessageObject) != null && messageObject2.preview) || ((groupedMessages = this.currentMessagesGroup) != null && groupedMessages.isDocuments))) {
                        if (isDrawSelectionBackground() && this.quoteHighlight == null && (this.currentPosition == null || this.currentMessageObject.isMusic() || this.currentMessageObject.isDocument() || getBackground() != null)) {
                            if (this.currentPosition != null) {
                                canvas.save();
                            }
                            f2 = 1.0f;
                            this.currentSelectedBackgroundAlpha = 1.0f;
                            this.currentBackgroundSelectedDrawable.setAlpha((int) (f3 * 255.0f));
                            this.currentBackgroundSelectedDrawable.drawCached(canvas2, this.backgroundCacheParams);
                            if (this.currentPosition != null) {
                                canvas.restore();
                            }
                        } else {
                            f2 = 1.0f;
                            this.currentSelectedBackgroundAlpha = 0.0f;
                            this.currentBackgroundDrawable.setAlpha((int) (f3 * 255.0f));
                            this.currentBackgroundDrawable.drawCached(canvas2, this.backgroundCacheParams);
                        }
                        if (drawable2 != null && this.currentPosition == null) {
                            drawable2.setAlpha((int) (f3 * 255.0f));
                            drawable2.draw(canvas2);
                        }
                        if (this.transitionParams.changePinnedBottomProgress != f2 && this.currentPosition == null) {
                            if (this.currentMessageObject.isOutOwner()) {
                                messageDrawable = (Theme.MessageDrawable) getThemedDrawable(this.transitionParams.drawPinnedBottomBackground ? str2 : str3);
                                messageDrawable.setAlpha((int) (((this.mediaBackground || this.pinnedBottom) ? f2 - this.transitionParams.changePinnedBottomProgress : this.transitionParams.changePinnedBottomProgress) * 255.0f));
                                Rect bounds = this.currentBackgroundDrawable.getBounds();
                                messageDrawable.setBounds(bounds.left - AndroidUtilities.dp(6.0f), bounds.top, bounds.right, bounds.bottom);
                                canvas.save();
                                canvas2.translate(f, 0.0f);
                                canvas2.clipRect(bounds.left - AndroidUtilities.dp(6.0f), bounds.bottom - AndroidUtilities.dp(16.0f), bounds.left + AndroidUtilities.dp(18.0f), bounds.bottom);
                            } else {
                                messageDrawable = (Theme.MessageDrawable) getThemedDrawable(str);
                                Rect bounds2 = this.currentBackgroundDrawable.getBounds();
                                messageDrawable.setBounds(bounds2.left, bounds2.top, bounds2.right + AndroidUtilities.dp(6.0f), bounds2.bottom);
                                canvas.save();
                                canvas2.translate(-f, 0.0f);
                                canvas2.clipRect(bounds2.right - AndroidUtilities.dp(16.0f), bounds2.bottom - AndroidUtilities.dp(16.0f), bounds2.right + AndroidUtilities.dp(16.0f), bounds2.bottom);
                                int i29 = this.parentWidth;
                                int i30 = this.parentHeight;
                                if (i30 == 0) {
                                    i29 = getParentWidth();
                                    i30 = AndroidUtilities.displaySize.y;
                                    if (getParent() instanceof View) {
                                        View view = (View) getParent();
                                        int measuredWidth = view.getMeasuredWidth();
                                        i13 = view.getMeasuredHeight();
                                        i12 = measuredWidth;
                                        float y = getY();
                                        float f4 = this.parentViewTopOffset;
                                        messageDrawable.setTop((int) (y + f4), i12, i13, (int) f4, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, this.pinnedBottom);
                                        MessageObject messageObject4 = this.currentMessageObject;
                                        messageDrawable.setBotButtonsBottom(messageObject4 == null && messageObject4.hasInlineBotButtons());
                                        messageDrawable.setAlpha((int) (((!this.mediaBackground || this.pinnedBottom) ? f2 - this.transitionParams.changePinnedBottomProgress : this.transitionParams.changePinnedBottomProgress) * 255.0f));
                                    }
                                }
                                i12 = i29;
                                i13 = i30;
                                float y2 = getY();
                                float f42 = this.parentViewTopOffset;
                                messageDrawable.setTop((int) (y2 + f42), i12, i13, (int) f42, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, this.pinnedBottom);
                                MessageObject messageObject42 = this.currentMessageObject;
                                messageDrawable.setBotButtonsBottom(messageObject42 == null && messageObject42.hasInlineBotButtons());
                                messageDrawable.setAlpha((int) (((!this.mediaBackground || this.pinnedBottom) ? f2 - this.transitionParams.changePinnedBottomProgress : this.transitionParams.changePinnedBottomProgress) * 255.0f));
                            }
                            messageDrawable.draw(canvas2);
                            messageDrawable.setAlpha(NotificationCenter.newLocationAvailable);
                            canvas.restore();
                        }
                    } else {
                        this.currentBackgroundDrawable.setAlpha((int) (f3 * 255.0f));
                        this.currentBackgroundDrawable.drawCached(canvas2, this.backgroundCacheParams);
                        float f5 = this.selectedBackgroundProgress;
                        this.currentSelectedBackgroundAlpha = f5;
                        this.currentBackgroundSelectedDrawable.setAlpha((int) (f5 * f3 * 255.0f));
                        this.currentBackgroundSelectedDrawable.drawCached(canvas2, this.backgroundCacheParams);
                        if (this.currentBackgroundDrawable.getGradientShader() == null) {
                            drawable2 = null;
                        }
                    }
                    f2 = 1.0f;
                    if (drawable2 != null) {
                        drawable2.setAlpha((int) (f3 * 255.0f));
                        drawable2.draw(canvas2);
                    }
                    if (this.transitionParams.changePinnedBottomProgress != f2) {
                        if (this.currentMessageObject.isOutOwner()) {
                        }
                        messageDrawable.draw(canvas2);
                        messageDrawable.setAlpha(NotificationCenter.newLocationAvailable);
                        canvas.restore();
                    }
                }
            }
            MessageObject messageObject5 = this.currentMessageObject;
            if (messageObject5 != null && messageObject5.isRoundVideo()) {
                this.currentBackgroundDrawable.setRoundingRadius(0.0f);
            }
            canvas2.restoreToCount(saveCount);
        }
    }

    public void drawBlurredPhoto(Canvas canvas) {
        ImageReceiver imageReceiver;
        if (this.currentMessageObject.isMediaSpoilersRevealed || this.mediaSpoilerRevealProgress == 1.0f) {
            return;
        }
        int[] roundRadius = this.photoImage.getRoundRadius();
        float[] fArr = this.mediaSpoilerRadii;
        float f = roundRadius[0];
        fArr[1] = f;
        fArr[0] = f;
        float f2 = roundRadius[1];
        fArr[3] = f2;
        fArr[2] = f2;
        float f3 = roundRadius[2];
        fArr[5] = f3;
        fArr[4] = f3;
        float f4 = roundRadius[3];
        fArr[7] = f4;
        fArr[6] = f4;
        this.mediaSpoilerPath.rewind();
        RectF rectF = AndroidUtilities.rectTmp;
        rectF.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
        Path path = this.mediaSpoilerPath;
        float[] fArr2 = this.mediaSpoilerRadii;
        Path.Direction direction = Path.Direction.CW;
        path.addRoundRect(rectF, fArr2, direction);
        canvas.save();
        canvas.clipPath(this.mediaSpoilerPath);
        if (this.mediaSpoilerRevealProgress != 0.0f) {
            this.mediaSpoilerPath.rewind();
            this.mediaSpoilerPath.addCircle(this.mediaSpoilerRevealX, this.mediaSpoilerRevealY, this.mediaSpoilerRevealMaxRadius * this.mediaSpoilerRevealProgress, direction);
            canvas.clipPath(this.mediaSpoilerPath, Region.Op.DIFFERENCE);
        }
        if (this.currentMessageObject.needDrawBluredPreview()) {
            imageReceiver = this.photoImage;
        } else {
            this.blurredPhotoImage.setImageCoords(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
            this.blurredPhotoImage.setRoundRadius(this.photoImage.getRoundRadius());
            imageReceiver = this.blurredPhotoImage;
        }
        imageReceiver.draw(canvas);
        drawBlurredPhotoParticles(canvas);
        canvas.restore();
    }

    public void drawBlurredPhotoParticles(Canvas canvas) {
        if (this.mediaSpoilerEffect2 != null) {
            canvas.translate(this.photoImage.getImageX(), this.photoImage.getImageY());
            this.mediaSpoilerEffect2.draw(canvas, this, (int) this.photoImage.getImageWidth(), (int) this.photoImage.getImageHeight(), this.photoImage.getAlpha(), this.drawingToBitmap);
        } else {
            this.mediaSpoilerEffect.setColor(ColorUtils.setAlphaComponent(-1, (int) (Color.alpha(-1) * 0.325f * this.photoImage.getAlpha())));
            this.mediaSpoilerEffect.setBounds((int) this.photoImage.getImageX(), (int) this.photoImage.getImageY(), (int) this.photoImage.getImageX2(), (int) this.photoImage.getImageY2());
            this.mediaSpoilerEffect.draw(canvas);
        }
        invalidate();
    }

    public void drawCaptionLayout(Canvas canvas, boolean z, float f) {
        MessageObject.TextLayoutBlocks textLayoutBlocks;
        boolean z2;
        ChatMessageCell chatMessageCell;
        Canvas canvas2;
        boolean z3;
        float f2;
        if (this.animatedEmojiStack != null && !(canvas instanceof SizeNotifierFrameLayout.SimplerCanvas) && (this.captionLayout != null || this.transitionParams.animateOutCaptionLayout != null)) {
            this.animatedEmojiStack.clearPositions();
        }
        TransitionParams transitionParams = this.transitionParams;
        if (!transitionParams.animateReplaceCaptionLayout || transitionParams.animateChangeProgress == 1.0f) {
            textLayoutBlocks = this.captionLayout;
            z2 = true;
            chatMessageCell = this;
            canvas2 = canvas;
            z3 = z;
            f2 = f;
        } else {
            canvas2 = canvas;
            z3 = z;
            drawCaptionLayout(canvas2, transitionParams.animateOutCaptionLayout, false, z3, f * (1.0f - this.transitionParams.animateChangeProgress));
            textLayoutBlocks = this.captionLayout;
            f2 = f * this.transitionParams.animateChangeProgress;
            z2 = true;
            chatMessageCell = this;
        }
        chatMessageCell.drawCaptionLayout(canvas2, textLayoutBlocks, z2, z3, f2);
        if (!z) {
            drawAnimatedEmojiCaption(canvas, f);
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.messageOwner == null || !messageObject.isVoiceTranscriptionOpen()) {
            return;
        }
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2.messageOwner.voiceTranscriptionFinal || !TranscribeButton.isTranscribing(messageObject2)) {
            return;
        }
        invalidate();
    }

    public void drawCheckBox(Canvas canvas) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.isSending()) {
            return;
        }
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2.type == 27 || messageObject2.isSendError() || this.checkBox == null) {
            return;
        }
        if (this.checkBoxVisible || this.checkBoxAnimationInProgress) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            if (groupedMessagePosition != null) {
                int i = groupedMessagePosition.flags;
                if ((i & 8) == 0 || (i & 1) == 0) {
                    return;
                }
            }
            canvas.save();
            float y = getY();
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            canvas.translate(0.0f, ((groupedMessages == null || groupedMessages.messages.size() <= 1) ? y + this.transitionParams.deltaTop : (getTop() + this.currentMessagesGroup.transitionParams.offsetTop) - getTranslationY()) + this.transitionYOffsetForDrawables);
            this.checkBox.draw(canvas);
            canvas.restore();
        }
    }

    public void drawCommentButton(Canvas canvas, float f) {
        if (this.drawSideButton != 3) {
            return;
        }
        int dp = AndroidUtilities.dp(32.0f);
        if (this.commentLayout != null) {
            this.sideStartY -= AndroidUtilities.dp(18.0f);
            dp += AndroidUtilities.dp(18.0f);
        }
        RectF rectF = this.rect;
        float f2 = this.sideStartX;
        rectF.set(f2, this.sideStartY, AndroidUtilities.dp(32.0f) + f2, this.sideStartY + dp);
        applyServiceShaderMatrix();
        if (f != 1.0f) {
            int alpha = getThemedPaint("paintChatActionBackground").getAlpha();
            getThemedPaint("paintChatActionBackground").setAlpha((int) (alpha * f));
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), getThemedPaint("paintChatActionBackground"));
            getThemedPaint("paintChatActionBackground").setAlpha(alpha);
        } else {
            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), getThemedPaint(this.sideButtonPressed ? "paintChatActionBackgroundSelected" : "paintChatActionBackground"));
        }
        if (hasGradientService()) {
            if (f != 1.0f) {
                int alpha2 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha2 * f));
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha2);
            } else {
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
            }
        }
        Drawable themeDrawable = Theme.getThemeDrawable("drawableCommentSticker");
        BaseCell.setDrawableBounds(themeDrawable, this.sideStartX + AndroidUtilities.dp(4.0f), this.sideStartY + AndroidUtilities.dp(4.0f));
        if (f != 1.0f) {
            themeDrawable.setAlpha((int) (f * 255.0f));
            themeDrawable.draw(canvas);
            themeDrawable.setAlpha(NotificationCenter.newLocationAvailable);
        } else {
            themeDrawable.draw(canvas);
        }
        if (this.commentLayout != null) {
            Theme.chat_stickerCommentCountPaint.setColor(getThemedColor(Theme.key_chat_stickerReplyNameText));
            Theme.chat_stickerCommentCountPaint.setAlpha((int) (f * 255.0f));
            if (this.transitionParams.animateComments) {
                if (this.transitionParams.animateCommentsLayout != null) {
                    canvas.save();
                    TextPaint textPaint = Theme.chat_stickerCommentCountPaint;
                    double d = this.transitionParams.animateChangeProgress;
                    Double.isNaN(d);
                    double d2 = (1.0d - d) * 255.0d;
                    double d3 = f;
                    Double.isNaN(d3);
                    textPaint.setAlpha((int) (d2 * d3));
                    canvas.translate(this.sideStartX + ((AndroidUtilities.dp(32.0f) - this.transitionParams.animateTotalCommentWidth) / 2), this.sideStartY + AndroidUtilities.dp(30.0f));
                    this.transitionParams.animateCommentsLayout.draw(canvas);
                    canvas.restore();
                }
                Theme.chat_stickerCommentCountPaint.setAlpha((int) (this.transitionParams.animateChangeProgress * 255.0f));
            }
            canvas.save();
            canvas.translate(this.sideStartX + ((AndroidUtilities.dp(32.0f) - this.totalCommentWidth) / 2), this.sideStartY + AndroidUtilities.dp(30.0f));
            this.commentLayout.draw(canvas);
            canvas.restore();
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:184:0x05c7, code lost:
    
        if (r2.hasReplies() != false) goto L266;
     */
    /* JADX WARN: Removed duplicated region for block: B:207:0x0659  */
    /* JADX WARN: Removed duplicated region for block: B:217:0x06a1  */
    /* JADX WARN: Removed duplicated region for block: B:220:0x06c7  */
    /* JADX WARN: Removed duplicated region for block: B:223:0x06df  */
    /* JADX WARN: Removed duplicated region for block: B:226:0x06e6  */
    /* JADX WARN: Removed duplicated region for block: B:244:0x06f7  */
    /* JADX WARN: Removed duplicated region for block: B:249:0x06cc  */
    /* JADX WARN: Removed duplicated region for block: B:250:0x06bb  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawCommentLayout(Canvas canvas, float f) {
        int i;
        int dp;
        int i2;
        int dp2;
        int i3;
        int i4;
        MessageObject messageObject;
        int i5;
        boolean z;
        Paint paint;
        int i6;
        int i7;
        float f2;
        int i8;
        long j;
        float f3;
        InfiniteProgress infiniteProgress;
        int i9;
        Drawable drawable;
        int i10;
        int i11;
        TextPaint textPaint;
        float f4;
        MessageObject messageObject2;
        TLRPC.MessageReplies messageReplies;
        int i12;
        int i13;
        if (this.mediaBackground) {
            i = this.backgroundDrawableLeft;
            dp = AndroidUtilities.dp(12.0f);
        } else {
            i = this.backgroundDrawableLeft;
            dp = AndroidUtilities.dp(this.drawPinnedBottom ? 12.0f : 18.0f);
        }
        int extraTextX = i + dp + getExtraTextX();
        int extraTextX2 = extraTextX - getExtraTextX();
        int i14 = 1;
        if (this.currentMessagesGroup == null || this.currentMessageObject.isMusic() || this.currentMessageObject.isDocument()) {
            i2 = extraTextX;
            dp2 = extraTextX2 + (this.backgroundWidth - (this.mediaBackground ? 0 : AndroidUtilities.dp(9.0f)));
        } else {
            int groupPhotosWidth = getGroupPhotosWidth();
            if ((this.currentPosition.flags & 1) == 0) {
                double d = extraTextX2;
                double ceil = Math.ceil((r4.pw / 1000.0f) * groupPhotosWidth);
                Double.isNaN(d);
                dp2 = (int) (d + ceil);
                i2 = extraTextX;
            } else {
                int i15 = 0;
                int i16 = 0;
                while (i15 < this.currentMessagesGroup.posArray.size()) {
                    if (this.currentMessagesGroup.posArray.get(i15).minY != 0) {
                        break;
                    }
                    double d2 = i16;
                    double ceil2 = Math.ceil(((r13.pw + r13.leftSpanOffset) / 1000.0f) * groupPhotosWidth);
                    Double.isNaN(d2);
                    i16 = (int) (d2 + ceil2);
                    i15++;
                    extraTextX = extraTextX;
                }
                i2 = extraTextX;
                dp2 = extraTextX2 + (i16 - AndroidUtilities.dp(9.0f));
            }
            TLRPC.Chat chat = this.currentChat;
            if (chat != null && chat.signature_profiles) {
                dp2 -= AndroidUtilities.dp(48.0f);
            }
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null && (groupedMessagePosition.flags & 1) == 0 && !this.currentMessagesGroup.hasSibling) {
            dp2 += AndroidUtilities.dp(14.0f);
        }
        if (this.currentBackgroundDrawable == null || !this.drawCommentButton || this.timeLayout == null) {
            return;
        }
        float dp3 = ((this.layoutHeight + this.transitionParams.deltaBottom) - AndroidUtilities.dp(18.0f)) - this.timeLayout.getHeight();
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null) {
            MessageObject.GroupedMessages.TransitionParams transitionParams = groupedMessages.transitionParams;
            dp3 += transitionParams.offsetBottom;
            if (transitionParams.backgroundChangeBounds) {
                dp3 -= getTranslationY();
            }
        }
        float f5 = dp3;
        if (this.pinnedBottom) {
            i3 = 2;
            i4 = 3;
        } else if (this.pinnedTop) {
            i3 = 4;
            i4 = 1;
        } else {
            i3 = 3;
            i4 = 0;
        }
        int currentBackgroundLeft = getCurrentBackgroundLeft() + AndroidUtilities.dp((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 2.0f : 8.0f);
        float f6 = 45.1f - i4;
        float dp4 = this.layoutHeight - AndroidUtilities.dp(f6);
        MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
        if (groupedMessagePosition2 != null && (groupedMessagePosition2.flags & 1) == 0 && !this.currentMessagesGroup.hasSibling) {
            currentBackgroundLeft -= AndroidUtilities.dp(10.0f);
        }
        Rect rect = this.commentButtonRect;
        MessageObject messageObject3 = this.currentMessageObject;
        rect.set(currentBackgroundLeft - AndroidUtilities.dp(((messageObject3 == null || !messageObject3.isOutOwner()) && !this.drawPinnedBottom && this.currentPosition == null && ((messageObject = this.currentMessageObject) == null || messageObject.type != 17 || this.pollInstantViewTouchesBottom)) ? 6.0f : 0.0f), (int) dp4, dp2 - AndroidUtilities.dp(14.0f), (this.layoutHeight - AndroidUtilities.dp(i3)) + 1);
        if (this.selectorDrawable[1] != null && this.selectorDrawableMaskType[1] == 2) {
            int saveCount = canvas.getSaveCount();
            this.selectorDrawable[1].setBounds(this.commentButtonRect);
            this.selectorDrawable[1].draw(canvas);
            canvas.restoreToCount(saveCount);
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
        if (groupedMessagePosition3 == null || ((groupedMessagePosition3.flags & 1) != 0 && groupedMessagePosition3.minX == 0 && groupedMessagePosition3.maxX == 0)) {
            ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
            boolean z2 = chatMessageCellDelegate != null && chatMessageCellDelegate.shouldDrawThreadProgress(this, false);
            ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
            boolean z3 = chatMessageCellDelegate2 != null && chatMessageCellDelegate2.shouldDrawThreadProgress(this, true);
            if (z2) {
                LoadingDrawable loadingDrawable = this.commentLoading;
                if (loadingDrawable == null) {
                    LoadingDrawable loadingDrawable2 = new LoadingDrawable();
                    this.commentLoading = loadingDrawable2;
                    loadingDrawable2.setAppearByGradient(true);
                } else if (loadingDrawable.isDisappeared() || this.commentLoading.isDisappearing()) {
                    this.commentLoading.reset();
                    this.commentLoading.resetDisappear();
                }
            } else {
                LoadingDrawable loadingDrawable3 = this.commentLoading;
                if (loadingDrawable3 != null && !loadingDrawable3.isDisappearing() && !this.commentLoading.isDisappeared()) {
                    this.commentLoading.disappear();
                }
            }
            LoadingDrawable loadingDrawable4 = this.commentLoading;
            if (loadingDrawable4 != null && !loadingDrawable4.isDisappeared()) {
                int themedColor = getThemedColor(Theme.key_chat_inInstant);
                this.commentLoading.setColors(Theme.multAlpha(themedColor, 0.05f), Theme.multAlpha(themedColor, 0.15f));
                this.commentLoading.setBounds(this.commentButtonRect);
                canvas.save();
                MaskDrawable maskDrawable = this.selectorMaskDrawable[1];
                if (maskDrawable != null) {
                    maskDrawable.setBounds(this.commentButtonRect);
                    this.selectorMaskDrawable[1].updatePath();
                    canvas.clipPath(this.selectorMaskDrawable[1].path);
                }
                this.commentLoading.draw(canvas);
                canvas.restore();
                invalidate();
            }
            if (getAlpha() != 1.0f) {
                RectF rectF = AndroidUtilities.rectTmp;
                rectF.set(0.0f, 0.0f, getWidth(), getHeight());
                canvas.saveLayerAlpha(rectF, (int) (getAlpha() * 255.0f), 31);
            }
            Theme.chat_instantViewPaint.setColor(getThemedColor(Theme.key_chat_inPreviewInstantText));
            if (this.commentAvatarImages != null) {
                int dp5 = AndroidUtilities.dp(17.0f);
                int extraTextX3 = i2 + getExtraTextX();
                int length = this.commentAvatarImages.length - 1;
                int i17 = 2;
                z = false;
                while (length >= 0) {
                    if (this.commentAvatarImagesVisible[length] && this.commentAvatarImages[length].hasImageSet()) {
                        this.commentAvatarImages[length].setImageX(extraTextX3 + (dp5 * length));
                        this.commentAvatarImages[length].setImageY((f5 - AndroidUtilities.dp(4.0f)) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0));
                        ImageReceiver[] imageReceiverArr = this.commentAvatarImages;
                        if (length != imageReceiverArr.length - i14) {
                            canvas.drawCircle(imageReceiverArr[length].getCenterX(), this.commentAvatarImages[length].getCenterY(), AndroidUtilities.dp(13.0f), this.currentBackgroundDrawable.getPaint());
                        }
                        this.commentAvatarImages[length].draw(canvas);
                        if (length != 0) {
                            i17 += 17;
                        }
                        z = true;
                    }
                    length--;
                    i14 = 1;
                }
                i5 = i17;
            } else {
                i5 = 2;
                z = false;
            }
            if (getAlpha() != 1.0f) {
                canvas.restore();
            }
            if (this.mediaBackground && this.captionLayout == null) {
                ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                if (reactionsLayoutInBubble.isEmpty || reactionsLayoutInBubble.isSmall) {
                    i7 = i2;
                    f2 = 1.0f;
                    if (this.commentLayout == null && this.drawSideButton != 3) {
                        Theme.chat_commentTextPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outPreviewInstantText : Theme.key_chat_inPreviewInstantText));
                        float f7 = i5 + 33;
                        int dp6 = i7 + AndroidUtilities.dp(f7);
                        this.commentX = dp6;
                        if (this.drawCommentNumber) {
                            this.commentX = dp6 + this.commentNumberWidth + AndroidUtilities.dp(4.0f);
                        }
                        int alpha = Theme.chat_commentTextPaint.getAlpha();
                        if (!this.transitionParams.animateComments || this.transitionParams.animateCommentsLayout == null) {
                            i9 = alpha;
                        } else {
                            canvas.save();
                            TextPaint textPaint2 = Theme.chat_commentTextPaint;
                            double d3 = alpha;
                            i9 = alpha;
                            double d4 = this.transitionParams.animateChangeProgress;
                            Double.isNaN(d4);
                            Double.isNaN(d3);
                            textPaint2.setAlpha((int) (d3 * (1.0d - d4)));
                            canvas.translate(this.transitionParams.animateCommentX + ((this.commentX - this.transitionParams.animateCommentX) * this.transitionParams.animateChangeProgress), (f5 - AndroidUtilities.dp(0.1f)) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0));
                            this.transitionParams.animateCommentsLayout.draw(canvas);
                            canvas.restore();
                        }
                        canvas.save();
                        canvas.translate(i7 + AndroidUtilities.dp(f7), (f5 - AndroidUtilities.dp(0.1f)) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0));
                        if (this.currentMessageObject.isSent()) {
                            drawable = Theme.chat_commentArrowDrawable;
                            i10 = NotificationCenter.newLocationAvailable;
                        } else {
                            TextPaint textPaint3 = Theme.chat_commentTextPaint;
                            i10 = NotificationCenter.dialogTranslate;
                            textPaint3.setAlpha(NotificationCenter.dialogTranslate);
                            drawable = Theme.chat_commentArrowDrawable;
                        }
                        drawable.setAlpha(i10);
                        Theme.chat_commentDrawable.setAlpha(i10);
                        if (this.drawCommentNumber || (this.transitionParams.animateComments && this.transitionParams.animateDrawCommentNumber)) {
                            if (!this.drawCommentNumber || !this.transitionParams.animateComments) {
                                i11 = i9;
                            } else if (this.transitionParams.animateDrawCommentNumber) {
                                i11 = i9;
                                Theme.chat_commentTextPaint.setAlpha(i11);
                            } else {
                                i11 = i9;
                                Theme.chat_commentTextPaint.setAlpha((int) (i11 * this.transitionParams.animateChangeProgress));
                            }
                            Theme.chat_commentTextPaint.setAlpha((int) (r3.getAlpha() * getAlpha()));
                            this.commentNumberLayout.draw(canvas);
                            if (this.drawCommentNumber) {
                                canvas.translate(this.commentNumberWidth + AndroidUtilities.dp(4.0f), 0.0f);
                            }
                        } else {
                            i11 = i9;
                        }
                        if (!this.transitionParams.animateComments || this.transitionParams.animateCommentsLayout == null) {
                            textPaint = Theme.chat_commentTextPaint;
                            f4 = i11 * f;
                        } else {
                            textPaint = Theme.chat_commentTextPaint;
                            f4 = i11 * this.transitionParams.animateChangeProgress;
                        }
                        textPaint.setAlpha((int) f4);
                        Theme.chat_commentTextPaint.setAlpha((int) (r3.getAlpha() * getAlpha()));
                        this.commentLayout.draw(canvas);
                        canvas.restore();
                        int dp7 = i7 + this.commentWidth + AndroidUtilities.dp(f7) + AndroidUtilities.dp(9.0f);
                        this.commentUnreadX = dp7;
                        if (this.drawCommentNumber) {
                            this.commentUnreadX = dp7 + this.commentNumberWidth + AndroidUtilities.dp(4.0f);
                        }
                        MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
                        if (groupedMessages2 == null || groupedMessages2.messages.isEmpty()) {
                            if (this.currentMessageObject.hasReplies()) {
                                messageObject2 = this.currentMessageObject;
                                messageReplies = messageObject2.messageOwner.replies;
                            }
                            messageReplies = null;
                        } else {
                            messageObject2 = this.currentMessagesGroup.messages.get(0);
                        }
                        boolean z4 = (messageReplies == null || (i13 = messageReplies.read_max_id) == 0 || i13 >= messageReplies.max_id) ? false : true;
                        this.commentDrawUnread = z4;
                        if (z4) {
                            Theme.chat_docBackPaint.setColor(getThemedColor(Theme.key_chat_inInstant));
                            if (this.transitionParams.animateComments) {
                                if (!this.transitionParams.animateCommentDrawUnread) {
                                    Theme.chat_docBackPaint.setAlpha((int) (Color.alpha(r2) * this.transitionParams.animateChangeProgress));
                                }
                                i12 = (int) (this.transitionParams.animateCommentUnreadX + ((this.commentUnreadX - this.transitionParams.animateCommentUnreadX) * this.transitionParams.animateChangeProgress));
                            } else {
                                i12 = this.commentUnreadX;
                            }
                            canvas.drawCircle(i12, AndroidUtilities.dp(8.0f) + f5 + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0), AndroidUtilities.dp(2.5f), Theme.chat_docBackPaint);
                        }
                    }
                    if (!z) {
                        BaseCell.setDrawableBounds(Theme.chat_commentDrawable, i7, (f5 - AndroidUtilities.dp(4.0f)) + (this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0));
                        if (f != f2) {
                            Theme.chat_commentDrawable.setAlpha((int) (f * 255.0f));
                            Theme.chat_commentDrawable.draw(canvas);
                            Theme.chat_commentDrawable.setAlpha(NotificationCenter.newLocationAvailable);
                        } else {
                            Theme.chat_commentDrawable.draw(canvas);
                        }
                    }
                    this.commentArrowX = dp2 - AndroidUtilities.dp(44.0f);
                    i8 = !this.transitionParams.animateComments ? (int) (this.transitionParams.animateCommentArrowX + ((this.commentArrowX - this.transitionParams.animateCommentArrowX) * this.transitionParams.animateChangeProgress)) : this.commentArrowX;
                    float dp8 = (f5 - AndroidUtilities.dp(4.0f)) + (!this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0);
                    long elapsedRealtime = SystemClock.elapsedRealtime();
                    j = elapsedRealtime - this.commentProgressLastUpadteTime;
                    this.commentProgressLastUpadteTime = elapsedRealtime;
                    if (j > 17) {
                        j = 17;
                    }
                    float f8 = this.commentProgressAlpha;
                    if (z3) {
                        f3 = 0.0f;
                        if (f8 > 0.0f) {
                            float f9 = f8 - (j / 180.0f);
                            this.commentProgressAlpha = f9;
                            if (f9 < 0.0f) {
                                this.commentProgressAlpha = 0.0f;
                            }
                        }
                    } else {
                        if (f8 < f2) {
                            float f10 = f8 + (j / 180.0f);
                            this.commentProgressAlpha = f10;
                            if (f10 > f2) {
                                this.commentProgressAlpha = f2;
                            }
                        }
                        f3 = 0.0f;
                    }
                    if ((!z3 || this.commentProgressAlpha > f3) && (infiniteProgress = this.commentProgress) != null) {
                        infiniteProgress.setColor(getThemedColor(Theme.key_chat_inInstant));
                        this.commentProgress.setAlpha(this.commentProgressAlpha);
                        this.commentProgress.draw(canvas, AndroidUtilities.dp(11.0f) + i8, AndroidUtilities.dp(12.0f) + dp8, this.commentProgressAlpha);
                        invalidate();
                    }
                    if (z3 || this.commentProgressAlpha < f2) {
                        int intrinsicWidth = Theme.chat_commentArrowDrawable.getIntrinsicWidth() / 2;
                        float f11 = i8 + intrinsicWidth;
                        float intrinsicHeight = Theme.chat_commentArrowDrawable.getIntrinsicHeight() / 2;
                        float f12 = dp8 + intrinsicHeight;
                        Drawable drawable2 = Theme.chat_commentArrowDrawable;
                        float f13 = f2 - this.commentProgressAlpha;
                        float f14 = intrinsicWidth * f13;
                        float f15 = intrinsicHeight * f13;
                        drawable2.setBounds((int) (f11 - f14), (int) (f12 - f15), (int) (f11 + f14), (int) (f12 + f15));
                        Theme.chat_commentArrowDrawable.setAlpha((int) ((f2 - this.commentProgressAlpha) * 255.0f * f));
                        Theme.chat_commentArrowDrawable.draw(canvas);
                    }
                    return;
                }
            }
            if (isDrawSelectionBackground()) {
                paint = Theme.chat_replyLinePaint;
                i6 = this.currentMessageObject.isOutOwner() ? Theme.key_chat_outVoiceSeekbarSelected : Theme.key_chat_inVoiceSeekbarSelected;
            } else {
                paint = Theme.chat_replyLinePaint;
                i6 = this.currentMessageObject.isOutOwner() ? Theme.key_chat_outVoiceSeekbar : Theme.key_chat_inVoiceSeekbar;
            }
            paint.setColor(getThemedColor(i6));
            float dp9 = this.layoutHeight - AndroidUtilities.dp(f6);
            TransitionParams transitionParams2 = this.transitionParams;
            float f16 = dp9 + transitionParams2.deltaBottom;
            MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
            if (groupedMessages3 != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams3 = groupedMessages3.transitionParams;
                f16 += transitionParams3.offsetBottom;
                if (transitionParams3.backgroundChangeBounds) {
                    f16 -= getTranslationY();
                }
            } else {
                dp2 = (i2 + ((int) ((this.backgroundWidth - transitionParams2.deltaLeft) + transitionParams2.deltaRight))) - AndroidUtilities.dp(12.0f);
            }
            int i18 = dp2;
            float f17 = f16;
            Theme.chat_replyLinePaint.setAlpha((int) (r1.getAlpha() * getAlpha()));
            i7 = i2;
            f2 = 1.0f;
            canvas.drawLine(i7, f17, i18 - AndroidUtilities.dp(14.0f), f17, Theme.chat_replyLinePaint);
            dp2 = i18;
            if (this.commentLayout == null) {
            }
            if (!z) {
            }
            this.commentArrowX = dp2 - AndroidUtilities.dp(44.0f);
            if (!this.transitionParams.animateComments) {
            }
            float dp82 = (f5 - AndroidUtilities.dp(4.0f)) + (!this.pinnedBottom ? AndroidUtilities.dp(2.0f) : 0);
            long elapsedRealtime2 = SystemClock.elapsedRealtime();
            j = elapsedRealtime2 - this.commentProgressLastUpadteTime;
            this.commentProgressLastUpadteTime = elapsedRealtime2;
            if (j > 17) {
            }
            float f82 = this.commentProgressAlpha;
            if (z3) {
            }
            if (!z3) {
            }
            infiniteProgress.setColor(getThemedColor(Theme.key_chat_inInstant));
            this.commentProgress.setAlpha(this.commentProgressAlpha);
            this.commentProgress.draw(canvas, AndroidUtilities.dp(11.0f) + i8, AndroidUtilities.dp(12.0f) + dp82, this.commentProgressAlpha);
            invalidate();
            if (z3) {
            }
            int intrinsicWidth2 = Theme.chat_commentArrowDrawable.getIntrinsicWidth() / 2;
            float f112 = i8 + intrinsicWidth2;
            float intrinsicHeight2 = Theme.chat_commentArrowDrawable.getIntrinsicHeight() / 2;
            float f122 = dp82 + intrinsicHeight2;
            Drawable drawable22 = Theme.chat_commentArrowDrawable;
            float f132 = f2 - this.commentProgressAlpha;
            float f142 = intrinsicWidth2 * f132;
            float f152 = intrinsicHeight2 * f132;
            drawable22.setBounds((int) (f112 - f142), (int) (f122 - f152), (int) (f112 + f142), (int) (f122 + f152));
            Theme.chat_commentArrowDrawable.setAlpha((int) ((f2 - this.commentProgressAlpha) * 255.0f * f));
            Theme.chat_commentArrowDrawable.draw(canvas);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:294:0x131a, code lost:
    
        if (isDrawSelectionBackground() != false) goto L892;
     */
    /* JADX WARN: Code restructure failed: missing block: B:295:0x1359, code lost:
    
        r1 = org.telegram.ui.ActionBar.Theme.chat_msgInMenuDrawable;
     */
    /* JADX WARN: Code restructure failed: missing block: B:296:0x1356, code lost:
    
        r1 = org.telegram.ui.ActionBar.Theme.chat_msgInMenuSelectedDrawable;
     */
    /* JADX WARN: Code restructure failed: missing block: B:306:0x1354, code lost:
    
        if (isDrawSelectionBackground() != false) goto L892;
     */
    /* JADX WARN: Code restructure failed: missing block: B:368:0x092e, code lost:
    
        if (r1 < 1.0f) goto L485;
     */
    /* JADX WARN: Code restructure failed: missing block: B:527:0x0cea, code lost:
    
        if (r1 < 1.0f) goto L639;
     */
    /* JADX WARN: Removed duplicated region for block: B:107:0x1123  */
    /* JADX WARN: Removed duplicated region for block: B:110:0x1142  */
    /* JADX WARN: Removed duplicated region for block: B:113:0x1169  */
    /* JADX WARN: Removed duplicated region for block: B:116:0x11a5  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x11f8  */
    /* JADX WARN: Removed duplicated region for block: B:129:0x120d  */
    /* JADX WARN: Removed duplicated region for block: B:137:0x1271  */
    /* JADX WARN: Removed duplicated region for block: B:176:0x1531 A[LOOP:0: B:174:0x152e->B:176:0x1531, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:319:0x1778  */
    /* JADX WARN: Removed duplicated region for block: B:322:0x1260  */
    /* JADX WARN: Removed duplicated region for block: B:323:0x1204  */
    /* JADX WARN: Removed duplicated region for block: B:326:0x11ef  */
    /* JADX WARN: Removed duplicated region for block: B:327:0x1171  */
    /* JADX WARN: Removed duplicated region for block: B:328:0x1145  */
    /* JADX WARN: Removed duplicated region for block: B:329:0x1126  */
    /* JADX WARN: Removed duplicated region for block: B:333:0x1268  */
    /* JADX WARN: Removed duplicated region for block: B:336:0x0791  */
    /* JADX WARN: Removed duplicated region for block: B:354:0x08fe  */
    /* JADX WARN: Removed duplicated region for block: B:365:0x0926  */
    /* JADX WARN: Removed duplicated region for block: B:372:0x096e  */
    /* JADX WARN: Removed duplicated region for block: B:380:0x099e  */
    /* JADX WARN: Removed duplicated region for block: B:386:0x09fb  */
    /* JADX WARN: Removed duplicated region for block: B:396:0x0a96  */
    /* JADX WARN: Removed duplicated region for block: B:426:0x09f1  */
    /* JADX WARN: Removed duplicated region for block: B:428:0x0983  */
    /* JADX WARN: Removed duplicated region for block: B:433:0x0901  */
    /* JADX WARN: Removed duplicated region for block: B:486:0x0c21  */
    /* JADX WARN: Removed duplicated region for block: B:497:0x0c4b  */
    /* JADX WARN: Removed duplicated region for block: B:502:0x0c7b  */
    /* JADX WARN: Removed duplicated region for block: B:513:0x0cba  */
    /* JADX WARN: Removed duplicated region for block: B:524:0x0ce2  */
    /* JADX WARN: Removed duplicated region for block: B:531:0x0cfa  */
    /* JADX WARN: Removed duplicated region for block: B:533:0x0cfd  */
    /* JADX WARN: Removed duplicated region for block: B:534:0x0cbd  */
    /* JADX WARN: Removed duplicated region for block: B:537:0x0d15  */
    /* JADX WARN: Removed duplicated region for block: B:545:0x0d55  */
    /* JADX WARN: Removed duplicated region for block: B:552:0x0dd3  */
    /* JADX WARN: Removed duplicated region for block: B:557:0x0deb  */
    /* JADX WARN: Removed duplicated region for block: B:566:0x0e13  */
    /* JADX WARN: Removed duplicated region for block: B:569:0x0e20  */
    /* JADX WARN: Removed duplicated region for block: B:572:0x0e30  */
    /* JADX WARN: Removed duplicated region for block: B:57:0x0709  */
    /* JADX WARN: Removed duplicated region for block: B:586:0x0e6f  */
    /* JADX WARN: Removed duplicated region for block: B:590:0x0fce  */
    /* JADX WARN: Removed duplicated region for block: B:593:0x0fdb  */
    /* JADX WARN: Removed duplicated region for block: B:596:0x0ff6  */
    /* JADX WARN: Removed duplicated region for block: B:598:0x0ff8  */
    /* JADX WARN: Removed duplicated region for block: B:599:0x0fde  */
    /* JADX WARN: Removed duplicated region for block: B:600:0x0fd1  */
    /* JADX WARN: Removed duplicated region for block: B:601:0x0ea6  */
    /* JADX WARN: Removed duplicated region for block: B:619:0x0e23  */
    /* JADX WARN: Removed duplicated region for block: B:620:0x0e16  */
    /* JADX WARN: Removed duplicated region for block: B:623:0x100d  */
    /* JADX WARN: Removed duplicated region for block: B:649:0x0ddf  */
    /* JADX WARN: Removed duplicated region for block: B:655:0x0d75  */
    /* JADX WARN: Removed duplicated region for block: B:660:0x0da3  */
    /* JADX WARN: Removed duplicated region for block: B:665:0x0d65  */
    /* JADX WARN: Removed duplicated region for block: B:905:0x0535  */
    /* JADX WARN: Removed duplicated region for block: B:90:0x10dc  */
    /* JADX WARN: Removed duplicated region for block: B:93:0x10e5  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawContent(final Canvas canvas, boolean z) {
        boolean z2;
        boolean z3;
        MessageObject messageObject;
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        ChatMessageCellDelegate chatMessageCellDelegate;
        boolean z4;
        ViewGroup viewGroup;
        CheckBoxBase checkBoxBase;
        float progress;
        MessageObject messageObject2;
        int i;
        float f;
        RadialProgress2 radialProgress2;
        int i2;
        AudioVisualizerDrawable audioVisualizerDrawable;
        int i3;
        int i4;
        float useTranscribeButtonProgress;
        boolean isPlayingMessage;
        float lerp;
        MessageObject messageObject3;
        RadialProgress2 radialProgress22;
        int i5;
        boolean isPlayingMessage2;
        float f2;
        int i6;
        float f3;
        float f4;
        MessageObject messageObject4;
        int i7;
        int i8;
        int i9;
        MessageObject messageObject5;
        Drawable drawable;
        float dp;
        int dp2;
        int dp3;
        RadialProgress2 radialProgress23;
        int i10;
        StaticLayout staticLayout;
        float imageX;
        int i11;
        RadialProgress2 radialProgress24;
        int i12;
        int blendOver;
        int[] roundRadius;
        int i13;
        int imageX2;
        Path path;
        float f5;
        TextPaint textPaint;
        int i14;
        MessageObject messageObject6 = this.currentMessageObject;
        if (messageObject6 == null || !messageObject6.preview) {
            z2 = z;
            z3 = false;
        } else {
            z2 = z;
            z3 = true;
        }
        if (z2 != z3) {
            return;
        }
        boolean z5 = this.needNewVisiblePart && messageObject6.type == 0;
        boolean hasSpoilers = hasSpoilers();
        if (z5 || hasSpoilers) {
            getLocalVisibleRect(this.scrollRect);
            if (hasSpoilers) {
                Rect rect = this.scrollRect;
                updateSpoilersVisiblePart(rect.top, rect.bottom);
            }
            if (z5) {
                Rect rect2 = this.scrollRect;
                int i15 = rect2.top;
                setVisiblePart(i15, rect2.bottom - i15, this.parentHeight, this.parentViewTopOffset, this.viewTop, this.parentWidth, this.backgroundHeight, this.blurredViewTopOffset, this.blurredViewBottomOffset);
                this.needNewVisiblePart = false;
            }
        }
        float f6 = this.buttonX;
        float f7 = this.buttonY;
        if (this.transitionParams.animateButton) {
            f6 = AndroidUtilities.lerp(this.transitionParams.animateFromButtonX, this.buttonX, this.transitionParams.animateChangeProgress);
            f7 = AndroidUtilities.lerp(this.transitionParams.animateFromButtonY, this.buttonY, this.transitionParams.animateChangeProgress);
            int i16 = (int) f6;
            int i17 = (int) f7;
            this.radialProgress.setProgressRect(i16, i17, AndroidUtilities.dp(44.0f) + i16, AndroidUtilities.dp(44.0f) + i17);
        }
        float f8 = f7;
        updateSeekBarWaveformWidth(canvas);
        this.forceNotDrawTime = this.currentMessagesGroup != null;
        this.photoImage.setPressed(((this.isHighlightedAnimated || this.isHighlighted) && this.currentPosition != null) ? 2 : 0);
        this.photoImage.setVisible((PhotoViewer.isShowingImage(this.currentMessageObject) || SecretMediaViewer.getInstance().isShowingImage(this.currentMessageObject) || StoryViewer.isShowingImage(this.currentMessageObject)) ? false : true, false);
        this.blurredPhotoImage.setVisible(this.fitPhotoImage || !(PhotoViewer.isShowingImage(this.currentMessageObject) || SecretMediaViewer.getInstance().isShowingImage(this.currentMessageObject) || StoryViewer.isShowingImage(this.currentMessageObject)), false);
        GroupMedia groupMedia = this.groupMedia;
        if (groupMedia == null ? !this.photoImage.getVisible() : !groupMedia.allVisible()) {
            this.mediaWasInvisible = true;
            this.timeWasInvisible = true;
            int i18 = this.animatingNoSound;
            if (i18 == 1) {
                this.animatingNoSoundProgress = 0.0f;
            } else if (i18 == 2) {
                this.animatingNoSoundProgress = 1.0f;
            }
            this.animatingNoSound = 0;
        } else if (this.groupPhotoInvisible) {
            this.timeWasInvisible = true;
        } else {
            boolean z6 = this.mediaWasInvisible;
            if (z6 || this.timeWasInvisible) {
                if (z6) {
                    this.controlsAlpha = 0.0f;
                    this.mediaWasInvisible = false;
                }
                if (this.timeWasInvisible) {
                    this.timeAlpha = 0.0f;
                    this.timeWasInvisible = false;
                }
                this.lastControlsAlphaChangeTime = System.currentTimeMillis();
                this.totalChangeTime = 0L;
            }
        }
        RadialProgress2 radialProgress25 = this.radialProgress;
        int i19 = Theme.key_chat_mediaProgress;
        radialProgress25.setProgressColor(getThemedColor(i19));
        this.videoRadialProgress.setProgressColor(getThemedColor(i19));
        this.imageDrawn = false;
        this.radialProgress.setCircleCrossfadeColor(-1, 0.0f, 1.0f);
        GroupMedia groupMedia2 = this.groupMedia;
        if (groupMedia2 == null) {
            MessageObject messageObject7 = this.currentMessageObject;
            int i20 = messageObject7.type;
            if (i20 == 0 || i20 == 24 || i20 == 19 || messageObject7.isGiveawayOrGiveawayResults()) {
                layoutTextXY(false);
                if (!this.enterTransitionInProgress && (messageObject = this.currentMessageObject) != null && !messageObject.preview && (!this.transitionParams.animateExpandedQuotes || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.canDrawOutboundsContent())) {
                    if (!this.drawForBlur && !(canvas instanceof SizeNotifierFrameLayout.SimplerCanvas) && this.animatedEmojiStack != null && (((arrayList = this.currentMessageObject.textLayoutBlocks) != null && !arrayList.isEmpty()) || (this.transitionParams.animateOutTextBlocks != null && !this.transitionParams.animateOutTextBlocks.isEmpty()))) {
                        this.animatedEmojiStack.clearPositions();
                    }
                    drawMessageText(canvas);
                }
                if (!this.enterTransitionInProgress || this.currentMessageObject.isVoice()) {
                    drawLinkPreview(canvas, 1.0f);
                    getIconForCurrentState();
                }
                this.drawTime = true;
            } else if (this.drawPhotoImage) {
                float f9 = this.roundVideoPlayPipFloat.get();
                if (f9 > 0.0f) {
                    if (this.drillHolePaint == null) {
                        this.drillHolePaint = new Paint(1);
                    }
                    this.drillHolePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outLoader : Theme.key_chat_inLoader));
                    this.drillHolePaint.setAlpha((int) (r3.getAlpha() * getVideoTranscriptionProgress()));
                    canvas.drawCircle(this.photoImage.getCenterX(), this.photoImage.getCenterY(), this.photoImage.getImageWidth() / 2.0f, this.drillHolePaint);
                }
                if (this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && MediaController.getInstance().isVideoDrawingReady() && canvas.isHardwareAccelerated() && ((messageObject2 = this.currentMessageObject) == null || !messageObject2.isVoiceTranscriptionOpen() || f9 >= 1.0f)) {
                    this.imageDrawn = true;
                    this.drawTime = true;
                } else {
                    if (this.currentMessageObject.type == 5 && Theme.chat_roundVideoShadow != null) {
                        float imageX3 = this.photoImage.getImageX() - AndroidUtilities.dp(3.0f);
                        float imageY = this.photoImage.getImageY() - AndroidUtilities.dp(2.0f);
                        Theme.chat_roundVideoShadow.setAlpha((int) ((1.0f - getVideoTranscriptionProgress()) * 255.0f));
                        Theme.chat_roundVideoShadow.setBounds((int) imageX3, (int) imageY, (int) (imageX3 + this.photoImage.getImageWidth() + AndroidUtilities.dp(6.0f)), (int) (imageY + this.photoImage.getImageHeight() + AndroidUtilities.dp(6.0f)));
                        Theme.chat_roundVideoShadow.draw(canvas);
                        Theme.chat_roundVideoShadow.setAlpha(NotificationCenter.newLocationAvailable);
                        if (!this.photoImage.hasBitmapImage() || this.photoImage.getCurrentAlpha() != 1.0f) {
                            Theme.chat_docBackPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outBubble : Theme.key_chat_inBubble));
                            canvas.drawCircle(this.photoImage.getCenterX(), this.photoImage.getCenterY(), this.photoImage.getImageWidth() / 2.0f, Theme.chat_docBackPaint);
                        }
                    }
                    CheckBoxBase checkBoxBase2 = this.mediaCheckBox;
                    boolean z7 = checkBoxBase2 != null && (this.checkBoxVisible || checkBoxBase2.getProgress() != 0.0f || this.checkBoxAnimationInProgress) && this.currentMessagesGroup != null;
                    this.drawMediaCheckBox = z7;
                    if (!z7 || (!(this.mediaCheckBox.isChecked() || this.mediaCheckBox.getProgress() != 0.0f || this.checkBoxAnimationInProgress) || textIsSelectionMode())) {
                        this.photoImage.setSideClip(0.0f);
                    } else {
                        if (!this.currentMessagesGroup.isDocuments) {
                            Theme.chat_replyLinePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outBubbleSelected : Theme.key_chat_inBubbleSelected));
                            this.rect.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
                            int[] roundRadius2 = this.photoImage.getRoundRadius();
                            this.rectPath.reset();
                            for (int i21 = 0; i21 < roundRadius2.length; i21++) {
                                float[] fArr = radii;
                                int i22 = i21 * 2;
                                float f10 = roundRadius2[i21];
                                fArr[i22 + 1] = f10;
                                fArr[i22] = f10;
                            }
                            this.rectPath.addRoundRect(this.rect, radii, Path.Direction.CW);
                            this.rectPath.close();
                            canvas.drawPath(this.rectPath, Theme.chat_replyLinePaint);
                        }
                        this.photoImage.setSideClip(AndroidUtilities.dp(14.0f) * this.mediaCheckBox.getProgress());
                        if (this.checkBoxAnimationInProgress) {
                            checkBoxBase = this.mediaCheckBox;
                            progress = this.checkBoxAnimationProgress;
                        } else {
                            checkBoxBase = this.mediaCheckBox;
                            progress = this.checkBoxVisible ? 1.0f : checkBoxBase.getProgress();
                        }
                        checkBoxBase.setBackgroundAlpha(progress);
                    }
                    if (this.isRoundVideo && this.currentMessageObject.isVoiceTranscriptionOpen() && f9 > 0.0f) {
                        canvas.save();
                        Path path2 = this.drillHolePath;
                        if (path2 == null) {
                            this.drillHolePath = new Path();
                        } else {
                            path2.rewind();
                        }
                        this.drillHolePath.addCircle(this.photoImage.getCenterX(), this.photoImage.getCenterY(), (this.photoImage.getImageWidth() / 2.0f) * (1.0f - f9), Path.Direction.CW);
                        canvas.clipPath(this.drillHolePath);
                    }
                    ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                    boolean z8 = (chatMessageCellDelegate2 == null || chatMessageCellDelegate2.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) ? false : true;
                    if (!z8 || this.fitPhotoImage) {
                        float y = getY() + this.photoImage.getImageY();
                        float imageHeight = this.photoImage.getImageHeight() + y;
                        this.photoImageOutOfBounds = false;
                        if (!SizeNotifierFrameLayout.drawingBlur) {
                            float f11 = this.parentBoundsTop;
                            if ((f11 != 0.0f || this.parentBoundsBottom != 0) && (imageHeight < f11 || y > this.parentBoundsBottom)) {
                                this.photoImageOutOfBounds = true;
                            }
                        }
                        if (!this.photoImageOutOfBounds || this.drawForBlur) {
                            this.photoImage.setSkipUpdateFrame(this.drawForBlur || this.skipFrameUpdate);
                            if (this.flipImage) {
                                canvas.save();
                                canvas.scale(-1.0f, 1.0f, this.photoImage.getCenterX(), this.photoImage.getCenterY());
                                ImageReceiver imageReceiver = this.blurredPhotoImage;
                                if (imageReceiver != null && this.fitPhotoImage) {
                                    imageReceiver.setImageCoords(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
                                    this.blurredPhotoImage.setRoundRadius(this.photoImage.getRoundRadius());
                                    this.blurredPhotoImage.draw(canvas);
                                }
                                if (!z8) {
                                    if (allowDrawPhotoImage()) {
                                        this.imageDrawn = drawPhotoImage(canvas);
                                    } else {
                                        this.imageDrawn = true;
                                    }
                                    if (this.currentMessageObject.hasMediaSpoilers()) {
                                        drawBlurredPhoto(canvas);
                                    }
                                }
                                canvas.restore();
                            } else {
                                ImageReceiver imageReceiver2 = this.blurredPhotoImage;
                                if (imageReceiver2 != null && this.fitPhotoImage) {
                                    imageReceiver2.setImageCoords(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
                                    this.blurredPhotoImage.setRoundRadius(this.photoImage.getRoundRadius());
                                    this.blurredPhotoImage.draw(canvas);
                                }
                                if (!z8) {
                                    if (allowDrawPhotoImage()) {
                                        ButtonBounce buttonBounce = this.contactBounce;
                                        if (buttonBounce != null) {
                                            float scale = buttonBounce.getScale(0.0125f);
                                            if (scale != 1.0f) {
                                                canvas.save();
                                                canvas.scale(scale, scale, this.contactRect.centerX(), this.contactRect.centerY());
                                                z4 = true;
                                                this.imageDrawn = drawPhotoImage(canvas);
                                                if (z4) {
                                                    canvas.restore();
                                                }
                                            }
                                        }
                                        z4 = false;
                                        this.imageDrawn = drawPhotoImage(canvas);
                                        if (z4) {
                                        }
                                    } else {
                                        this.imageDrawn = true;
                                    }
                                    if (this.currentMessageObject.hasMediaSpoilers()) {
                                        drawBlurredPhoto(canvas);
                                    }
                                }
                            }
                            this.photoImage.setSkipUpdateFrame(this.skipFrameUpdate);
                        }
                    }
                    if (this.isRoundVideo && this.currentMessageObject.isVoiceTranscriptionOpen() && f9 > 0.0f) {
                        canvas.restore();
                    }
                    if (!this.isRoundVideo) {
                        drawVideoTimestamps(canvas, getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outReplyLine : Theme.key_chat_inReplyLine));
                    }
                    boolean z9 = this.drawTime;
                    boolean visible = this.photoImage.getVisible();
                    boolean z10 = visible || (this.currentMessageObject.shouldDrawReactionsInLayout() && this.currentMessageObject.hasReactions());
                    this.drawTime = z10;
                    if (this.currentPosition != null && z9 != z10 && (viewGroup = (ViewGroup) getParent()) != null) {
                        if (this.currentPosition.last) {
                            viewGroup.invalidate();
                        } else {
                            int childCount = viewGroup.getChildCount();
                            for (int i23 = 0; i23 < childCount; i23++) {
                                View childAt = viewGroup.getChildAt(i23);
                                if (childAt != this && (childAt instanceof ChatMessageCell)) {
                                    ChatMessageCell chatMessageCell = (ChatMessageCell) childAt;
                                    if (chatMessageCell.getCurrentMessagesGroup() == this.currentMessagesGroup) {
                                        MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                                        if (currentPosition.last && currentPosition.maxY == this.currentPosition.maxY && (chatMessageCell.timeX - AndroidUtilities.dp(4.0f)) + chatMessageCell.getLeft() < getRight()) {
                                            chatMessageCell.groupPhotoInvisible = !visible;
                                            chatMessageCell.invalidate();
                                            viewGroup.invalidate();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                int i24 = this.documentAttachType;
                if (i24 == 5 || i24 == 1) {
                    CheckBoxBase checkBoxBase3 = this.mediaCheckBox;
                    boolean z11 = checkBoxBase3 != null && (this.checkBoxVisible || checkBoxBase3.getProgress() != 0.0f || this.checkBoxAnimationInProgress) && this.currentMessagesGroup != null;
                    this.drawMediaCheckBox = z11;
                    if (z11) {
                        this.radialProgress.setCircleCrossfadeColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outTimeText : Theme.key_chat_inTimeText, this.checkBoxAnimationProgress, 1.0f - this.mediaCheckBox.getProgress());
                    }
                    if (!this.drawMediaCheckBox || textIsSelectionMode() || (!this.mediaCheckBox.isChecked() && this.mediaCheckBox.getProgress() == 0.0f && !this.checkBoxAnimationInProgress)) {
                        CheckBoxBase checkBoxBase4 = this.mediaCheckBox;
                        if (checkBoxBase4 != null) {
                            checkBoxBase4.setBackgroundAlpha(1.0f);
                        }
                    } else if (this.checkBoxAnimationInProgress) {
                        this.mediaCheckBox.setBackgroundAlpha(this.checkBoxAnimationProgress);
                        if (this.radialProgress.getMiniIcon() == 4) {
                            this.radialProgress.setMiniIconScale(this.checkBoxAnimationProgress);
                        }
                    } else {
                        CheckBoxBase checkBoxBase5 = this.mediaCheckBox;
                        checkBoxBase5.setBackgroundAlpha(this.checkBoxVisible ? 1.0f : checkBoxBase5.getProgress());
                    }
                }
            }
            i = this.documentAttachType;
            if (i != 2) {
                if (this.drawPhotoImage) {
                    MessageObject messageObject8 = this.currentMessageObject;
                    if (!messageObject8.isRepostPreview && !messageObject8.isSponsored() && this.photoImage.getVisible() && !this.hasGamePreview && !this.currentMessageObject.needDrawBluredPreview()) {
                        MessageObject messageObject9 = this.currentMessageObject;
                        if (!messageObject9.preview && !this.isSmallImage && !messageObject9.isSponsored()) {
                            int alpha = ((BitmapDrawable) Theme.chat_msgMediaMenuDrawable).getPaint().getAlpha();
                            Theme.chat_msgMediaMenuDrawable.setAlpha((int) (alpha * this.controlsAlpha));
                            Drawable drawable2 = Theme.chat_msgMediaMenuDrawable;
                            int imageX4 = (int) ((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(14.0f));
                            this.otherX = imageX4;
                            int imageY2 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.1f));
                            this.otherY = imageY2;
                            BaseCell.setDrawableBounds(drawable2, imageX4, imageY2);
                            Theme.chat_msgMediaMenuDrawable.draw(canvas);
                            Theme.chat_msgMediaMenuDrawable.setAlpha(alpha);
                        }
                    }
                }
                f = 1.0f;
            } else if (i == 5) {
                if (this.currentMessageObject.isOutOwner()) {
                    Theme.chat_audioTitlePaint.setColor(getThemedColor(Theme.key_chat_outAudioTitleText));
                    Theme.chat_audioPerformerPaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outAudioPerformerSelectedText : Theme.key_chat_outAudioPerformerText));
                    Theme.chat_audioTimePaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outAudioDurationSelectedText : Theme.key_chat_outAudioDurationText));
                    radialProgress22 = this.radialProgress;
                    i5 = (isDrawSelectionBackground() || this.buttonPressed != 0) ? Theme.key_chat_outAudioSelectedProgress : Theme.key_chat_outAudioProgress;
                } else {
                    ReplyMessageLine replyMessageLine = this.linkLine;
                    if (replyMessageLine == null || !this.hasLinkPreview) {
                        Theme.chat_audioTitlePaint.setColor(getThemedColor(Theme.key_chat_inAudioTitleText));
                        Theme.chat_audioPerformerPaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inAudioPerformerSelectedText : Theme.key_chat_inAudioPerformerText));
                        Theme.chat_audioTimePaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inAudioDurationSelectedText : Theme.key_chat_inAudioDurationText));
                        radialProgress22 = this.radialProgress;
                        i5 = (isDrawSelectionBackground() || this.buttonPressed != 0) ? Theme.key_chat_inAudioSelectedProgress : Theme.key_chat_inAudioProgress;
                    } else {
                        Theme.chat_audioTitlePaint.setColor(replyMessageLine.getColor());
                        Theme.chat_audioPerformerPaint.setColor(Theme.adaptHue(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inAudioPerformerSelectedText : Theme.key_chat_inAudioPerformerText), this.linkLine.getColor()));
                        Theme.chat_audioTimePaint.setColor(Theme.adaptHue(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inAudioDurationSelectedText : Theme.key_chat_inAudioDurationText), this.linkLine.getColor()));
                        this.radialProgress.setProgressColor(Theme.adaptHue(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? Theme.key_chat_inAudioSelectedProgress : Theme.key_chat_inAudioProgress), this.linkLine.getColor()));
                        SeekBar seekBar = this.seekBar;
                        int adaptHue = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioSeekbar), this.linkLine.getColor());
                        int adaptHue2 = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioCacheSeekbar), this.linkLine.getColor());
                        int i25 = Theme.key_chat_inAudioSeekbarFill;
                        seekBar.setColors(adaptHue, adaptHue2, Theme.adaptHue(getThemedColor(i25), this.linkLine.getColor()), Theme.adaptHue(getThemedColor(i25), this.linkLine.getColor()), Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioSeekbarSelected), this.linkLine.getColor()));
                        this.radialProgress.setBackgroundDrawable(!isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
                        this.radialProgress.iconScale = 1.0f;
                        if (this.drawPhotoImage && (messageObject4 = this.currentMessageObject) != null && messageObject4.hasMediaSpoilers() && this.currentMessageObject.isSensitive()) {
                            if (this.currentMessageObject.isMediaSpoilersRevealed) {
                                float f12 = this.mediaSpoilerRevealProgress;
                                if (f12 != 0.0f) {
                                }
                            }
                            this.radialProgress.iconScale *= this.mediaSpoilerRevealProgress;
                        }
                        this.radialProgress.draw(canvas);
                        canvas.save();
                        canvas.translate(this.timeAudioX + this.songX, AndroidUtilities.dp(13.0f) + this.namesOffset + getMediaOffsetY());
                        this.songLayout.draw(canvas);
                        canvas.restore();
                        isPlayingMessage2 = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
                        if (isPlayingMessage2) {
                            float f13 = this.toSeekBarProgress;
                            if (f13 != 1.0f) {
                                float f14 = f13 + 0.16f;
                                this.toSeekBarProgress = f14;
                                if (f14 > 1.0f) {
                                    this.toSeekBarProgress = 1.0f;
                                }
                                invalidate();
                                f2 = this.toSeekBarProgress;
                                if (f2 > 0.0f) {
                                    if (f2 != 1.0f) {
                                        int i26 = this.seekBarX;
                                        float f15 = i26;
                                        float f16 = this.seekBarY;
                                        float width = i26 + this.seekBar.getWidth() + AndroidUtilities.dp(24.0f);
                                        float dp4 = this.seekBarY + AndroidUtilities.dp(24.0f);
                                        int i27 = (int) (this.toSeekBarProgress * 255.0f);
                                        i6 = NotificationCenter.newLocationAvailable;
                                        f = 1.0f;
                                        canvas.saveLayerAlpha(f15, f16, width, dp4, i27, 31);
                                    } else {
                                        i6 = NotificationCenter.newLocationAvailable;
                                        f = 1.0f;
                                        canvas.save();
                                    }
                                    canvas.translate(this.seekBarX, this.seekBarY);
                                    this.seekBar.draw(canvas);
                                    canvas.restore();
                                } else {
                                    i6 = NotificationCenter.newLocationAvailable;
                                    f = 1.0f;
                                }
                                if (this.toSeekBarProgress < f) {
                                    float f17 = this.timeAudioX + this.performerX;
                                    float dp5 = AndroidUtilities.dp(35.0f) + this.namesOffset + getMediaOffsetY();
                                    if (this.toSeekBarProgress != 0.0f) {
                                        f3 = dp5;
                                        f4 = f17;
                                        canvas.saveLayerAlpha(f17, dp5, f17 + this.performerLayout.getWidth(), dp5 + this.performerLayout.getHeight(), (int) ((f - this.toSeekBarProgress) * 255.0f), 31);
                                    } else {
                                        f3 = dp5;
                                        f4 = f17;
                                        canvas.save();
                                    }
                                    float f18 = this.toSeekBarProgress;
                                    if (f18 != 0.0f) {
                                        float f19 = ((f - f18) * 0.3f) + 0.7f;
                                        canvas.scale(f19, f19, f4, f3 + (this.performerLayout.getHeight() / 2.0f));
                                    }
                                    canvas.translate(f4, f3);
                                    this.performerLayout.draw(canvas);
                                    canvas.restore();
                                }
                                canvas.save();
                                canvas.translate(this.timeAudioX, AndroidUtilities.dp(57.0f) + this.namesOffset + getMediaOffsetY());
                                this.durationLayout.draw(canvas);
                                canvas.restore();
                                if (shouldDrawMenuDrawable()) {
                                    Drawable themedDrawable = this.currentMessageObject.isOutOwner() ? getThemedDrawable(isDrawSelectionBackground() ? "drawableMsgOutMenuSelected" : "drawableMsgOutMenu") : isDrawSelectionBackground() ? Theme.chat_msgInMenuSelectedDrawable : Theme.chat_msgInMenuDrawable;
                                    int dp6 = ((((int) f6) + this.backgroundWidth) - AndroidUtilities.dp(this.currentMessageObject.type == 0 ? 58.0f : 48.0f)) - AndroidUtilities.dp(this.hasLinkPreview ? 18.0f : 0.0f);
                                    this.otherX = dp6;
                                    int dp7 = ((int) f8) - AndroidUtilities.dp(2.0f);
                                    this.otherY = dp7;
                                    BaseCell.setDrawableBounds(themedDrawable, dp6, dp7);
                                    TransitionParams transitionParams = this.transitionParams;
                                    if (transitionParams.animateChangeProgress != f && transitionParams.animateShouldDrawMenuDrawable) {
                                        themedDrawable.setAlpha((int) (this.transitionParams.animateChangeProgress * 255.0f));
                                    }
                                    themedDrawable.draw(canvas);
                                    TransitionParams transitionParams2 = this.transitionParams;
                                    if (transitionParams2.animateChangeProgress != f && transitionParams2.animateShouldDrawMenuDrawable) {
                                        themedDrawable.setAlpha(i6);
                                    }
                                }
                            }
                        }
                        if (!isPlayingMessage2) {
                            float f20 = this.toSeekBarProgress;
                            if (f20 != 0.0f) {
                                float f21 = f20 - 0.16f;
                                this.toSeekBarProgress = f21;
                                if (f21 < 0.0f) {
                                    this.toSeekBarProgress = 0.0f;
                                }
                                invalidate();
                            }
                        }
                        f2 = this.toSeekBarProgress;
                        if (f2 > 0.0f) {
                        }
                        if (this.toSeekBarProgress < f) {
                        }
                        canvas.save();
                        canvas.translate(this.timeAudioX, AndroidUtilities.dp(57.0f) + this.namesOffset + getMediaOffsetY());
                        this.durationLayout.draw(canvas);
                        canvas.restore();
                        if (shouldDrawMenuDrawable()) {
                        }
                    }
                }
                radialProgress22.setProgressColor(getThemedColor(i5));
                this.radialProgress.setBackgroundDrawable(!isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
                this.radialProgress.iconScale = 1.0f;
                if (this.drawPhotoImage) {
                    if (this.currentMessageObject.isMediaSpoilersRevealed) {
                    }
                    this.radialProgress.iconScale *= this.mediaSpoilerRevealProgress;
                }
                this.radialProgress.draw(canvas);
                canvas.save();
                canvas.translate(this.timeAudioX + this.songX, AndroidUtilities.dp(13.0f) + this.namesOffset + getMediaOffsetY());
                this.songLayout.draw(canvas);
                canvas.restore();
                isPlayingMessage2 = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
                if (isPlayingMessage2) {
                }
                if (!isPlayingMessage2) {
                }
                f2 = this.toSeekBarProgress;
                if (f2 > 0.0f) {
                }
                if (this.toSeekBarProgress < f) {
                }
                canvas.save();
                canvas.translate(this.timeAudioX, AndroidUtilities.dp(57.0f) + this.namesOffset + getMediaOffsetY());
                this.durationLayout.draw(canvas);
                canvas.restore();
                if (shouldDrawMenuDrawable()) {
                }
            } else {
                f = 1.0f;
                if (i == 3 || i == 7) {
                    if (this.currentMessageObject.isOutOwner()) {
                        Theme.chat_audioTimePaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outAudioDurationSelectedText : Theme.key_chat_outAudioDurationText));
                        radialProgress2 = this.radialProgress;
                        i2 = (isDrawSelectionBackground() || this.buttonPressed != 0) ? Theme.key_chat_outAudioSelectedProgress : Theme.key_chat_outAudioProgress;
                    } else if (!this.hasLinkPreview || this.linkLine == null) {
                        Theme.chat_audioTimePaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inAudioDurationSelectedText : Theme.key_chat_inAudioDurationText));
                        radialProgress2 = this.radialProgress;
                        i2 = (isDrawSelectionBackground() || this.buttonPressed != 0) ? Theme.key_chat_inAudioSelectedProgress : Theme.key_chat_inAudioProgress;
                    } else {
                        Theme.chat_audioTimePaint.setColor(Theme.adaptHue(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inAudioDurationSelectedText : Theme.key_chat_inAudioDurationText), this.linkLine.getColor()));
                        this.radialProgress.setProgressColor(Theme.adaptHue(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? Theme.key_chat_inAudioSelectedProgress : Theme.key_chat_inAudioProgress), this.linkLine.getColor()));
                        SeekBar seekBar2 = this.seekBar;
                        int adaptHue3 = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioSeekbar), this.linkLine.getColor());
                        int adaptHue4 = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioCacheSeekbar), this.linkLine.getColor());
                        int i28 = Theme.key_chat_inAudioSeekbarFill;
                        seekBar2.setColors(adaptHue3, adaptHue4, Theme.adaptHue(getThemedColor(i28), this.linkLine.getColor()), Theme.adaptHue(getThemedColor(i28), this.linkLine.getColor()), Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioSeekbarSelected), this.linkLine.getColor()));
                        audioVisualizerDrawable = this.overridenAudioVisualizer;
                        if (audioVisualizerDrawable == null) {
                            audioVisualizerDrawable = MediaController.getInstance().isPlayingMessage(this.currentMessageObject) ? Theme.getCurrentAudiVisualizerDrawable() : Theme.getAnimatedOutAudioVisualizerDrawable(this.currentMessageObject);
                        }
                        if (audioVisualizerDrawable != null && (this.documentAttachType != 7 || !this.hasLinkPreview)) {
                            audioVisualizerDrawable.setParentView(this);
                            if (this.linkLine == null) {
                                audioVisualizerDrawable.draw(canvas, f6 + AndroidUtilities.dp(22.0f), f8 + AndroidUtilities.dp(22.0f), this.linkLine.getColor(), this.documentAttachType == 7 ? getVideoTranscriptionProgress() : 1.0f, this.resourcesProvider);
                            } else {
                                audioVisualizerDrawable.draw(canvas, f6 + AndroidUtilities.dp(22.0f), f8 + AndroidUtilities.dp(22.0f), this.currentMessageObject.isOutOwner(), this.documentAttachType == 7 ? getVideoTranscriptionProgress() : 1.0f, this.resourcesProvider);
                            }
                        }
                        if (!this.enterTransitionInProgress && this.documentAttachType == 3) {
                            this.radialProgress.setBackgroundDrawable(!isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
                            this.radialProgress.iconScale = 1.0f;
                            if (this.drawPhotoImage && (messageObject3 = this.currentMessageObject) != null && messageObject3.hasMediaSpoilers() && this.currentMessageObject.isSensitive()) {
                                if (this.currentMessageObject.isMediaSpoilersRevealed) {
                                    float f22 = this.mediaSpoilerRevealProgress;
                                    if (f22 != 0.0f) {
                                    }
                                }
                                this.radialProgress.iconScale *= this.mediaSpoilerRevealProgress;
                            }
                            SeekBarWaveform seekBarWaveform = this.seekBarWaveform;
                            drawVoiceOnce(canvas, seekBarWaveform != null ? 1.0f : 1.0f - seekBarWaveform.explosionRate, new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda5
                                @Override // java.lang.Runnable
                                public final void run() {
                                    ChatMessageCell.this.lambda$drawContent$11(canvas);
                                }
                            });
                        }
                        i3 = this.seekBarX;
                        i4 = this.timeAudioX;
                        if (this.transitionParams.animateButton) {
                            int i29 = this.buttonX;
                            float f23 = this.transitionParams.animateFromButtonX;
                            float f24 = this.transitionParams.animateChangeProgress;
                            int i30 = i29 - ((int) ((f23 * (1.0f - f24)) + (this.buttonX * f24)));
                            i3 -= i30;
                            i4 -= i30;
                        }
                        if (this.isRoundVideo && this.currentMessageObject.isOutOwner()) {
                            i3 = getCurrentBackgroundLeft() + AndroidUtilities.dp(57.0f);
                            i4 = getCurrentBackgroundLeft() + AndroidUtilities.dp(67.0f);
                        }
                        int videoTranscriptionProgress = !this.isRoundVideo ? (int) (0 + ((1.0f - getVideoTranscriptionProgress()) * AndroidUtilities.roundMessageSize)) : 0;
                        canvas.save();
                        if (this.documentAttachType == 7 || !this.hasLinkPreview) {
                            if (this.useSeekBarWaveform) {
                                canvas.translate(i3, this.seekBarY + videoTranscriptionProgress);
                                this.seekBar.setAlpha(this.isRoundVideo ? CubicBezierInterpolator.EASE_IN.getInterpolation(getVideoTranscriptionProgress()) : 1.0f);
                                this.seekBar.draw(canvas);
                            } else {
                                canvas.translate((AndroidUtilities.dp(13.0f) + i3) - this.seekBarWaveformTranslateX, this.seekBarY + videoTranscriptionProgress);
                                this.seekBarWaveform.setAlpha(this.isRoundVideo ? CubicBezierInterpolator.EASE_IN.getInterpolation(getVideoTranscriptionProgress()) : 1.0f);
                                this.seekBarWaveform.draw(canvas, this);
                            }
                        }
                        canvas.restore();
                        useTranscribeButtonProgress = getUseTranscribeButtonProgress();
                        TransitionParams transitionParams3 = this.transitionParams;
                        float f25 = !transitionParams3.animatePlayingRound ? this.isPlayingRound ? transitionParams3.animateChangeProgress : 1.0f - transitionParams3.animateChangeProgress : this.isPlayingRound ? 1.0f : 0.0f;
                        if (!this.wasTranscriptionOpen) {
                            useTranscribeButtonProgress = AndroidUtilities.lerp((1.0f - f25) * useTranscribeButtonProgress, useTranscribeButtonProgress, getVideoTranscriptionProgress());
                        }
                        if (useTranscribeButtonProgress > 0.0f && (this.documentAttachType != 7 || !this.hasLinkPreview)) {
                            canvas.save();
                            int currentBackgroundRight = ((getCurrentBackgroundRight() - getCurrentBackgroundLeft()) + AndroidUtilities.dp(!this.pinnedBottom ? 6.0f : 0.0f)) - AndroidUtilities.dp((!this.hasLinkPreview ? 10 : 0) + 128);
                            if (this.transcribeButton == null) {
                                TranscribeButton transcribeButton = new TranscribeButton(this, this.seekBarWaveform) { // from class: org.telegram.ui.Cells.ChatMessageCell.7
                                    @Override // org.telegram.ui.Components.TranscribeButton
                                    public void drawGradientBackground(Canvas canvas2, Rect rect3, float f26) {
                                        Paint themedPaint = ChatMessageCell.this.currentMessageObject.shouldDrawWithoutBackground() ? ChatMessageCell.this.getThemedPaint("paintChatActionBackground") : ChatMessageCell.this.getThemedPaint("paintChatTimeBackground");
                                        int alpha2 = themedPaint.getAlpha();
                                        themedPaint.setAlpha((int) (alpha2 * f26));
                                        ChatMessageCell.this.applyServiceShaderMatrix();
                                        canvas2.drawRect(rect3, themedPaint);
                                        if (themedPaint == ChatMessageCell.this.getThemedPaint("paintChatActionBackground") && ChatMessageCell.this.hasGradientService()) {
                                            int alpha3 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                                            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha3 * f26));
                                            canvas2.drawRect(rect3, Theme.chat_actionBackgroundGradientDarkenPaint);
                                            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha3);
                                        }
                                        themedPaint.setAlpha(alpha2);
                                    }

                                    @Override // org.telegram.ui.Components.TranscribeButton
                                    protected void onOpen() {
                                        ChatMessageCell.this.wasTranscriptionOpen = true;
                                    }
                                };
                                this.transcribeButton = transcribeButton;
                                MessageObject messageObject10 = this.currentMessageObject;
                                TLRPC.Message message = messageObject10.messageOwner;
                                transcribeButton.setOpen(message != null && message.voiceTranscriptionOpen && message.voiceTranscriptionFinal && TranscribeButton.isVideoTranscriptionOpen(messageObject10), false);
                                this.transcribeButton.setLoading(TranscribeButton.isTranscribing(this.currentMessageObject), false);
                                this.transcribeButton.setLock(TranscribeButton.showTranscribeLock(this.currentMessageObject), false);
                            }
                            if (this.drawSideButton == 0) {
                                this.transcribeX = AndroidUtilities.lerp(i3 + AndroidUtilities.dp(21.0f) + currentBackgroundRight, this.sideStartX, 1.0f - getVideoTranscriptionProgress());
                                lerp = AndroidUtilities.lerp(this.seekBarY + AndroidUtilities.dp(3.0f), this.sideStartY - AndroidUtilities.dp(40.0f), 1.0f - getVideoTranscriptionProgress());
                            } else {
                                float dp8 = i3 + AndroidUtilities.dp(21.0f) + currentBackgroundRight;
                                MessageObject messageObject11 = this.currentMessageObject;
                                this.transcribeX = AndroidUtilities.lerp(dp8, (messageObject11 == null || !messageObject11.isOutOwner()) ? (getCurrentBackgroundRight() + AndroidUtilities.dp(8.0f)) - (AndroidUtilities.dp(40.0f) * f25) : (getCurrentBackgroundLeft() - AndroidUtilities.dp(40.0f)) + (AndroidUtilities.dp(28.0f) * f25), 1.0f - getVideoTranscriptionProgress());
                                float dp9 = (this.layoutHeight + this.transitionParams.deltaBottom) - AndroidUtilities.dp(28 - (this.drawPinnedBottom ? 2 : 0));
                                ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                                if (!reactionsLayoutInBubble.isEmpty) {
                                    dp9 -= reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress);
                                }
                                lerp = AndroidUtilities.lerp(this.seekBarY + AndroidUtilities.dp(3.0f), ((AndroidUtilities.lerp(dp9, ((AndroidUtilities.dp(44.0f) + this.namesOffset) + getMediaOffsetY()) - AndroidUtilities.dp(1.7f), getVideoTranscriptionProgress()) + AndroidUtilities.dp(1.7f)) - AndroidUtilities.dp(12.0f)) - (this.currentMessageObject.isOutOwner() ? 0.0f : AndroidUtilities.dp(28.0f) * f25), 1.0f - getVideoTranscriptionProgress());
                            }
                            this.transcribeY = lerp;
                            this.transcribeButton.setBounds((int) this.transcribeX, (int) this.transcribeY, AndroidUtilities.lerp(AndroidUtilities.dp(30.0f), AndroidUtilities.dp(32.0f), 1.0f - getVideoTranscriptionProgress()), AndroidUtilities.lerp(AndroidUtilities.dp(24.0f), AndroidUtilities.dp(32.0f), 1.0f - getVideoTranscriptionProgress()), AndroidUtilities.lerp(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(16.0f), 1.0f - getVideoTranscriptionProgress()));
                            this.transcribeButton.setColor(ColorUtils.blendARGB(getThemedColor(Theme.key_chat_serviceText), getThemedColor(!this.currentMessageObject.isOutOwner() ? Theme.key_chat_outReactionButtonBackground : Theme.key_chat_inReactionButtonBackground), this.documentAttachType != 3 ? 1.0f : getVideoTranscriptionProgress()), getThemedColor(Theme.key_windowBackgroundWhiteGrayText), this.currentMessageObject.isOut(), this.documentAttachType != 3 ? 0.0f : 1.0f - getVideoTranscriptionProgress());
                            this.transcribeButton.draw(canvas, useTranscribeButtonProgress);
                            canvas.restore();
                        }
                        if (this.documentAttachType == 3) {
                            canvas.save();
                            canvas.translate(i4, AndroidUtilities.dp(44.0f) + this.namesOffset + getMediaOffsetY() + videoTranscriptionProgress);
                            this.durationLayout.draw(canvas);
                            canvas.restore();
                            MessageObject messageObject12 = this.currentMessageObject;
                            if (messageObject12.type != 0 && messageObject12.isContentUnread()) {
                                Theme.chat_docBackPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outVoiceSeekbarFill : Theme.key_chat_inVoiceSeekbarFill));
                                canvas.drawCircle(i4 + this.timeWidthAudio + AndroidUtilities.dp(6.0f), AndroidUtilities.dp(51.0f) + this.namesOffset + getMediaOffsetY(), AndroidUtilities.dp(3.0f), Theme.chat_docBackPaint);
                            }
                        }
                        if (this.documentAttachType != 7 && this.durationLayout != null && ((isPlayingMessage = MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) || this.roundProgressAlpha != 0.0f)) {
                            if (isPlayingMessage) {
                                this.roundProgressAlpha = 1.0f;
                            } else {
                                float f26 = this.roundProgressAlpha - 0.10666667f;
                                this.roundProgressAlpha = f26;
                                if (f26 < 0.0f) {
                                    this.roundProgressAlpha = 0.0f;
                                } else {
                                    invalidate();
                                }
                            }
                            drawRoundProgress(canvas);
                        }
                    }
                    radialProgress2.setProgressColor(getThemedColor(i2));
                    audioVisualizerDrawable = this.overridenAudioVisualizer;
                    if (audioVisualizerDrawable == null) {
                    }
                    if (audioVisualizerDrawable != null) {
                        audioVisualizerDrawable.setParentView(this);
                        if (this.linkLine == null) {
                        }
                    }
                    if (!this.enterTransitionInProgress) {
                        this.radialProgress.setBackgroundDrawable(!isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
                        this.radialProgress.iconScale = 1.0f;
                        if (this.drawPhotoImage) {
                            if (this.currentMessageObject.isMediaSpoilersRevealed) {
                            }
                            this.radialProgress.iconScale *= this.mediaSpoilerRevealProgress;
                        }
                        SeekBarWaveform seekBarWaveform2 = this.seekBarWaveform;
                        drawVoiceOnce(canvas, seekBarWaveform2 != null ? 1.0f : 1.0f - seekBarWaveform2.explosionRate, new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda5
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatMessageCell.this.lambda$drawContent$11(canvas);
                            }
                        });
                    }
                    i3 = this.seekBarX;
                    i4 = this.timeAudioX;
                    if (this.transitionParams.animateButton) {
                    }
                    if (this.isRoundVideo) {
                        i3 = getCurrentBackgroundLeft() + AndroidUtilities.dp(57.0f);
                        i4 = getCurrentBackgroundLeft() + AndroidUtilities.dp(67.0f);
                    }
                    if (!this.isRoundVideo) {
                    }
                    canvas.save();
                    if (this.documentAttachType == 7) {
                    }
                    if (this.useSeekBarWaveform) {
                    }
                    canvas.restore();
                    useTranscribeButtonProgress = getUseTranscribeButtonProgress();
                    TransitionParams transitionParams32 = this.transitionParams;
                    if (!transitionParams32.animatePlayingRound) {
                    }
                    if (!this.wasTranscriptionOpen) {
                    }
                    if (useTranscribeButtonProgress > 0.0f) {
                        canvas.save();
                        int currentBackgroundRight2 = ((getCurrentBackgroundRight() - getCurrentBackgroundLeft()) + AndroidUtilities.dp(!this.pinnedBottom ? 6.0f : 0.0f)) - AndroidUtilities.dp((!this.hasLinkPreview ? 10 : 0) + 128);
                        if (this.transcribeButton == null) {
                        }
                        if (this.drawSideButton == 0) {
                        }
                        this.transcribeY = lerp;
                        this.transcribeButton.setBounds((int) this.transcribeX, (int) this.transcribeY, AndroidUtilities.lerp(AndroidUtilities.dp(30.0f), AndroidUtilities.dp(32.0f), 1.0f - getVideoTranscriptionProgress()), AndroidUtilities.lerp(AndroidUtilities.dp(24.0f), AndroidUtilities.dp(32.0f), 1.0f - getVideoTranscriptionProgress()), AndroidUtilities.lerp(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(16.0f), 1.0f - getVideoTranscriptionProgress()));
                        this.transcribeButton.setColor(ColorUtils.blendARGB(getThemedColor(Theme.key_chat_serviceText), getThemedColor(!this.currentMessageObject.isOutOwner() ? Theme.key_chat_outReactionButtonBackground : Theme.key_chat_inReactionButtonBackground), this.documentAttachType != 3 ? 1.0f : getVideoTranscriptionProgress()), getThemedColor(Theme.key_windowBackgroundWhiteGrayText), this.currentMessageObject.isOut(), this.documentAttachType != 3 ? 0.0f : 1.0f - getVideoTranscriptionProgress());
                        this.transcribeButton.draw(canvas, useTranscribeButtonProgress);
                        canvas.restore();
                    }
                    if (this.documentAttachType == 3) {
                    }
                    if (this.documentAttachType != 7) {
                    }
                }
            }
            if (this.captionLayout == null || this.hasFactCheck || this.transitionParams.animateFactCheck) {
                updateCaptionLayout();
            }
            updateReactionLayoutPosition();
            if (!shouldDrawCaptionLayout() && !this.currentMessageObject.preview) {
                drawCaptionLayout(canvas, false, f);
                drawCommentLayout(canvas, f);
                drawReactionsLayout(canvas, f, null);
            }
            if (this.currentMessagesGroup == null) {
                drawFactCheck(canvas, f);
            }
            if (this.hasOldCaptionPreview) {
                i7 = 1;
                i8 = -1;
                i9 = 4;
            } else {
                MessageObject messageObject13 = this.currentMessageObject;
                int i31 = messageObject13.type;
                if (i31 != 1 && i31 != 20) {
                    if (this.documentAttachType != 4 && i31 != 8) {
                        imageX2 = this.backgroundDrawableLeft + AndroidUtilities.dp(messageObject13.isOutOwner() ? 11.0f : 17.0f);
                        float dp10 = ((this.totalHeight - AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f)) - this.linkPreviewHeight) - AndroidUtilities.dp(11.0f);
                        Theme.chat_replyLinePaint.setColor(getThemedColor(!this.currentMessageObject.isOutOwner() ? Theme.key_chat_outPreviewLine : Theme.key_chat_inPreviewLine));
                        RectF rectF = AndroidUtilities.rectTmp;
                        float f27 = imageX2;
                        rectF.set(f27, dp10 - AndroidUtilities.dp(3.0f), AndroidUtilities.dp(6.0f) + imageX2, this.linkPreviewHeight + dp10);
                        path = this.replyRoundRectPath;
                        if (path != null) {
                            this.replyRoundRectPath = new Path();
                        } else {
                            path.rewind();
                        }
                        canvas.save();
                        float f28 = rectF.left;
                        canvas.clipRect(f28, rectF.top, AndroidUtilities.dp(3.0f) + f28, rectF.bottom);
                        this.replyRoundRectPath.addRoundRect(rectF, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Path.Direction.CW);
                        canvas.drawPath(this.replyRoundRectPath, Theme.chat_replyLinePaint);
                        canvas.restore();
                        if (this.siteNameLayout == null) {
                            Theme.chat_replyNamePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outSiteNameText : Theme.key_chat_inSiteNameText));
                            canvas.save();
                            canvas.translate(f27 + (-this.siteNameLeft) + (this.hasInvoicePreview ? 0 : AndroidUtilities.dp(10.0f)), dp10 - AndroidUtilities.dp(3.0f));
                            SpoilerEffect.layoutDrawMaybe(this.siteNameLayout, canvas);
                            canvas.restore();
                            StaticLayout staticLayout2 = this.siteNameLayout;
                            f5 = staticLayout2.getLineBottom(staticLayout2.getLineCount() - 1) + dp10;
                        } else {
                            f5 = dp10;
                        }
                        if (this.currentMessageObject.isOutOwner()) {
                            textPaint = Theme.chat_replyTextPaint;
                            i14 = Theme.key_chat_messageTextIn;
                        } else {
                            textPaint = Theme.chat_replyTextPaint;
                            i14 = Theme.key_chat_messageTextOut;
                        }
                        textPaint.setColor(getThemedColor(i14));
                        if (this.descriptionLayout == null) {
                            if (f5 != dp10) {
                                f5 += AndroidUtilities.dp(2.0f);
                            }
                            this.descriptionY = ((int) f5) - AndroidUtilities.dp(3.0f);
                            canvas.save();
                            canvas.translate(imageX2 + AndroidUtilities.dp(10.0f) + this.descriptionX, this.descriptionY);
                            SpoilerEffect.layoutDrawMaybe(this.descriptionLayout, canvas);
                            StaticLayout staticLayout3 = this.descriptionLayout;
                            i8 = -1;
                            i9 = 4;
                            AnimatedEmojiSpan.drawAnimatedEmojis(canvas, staticLayout3, this.animatedEmojiDescriptionStack, 0.0f, null, 0.0f, 0.0f, 0.0f, 1.0f, getAdaptiveEmojiColorFilter(1, staticLayout3.getPaint().getColor()));
                            canvas.restore();
                        } else {
                            i8 = -1;
                            i9 = 4;
                        }
                        i7 = 1;
                        this.drawTime = true;
                    }
                }
                imageX2 = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(5.0f));
                float dp102 = ((this.totalHeight - AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f)) - this.linkPreviewHeight) - AndroidUtilities.dp(11.0f);
                Theme.chat_replyLinePaint.setColor(getThemedColor(!this.currentMessageObject.isOutOwner() ? Theme.key_chat_outPreviewLine : Theme.key_chat_inPreviewLine));
                RectF rectF2 = AndroidUtilities.rectTmp;
                float f272 = imageX2;
                rectF2.set(f272, dp102 - AndroidUtilities.dp(3.0f), AndroidUtilities.dp(6.0f) + imageX2, this.linkPreviewHeight + dp102);
                path = this.replyRoundRectPath;
                if (path != null) {
                }
                canvas.save();
                float f282 = rectF2.left;
                canvas.clipRect(f282, rectF2.top, AndroidUtilities.dp(3.0f) + f282, rectF2.bottom);
                this.replyRoundRectPath.addRoundRect(rectF2, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Path.Direction.CW);
                canvas.drawPath(this.replyRoundRectPath, Theme.chat_replyLinePaint);
                canvas.restore();
                if (this.siteNameLayout == null) {
                }
                if (this.currentMessageObject.isOutOwner()) {
                }
                textPaint.setColor(getThemedColor(i14));
                if (this.descriptionLayout == null) {
                }
                i7 = 1;
                this.drawTime = true;
            }
            if (this.documentAttachType == i7) {
                if (this.currentMessageObject.isOutOwner()) {
                    Theme.chat_docNamePaint.setColor(getThemedColor(Theme.key_chat_outFileNameText));
                    Theme.chat_infoPaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outFileInfoSelectedText : Theme.key_chat_outFileInfoText));
                    Theme.chat_docBackPaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outFileBackgroundSelected : Theme.key_chat_outFileBackground));
                    drawable = getThemedDrawable(isDrawSelectionBackground() ? "drawableMsgOutMenuSelected" : "drawableMsgOutMenu");
                } else if (this.linkLine == null || !this.hasLinkPreview) {
                    Theme.chat_docNamePaint.setColor(getThemedColor(Theme.key_chat_inFileNameText));
                    Theme.chat_infoPaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inFileInfoSelectedText : Theme.key_chat_inFileInfoText));
                    Theme.chat_docBackPaint.setColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inFileBackgroundSelected : Theme.key_chat_inFileBackground));
                } else {
                    Theme.chat_docNamePaint.setColor(Theme.adaptHue(getThemedColor(Theme.key_chat_inFileNameText), this.linkLine.getColor()));
                    Theme.chat_infoPaint.setColor(Theme.adaptHue(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inFileInfoSelectedText : Theme.key_chat_inFileInfoText), this.linkLine.getColor()));
                    Theme.chat_docBackPaint.setColor(Theme.adaptHue(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inFileBackgroundSelected : Theme.key_chat_inFileBackground), this.linkLine.getColor()));
                }
                if (this.drawPhotoImage) {
                    if (this.currentMessageObject.type == 0) {
                        imageX = this.photoImage.getImageX() + this.backgroundWidth;
                        i11 = (this.hasLinkPreview ? 12 : 0) + 56;
                    } else {
                        imageX = this.photoImage.getImageX() + this.backgroundWidth;
                        i11 = (this.hasLinkPreview ? 12 : 0) + 40;
                    }
                    int dp11 = (int) (imageX - AndroidUtilities.dp(i11));
                    this.otherX = dp11;
                    int imageY3 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(4.0f));
                    this.otherY = imageY3;
                    BaseCell.setDrawableBounds(drawable, dp11, imageY3);
                    dp = (int) (this.photoImage.getImageX() + this.photoImage.getImageWidth() + AndroidUtilities.dp(10.0f));
                    dp2 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
                    dp3 = (int) (this.photoImage.getImageY() + (this.docTitleLayout != null ? r4.getLineBottom(r4.getLineCount() - 1) + AndroidUtilities.dp(13.0f) : AndroidUtilities.dp(8.0f)));
                    if (this.imageDrawn) {
                        RadialProgress2 radialProgress26 = this.radialProgress;
                        int i32 = Theme.key_chat_mediaLoaderPhoto;
                        int i33 = Theme.key_chat_mediaLoaderPhotoSelected;
                        int i34 = Theme.key_chat_mediaLoaderPhotoIcon;
                        int i35 = Theme.key_chat_mediaLoaderPhotoIconSelected;
                        radialProgress26.setColorKeys(i32, i33, i34, i35);
                        RadialProgress2 radialProgress27 = this.radialProgress;
                        int i36 = Theme.key_chat_mediaProgress;
                        radialProgress27.setProgressColor(getThemedColor(i36));
                        this.videoRadialProgress.setColorKeys(i32, i33, i34, i35);
                        this.videoRadialProgress.setProgressColor(getThemedColor(i36));
                        if (this.buttonState == i8 && this.radialProgress.getIcon() != i9) {
                            this.radialProgress.setIcon(i9, true, true);
                        }
                    } else {
                        if (this.currentMessageObject.isOutOwner()) {
                            RadialProgress2 radialProgress28 = this.radialProgress;
                            int i37 = Theme.key_chat_outLoader;
                            int i38 = Theme.key_chat_outLoaderSelected;
                            int i39 = Theme.key_chat_outMediaIcon;
                            int i40 = Theme.key_chat_outMediaIconSelected;
                            radialProgress28.setColorKeys(i37, i38, i39, i40);
                            this.radialProgress.setProgressColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_outFileProgressSelected : Theme.key_chat_outFileProgress));
                            this.videoRadialProgress.setColorKeys(i37, i38, i39, i40);
                            radialProgress24 = this.videoRadialProgress;
                            i12 = isDrawSelectionBackground() ? Theme.key_chat_outFileProgressSelected : Theme.key_chat_outFileProgress;
                        } else {
                            ReplyMessageLine replyMessageLine2 = this.linkLine;
                            if (replyMessageLine2 == null || !this.hasLinkPreview) {
                                RadialProgress2 radialProgress29 = this.radialProgress;
                                int i41 = Theme.key_chat_inLoader;
                                int i42 = Theme.key_chat_inLoaderSelected;
                                int i43 = Theme.key_chat_inMediaIcon;
                                int i44 = Theme.key_chat_inMediaIconSelected;
                                radialProgress29.setColorKeys(i41, i42, i43, i44);
                                this.radialProgress.setProgressColor(getThemedColor(isDrawSelectionBackground() ? Theme.key_chat_inFileProgressSelected : Theme.key_chat_inFileProgress));
                                this.videoRadialProgress.setColorKeys(i41, i42, i43, i44);
                                radialProgress24 = this.videoRadialProgress;
                                i12 = isDrawSelectionBackground() ? Theme.key_chat_inFileProgressSelected : Theme.key_chat_inFileProgress;
                            } else {
                                this.radialProgress.setColors(replyMessageLine2.getColor(), this.linkLine.getColor(), Theme.blendOver(i8, Theme.multAlpha(this.linkLine.getColor(), 0.01f)), Theme.blendOver(i8, Theme.multAlpha(this.linkLine.getColor(), 0.05f)));
                                this.radialProgress.setProgressColor(Theme.blendOver(i8, Theme.multAlpha(this.linkLine.getColor(), 0.01f)));
                                this.videoRadialProgress.setColors(this.linkLine.getColor(), this.linkLine.getColor(), Theme.blendOver(i8, Theme.multAlpha(this.linkLine.getColor(), 0.01f)), Theme.blendOver(i8, Theme.multAlpha(this.linkLine.getColor(), 0.05f)));
                                radialProgress24 = this.videoRadialProgress;
                                blendOver = Theme.blendOver(i8, Theme.multAlpha(this.linkLine.getColor(), 0.01f));
                                radialProgress24.setProgressColor(blendOver);
                                this.rect.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX() + this.photoImage.getImageWidth(), this.photoImage.getImageY() + this.photoImage.getImageHeight());
                                roundRadius = this.photoImage.getRoundRadius();
                                this.rectPath.reset();
                                for (i13 = 0; i13 < roundRadius.length; i13++) {
                                    float[] fArr2 = radii;
                                    int i45 = i13 * 2;
                                    float f29 = roundRadius[i13];
                                    fArr2[i45] = f29;
                                    fArr2[i45 + 1] = f29;
                                }
                                this.rectPath.addRoundRect(this.rect, radii, Path.Direction.CW);
                                this.rectPath.close();
                                canvas.drawPath(this.rectPath, Theme.chat_docBackPaint);
                            }
                        }
                        blendOver = getThemedColor(i12);
                        radialProgress24.setProgressColor(blendOver);
                        this.rect.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX() + this.photoImage.getImageWidth(), this.photoImage.getImageY() + this.photoImage.getImageHeight());
                        roundRadius = this.photoImage.getRoundRadius();
                        this.rectPath.reset();
                        while (i13 < roundRadius.length) {
                        }
                        this.rectPath.addRoundRect(this.rect, radii, Path.Direction.CW);
                        this.rectPath.close();
                        canvas.drawPath(this.rectPath, Theme.chat_docBackPaint);
                    }
                } else {
                    int dp12 = ((((int) f6) + this.backgroundWidth) - AndroidUtilities.dp(this.currentMessageObject.type == 0 ? 58.0f : 48.0f)) - AndroidUtilities.dp(this.hasLinkPreview ? 24.0f : 0.0f);
                    this.otherX = dp12;
                    int i46 = (int) f8;
                    int dp13 = i46 - AndroidUtilities.dp(2.0f);
                    this.otherY = dp13;
                    BaseCell.setDrawableBounds(drawable, dp12, dp13);
                    dp = f6 + AndroidUtilities.dp(53.0f);
                    dp2 = AndroidUtilities.dp(4.0f) + i46;
                    dp3 = i46 + AndroidUtilities.dp(27.0f);
                    StaticLayout staticLayout4 = this.docTitleLayout;
                    if (staticLayout4 != null && staticLayout4.getLineCount() > 1) {
                        dp3 += ((this.docTitleLayout.getLineCount() - 1) * AndroidUtilities.dp(16.0f)) + AndroidUtilities.dp(2.0f);
                    }
                    if (this.currentMessageObject.isOutOwner()) {
                        this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? Theme.key_chat_outAudioSelectedProgress : Theme.key_chat_outAudioProgress));
                        radialProgress23 = this.videoRadialProgress;
                        i10 = (isDrawSelectionBackground() || this.videoButtonPressed != 0) ? Theme.key_chat_outAudioSelectedProgress : Theme.key_chat_outAudioProgress;
                    } else {
                        this.radialProgress.setProgressColor(getThemedColor((isDrawSelectionBackground() || this.buttonPressed != 0) ? Theme.key_chat_inAudioSelectedProgress : Theme.key_chat_inAudioProgress));
                        radialProgress23 = this.videoRadialProgress;
                        i10 = (isDrawSelectionBackground() || this.videoButtonPressed != 0) ? Theme.key_chat_inAudioSelectedProgress : Theme.key_chat_inAudioProgress;
                    }
                    radialProgress23.setProgressColor(getThemedColor(i10));
                }
                int i47 = dp2;
                float f30 = dp;
                if (shouldDrawMenuDrawable()) {
                    TransitionParams transitionParams4 = this.transitionParams;
                    if (transitionParams4.animateChangeProgress != 1.0f && transitionParams4.animateShouldDrawMenuDrawable) {
                        drawable.setAlpha((int) (this.transitionParams.animateChangeProgress * 255.0f));
                    }
                    drawable.draw(canvas);
                    TransitionParams transitionParams5 = this.transitionParams;
                    if (transitionParams5.animateChangeProgress != 1.0f && transitionParams5.animateShouldDrawMenuDrawable) {
                        drawable.setAlpha(NotificationCenter.newLocationAvailable);
                    }
                }
                try {
                    if (this.docTitleLayout != null) {
                        canvas.save();
                        canvas.translate(this.docTitleOffsetX + f30, i47);
                        this.docTitleLayout.draw(canvas);
                        canvas.restore();
                    }
                } catch (Exception e) {
                    FileLog.e(e);
                }
                try {
                    if (this.infoLayout != null) {
                        canvas.save();
                        canvas.translate(f30, dp3);
                        if (this.buttonState != 1 || (staticLayout = this.loadingProgressLayout) == null) {
                            staticLayout = this.infoLayout;
                        }
                        staticLayout.draw(canvas);
                        canvas.restore();
                    }
                } catch (Exception e2) {
                    FileLog.e(e2);
                }
            }
            messageObject5 = this.currentMessageObject;
            if (messageObject5.type == i9 && !(MessageObject.getMedia(messageObject5.messageOwner) instanceof TLRPC.TL_messageMediaGeoLive) && this.currentMapProvider == 2 && this.photoImage.hasNotThumb()) {
                Drawable redLocationIcon = this.sharedResources.getRedLocationIcon();
                int intrinsicWidth = (int) (redLocationIcon.getIntrinsicWidth() * 0.8f);
                int intrinsicHeight = (int) (redLocationIcon.getIntrinsicHeight() * 0.8f);
                int imageX5 = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - intrinsicWidth) / 2.0f));
                int imageY4 = (int) ((this.photoImage.getImageY() + ((this.photoImage.getImageHeight() / 2.0f) - intrinsicHeight)) - (AndroidUtilities.dp(16.0f) * (1.0f - CubicBezierInterpolator.EASE_OUT_BACK.getInterpolation(this.photoImage.getCurrentAlpha()))));
                redLocationIcon.setAlpha((int) (Math.min(1.0f, this.photoImage.getCurrentAlpha() * 5.0f) * 255.0f));
                redLocationIcon.setBounds(imageX5, imageY4, intrinsicWidth + imageX5, intrinsicHeight + imageY4);
                redLocationIcon.draw(canvas);
                if (this.photoImage.getCurrentAlpha() < 1.0f) {
                    invalidate();
                }
            }
            this.transitionParams.recordDrawingState();
        }
        this.drawTime = groupMedia2.allVisible();
        this.groupMedia.draw(canvas);
        i = this.documentAttachType;
        if (i != 2) {
        }
        if (this.captionLayout == null) {
        }
        updateCaptionLayout();
        updateReactionLayoutPosition();
        if (!shouldDrawCaptionLayout()) {
        }
        if (this.currentMessagesGroup == null) {
        }
        if (this.hasOldCaptionPreview) {
        }
        if (this.documentAttachType == i7) {
        }
        messageObject5 = this.currentMessageObject;
        if (messageObject5.type == i9) {
            Drawable redLocationIcon2 = this.sharedResources.getRedLocationIcon();
            int intrinsicWidth2 = (int) (redLocationIcon2.getIntrinsicWidth() * 0.8f);
            int intrinsicHeight2 = (int) (redLocationIcon2.getIntrinsicHeight() * 0.8f);
            int imageX52 = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - intrinsicWidth2) / 2.0f));
            int imageY42 = (int) ((this.photoImage.getImageY() + ((this.photoImage.getImageHeight() / 2.0f) - intrinsicHeight2)) - (AndroidUtilities.dp(16.0f) * (1.0f - CubicBezierInterpolator.EASE_OUT_BACK.getInterpolation(this.photoImage.getCurrentAlpha()))));
            redLocationIcon2.setAlpha((int) (Math.min(1.0f, this.photoImage.getCurrentAlpha() * 5.0f) * 255.0f));
            redLocationIcon2.setBounds(imageX52, imageY42, intrinsicWidth2 + imageX52, intrinsicHeight2 + imageY42);
            redLocationIcon2.draw(canvas);
            if (this.photoImage.getCurrentAlpha() < 1.0f) {
            }
        }
        this.transitionParams.recordDrawingState();
    }

    public void drawFactCheck(Canvas canvas, float f) {
        int i;
        int dp;
        int extraTextX;
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition == null || groupedMessagePosition.last) {
            float f2 = this.hasFactCheck ? 1.0f : 0.0f;
            TransitionParams transitionParams = this.transitionParams;
            if (transitionParams.animateFactCheck) {
                f2 = AndroidUtilities.lerp(1.0f - f2, f2, transitionParams.animateChangeProgress);
            }
            float f3 = f * f2;
            if (f3 <= 0.0f) {
                return;
            }
            float backgroundDrawableRight = getBackgroundDrawableRight();
            TransitionParams transitionParams2 = this.transitionParams;
            float dp2 = ((backgroundDrawableRight + (transitionParams2 != null ? transitionParams2.deltaRight : 0.0f)) - AndroidUtilities.dp(10 + ((!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6))) - getExtraTextX();
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages != null && !groupedMessages.isDocuments) {
                extraTextX = (int) this.captionX;
            } else if (this.currentMessageObject.isOutOwner()) {
                extraTextX = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                if (this.currentMessageObject.type == 19) {
                    extraTextX -= Math.max(0, ((Math.max(this.replyNameWidth, this.replyTextWidth) + extraTextX) + AndroidUtilities.dp(14.0f)) - AndroidUtilities.displaySize.x);
                }
            } else {
                if (this.mediaBackground) {
                    i = this.backgroundDrawableLeft;
                    dp = AndroidUtilities.dp(12.0f);
                } else {
                    i = this.backgroundDrawableLeft;
                    dp = AndroidUtilities.dp(this.drawPinnedBottom ? 12.0f : 18.0f);
                }
                extraTextX = i + dp + getExtraTextX();
            }
            int dp3 = ((int) (extraTextX + this.transitionParams.deltaLeft)) - AndroidUtilities.dp(1.33f);
            int i2 = this.factCheckY;
            float f4 = dp3;
            int i3 = (int) (dp2 - f4);
            int i4 = this.factCheckHeight;
            TransitionParams transitionParams3 = this.transitionParams;
            if (transitionParams3.animateFactCheckHeight) {
                i4 = AndroidUtilities.lerp(transitionParams3.animateFactCheckHeightFrom, i4, transitionParams3.animateChangeProgress);
            }
            float f5 = (!this.factCheckLarge || (getPrimaryMessageObject() != null && getPrimaryMessageObject().factCheckExpanded)) ? 1.0f : 0.0f;
            TransitionParams transitionParams4 = this.transitionParams;
            if (transitionParams4.animateFactCheckExpanded) {
                AndroidUtilities.lerp(1.0f - f5, f5, transitionParams4.animateChangeProgress);
            }
            if (this.factCheckLine == null) {
                this.factCheckLine = new ReplyMessageLine(this);
            }
            int factCheck = this.factCheckLine.setFactCheck(this.resourcesProvider);
            canvas.save();
            canvas.translate(f4, i2);
            RectF rectF = AndroidUtilities.rectTmp;
            rectF.set(0.0f, 0.0f, i3, i4);
            ButtonBounce buttonBounce = this.factCheckBounce;
            float scale = buttonBounce != null ? buttonBounce.getScale(0.01f) : 1.0f;
            canvas.scale(scale, scale, rectF.centerX(), rectF.centerY());
            this.factCheckLine.drawBackground(canvas, rectF, 5.0f, 5.0f, 5.0f, f3, false, false);
            this.factCheckLine.drawLine(canvas, rectF, f3);
            Text text = this.factCheckTitle;
            if (text != null) {
                text.draw(canvas, AndroidUtilities.dp(10.0f), AndroidUtilities.dp(12.0f), factCheck, f3);
                if (this.factCheckWhat != null) {
                    rectF.set((int) (AndroidUtilities.dp(10.0f) + this.factCheckTitle.getCurrentWidth() + AndroidUtilities.dp(4.0f)), AndroidUtilities.dp(4.33f), AndroidUtilities.dp(10.0f) + r1 + this.factCheckWhat.getCurrentWidth(), AndroidUtilities.dp(21.66f));
                    ButtonBounce buttonBounce2 = this.factCheckWhatBounce;
                    float scale2 = buttonBounce2 != null ? buttonBounce2.getScale(0.1f) : 1.0f;
                    canvas.save();
                    canvas.scale(scale2, scale2, rectF.centerX(), rectF.centerY());
                    canvas.drawRoundRect(rectF, AndroidUtilities.dp(17.0f), AndroidUtilities.dp(17.0f), this.factCheckLine.backgroundPaint);
                    this.factCheckWhat.draw(canvas, r1 + AndroidUtilities.dp(5.0f), AndroidUtilities.dp(12.0f), factCheck, f3);
                    canvas.restore();
                }
            }
            canvas.restore();
        }
    }

    public void drawFactCheckText(Canvas canvas, float f) {
        int i;
        int dp;
        float f2;
        int i2;
        float f3;
        float f4;
        RectF rectF;
        TextPaint textPaint;
        int i3;
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition == null || groupedMessagePosition.last) {
            float f5 = this.hasFactCheck ? 1.0f : 0.0f;
            TransitionParams transitionParams = this.transitionParams;
            if (transitionParams.animateFactCheck) {
                f5 = AndroidUtilities.lerp(1.0f - f5, f5, transitionParams.animateChangeProgress);
            }
            float f6 = f * f5;
            if (f6 <= 0.0f) {
                return;
            }
            float backgroundDrawableRight = getBackgroundDrawableRight();
            TransitionParams transitionParams2 = this.transitionParams;
            float dp2 = ((backgroundDrawableRight + (transitionParams2 != null ? transitionParams2.deltaRight : 0.0f)) - AndroidUtilities.dp(10 + ((!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6))) - getExtraTextX();
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages == null || groupedMessages.isDocuments) {
                float f7 = 12.0f;
                if (this.currentMessageObject.isOutOwner()) {
                    dp = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                    if (this.currentMessageObject.type == 19) {
                        dp -= Math.max(0, ((Math.max(this.replyNameWidth, this.replyTextWidth) + dp) + AndroidUtilities.dp(14.0f)) - AndroidUtilities.displaySize.x);
                    }
                } else {
                    if (this.mediaBackground) {
                        i = this.backgroundDrawableLeft;
                    } else {
                        i = this.backgroundDrawableLeft;
                        if (!this.drawPinnedBottom) {
                            f7 = 18.0f;
                        }
                    }
                    dp = i + AndroidUtilities.dp(f7) + getExtraTextX();
                }
            } else {
                dp = (int) this.captionX;
            }
            int dp3 = ((int) (dp + this.transitionParams.deltaLeft)) - AndroidUtilities.dp(1.33f);
            int i4 = this.factCheckY;
            float f8 = dp3;
            int i5 = (int) (dp2 - f8);
            int i6 = this.factCheckHeight;
            TransitionParams transitionParams3 = this.transitionParams;
            if (transitionParams3.animateFactCheckHeight) {
                i6 = AndroidUtilities.lerp(transitionParams3.animateFactCheckHeightFrom, i6, transitionParams3.animateChangeProgress);
            }
            int i7 = i6;
            float f9 = (!this.factCheckLarge || (getPrimaryMessageObject() != null && getPrimaryMessageObject().factCheckExpanded)) ? 1.0f : 0.0f;
            TransitionParams transitionParams4 = this.transitionParams;
            if (transitionParams4.animateFactCheckExpanded) {
                f9 = AndroidUtilities.lerp(1.0f - f9, f9, transitionParams4.animateChangeProgress);
            }
            float f10 = f9;
            if (this.factCheckLine == null) {
                this.factCheckLine = new ReplyMessageLine(this);
            }
            int factCheck = this.factCheckLine.setFactCheck(this.resourcesProvider);
            canvas.save();
            canvas.translate(f8, i4);
            RectF rectF2 = AndroidUtilities.rectTmp;
            float f11 = i5;
            float f12 = i7;
            rectF2.set(0.0f, 0.0f, f11, f12);
            ButtonBounce buttonBounce = this.factCheckBounce;
            float scale = buttonBounce != null ? buttonBounce.getScale(0.01f) : 1.0f;
            canvas.scale(scale, scale, rectF2.centerX(), rectF2.centerY());
            if (this.factCheckTextLayout != null) {
                if (this.factCheckLarge) {
                    f3 = f12;
                    f4 = f11;
                    rectF = rectF2;
                    f2 = f10;
                    i2 = factCheck;
                    canvas.saveLayerAlpha(0.0f, 0.0f, f11, i7 - 1, NotificationCenter.newLocationAvailable, 31);
                } else {
                    f3 = f12;
                    f4 = f11;
                    rectF = rectF2;
                    f2 = f10;
                    i2 = factCheck;
                }
                canvas.save();
                canvas.translate(AndroidUtilities.dp(10.0f) - this.factCheckTextLayoutLeft, AndroidUtilities.dp(22.0f));
                Theme.chat_replyTextPaint.linkColor = i2;
                LinkSpanDrawable.LinkCollector linkCollector = this.factCheckLinks;
                if (linkCollector != null && linkCollector.draw(canvas)) {
                    invalidateOutbounds();
                }
                if (this.currentMessageObject.isOutOwner()) {
                    textPaint = Theme.chat_replyTextPaint;
                    i3 = Theme.key_chat_messageTextOut;
                } else {
                    textPaint = Theme.chat_replyTextPaint;
                    i3 = Theme.key_chat_messageTextIn;
                }
                textPaint.setColor(getThemedColor(i3));
                int alpha = Theme.chat_replyTextPaint.getAlpha();
                Theme.chat_replyTextPaint.setAlpha((int) (alpha * f6));
                ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
                if (chatMessageCellDelegate != null && chatMessageCellDelegate.getTextSelectionHelper() != null && getDelegate().getTextSelectionHelper().isSelected(this.currentMessageObject)) {
                    this.delegate.getTextSelectionHelper().drawFactCheck(this.currentMessageObject.isOutOwner(), this.factCheckTextLayout, canvas);
                }
                this.factCheckTextLayout.draw(canvas);
                canvas.restore();
                Theme.chat_replyTextPaint.setAlpha(alpha);
                rectF.set(AndroidUtilities.dp(10.0f), AndroidUtilities.dp(22.0f) + this.factCheckTextLayoutHeight + AndroidUtilities.dp(6.33f), i5 - AndroidUtilities.dp(10.0f), AndroidUtilities.dp(22.0f) + this.factCheckTextLayoutHeight + AndroidUtilities.dp(6.33f) + 1);
                Theme.chat_titleLabelTextPaint.setColor(i2);
                Theme.chat_titleLabelTextPaint.setAlpha((int) (r2.getAlpha() * 0.5f * f6));
                canvas.drawRect(rectF, Theme.chat_titleLabelTextPaint);
                canvas.save();
                canvas.translate(AndroidUtilities.dp(10.0f) - this.factCheckText2LayoutLeft, AndroidUtilities.dp(22.0f) + this.factCheckTextLayoutHeight + AndroidUtilities.dp(12.66f));
                Theme.chat_titleLabelTextPaint.setColor(i2);
                Theme.chat_titleLabelTextPaint.setAlpha((int) (r1.getAlpha() * f6));
                this.factCheckText2Layout.draw(canvas);
                canvas.restore();
                if (this.clip == null) {
                    this.clip = new GradientClip();
                }
                if (this.factCheckLarge) {
                    canvas.save();
                    int dp4 = AndroidUtilities.dp((AndroidUtilities.dp(22.0f) + this.factCheckTextLayoutHeight) + AndroidUtilities.dp(12.66f) < i7 ? 20.0f : 24.0f);
                    rectF.set(0.0f, (i7 - AndroidUtilities.dp(6.66f)) - dp4, f4, f3);
                    float f13 = (1.0f - f2) * f6;
                    this.clip.draw(canvas, rectF, 3, f13);
                    float f14 = i7 - dp4;
                    rectF.set(i5 - AndroidUtilities.dp(60.0f), f14, i5 - AndroidUtilities.dp(32.0f), f3);
                    this.clip.draw(canvas, rectF, 2, f13);
                    rectF.set(i5 - AndroidUtilities.dp(32.0f), f14, f4, f3);
                    canvas.drawRect(rectF, this.clip.getPaint(2, f13));
                    canvas.restore();
                    canvas.restore();
                }
            } else {
                f2 = f10;
                i2 = factCheck;
            }
            if (this.factCheckLarge) {
                if (this.factCheckArrow == null) {
                    Drawable mutate = getContext().getResources().getDrawable(R.drawable.arrow_more).mutate();
                    this.factCheckArrow = mutate;
                    this.factCheckArrowColor = i2;
                    mutate.setColorFilter(new PorterDuffColorFilter(i2, PorterDuff.Mode.SRC_IN));
                }
                if (i2 != this.factCheckArrowColor) {
                    Drawable drawable = this.factCheckArrow;
                    this.factCheckArrowColor = i2;
                    drawable.setColorFilter(new PorterDuffColorFilter(i2, PorterDuff.Mode.SRC_IN));
                }
                canvas.save();
                int dp5 = AndroidUtilities.dp(16.0f);
                this.factCheckArrow.setBounds((i5 - dp5) - AndroidUtilities.dp(7.0f), (i7 - dp5) - AndroidUtilities.dp(5.0f), i5 - AndroidUtilities.dp(7.0f), i7 - AndroidUtilities.dp(5.0f));
                canvas.rotate(AndroidUtilities.lerp(0, NotificationCenter.updateBotMenuButton, f2), this.factCheckArrow.getBounds().centerX(), this.factCheckArrow.getBounds().centerY());
                this.factCheckArrow.setAlpha((int) (f6 * 255.0f));
                this.factCheckArrow.draw(canvas);
                canvas.restore();
            }
            canvas.restore();
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:540:0x149f, code lost:
    
        if (r2 != false) goto L671;
     */
    /* JADX WARN: Code restructure failed: missing block: B:620:0x0948, code lost:
    
        if (r49 != 1.0f) goto L383;
     */
    /* JADX WARN: Code restructure failed: missing block: B:621:0x0960, code lost:
    
        org.telegram.ui.ActionBar.Theme.chat_instantViewPaint.setAlpha((int) (r49 * 255.0f));
     */
    /* JADX WARN: Code restructure failed: missing block: B:623:0x095e, code lost:
    
        if (r49 != 1.0f) goto L383;
     */
    /* JADX WARN: Removed duplicated region for block: B:318:0x0ab0  */
    /* JADX WARN: Removed duplicated region for block: B:322:0x0ad9  */
    /* JADX WARN: Removed duplicated region for block: B:338:0x0b5d  */
    /* JADX WARN: Removed duplicated region for block: B:353:0x0bdd  */
    /* JADX WARN: Removed duplicated region for block: B:392:0x0d02 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:394:0x0d06  */
    /* JADX WARN: Removed duplicated region for block: B:397:0x0d15  */
    /* JADX WARN: Removed duplicated region for block: B:431:0x0e3e  */
    /* JADX WARN: Removed duplicated region for block: B:441:0x0e9e  */
    /* JADX WARN: Removed duplicated region for block: B:445:0x0ee2  */
    /* JADX WARN: Removed duplicated region for block: B:450:0x0f82  */
    /* JADX WARN: Removed duplicated region for block: B:465:0x1079  */
    /* JADX WARN: Removed duplicated region for block: B:476:0x100f  */
    /* JADX WARN: Removed duplicated region for block: B:481:0x106c  */
    /* JADX WARN: Removed duplicated region for block: B:484:0x10c2  */
    /* JADX WARN: Removed duplicated region for block: B:584:0x0e77  */
    /* JADX WARN: Removed duplicated region for block: B:599:0x0d31  */
    /* JADX WARN: Removed duplicated region for block: B:608:0x0cfa  */
    /* JADX WARN: Removed duplicated region for block: B:609:0x0ad0  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawLinkPreview(Canvas canvas, float f) {
        int i;
        int dp;
        int extraTextX;
        int dp2;
        int i2;
        boolean z;
        int i3;
        float f2;
        int i4;
        int i5;
        int i6;
        boolean z2;
        int i7;
        int i8;
        int i9;
        TextPaint textPaint;
        int i10;
        float f3;
        float f4;
        Canvas canvas2;
        int i11;
        Paint themedPaint;
        Drawable drawable;
        Resources resources;
        int i12;
        float f5;
        int i13;
        TextPaint textPaint2;
        int i14;
        int dp3;
        ImageReceiver imageReceiver;
        float f6;
        TransitionParams transitionParams;
        int i15;
        ChatMessageCellDelegate chatMessageCellDelegate;
        boolean z3;
        float f7;
        MessageObject messageObject;
        ReplyMessageLine replyMessageLine;
        float f8;
        float f9;
        float f10;
        float f11;
        float f12;
        int i16;
        float f13;
        float f14;
        int i17;
        int i18;
        int i19;
        if (this.currentMessageObject.isSponsored() || this.currentMessageObject.isUnsupported() || this.hasLinkPreview || this.hasGamePreview || this.hasInvoicePreview) {
            int saveCount = canvas.getSaveCount();
            float backgroundDrawableRight = getBackgroundDrawableRight();
            TransitionParams transitionParams2 = this.transitionParams;
            float dp4 = ((backgroundDrawableRight + (transitionParams2 != null ? transitionParams2.deltaRight : 0.0f)) - AndroidUtilities.dp(10 + ((!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6))) - getExtraTextX();
            if (this.hasGamePreview) {
                i2 = AndroidUtilities.dp(14.0f) + this.namesOffset;
                dp2 = this.unmovedTextX - AndroidUtilities.dp(10.0f);
            } else {
                if (this.hasInvoicePreview) {
                    i2 = AndroidUtilities.dp(14.0f) + this.namesOffset;
                } else if (this.currentMessageObject.isSponsored()) {
                    i2 = this.linkPreviewY - AndroidUtilities.dp(2.0f);
                } else {
                    if (this.currentMessageObject.isOutOwner()) {
                        extraTextX = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                        if (this.currentMessageObject.type == 19) {
                            extraTextX -= Math.max(0, ((Math.max(this.replyNameWidth, this.replyTextWidth) + extraTextX) + AndroidUtilities.dp(14.0f)) - AndroidUtilities.displaySize.x);
                        }
                    } else {
                        if (this.mediaBackground) {
                            i = this.backgroundDrawableLeft;
                            dp = AndroidUtilities.dp(12.0f);
                        } else {
                            i = this.backgroundDrawableLeft;
                            dp = AndroidUtilities.dp(this.drawPinnedBottom ? 12.0f : 18.0f);
                        }
                        extraTextX = i + dp + getExtraTextX();
                    }
                    dp2 = ((int) (extraTextX + this.transitionParams.deltaLeft)) - AndroidUtilities.dp(1.33f);
                    i2 = this.linkPreviewY;
                    TransitionParams transitionParams3 = this.transitionParams;
                    if (transitionParams3.animateLinkPreviewY) {
                        i2 = AndroidUtilities.lerp(transitionParams3.animateFromLinkPreviewY, i2, transitionParams3.animateChangeProgress);
                    }
                }
                dp2 = this.unmovedTextX + AndroidUtilities.dp(1.0f);
            }
            int i20 = i2;
            int i21 = dp2;
            float f15 = i21;
            int i22 = (int) (dp4 - f15);
            int i23 = this.linkPreviewHeight;
            TransitionParams transitionParams4 = this.transitionParams;
            if (transitionParams4 != null && transitionParams4.animateLinkPreviewHeight) {
                i23 = AndroidUtilities.lerp(transitionParams4.animateFromLinkPreviewHeight, i23, transitionParams4.animateChangeProgress);
            }
            int i24 = i23;
            if (this.linkLine == null) {
                this.linkLine = new ReplyMessageLine(this);
            }
            Theme.chat_replyNamePaint.setColor(this.linkLine.check(this.currentMessageObject, this.currentUser, this.currentChat, this.resourcesProvider, 3));
            ReplyMessageLine replyMessageLine2 = this.linkLine;
            int i25 = this.drawInstantViewType;
            replyMessageLine2.setEmojiAlpha((i25 == 23 || i25 == 24) ? 0.5f : 1.0f);
            boolean z4 = this.currentMessageObject.isSponsored() && !this.isSmallImage;
            boolean z5 = !(z4 || !this.drawInstantView || (i19 = this.drawInstantViewType) == 26 || i19 == 9 || i19 == 2 || i19 == 13 || i19 == 11 || i19 == 25 || i19 == 1 || i19 == 18 || i19 == 22) || (this.drawInstantViewType == 6 && this.imageBackgroundColor != 0);
            boolean z6 = !z4 && (!this.drawInstantView || (i18 = this.drawInstantViewType) == 9 || i18 == 2 || i18 == 11 || i18 == 25 || i18 == 13 || i18 == 1 || i18 == 18 || i18 == 22 || i18 == 32 || this.isSmallImage || i18 == 26);
            ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
            boolean z7 = chatMessageCellDelegate2 != null && chatMessageCellDelegate2.isProgressLoading(this, 2);
            if (this.hasInvoicePreview || this.currentMessageObject.isGiveawayOrGiveawayResults() || this.currentMessageObject.isUnsupported()) {
                z = z7;
                i3 = i22;
                f2 = f15;
                i4 = i21;
                i5 = saveCount;
                i6 = i20;
                z2 = false;
            } else {
                if (this.linkPreviewBounce == null) {
                    this.linkPreviewBounce = new ButtonBounce(this, 2.0f, 2.0f);
                }
                canvas.save();
                float scale = this.linkPreviewBounce.getScale(0.01f);
                canvas.scale(scale, scale, (i22 / 2.0f) + f15, i20 + ((i24 + (this.drawInstantView ? AndroidUtilities.dp(42.0f) : 0)) / 2.0f));
                RectF rectF = AndroidUtilities.rectTmp;
                rectF.set(f15, i20 - AndroidUtilities.dp(6.0f), i21 + i22, i20 + i24 + (this.drawInstantView ? AndroidUtilities.dp(42.0f) : 0));
                this.linkLine.setLoading(z7);
                boolean z8 = z7;
                float floor = (float) Math.floor(SharedConfig.bubbleRadius / (this.currentMessageObject.isSponsored() ? 2.0f : 3.0f));
                ReplyMessageLine replyMessageLine3 = this.linkLine;
                if (z5) {
                    float isSmallImage = 1.0f - isSmallImage();
                    float dp5 = AndroidUtilities.dp(18.0f) + this.photoImage.getImageHeight();
                    StaticLayout staticLayout = this.siteNameLayout;
                    if (staticLayout != null) {
                        z = z8;
                        i17 = staticLayout.getLineBottom(staticLayout.getLineCount() - 1);
                    } else {
                        z = z8;
                        i17 = 0;
                    }
                    f14 = isSmallImage * (dp5 + i17);
                } else {
                    z = z8;
                    f14 = 0.0f;
                }
                i3 = i22;
                i5 = saveCount;
                i4 = i21;
                f2 = f15;
                i6 = i20;
                replyMessageLine3.offsetEmoji(0.0f, f14).drawBackground(canvas, rectF, floor, floor, floor, f);
                int backgroundColor = this.linkLine.getBackgroundColor();
                Drawable drawable2 = this.linkPreviewSelector;
                if (drawable2 == null) {
                    this.linkPreviewSelectorColor = backgroundColor;
                    Drawable createRadSelectorDrawable = Theme.createRadSelectorDrawable(backgroundColor, 0, 0);
                    this.linkPreviewSelector = createRadSelectorDrawable;
                    createRadSelectorDrawable.setCallback(this);
                    Theme.setMaskDrawableRad(this.linkPreviewSelector, 3.0f, 6.0f, 6.0f, 3.0f);
                    this.linkPreviewSelector.setCallback(this);
                } else if (this.linkPreviewSelectorColor != backgroundColor) {
                    this.linkPreviewSelectorColor = backgroundColor;
                    Theme.setSelectorDrawableColor(drawable2, backgroundColor, true);
                }
                this.linkPreviewSelector.setBounds((int) rectF.left, (int) rectF.top, (int) rectF.right, (int) rectF.bottom);
                this.linkPreviewSelector.draw(canvas);
                this.linkLine.drawLine(canvas, rectF, f);
                this.linkLine.drawLoadingBackground(canvas, rectF, floor, floor, floor, f);
                z2 = true;
            }
            if (this.drawPhotoImage && z4) {
                int dp6 = i3 - AndroidUtilities.dp(17.0f);
                if (this.isSmallImage) {
                    ImageReceiver imageReceiver2 = this.photoImage;
                    imageReceiver2.setImageX(((i4 + i3) - imageReceiver2.getImageWidth()) - AndroidUtilities.dp(6.0f));
                    this.photoImage.setImageY(0);
                } else {
                    this.photoImage.setImageX(i4 + (this.hasInvoicePreview ? -AndroidUtilities.dp(6.3f) : AndroidUtilities.dp(10.0f)));
                    this.photoImage.setImageY(i6);
                }
                TransitionParams transitionParams5 = this.transitionParams;
                if (transitionParams5 != null && transitionParams5.animateSmallImage) {
                    if (!this.isSmallImage && this.documentAttachType != 1) {
                        this.photoImage.setImageWidth((int) AndroidUtilities.lerp(transitionParams5.photoImageFromWidth, dp6, transitionParams5.animateChangeProgress));
                    }
                    ImageReceiver imageReceiver3 = this.photoImage;
                    imageReceiver3.setImageX(AndroidUtilities.lerp(this.transitionParams.photoImageFromCenterX, imageReceiver3.getCenterX(), this.transitionParams.animateChangeProgress) - (this.photoImage.getImageWidth() / 2.0f));
                    ImageReceiver imageReceiver4 = this.photoImage;
                    imageReceiver4.setImageY(AndroidUtilities.lerp(this.transitionParams.photoImageFromCenterY, imageReceiver4.getCenterY(), this.transitionParams.animateChangeProgress) - (this.photoImage.getImageHeight() / 2.0f));
                } else if (!this.isSmallImage && (i16 = this.documentAttachType) != 7 && i16 != 1) {
                    this.photoImage.setImageWidth(dp6);
                }
                if (!this.isSmallImage && this.drawImageButton) {
                    int dp7 = AndroidUtilities.dp(48.0f);
                    float f16 = dp7;
                    this.buttonX = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - f16) / 2.0f));
                    int imageY = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - f16) / 2.0f));
                    this.buttonY = imageY;
                    RadialProgress2 radialProgress2 = this.radialProgress;
                    int i26 = this.buttonX;
                    radialProgress2.setProgressRect(i26, imageY, i26 + dp7, dp7 + imageY);
                }
                if (this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && MediaController.getInstance().isVideoDrawingReady() && canvas.isHardwareAccelerated()) {
                    this.imageDrawn = true;
                    this.drawTime = true;
                } else {
                    ChatMessageCellDelegate chatMessageCellDelegate3 = this.delegate;
                    if (chatMessageCellDelegate3 == null || chatMessageCellDelegate3.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) {
                        if (f != 1.0f) {
                            this.photoImage.setAlpha(f);
                            this.imageDrawn = allowDrawPhotoImage() ? this.photoImage.draw(canvas) : true;
                            if (this.currentMessageObject.hasMediaSpoilers()) {
                                this.blurredPhotoImage.setAlpha(f);
                                drawBlurredPhoto(canvas);
                                f13 = 1.0f;
                                this.blurredPhotoImage.setAlpha(1.0f);
                            } else {
                                f13 = 1.0f;
                            }
                            this.photoImage.setAlpha(f13);
                        } else {
                            this.imageDrawn = allowDrawPhotoImage() ? this.photoImage.draw(canvas) : true;
                            if (this.currentMessageObject.hasMediaSpoilers()) {
                                drawBlurredPhoto(canvas);
                            }
                        }
                    }
                }
                i7 = (int) (i6 + this.photoImage.getImageHeight() + AndroidUtilities.dp(6.0f));
            } else {
                i7 = i6;
            }
            if (this.siteNameLayout != null) {
                if (this.titleLabelLayout != null) {
                    f11 = 1.0f;
                    i7 += AndroidUtilities.dp(1.0f);
                } else {
                    f11 = 1.0f;
                }
                int dp8 = i7 - AndroidUtilities.dp(f11);
                int alpha = Theme.chat_replyNamePaint.getAlpha();
                if (f != f11) {
                    Theme.chat_replyNamePaint.setAlpha((int) (alpha * f));
                }
                canvas.save();
                if (Math.abs(this.siteNameLeft) > 1.0f) {
                    f12 = ((i3 - AndroidUtilities.dp(this.hasInvoicePreview ? 0.0f : 20.0f)) - this.siteNameWidth) - this.siteNameLeft;
                } else {
                    f12 = 0.0f;
                }
                float dp9 = f2 + f12 + (this.hasInvoicePreview ? 0 : AndroidUtilities.dp(10.0f));
                canvas.translate(dp9, i7 - AndroidUtilities.dp(1.0f));
                SpoilerEffect.layoutDrawMaybe(this.siteNameLayout, canvas);
                canvas.restore();
                if (this.titleLabelLayout != null) {
                    float dp10 = dp9 + this.siteNameLayoutWidth + AndroidUtilities.dp(12.0f);
                    this.titleLabelX = dp10;
                    this.titleLabelY = i7;
                    this.rect.set(dp10 - AndroidUtilities.dp(6.0f), this.titleLabelY - AndroidUtilities.dp(2.0f), this.titleLabelX + this.titleLabelLayoutWidth + AndroidUtilities.dp(6.0f), this.titleLabelY + this.titleLabelLayoutHeight + AndroidUtilities.dp(2.0f));
                    if (this.titleLabelBounce == null) {
                        this.titleLabelBounce = new ButtonBounce(this);
                    }
                    float scale2 = this.titleLabelBounce.getScale(0.1f);
                    boolean z9 = scale2 != 1.0f;
                    if (z9) {
                        canvas.save();
                        canvas.scale(scale2, scale2, this.rect.centerX(), this.rect.centerY());
                    }
                    Theme.chat_instantViewPaint.setColor(Theme.chat_replyNamePaint.getColor());
                    int alpha2 = Theme.chat_instantViewPaint.getAlpha();
                    Theme.chat_instantViewPaint.setAlpha((int) (alpha * 0.11f));
                    RectF rectF2 = this.rect;
                    canvas.drawRoundRect(rectF2, rectF2.height(), this.rect.height(), Theme.chat_instantViewPaint);
                    Theme.chat_instantViewPaint.setAlpha(alpha2);
                    Theme.chat_titleLabelTextPaint.setColor(Theme.chat_replyNamePaint.getColor());
                    Theme.chat_titleLabelTextPaint.setAlpha(Theme.chat_replyNamePaint.getAlpha());
                    canvas.save();
                    canvas.translate(this.titleLabelX, this.titleLabelY);
                    this.titleLabelLayout.draw(canvas);
                    canvas.restore();
                    if (z9) {
                        canvas.restore();
                    }
                }
                StaticLayout staticLayout2 = this.siteNameLayout;
                int lineBottom = i7 + staticLayout2.getLineBottom(staticLayout2.getLineCount() - 1);
                Theme.chat_replyNamePaint.setAlpha(alpha);
                i8 = lineBottom;
                i9 = dp8;
            } else {
                i8 = i7;
                i9 = 0;
            }
            if ((this.hasGamePreview || this.hasInvoicePreview) && this.currentMessageObject.textHeight(this.transitionParams) != 0) {
                int textHeight = this.currentMessageObject.textHeight(this.transitionParams) + AndroidUtilities.dp(4.0f) + i6;
                i8 += this.currentMessageObject.textHeight(this.transitionParams) + AndroidUtilities.dp(4.0f);
                i6 = textHeight;
            }
            if (this.drawPhotoImage && z5) {
                if (!this.isSmallImage) {
                    TransitionParams transitionParams6 = this.transitionParams;
                    float f17 = (transitionParams6 == null || !transitionParams6.animateSmallImage) ? 1.0f : transitionParams6.animateChangeProgress;
                    if (i8 != i6) {
                        i8 = (int) (i8 + (AndroidUtilities.dp(2.0f) * f17));
                    }
                    int i27 = i8;
                    int dp11 = i3 - AndroidUtilities.dp(17.0f);
                    if (this.isSmallImage || this.drawInstantViewType != 17) {
                        f9 = 0.0f;
                    } else {
                        Rect rect = AndroidUtilities.rectTmp2;
                        rect.set(i4 + AndroidUtilities.dp(10.0f), i27, AndroidUtilities.dp(10.0f) + i4 + dp11, ((int) this.photoImage.getImageHeight()) + i27);
                        RectF rectF3 = AndroidUtilities.rectTmp;
                        rectF3.set(rect);
                        if (this.gradientDrawable == null) {
                            TLRPC.PhotoSize photoSize = this.currentPhotoObject;
                            if (photoSize != null && photoSize.gradientTopColor != 0 && photoSize.gradientBottomColor != 0) {
                                GradientDrawable.Orientation orientation = GradientDrawable.Orientation.TOP_BOTTOM;
                                TLRPC.PhotoSize photoSize2 = this.currentPhotoObject;
                                this.gradientDrawable = new GradientDrawable(orientation, new int[]{photoSize2.gradientTopColor, photoSize2.gradientBottomColor});
                            } else if (this.photoImage.getBitmap() != null) {
                                int[] colorsSync = DominantColors.getColorsSync(false, this.photoImage.getBitmap(), Theme.isCurrentThemeDark());
                                this.gradientDrawable = new GradientDrawable(GradientDrawable.Orientation.TOP_BOTTOM, colorsSync);
                                TLRPC.PhotoSize photoSize3 = this.currentPhotoObject;
                                if (photoSize3 != null) {
                                    photoSize3.gradientTopColor = colorsSync[0];
                                    photoSize3.gradientBottomColor = colorsSync[1];
                                }
                            }
                        }
                        if (this.gradientDrawable != null) {
                            canvas.save();
                            Path path = this.drillHolePath;
                            if (path != null) {
                                path.rewind();
                            } else {
                                this.drillHolePath = new Path();
                            }
                            this.drillHolePath.addRoundRect(rectF3, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Path.Direction.CW);
                            canvas.clipPath(this.drillHolePath);
                            this.gradientDrawable.setBounds(rect);
                            this.gradientDrawable.draw(canvas);
                            canvas.restore();
                        }
                        f9 = (((this.instantWidth - this.photoImage.getImageWidth()) - AndroidUtilities.dp(10.0f)) - (this.transitionParams == null ? 0.0f : this.currentMessageObject.isOutOwner() ? this.transitionParams.deltaLeft : -this.transitionParams.deltaRight)) / 2.0f;
                    }
                    if (this.imageBackgroundSideColor != 0) {
                        int dp12 = i4 + AndroidUtilities.dp(10.0f);
                        ImageReceiver imageReceiver5 = this.photoImage;
                        float f18 = dp12;
                        imageReceiver5.setImageX(f9 + f18 + ((this.imageBackgroundSideWidth - imageReceiver5.getImageWidth()) / 2.0f));
                        this.photoImage.setImageY(i27);
                        this.rect.set(f18, this.photoImage.getImageY(), dp12 + this.imageBackgroundSideWidth, this.photoImage.getImageY2());
                        Theme.chat_instantViewPaint.setColor(ColorUtils.setAlphaComponent(this.imageBackgroundSideColor, (int) (f * 255.0f)));
                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Theme.chat_instantViewPaint);
                    } else {
                        this.photoImage.setImageX(f9 + f2 + AndroidUtilities.dp(10.0f));
                        this.photoImage.setImageY(i27);
                    }
                    if (this.drawInstantViewType != 17) {
                        TransitionParams transitionParams7 = this.transitionParams;
                        if (transitionParams7 != null && transitionParams7.animateSmallImage) {
                            if (!this.isSmallImage && this.documentAttachType != 1) {
                                this.photoImage.setImageWidth((int) AndroidUtilities.lerp(transitionParams7.photoImageFromWidth, dp11, transitionParams7.animateChangeProgress));
                            }
                            ImageReceiver imageReceiver6 = this.photoImage;
                            imageReceiver6.setImageX(AndroidUtilities.lerp(this.transitionParams.photoImageFromCenterX, imageReceiver6.getCenterX(), this.transitionParams.animateChangeProgress) - (this.photoImage.getImageWidth() / 2.0f));
                            ImageReceiver imageReceiver7 = this.photoImage;
                            imageReceiver7.setImageY(AndroidUtilities.lerp(this.transitionParams.photoImageFromCenterY, imageReceiver7.getCenterY(), this.transitionParams.animateChangeProgress) - (this.photoImage.getImageHeight() / 2.0f));
                        } else if (!this.isSmallImage && this.documentAttachType != 1) {
                            this.photoImage.setImageWidth(dp11);
                        }
                    }
                    if (this.imageBackgroundColor != 0) {
                        this.rect.set(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
                        if (this.imageBackgroundGradientColor1 != 0) {
                            if (this.imageBackgroundGradientColor2 == 0) {
                                if (this.gradientShader == null) {
                                    Rect gradientPoints = BackgroundGradientDrawable.getGradientPoints(AndroidUtilities.getWallpaperRotation(this.imageBackgroundGradientRotation, false), (int) this.rect.width(), (int) this.rect.height());
                                    this.gradientShader = new LinearGradient(gradientPoints.left, gradientPoints.top, gradientPoints.right, gradientPoints.bottom, new int[]{this.imageBackgroundColor, this.imageBackgroundGradientColor1}, (float[]) null, Shader.TileMode.CLAMP);
                                }
                                Theme.chat_instantViewPaint.setShader(this.gradientShader);
                            } else if (this.motionBackgroundDrawable == null) {
                                MotionBackgroundDrawable motionBackgroundDrawable = new MotionBackgroundDrawable(this.imageBackgroundColor, this.imageBackgroundGradientColor1, this.imageBackgroundGradientColor2, this.imageBackgroundGradientColor3, true);
                                this.motionBackgroundDrawable = motionBackgroundDrawable;
                                if (this.imageBackgroundIntensity < 0.0f) {
                                    this.photoImage.setGradientBitmap(motionBackgroundDrawable.getBitmap());
                                }
                                if (!this.photoImage.hasImageSet()) {
                                    this.motionBackgroundDrawable.setRoundRadius(AndroidUtilities.dp(4.0f));
                                }
                            }
                            MotionBackgroundDrawable motionBackgroundDrawable2 = this.motionBackgroundDrawable;
                            if (motionBackgroundDrawable2 != null) {
                                RectF rectF4 = this.rect;
                                motionBackgroundDrawable2.setBounds((int) rectF4.left, (int) rectF4.top, (int) rectF4.right, (int) rectF4.bottom);
                                this.motionBackgroundDrawable.draw(canvas);
                            } else if (this.imageBackgroundSideColor != 0) {
                                canvas.drawRect(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2(), Theme.chat_instantViewPaint);
                            } else {
                                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Theme.chat_instantViewPaint);
                            }
                            Theme.chat_instantViewPaint.setShader(null);
                            Theme.chat_instantViewPaint.setAlpha(NotificationCenter.newLocationAvailable);
                        } else {
                            Theme.chat_instantViewPaint.setShader(null);
                            Theme.chat_instantViewPaint.setColor(this.imageBackgroundColor);
                        }
                        if (this.currentMessageObject.isOutOwner()) {
                            textPaint = Theme.chat_replyNamePaint;
                            i10 = Theme.key_chat_messageTextOut;
                        } else {
                            textPaint = Theme.chat_replyNamePaint;
                            i10 = Theme.key_chat_messageTextIn;
                        }
                        int i28 = (int) (f * 255.0f);
                        textPaint.setColor(ColorUtils.setAlphaComponent(getThemedColor(i10), i28));
                        Theme.chat_replyTextPaint.setColor(ColorUtils.setAlphaComponent(getThemedColor(i10), i28));
                        if (this.titleLayout != null) {
                            if (i8 != i6) {
                                i8 += AndroidUtilities.dp(4.0f);
                                f8 = 1.0f;
                                AndroidUtilities.dp(1.0f);
                            } else {
                                f8 = 1.0f;
                            }
                            if (i9 == 0) {
                                i9 = i8 - AndroidUtilities.dp(f8);
                            }
                            canvas.save();
                            float dp13 = i4 + AndroidUtilities.dp(10.0f) + (Math.abs(this.titleLayoutLeft) > 1 ? ((i3 - AndroidUtilities.dp(20.0f)) - this.titleLayoutWidth) - this.titleLayoutLeft : 0);
                            float dp14 = i8 - AndroidUtilities.dp(3.0f);
                            TransitionParams transitionParams8 = this.transitionParams;
                            canvas.translate(dp13, dp14 + (!transitionParams8.animateLinkPreviewY ? transitionParams8.deltaBottom + (-transitionParams8.deltaTop) : 0.0f));
                            TextPaint paint = this.titleLayout.getPaint();
                            int alpha3 = paint.getAlpha();
                            paint.setAlpha((int) (alpha3 * f));
                            SpoilerEffect.layoutDrawMaybe(this.titleLayout, canvas);
                            paint.setAlpha(alpha3);
                            canvas.restore();
                            StaticLayout staticLayout3 = this.titleLayout;
                            i8 += staticLayout3.getLineBottom(staticLayout3.getLineCount() - 1);
                        }
                        if (this.authorLayout != null) {
                            if (i8 != i6) {
                                i8 += AndroidUtilities.dp(2.0f);
                            }
                            if (i9 == 0) {
                                i9 = i8 - AndroidUtilities.dp(1.0f);
                            }
                            canvas.save();
                            float dp15 = i4 + AndroidUtilities.dp(10.0f) + (Math.abs(this.authorLayoutLeft) > 1 ? ((i3 - AndroidUtilities.dp(20.0f)) - this.authorLayoutWidth) - this.authorLayoutLeft : 0);
                            float dp16 = i8 - AndroidUtilities.dp(3.0f);
                            TransitionParams transitionParams9 = this.transitionParams;
                            canvas.translate(dp15, dp16 + (!transitionParams9.animateLinkPreviewY ? transitionParams9.deltaBottom + (-transitionParams9.deltaTop) : 0.0f));
                            TextPaint paint2 = this.authorLayout.getPaint();
                            int alpha4 = paint2.getAlpha();
                            paint2.setAlpha((int) (alpha4 * f));
                            SpoilerEffect.layoutDrawMaybe(this.authorLayout, canvas);
                            paint2.setAlpha(alpha4);
                            canvas.restore();
                            StaticLayout staticLayout4 = this.authorLayout;
                            i8 += staticLayout4.getLineBottom(staticLayout4.getLineCount() - 1);
                        }
                        if (this.descriptionLayout != null) {
                            if (i8 != i6) {
                                i8 += AndroidUtilities.dp(2.0f);
                            }
                            int i29 = i8;
                            if (i9 == 0) {
                                i9 = i29 - AndroidUtilities.dp(1.0f);
                            }
                            int i30 = i9;
                            this.descriptionY = i29 - AndroidUtilities.dp(3.0f);
                            canvas.save();
                            float dp17 = i4 + AndroidUtilities.dp(10.0f) + (Math.abs(this.descriptionLayoutLeft) > 1 ? ((i3 - AndroidUtilities.dp(20.0f)) - this.descriptionLayoutWidth) - this.descriptionLayoutLeft : 0);
                            float f19 = this.descriptionY;
                            TransitionParams transitionParams10 = this.transitionParams;
                            canvas.translate(dp17, f19 + (!transitionParams10.animateLinkPreviewY ? transitionParams10.deltaBottom + (-transitionParams10.deltaTop) : 0.0f));
                            if (this.linkBlockNum == -10 && this.links.draw(canvas)) {
                                invalidate();
                            }
                            drawProgressLoadingLink(canvas, -2);
                            ChatMessageCellDelegate chatMessageCellDelegate4 = this.delegate;
                            if (chatMessageCellDelegate4 != null && chatMessageCellDelegate4.getTextSelectionHelper() != null && getDelegate().getTextSelectionHelper().isSelected(this.currentMessageObject)) {
                                this.delegate.getTextSelectionHelper().drawDescription(this.currentMessageObject.isOutOwner(), this.descriptionLayout, canvas);
                            }
                            TextPaint paint3 = this.descriptionLayout.getPaint();
                            if (z2 && (messageObject = this.currentMessageObject) != null && !messageObject.isOutOwner() && (replyMessageLine = this.linkLine) != null) {
                                paint3.linkColor = replyMessageLine.getColor();
                            }
                            int alpha5 = paint3.getAlpha();
                            paint3.setAlpha((int) (alpha5 * f));
                            SpoilerEffect.layoutDrawMaybe(this.descriptionLayout, canvas);
                            paint3.setAlpha(alpha5);
                            StaticLayout staticLayout5 = this.descriptionLayout;
                            f4 = 2.0f;
                            f3 = 1.0f;
                            AnimatedEmojiSpan.drawAnimatedEmojis(canvas, staticLayout5, this.animatedEmojiDescriptionStack, 0.0f, null, 0.0f, 0.0f, 0.0f, 1.0f, getAdaptiveEmojiColorFilter(1, staticLayout5.getPaint().getColor()));
                            canvas.restore();
                            paint3.linkColor = getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_messageLinkOut : Theme.key_chat_messageLinkIn);
                            StaticLayout staticLayout6 = this.descriptionLayout;
                            i8 = i29 + staticLayout6.getLineBottom(staticLayout6.getLineCount() - 1);
                            i9 = i30;
                        } else {
                            f3 = 1.0f;
                            f4 = 2.0f;
                        }
                        if (this.drawPhotoImage && z6) {
                            if (i8 != i6) {
                                i8 += AndroidUtilities.dp(f4);
                            }
                            dp3 = i3 - AndroidUtilities.dp(17.0f);
                            if (this.isSmallImage) {
                                this.photoImage.setImageX(i4 + (this.hasInvoicePreview ? -AndroidUtilities.dp(6.3f) : AndroidUtilities.dp(10.0f)));
                                imageReceiver = this.photoImage;
                                f6 = i8;
                            } else {
                                ImageReceiver imageReceiver8 = this.photoImage;
                                imageReceiver8.setImageX(((i4 + i3) - imageReceiver8.getImageWidth()) - AndroidUtilities.dp(6.0f));
                                imageReceiver = this.photoImage;
                                f6 = i9;
                            }
                            imageReceiver.setImageY(f6);
                            transitionParams = this.transitionParams;
                            if (transitionParams == null && transitionParams.animateSmallImage) {
                                if (!this.isSmallImage && this.documentAttachType != 1) {
                                    this.photoImage.setImageWidth((int) AndroidUtilities.lerp(transitionParams.photoImageFromWidth, dp3, transitionParams.animateChangeProgress));
                                }
                                ImageReceiver imageReceiver9 = this.photoImage;
                                imageReceiver9.setImageX(AndroidUtilities.lerp(this.transitionParams.photoImageFromCenterX, imageReceiver9.getCenterX(), this.transitionParams.animateChangeProgress) - (this.photoImage.getImageWidth() / f4));
                                ImageReceiver imageReceiver10 = this.photoImage;
                                imageReceiver10.setImageY(AndroidUtilities.lerp(this.transitionParams.photoImageFromCenterY, imageReceiver10.getCenterY(), this.transitionParams.animateChangeProgress) - (this.photoImage.getImageHeight() / f4));
                            } else if (!this.isSmallImage && (i15 = this.documentAttachType) != 7 && i15 != 1) {
                                this.photoImage.setImageWidth(dp3);
                            }
                            if (!this.isSmallImage && this.drawImageButton) {
                                int dp18 = AndroidUtilities.dp(48.0f);
                                float f20 = dp18;
                                this.buttonX = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - f20) / f4));
                                int imageY2 = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - f20) / f4));
                                this.buttonY = imageY2;
                                RadialProgress2 radialProgress22 = this.radialProgress;
                                int i31 = this.buttonX;
                                radialProgress22.setProgressRect(i31, imageY2, i31 + dp18, dp18 + imageY2);
                            }
                            if (!this.isRoundVideo && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && MediaController.getInstance().isVideoDrawingReady() && canvas.isHardwareAccelerated()) {
                                this.imageDrawn = true;
                                this.drawTime = true;
                            } else {
                                chatMessageCellDelegate = this.delegate;
                                if (chatMessageCellDelegate != null || chatMessageCellDelegate.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) {
                                    if (f == f3) {
                                        this.photoImage.setAlpha(f);
                                        if (allowDrawPhotoImage()) {
                                            canvas2 = canvas;
                                            f7 = 1.0f;
                                            z3 = this.photoImage.draw(canvas2);
                                        } else {
                                            canvas2 = canvas;
                                            z3 = true;
                                            f7 = 1.0f;
                                        }
                                        this.imageDrawn = z3;
                                        if (this.currentMessageObject.hasMediaSpoilers()) {
                                            this.blurredPhotoImage.setAlpha(f);
                                            drawBlurredPhoto(canvas);
                                            this.blurredPhotoImage.setAlpha(f7);
                                        }
                                        this.photoImage.setAlpha(f7);
                                    } else {
                                        canvas2 = canvas;
                                        this.imageDrawn = allowDrawPhotoImage() ? this.photoImage.draw(canvas2) : true;
                                        if (this.currentMessageObject.hasMediaSpoilers()) {
                                            drawBlurredPhoto(canvas);
                                        }
                                    }
                                    i11 = this.documentAttachType;
                                    if (i11 != 4 || i11 == 2) {
                                        this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
                                        int imageY3 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
                                        this.videoButtonY = imageY3;
                                        RadialProgress2 radialProgress23 = this.videoRadialProgress;
                                        int i32 = this.videoButtonX;
                                        radialProgress23.setProgressRect(i32, imageY3, AndroidUtilities.dp(24.0f) + i32, this.videoButtonY + AndroidUtilities.dp(24.0f));
                                    }
                                    themedPaint = getThemedPaint("paintChatTimeBackground");
                                    if (this.photosCountLayout != null && this.photoImage.getVisible()) {
                                        int imageX = (int) (((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(8.0f)) - this.photosCountWidth);
                                        int imageY4 = (int) ((this.photoImage.getImageY() + this.photoImage.getImageHeight()) - AndroidUtilities.dp(19.0f));
                                        this.rect.set(imageX - AndroidUtilities.dp(4.0f), imageY4 - AndroidUtilities.dp(1.5f), this.photosCountWidth + imageX + AndroidUtilities.dp(4.0f), imageY4 + AndroidUtilities.dp(14.5f));
                                        int alpha6 = themedPaint.getAlpha();
                                        themedPaint.setAlpha((int) (alpha6 * this.controlsAlpha));
                                        Theme.chat_durationPaint.setAlpha((int) (this.controlsAlpha * 255.0f));
                                        canvas2.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), themedPaint);
                                        themedPaint.setAlpha(alpha6);
                                        canvas.save();
                                        canvas2.translate(imageX, imageY4);
                                        this.photosCountLayout.draw(canvas2);
                                        canvas.restore();
                                        Theme.chat_durationPaint.setAlpha(NotificationCenter.newLocationAvailable);
                                    }
                                    if (this.videoInfoLayout != null && ((!this.drawPhotoImage || this.photoImage.getVisible()) && this.imageBackgroundSideColor == 0)) {
                                        if (this.hasGamePreview && !this.hasInvoicePreview && this.documentAttachType != 8) {
                                            i13 = (int) (((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(8.0f)) - this.durationWidth);
                                            i8 = (int) ((this.photoImage.getImageY() + this.photoImage.getImageHeight()) - AndroidUtilities.dp(19.0f));
                                            this.rect.set(i13 - AndroidUtilities.dp(4.0f), i8 - AndroidUtilities.dp(1.5f), this.durationWidth + i13 + AndroidUtilities.dp(4.0f), AndroidUtilities.dp(14.5f) + i8);
                                            canvas2.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), getThemedPaint("paintChatTimeBackground"));
                                        } else if (this.drawPhotoImage) {
                                            i13 = i4;
                                        } else {
                                            i13 = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.5f));
                                            i8 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(6.0f));
                                            this.rect.set(i13 - AndroidUtilities.dp(4.0f), i8 - AndroidUtilities.dp(1.5f), this.durationWidth + i13 + AndroidUtilities.dp(4.0f), AndroidUtilities.dp(this.documentAttachType == 8 ? 14.5f : 16.5f) + i8);
                                            canvas2.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), themedPaint);
                                        }
                                        canvas.save();
                                        canvas2.translate(i13, i8);
                                        if (this.hasInvoicePreview) {
                                            if (this.drawPhotoImage) {
                                                textPaint2 = Theme.chat_shipmentPaint;
                                                i14 = Theme.key_chat_previewGameText;
                                            } else if (this.currentMessageObject.isOutOwner()) {
                                                textPaint2 = Theme.chat_shipmentPaint;
                                                i14 = Theme.key_chat_messageTextOut;
                                            } else {
                                                textPaint2 = Theme.chat_shipmentPaint;
                                                i14 = Theme.key_chat_messageTextIn;
                                            }
                                            textPaint2.setColor(getThemedColor(i14));
                                        }
                                        this.videoInfoLayout.draw(canvas2);
                                        canvas.restore();
                                    }
                                    drawVideoTimestamps(canvas2, this.linkLine.getColor());
                                    this.giveawayMessageCell.draw(canvas2, this.namesOffset, i4, this.resourcesProvider);
                                    this.giveawayResultsMessageCell.draw(canvas2, this.namesOffset, i4, this.resourcesProvider);
                                    if (this.drawInstantView) {
                                        if (this.currentMessageObject.isOutOwner()) {
                                            Drawable themedDrawable = getThemedDrawable("drawableMsgOutInstant");
                                            TextPaint textPaint3 = Theme.chat_instantViewPaint;
                                            int i33 = Theme.key_chat_outPreviewInstantText;
                                            textPaint3.setColor(getThemedColor(i33));
                                            Theme.chat_instantViewButtonPaint.setColor(Theme.multAlpha(getThemedColor(i33), 0.1f));
                                            LoadingDrawable loadingDrawable = this.instantButtonLoading;
                                            if (loadingDrawable != null) {
                                                loadingDrawable.setColors(Theme.multAlpha(getThemedColor(i33), 0.1f), Theme.multAlpha(getThemedColor(i33), 0.3f), Theme.multAlpha(getThemedColor(i33), 0.3f), Theme.multAlpha(getThemedColor(i33), 1.2f));
                                            }
                                            drawable = themedDrawable;
                                        } else {
                                            int themedColor = getThemedColor(Theme.key_chat_inPreviewInstantText);
                                            if (this.linkLine != null && !this.currentMessageObject.isUnsupported()) {
                                                themedColor = this.linkLine.getColor();
                                            }
                                            if (this.instantDrawable == null) {
                                                if (this.drawInstantViewType == 16) {
                                                    resources = getContext().getResources();
                                                    i12 = R.drawable.mini_external_link;
                                                } else {
                                                    resources = getContext().getResources();
                                                    i12 = R.drawable.msg_instant;
                                                }
                                                this.instantDrawable = resources.getDrawable(i12).mutate();
                                            }
                                            if (this.instantDrawableColor != themedColor) {
                                                Drawable drawable3 = this.instantDrawable;
                                                this.instantDrawableColor = themedColor;
                                                drawable3.setColorFilter(new PorterDuffColorFilter(themedColor, PorterDuff.Mode.SRC_IN));
                                            }
                                            Drawable drawable4 = this.instantDrawable;
                                            Theme.chat_instantViewPaint.setColor(themedColor);
                                            Theme.chat_instantViewButtonPaint.setColor(Theme.multAlpha(themedColor, 0.1f));
                                            LoadingDrawable loadingDrawable2 = this.instantButtonLoading;
                                            if (loadingDrawable2 != null) {
                                                loadingDrawable2.setColors(Theme.multAlpha(themedColor, 0.1f), Theme.multAlpha(themedColor, 0.3f), Theme.multAlpha(themedColor, 0.3f), Theme.multAlpha(themedColor, 1.2f));
                                            }
                                            drawable = drawable4;
                                        }
                                        int i34 = i6 + i24;
                                        if (z2) {
                                            int dp19 = i34 + AndroidUtilities.dp(14.0f);
                                            int alpha7 = Theme.chat_instantViewPaint.getAlpha();
                                            Theme.chat_instantViewPaint.setAlpha((int) (alpha7 * 0.18f));
                                            canvas.drawRect(i4 + AndroidUtilities.dp(10.0f), AndroidUtilities.dp(f4) + i34, (i4 + i3) - AndroidUtilities.dp(7.0f), i34 + AndroidUtilities.dp(f4) + Math.max(1, AndroidUtilities.dp(0.66f)), Theme.chat_instantViewPaint);
                                            Theme.chat_instantViewPaint.setAlpha(alpha7);
                                            float dp20 = AndroidUtilities.dp(this.drawInstantViewType == 0 ? 15.0f : 0.0f) + this.instantViewLayoutWidth;
                                            float f21 = f2 + ((i3 - dp20) / f4);
                                            int i35 = this.drawInstantViewType;
                                            if (i35 == 0) {
                                                BaseCell.setDrawableBounds(drawable, f21, AndroidUtilities.dp(1.0f) + dp19, AndroidUtilities.dp(9.0f), AndroidUtilities.dp(13.0f));
                                                drawable.setAlpha((int) (f * 255.0f));
                                                drawable.draw(canvas2);
                                                f21 += AndroidUtilities.dp(15.0f);
                                            } else if (i35 == 16) {
                                                f21 -= AndroidUtilities.dp(11.0f);
                                                BaseCell.setDrawableBounds(drawable, dp20 + f21 + AndroidUtilities.dp(4.0f), dp19 - AndroidUtilities.dp(f4), AndroidUtilities.dp(18.0f), AndroidUtilities.dp(18.0f));
                                                drawable.setAlpha((int) (f * 255.0f));
                                                drawable.draw(canvas2);
                                            }
                                            if (this.instantViewLayout != null) {
                                                canvas.save();
                                                canvas2.translate(f21 - this.instantViewLayoutLeft, dp19);
                                                SpoilerEffect.layoutDrawMaybe(this.instantViewLayout, canvas2);
                                                canvas.restore();
                                            }
                                        } else {
                                            int dp21 = i34 + AndroidUtilities.dp(this.currentMessageObject.isUnsupported() ? -5.0f : 10.0f);
                                            LoadingDrawable loadingDrawable3 = this.instantButtonLoading;
                                            if (loadingDrawable3 != null && !z && !loadingDrawable3.isDisappeared() && !this.instantButtonLoading.isDisappearing()) {
                                                this.instantButtonLoading.disappear();
                                            }
                                            LoadingDrawable loadingDrawable4 = this.instantButtonLoading;
                                            if (loadingDrawable4 == null && z) {
                                                LoadingDrawable loadingDrawable5 = new LoadingDrawable();
                                                this.instantButtonLoading = loadingDrawable5;
                                                loadingDrawable5.strokePaint.setStrokeWidth(AndroidUtilities.dp(1.25f));
                                                this.instantButtonLoading.setAppearByGradient(true);
                                            } else if (loadingDrawable4 != null && z && (loadingDrawable4.isDisappeared() || this.instantButtonLoading.isDisappearing())) {
                                                this.instantButtonLoading.reset();
                                                this.instantButtonLoading.resetDisappear();
                                            }
                                            this.instantButtonRect.set(f2, dp21, i4 + this.instantWidth, AndroidUtilities.dp(36.0f) + dp21);
                                            float scale3 = this.instantButtonBounce.getScale(0.02f);
                                            boolean z10 = scale3 != 1.0f;
                                            if (z10) {
                                                canvas.save();
                                                canvas2.scale(scale3, scale3, this.instantButtonRect.centerX(), this.instantButtonRect.centerY());
                                            }
                                            if (Build.VERSION.SDK_INT >= 21) {
                                                this.selectorDrawableMaskType[0] = 0;
                                                createSelectorDrawable(0);
                                                this.selectorDrawable[0].setBounds(i4, dp21, i4 + this.instantWidth, AndroidUtilities.dp(36.0f) + dp21);
                                                this.selectorDrawable[0].draw(canvas2);
                                            }
                                            LoadingDrawable loadingDrawable6 = this.instantButtonLoading;
                                            if (loadingDrawable6 == null || loadingDrawable6.isDisappeared()) {
                                                f5 = 6.0f;
                                            } else {
                                                this.instantButtonLoading.setBounds(this.instantButtonRect);
                                                f5 = 6.0f;
                                                this.instantButtonLoading.setRadiiDp(6.0f);
                                                this.instantButtonLoading.draw(canvas2);
                                                invalidate();
                                            }
                                            canvas2.drawRoundRect(this.instantButtonRect, AndroidUtilities.dp(f5), AndroidUtilities.dp(f5), Theme.chat_instantViewButtonPaint);
                                            int i36 = this.drawInstantViewType;
                                            if (i36 == 0) {
                                                BaseCell.setDrawableBounds(drawable, ((this.instantTextLeftX + this.instantTextX) + i4) - AndroidUtilities.dp(15.0f), AndroidUtilities.dp(11.5f) + dp21, AndroidUtilities.dp(9.0f), AndroidUtilities.dp(13.0f));
                                                drawable.setAlpha((int) (f * 255.0f));
                                                drawable.draw(canvas2);
                                            } else if (i36 == 16) {
                                                if (this.instantLinkArrowPaint == null) {
                                                    Paint paint4 = new Paint(1);
                                                    this.instantLinkArrowPaint = paint4;
                                                    paint4.setStyle(Paint.Style.STROKE);
                                                    this.instantLinkArrowPaint.setStrokeCap(Paint.Cap.ROUND);
                                                    this.instantLinkArrowPaint.setStrokeJoin(Paint.Join.ROUND);
                                                }
                                                this.instantLinkArrowPaint.setColor(Theme.chat_instantViewPaint.getColor());
                                                this.instantLinkArrowPaint.setStrokeWidth(AndroidUtilities.dpf2(1.333f));
                                                Path path2 = this.instantLinkArrowPath;
                                                if (path2 == null) {
                                                    this.instantLinkArrowPath = new Path();
                                                } else {
                                                    path2.rewind();
                                                }
                                                this.instantLinkArrowPath.moveTo(this.instantButtonRect.right - AndroidUtilities.dp(11.0f), this.instantButtonRect.top + AndroidUtilities.dp(6.0f));
                                                this.instantLinkArrowPath.lineTo(this.instantButtonRect.right - AndroidUtilities.dp(6.0f), this.instantButtonRect.top + AndroidUtilities.dp(6.0f));
                                                this.instantLinkArrowPath.lineTo(this.instantButtonRect.right - AndroidUtilities.dp(6.0f), this.instantButtonRect.top + AndroidUtilities.dp(11.0f));
                                                this.instantLinkArrowPath.moveTo(this.instantButtonRect.right - AndroidUtilities.dpf2(11.66f), this.instantButtonRect.top + AndroidUtilities.dp(11.66f));
                                                this.instantLinkArrowPath.lineTo(this.instantButtonRect.right - AndroidUtilities.dp(6.0f), this.instantButtonRect.top + AndroidUtilities.dp(6.0f));
                                                canvas2.drawPath(this.instantLinkArrowPath, this.instantLinkArrowPaint);
                                            }
                                            if (this.instantViewLayout != null) {
                                                canvas.save();
                                                canvas2.translate(i4 + this.instantTextX, dp21 + AndroidUtilities.dp(10.5f));
                                                SpoilerEffect.layoutDrawMaybe(this.instantViewLayout, canvas2);
                                                canvas.restore();
                                            }
                                        }
                                    }
                                    canvas2.restoreToCount(i5);
                                }
                            }
                        }
                        canvas2 = canvas;
                        i11 = this.documentAttachType;
                        if (i11 != 4) {
                        }
                        this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
                        int imageY32 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
                        this.videoButtonY = imageY32;
                        RadialProgress2 radialProgress232 = this.videoRadialProgress;
                        int i322 = this.videoButtonX;
                        radialProgress232.setProgressRect(i322, imageY32, AndroidUtilities.dp(24.0f) + i322, this.videoButtonY + AndroidUtilities.dp(24.0f));
                        themedPaint = getThemedPaint("paintChatTimeBackground");
                        if (this.photosCountLayout != null) {
                            int imageX2 = (int) (((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(8.0f)) - this.photosCountWidth);
                            int imageY42 = (int) ((this.photoImage.getImageY() + this.photoImage.getImageHeight()) - AndroidUtilities.dp(19.0f));
                            this.rect.set(imageX2 - AndroidUtilities.dp(4.0f), imageY42 - AndroidUtilities.dp(1.5f), this.photosCountWidth + imageX2 + AndroidUtilities.dp(4.0f), imageY42 + AndroidUtilities.dp(14.5f));
                            int alpha62 = themedPaint.getAlpha();
                            themedPaint.setAlpha((int) (alpha62 * this.controlsAlpha));
                            Theme.chat_durationPaint.setAlpha((int) (this.controlsAlpha * 255.0f));
                            canvas2.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), themedPaint);
                            themedPaint.setAlpha(alpha62);
                            canvas.save();
                            canvas2.translate(imageX2, imageY42);
                            this.photosCountLayout.draw(canvas2);
                            canvas.restore();
                            Theme.chat_durationPaint.setAlpha(NotificationCenter.newLocationAvailable);
                        }
                        if (this.videoInfoLayout != null) {
                            if (this.hasGamePreview) {
                            }
                            if (this.drawPhotoImage) {
                            }
                            canvas.save();
                            canvas2.translate(i13, i8);
                            if (this.hasInvoicePreview) {
                            }
                            this.videoInfoLayout.draw(canvas2);
                            canvas.restore();
                        }
                        drawVideoTimestamps(canvas2, this.linkLine.getColor());
                        this.giveawayMessageCell.draw(canvas2, this.namesOffset, i4, this.resourcesProvider);
                        this.giveawayResultsMessageCell.draw(canvas2, this.namesOffset, i4, this.resourcesProvider);
                        if (this.drawInstantView) {
                        }
                        canvas2.restoreToCount(i5);
                    }
                    if (this.drawPhotoImage && this.drawInstantView && this.drawInstantViewType != 9) {
                        if (this.drawImageButton) {
                            int dp22 = AndroidUtilities.dp(48.0f);
                            float f22 = dp22;
                            this.buttonX = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - f22) / 2.0f));
                            int imageY5 = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - f22) / 2.0f));
                            this.buttonY = imageY5;
                            RadialProgress2 radialProgress24 = this.radialProgress;
                            int i37 = this.buttonX;
                            radialProgress24.setProgressRect(i37, imageY5, i37 + dp22, dp22 + imageY5);
                        }
                        ChatMessageCellDelegate chatMessageCellDelegate5 = this.delegate;
                        if (chatMessageCellDelegate5 == null || chatMessageCellDelegate5.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) {
                            if (f != 1.0f) {
                                this.photoImage.setAlpha(f);
                                this.imageDrawn = allowDrawPhotoImage() ? this.photoImage.draw(canvas) : true;
                                if (this.currentMessageObject.hasMediaSpoilers()) {
                                    this.blurredPhotoImage.setAlpha(f);
                                    drawBlurredPhoto(canvas);
                                    f10 = 1.0f;
                                    this.blurredPhotoImage.setAlpha(1.0f);
                                } else {
                                    f10 = 1.0f;
                                }
                                this.photoImage.setAlpha(f10);
                            } else {
                                this.imageDrawn = allowDrawPhotoImage() ? this.photoImage.draw(canvas) : true;
                                if (this.currentMessageObject.hasMediaSpoilers()) {
                                    drawBlurredPhoto(canvas);
                                }
                            }
                        }
                    }
                    TransitionParams transitionParams11 = this.transitionParams;
                    i8 = (transitionParams11 == null || !transitionParams11.animateChange) ? (int) (i27 + (f17 * (this.photoImage.getImageHeight() + AndroidUtilities.dp(6.0f)))) : (int) (i27 + (f17 * (transitionParams11.animateToImageH + AndroidUtilities.dp(6.0f))));
                    if (this.currentMessageObject.isOutOwner()) {
                    }
                    int i282 = (int) (f * 255.0f);
                    textPaint.setColor(ColorUtils.setAlphaComponent(getThemedColor(i10), i282));
                    Theme.chat_replyTextPaint.setColor(ColorUtils.setAlphaComponent(getThemedColor(i10), i282));
                    if (this.titleLayout != null) {
                    }
                    if (this.authorLayout != null) {
                    }
                    if (this.descriptionLayout != null) {
                    }
                    if (this.drawPhotoImage) {
                        if (i8 != i6) {
                        }
                        dp3 = i3 - AndroidUtilities.dp(17.0f);
                        if (this.isSmallImage) {
                        }
                        imageReceiver.setImageY(f6);
                        transitionParams = this.transitionParams;
                        if (transitionParams == null) {
                        }
                        if (!this.isSmallImage) {
                            this.photoImage.setImageWidth(dp3);
                        }
                        if (!this.isSmallImage) {
                            int dp182 = AndroidUtilities.dp(48.0f);
                            float f202 = dp182;
                            this.buttonX = (int) (this.photoImage.getImageX() + ((this.photoImage.getImageWidth() - f202) / f4));
                            int imageY22 = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - f202) / f4));
                            this.buttonY = imageY22;
                            RadialProgress2 radialProgress222 = this.radialProgress;
                            int i312 = this.buttonX;
                            radialProgress222.setProgressRect(i312, imageY22, i312 + dp182, dp182 + imageY22);
                        }
                        if (!this.isRoundVideo) {
                        }
                        chatMessageCellDelegate = this.delegate;
                        if (chatMessageCellDelegate != null) {
                        }
                        if (f == f3) {
                        }
                        i11 = this.documentAttachType;
                        if (i11 != 4) {
                        }
                        this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
                        int imageY322 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
                        this.videoButtonY = imageY322;
                        RadialProgress2 radialProgress2322 = this.videoRadialProgress;
                        int i3222 = this.videoButtonX;
                        radialProgress2322.setProgressRect(i3222, imageY322, AndroidUtilities.dp(24.0f) + i3222, this.videoButtonY + AndroidUtilities.dp(24.0f));
                        themedPaint = getThemedPaint("paintChatTimeBackground");
                        if (this.photosCountLayout != null) {
                        }
                        if (this.videoInfoLayout != null) {
                        }
                        drawVideoTimestamps(canvas2, this.linkLine.getColor());
                        this.giveawayMessageCell.draw(canvas2, this.namesOffset, i4, this.resourcesProvider);
                        this.giveawayResultsMessageCell.draw(canvas2, this.namesOffset, i4, this.resourcesProvider);
                        if (this.drawInstantView) {
                        }
                        canvas2.restoreToCount(i5);
                    }
                    canvas2 = canvas;
                    i11 = this.documentAttachType;
                    if (i11 != 4) {
                    }
                    this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
                    int imageY3222 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
                    this.videoButtonY = imageY3222;
                    RadialProgress2 radialProgress23222 = this.videoRadialProgress;
                    int i32222 = this.videoButtonX;
                    radialProgress23222.setProgressRect(i32222, imageY3222, AndroidUtilities.dp(24.0f) + i32222, this.videoButtonY + AndroidUtilities.dp(24.0f));
                    themedPaint = getThemedPaint("paintChatTimeBackground");
                    if (this.photosCountLayout != null) {
                    }
                    if (this.videoInfoLayout != null) {
                    }
                    drawVideoTimestamps(canvas2, this.linkLine.getColor());
                    this.giveawayMessageCell.draw(canvas2, this.namesOffset, i4, this.resourcesProvider);
                    this.giveawayResultsMessageCell.draw(canvas2, this.namesOffset, i4, this.resourcesProvider);
                    if (this.drawInstantView) {
                    }
                    canvas2.restoreToCount(i5);
                }
                TransitionParams transitionParams12 = this.transitionParams;
                if (transitionParams12 != null && transitionParams12.animateSmallImage) {
                    i8 = (int) (i8 + (((i8 != i6 ? AndroidUtilities.dp(2.0f) : 0) + this.transitionParams.photoImageFromHeight + AndroidUtilities.dp(6.0f)) * (1.0f - this.transitionParams.animateChangeProgress)));
                }
            }
            if (this.currentMessageObject.isOutOwner()) {
            }
            int i2822 = (int) (f * 255.0f);
            textPaint.setColor(ColorUtils.setAlphaComponent(getThemedColor(i10), i2822));
            Theme.chat_replyTextPaint.setColor(ColorUtils.setAlphaComponent(getThemedColor(i10), i2822));
            if (this.titleLayout != null) {
            }
            if (this.authorLayout != null) {
            }
            if (this.descriptionLayout != null) {
            }
            if (this.drawPhotoImage) {
            }
            canvas2 = canvas;
            i11 = this.documentAttachType;
            if (i11 != 4) {
            }
            this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
            int imageY32222 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
            this.videoButtonY = imageY32222;
            RadialProgress2 radialProgress232222 = this.videoRadialProgress;
            int i322222 = this.videoButtonX;
            radialProgress232222.setProgressRect(i322222, imageY32222, AndroidUtilities.dp(24.0f) + i322222, this.videoButtonY + AndroidUtilities.dp(24.0f));
            themedPaint = getThemedPaint("paintChatTimeBackground");
            if (this.photosCountLayout != null) {
            }
            if (this.videoInfoLayout != null) {
            }
            drawVideoTimestamps(canvas2, this.linkLine.getColor());
            this.giveawayMessageCell.draw(canvas2, this.namesOffset, i4, this.resourcesProvider);
            this.giveawayResultsMessageCell.draw(canvas2, this.namesOffset, i4, this.resourcesProvider);
            if (this.drawInstantView) {
            }
            canvas2.restoreToCount(i5);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:103:0x0242  */
    /* JADX WARN: Removed duplicated region for block: B:115:0x030f  */
    /* JADX WARN: Removed duplicated region for block: B:121:0x0334  */
    /* JADX WARN: Removed duplicated region for block: B:135:0x03aa  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x03c6  */
    /* JADX WARN: Removed duplicated region for block: B:145:0x03ed  */
    /* JADX WARN: Removed duplicated region for block: B:152:0x0410  */
    /* JADX WARN: Removed duplicated region for block: B:155:0x0424  */
    /* JADX WARN: Removed duplicated region for block: B:214:0x084d  */
    /* JADX WARN: Removed duplicated region for block: B:217:0x085c  */
    /* JADX WARN: Removed duplicated region for block: B:221:0x0872 A[LOOP:3: B:219:0x086a->B:221:0x0872, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:224:0x0861  */
    /* JADX WARN: Removed duplicated region for block: B:225:0x0851  */
    /* JADX WARN: Removed duplicated region for block: B:237:0x08a1  */
    /* JADX WARN: Removed duplicated region for block: B:238:0x08a5  */
    /* JADX WARN: Removed duplicated region for block: B:242:0x08b9  */
    /* JADX WARN: Removed duplicated region for block: B:249:0x08fa  */
    /* JADX WARN: Removed duplicated region for block: B:253:0x0904  */
    /* JADX WARN: Removed duplicated region for block: B:258:0x0932 A[ADDED_TO_REGION, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:262:0x08bc  */
    /* JADX WARN: Removed duplicated region for block: B:269:0x068a  */
    /* JADX WARN: Removed duplicated region for block: B:307:0x0781  */
    /* JADX WARN: Removed duplicated region for block: B:314:0x07b2  */
    /* JADX WARN: Removed duplicated region for block: B:317:0x07d4  */
    /* JADX WARN: Removed duplicated region for block: B:326:0x0413  */
    /* JADX WARN: Removed duplicated region for block: B:328:0x03d4  */
    /* JADX WARN: Removed duplicated region for block: B:331:0x0946  */
    /* JADX WARN: Removed duplicated region for block: B:334:0x095f  */
    /* JADX WARN: Removed duplicated region for block: B:337:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:351:0x0302  */
    /* JADX WARN: Removed duplicated region for block: B:358:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:67:0x0186  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawMessageText(float f, float f2, Canvas canvas, ArrayList arrayList, float f3, boolean z, float f4, boolean z2, boolean z3, boolean z4) {
        int size;
        int i;
        float backgroundDrawableRight;
        int i2;
        int i3;
        int i4;
        boolean z5;
        int i5;
        int i6;
        int i7;
        int i8;
        int i9;
        MessageObject.TextLayoutBlock textLayoutBlock;
        int i10;
        int i11;
        MessageObject.TextLayoutBlock textLayoutBlock2;
        int i12;
        int i13;
        float f5;
        int min;
        float f6;
        int i14;
        Text text;
        int i15;
        ChatMessageCellDelegate chatMessageCellDelegate;
        int i16;
        float f7;
        int i17;
        MessageObject.TextLayoutBlock textLayoutBlock3;
        float f8;
        MessageObject.TextLayoutBlock textLayoutBlock4;
        int i18;
        int i19;
        ButtonBounce buttonBounce;
        Theme.MessageDrawable messageDrawable;
        RectF rectF;
        float currentBackgroundLeft;
        float f9;
        int i20;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        StaticLayout staticLayout;
        float f10 = f;
        ArrayList arrayList2 = arrayList;
        if (arrayList2 == null || arrayList.isEmpty()) {
            return;
        }
        float f11 = 0.0f;
        if (f4 == 0.0f) {
            return;
        }
        if (!z || z2) {
            size = arrayList.size();
            i = 0;
        } else {
            if (this.fullyDraw) {
                this.firstVisibleBlockNum = 0;
                this.lastVisibleBlockNum = arrayList.size();
            }
            i = this.firstVisibleBlockNum;
            size = this.lastVisibleBlockNum;
        }
        boolean isTranslating = MessagesController.getInstance(this.currentAccount).getTranslateController().isTranslating(getMessageObject());
        boolean z6 = !z;
        MessageObject messageObject = this.currentMessageObject;
        if (z6 == (messageObject != null && messageObject.translated)) {
            if (this.translationLoadingFloat == null) {
                this.translationLoadingFloat = new AnimatedFloat(this, 350L, CubicBezierInterpolator.EASE_OUT_QUINT);
            }
            float f12 = this.translationLoadingFloat.set(isTranslating ? 1.0f : 0.0f);
            if (f12 > 0.0f) {
                if (this.translationLoadingDrawable == null) {
                    LoadingDrawable loadingDrawable = new LoadingDrawable();
                    this.translationLoadingDrawable = loadingDrawable;
                    loadingDrawable.setAppearByGradient(true);
                    if (this.translationLoadingPath == null) {
                        LinkPath linkPath = new LinkPath(true);
                        this.translationLoadingPath = linkPath;
                        linkPath.setUseCornerPathImplementation(true);
                    }
                    this.translationLoadingDrawable.usePath(this.translationLoadingPath);
                    this.translationLoadingDrawable.setRadiiDp(5.0f);
                    this.translationLoadingDrawable.reset();
                }
                if (this.translationLoadingDrawableText != arrayList2) {
                    this.translationLoadingDrawableText = arrayList2;
                    this.translationLoadingPath.reset();
                    int i21 = 0;
                    while (i21 < arrayList.size()) {
                        MessageObject.TextLayoutBlock textLayoutBlock5 = (MessageObject.TextLayoutBlock) arrayList2.get(i21);
                        if (textLayoutBlock5 != 0 && (staticLayout = textLayoutBlock5.textLayout) != null) {
                            LinkPath linkPath2 = this.translationLoadingPath;
                            if (textLayoutBlock5.isRtl()) {
                                f11 = f3;
                            }
                            linkPath2.setCurrentLayout(staticLayout, 0, f11, textLayoutBlock5.textYOffset(arrayList2, this.transitionParams));
                            StaticLayout staticLayout2 = textLayoutBlock5.textLayout;
                            staticLayout2.getSelectionPath(0, staticLayout2.getText().length(), this.translationLoadingPath);
                        }
                        i21++;
                        f11 = 0.0f;
                    }
                    this.translationLoadingPath.closeRects();
                    this.translationLoadingDrawable.updateBounds();
                }
                if (isTranslating && (this.translationLoadingDrawable.isDisappearing() || this.translationLoadingDrawable.isDisappeared())) {
                    this.translationLoadingDrawable.reset();
                    this.translationLoadingDrawable.resetDisappear();
                } else if (!isTranslating && !this.translationLoadingDrawable.isDisappearing() && !this.translationLoadingDrawable.isDisappeared()) {
                    this.translationLoadingDrawable.disappear();
                }
                MessageObject messageObject2 = this.currentMessageObject;
                int themedColor = getThemedColor((messageObject2 == null || !messageObject2.isOutOwner()) ? Theme.key_chat_messageLinkIn : Theme.key_chat_messageLinkOut);
                this.translationLoadingDrawable.setColors(Theme.multAlpha(themedColor, 0.05f), Theme.multAlpha(themedColor, 0.15f), Theme.multAlpha(themedColor, 0.1f), Theme.multAlpha(themedColor, 0.3f));
                canvas.save();
                canvas.translate(f10, f2 + this.transitionYOffsetForDrawables);
                this.translationLoadingDrawable.setAlpha((int) (f4 * 255.0f * f12));
                this.translationLoadingDrawable.draw(canvas);
                canvas.restore();
                invalidate();
                if (i >= 0) {
                    return;
                }
                if (this.currentMessagesGroup != null && (groupedMessagePosition = this.currentPosition) != null) {
                    int i22 = groupedMessagePosition.flags;
                    if ((i22 & 1) == 0 || (i22 & 2) == 0) {
                        int minTabletSide = AndroidUtilities.isTablet() ? AndroidUtilities.getMinTabletSide() : getParentWidth();
                        int i23 = 0;
                        for (int i24 = 0; i24 < this.currentMessagesGroup.posArray.size(); i24++) {
                            if (this.currentMessagesGroup.posArray.get(i24).minY != 0) {
                                break;
                            }
                            double d = i23;
                            double ceil = Math.ceil(((r4.pw + r4.leftSpanOffset) / 1000.0f) * minTabletSide);
                            Double.isNaN(d);
                            i23 = (int) (d + ceil);
                        }
                        backgroundDrawableRight = ((this.mediaBackground || !this.currentMessageObject.isOutOwner()) ? this.backgroundDrawableLeft + i23 : (this.backgroundDrawableLeft + i23) - AndroidUtilities.dp(6.0f)) - (getExtraTextX() + AndroidUtilities.dp((this.isAvatarVisible ? 48 : 0) + 8));
                        float dp = (backgroundDrawableRight - (AndroidUtilities.dp(10 + ((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6)) + getExtraTextX())) - f10;
                        if (f4 != 1.0f) {
                            i2 = 0;
                            i3 = 0;
                            i4 = Integer.MIN_VALUE;
                        } else {
                            if (z3 || z4) {
                                int alpha = Theme.chat_msgTextPaint.getAlpha();
                                int alpha2 = Color.alpha(Theme.chat_msgTextPaint.linkColor);
                                Theme.chat_msgTextPaint.setAlpha((int) (alpha * f4));
                                TextPaint textPaint = Theme.chat_msgTextPaint;
                                textPaint.linkColor = ColorUtils.setAlphaComponent(textPaint.linkColor, (int) (alpha2 * f4));
                                i3 = alpha;
                                i2 = alpha2;
                                i4 = Integer.MIN_VALUE;
                                z5 = true;
                                int color = (this.currentMessageObject.isOutOwner() || ChatObject.isChannelAndNotMegaGroup(this.currentMessageObject.getChatId(), this.currentAccount)) ? Theme.chat_msgTextPaint.getColor() : getThemedColor(Theme.key_chat_outTimeText);
                                if (this.quoteHighlight == null && this.currentMessagesGroup == null && (messageDrawable = this.currentBackgroundDrawable) != null) {
                                    canvas.save();
                                    canvas.clipPath(messageDrawable.makePath());
                                    Paint paint = this.quoteHighlight.paint;
                                    MessageObject messageObject3 = this.currentMessageObject;
                                    int themedColor2 = getThemedColor((messageObject3 == null || !messageObject3.isOutOwner() || this.currentMessageObject.preview) ? Theme.key_chat_inReplyLine : Theme.key_chat_outReplyLine);
                                    Theme.isCurrentThemeDark();
                                    paint.setColor(Theme.multAlpha(themedColor2, 0.2f));
                                    i5 = i2;
                                    i6 = i3;
                                    i7 = i4;
                                    this.quoteHighlight.draw(canvas, f, f2, messageDrawable.getBounds(), getHighlightAlpha(true));
                                    canvas.restore();
                                } else {
                                    i5 = i2;
                                    i6 = i3;
                                    i7 = i4;
                                }
                                i8 = i;
                                while (i8 <= size && i8 < arrayList.size()) {
                                    textLayoutBlock = (MessageObject.TextLayoutBlock) arrayList2.get(i8);
                                    int saveCount = canvas.getSaveCount();
                                    canvas.save();
                                    float dp2 = textLayoutBlock.isRtl() ? 0.0f : f3 - (textLayoutBlock.quote ? AndroidUtilities.dp(10.0f) : 0);
                                    canvas.translate(f10 - dp2, f2 + textLayoutBlock.textYOffset(arrayList2, this.transitionParams) + this.transitionYOffsetForDrawables + textLayoutBlock.padTop);
                                    if (i8 == this.linkBlockNum) {
                                        if (!z3 && this.links.draw(canvas)) {
                                            invalidate();
                                        }
                                        drawProgressLoadingLink(canvas, i8);
                                    }
                                    int dp3 = (int) (textLayoutBlock.maxRight + ((float) AndroidUtilities.dp(24.0f)) <= 0.7f * dp ? dp : textLayoutBlock.maxRight + AndroidUtilities.dp(24.0f));
                                    if (textLayoutBlock.quote) {
                                        i10 = dp3;
                                        i11 = saveCount;
                                        textLayoutBlock2 = textLayoutBlock;
                                        i12 = i8;
                                        TextPaint textPaint2 = Theme.chat_msgGameTextPaint;
                                        TextPaint textPaint3 = Theme.chat_replyTextPaint;
                                        TextPaint textPaint4 = Theme.chat_quoteTextPaint;
                                        TextPaint textPaint5 = Theme.chat_msgTextPaint;
                                        int themedColor3 = getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_messageLinkOut : Theme.key_chat_messageLinkIn);
                                        textPaint5.linkColor = themedColor3;
                                        textPaint4.linkColor = themedColor3;
                                        textPaint3.linkColor = themedColor3;
                                        textPaint2.linkColor = themedColor3;
                                        if (textLayoutBlock2.code) {
                                            if (this.quoteLine == null) {
                                                this.quoteLine = new ReplyMessageLine(this);
                                            }
                                            this.quoteLine.check(this.currentMessageObject, this.currentUser, this.currentChat, this.resourcesProvider, 2);
                                            if (this.currentMessageObject.isOutOwner() && (Theme.isCurrentThemeDark() || Theme.isCustomTheme())) {
                                                this.quoteLine.setBackgroundColor(getThemedColor(Theme.key_chat_outCodeBackground));
                                            }
                                            RectF rectF2 = AndroidUtilities.rectTmp;
                                            rectF2.set(0.0f, (-AndroidUtilities.dp(6.0f)) - textLayoutBlock2.languageHeight, this.namesOffset <= 0 ? dp + AndroidUtilities.dp(4.0f) : dp, textLayoutBlock2.height + AndroidUtilities.dp(6.0f));
                                            rectF2.offset(textLayoutBlock2.isRtl() ? f3 : 0.0f, 0.0f);
                                            if (textLayoutBlock2.hasCodeCopyButton) {
                                                rectF2.bottom += AndroidUtilities.dp(38.0f);
                                            }
                                            if (!textLayoutBlock2.first || this.namesOffset > 0 || z4) {
                                                min = Math.min(5, SharedConfig.bubbleRadius);
                                            } else if (this.currentMessageObject.isOutOwner() && this.pinnedTop) {
                                                min = Math.min(6, SharedConfig.bubbleRadius);
                                            } else {
                                                f6 = (SharedConfig.bubbleRadius / 3.0f) * 2.0f;
                                                float f13 = f6;
                                                this.quoteLine.drawBackground(canvas, rectF2, 5.0f, f13, Math.min(5, SharedConfig.bubbleRadius), f4);
                                                i14 = textLayoutBlock2.languageHeight;
                                                if (i14 > 0) {
                                                    float f14 = rectF2.bottom;
                                                    rectF2.bottom = rectF2.top + i14;
                                                    this.quoteLine.drawBackground(canvas, rectF2, 5.0f, f13, 0.0f, (Theme.isCurrentThemeDark() ? 0.6f : 0.8f) * f4);
                                                    rectF2.bottom = f14;
                                                }
                                                this.quoteLine.drawLine(canvas, rectF2, f4);
                                                if (textLayoutBlock2.hasCodeCopyButton) {
                                                    textLayoutBlock2.drawCopyCodeButton(canvas, rectF2, this.quoteLine.getColor(), this.quoteLine.getBackgroundColor(), f4);
                                                }
                                                canvas.translate(AndroidUtilities.dp(10.0f), 0.0f);
                                                text = textLayoutBlock2.languageLayout;
                                                if (text != null) {
                                                    text.ellipsize((int) (dp - AndroidUtilities.dp(12.0f))).draw(canvas, 0.0f, (-AndroidUtilities.dp(6.0f)) - (textLayoutBlock2.languageHeight / 2.0f), this.quoteLine.color3, f4);
                                                }
                                            }
                                            f6 = min;
                                            float f132 = f6;
                                            this.quoteLine.drawBackground(canvas, rectF2, 5.0f, f132, Math.min(5, SharedConfig.bubbleRadius), f4);
                                            i14 = textLayoutBlock2.languageHeight;
                                            if (i14 > 0) {
                                            }
                                            this.quoteLine.drawLine(canvas, rectF2, f4);
                                            if (textLayoutBlock2.hasCodeCopyButton) {
                                            }
                                            canvas.translate(AndroidUtilities.dp(10.0f), 0.0f);
                                            text = textLayoutBlock2.languageLayout;
                                            if (text != null) {
                                            }
                                        }
                                        i13 = color;
                                        f5 = 1.0f;
                                    } else {
                                        if (this.quoteLine == null) {
                                            this.quoteLine = new ReplyMessageLine(this);
                                        }
                                        this.quoteLine.check(this.currentMessageObject, this.currentUser, this.currentChat, this.resourcesProvider, 1);
                                        RectF rectF3 = AndroidUtilities.rectTmp;
                                        float f15 = dp3;
                                        rectF3.set(0.0f, (-textLayoutBlock.padTop) + AndroidUtilities.dp(textLayoutBlock.first ? 4.66f : 3.0f), f15, textLayoutBlock.height(this.transitionParams) + AndroidUtilities.dp(4.0f));
                                        rectF3.offset(dp2, 0.0f);
                                        if (textLayoutBlock.quoteCollapse && (buttonBounce = textLayoutBlock.collapsedBounce) != null) {
                                            float scale = buttonBounce.getScale(0.01f);
                                            canvas.scale(scale, scale, rectF3.centerX(), rectF3.centerY());
                                        }
                                        i11 = saveCount;
                                        i12 = i8;
                                        this.quoteLine.drawBackground(canvas, rectF3, 5.0f, 5.0f, 5.0f, f4);
                                        this.quoteLine.drawLine(canvas, rectF3, f4);
                                        if (this.quoteDrawable == null) {
                                            i19 = 2;
                                            this.quoteDrawable = new Drawable[2];
                                        } else {
                                            i19 = 2;
                                        }
                                        if (this.quoteDrawableColor == null) {
                                            this.quoteDrawableColor = new int[i19];
                                        }
                                        boolean z7 = textLayoutBlock.quoteCollapse;
                                        Drawable[] drawableArr = this.quoteDrawable;
                                        if (drawableArr[z7 ? 1 : 0] == null) {
                                            drawableArr[z7 ? 1 : 0] = getContext().getResources().getDrawable(R.drawable.mini_quote).mutate();
                                        }
                                        if (this.quoteLine.getColor() != this.quoteDrawableColor[z7 ? 1 : 0]) {
                                            Drawable drawable = this.quoteDrawable[z7 ? 1 : 0];
                                            int[] iArr = this.quoteDrawableColor;
                                            int color2 = this.quoteLine.getColor();
                                            iArr[z7 ? 1 : 0] = color2;
                                            drawable.setColorFilter(new PorterDuffColorFilter(color2, PorterDuff.Mode.SRC_IN));
                                        }
                                        this.quoteDrawable[z7 ? 1 : 0].setBounds((int) ((rectF3.right - AndroidUtilities.dp((!this.drawPinnedTop ? 1 : 0) + 2)) - this.quoteDrawable[z7 ? 1 : 0].getIntrinsicWidth()), (int) (rectF3.top + AndroidUtilities.dp((!this.drawPinnedTop ? 1 : 0) + 2)), (int) (rectF3.right - AndroidUtilities.dp((!this.drawPinnedTop ? 1 : 0) + 2)), (int) (rectF3.top + AndroidUtilities.dp((!this.drawPinnedTop ? 1 : 0) + 2) + this.quoteDrawable[z7 ? 1 : 0].getIntrinsicHeight()));
                                        int i25 = (int) (f4 * 255.0f);
                                        this.quoteDrawable[z7 ? 1 : 0].setAlpha(i25);
                                        this.quoteDrawable[z7 ? 1 : 0].draw(canvas);
                                        int color3 = this.quoteLine.getColor();
                                        TextPaint textPaint6 = Theme.chat_msgGameTextPaint;
                                        TextPaint textPaint7 = Theme.chat_replyTextPaint;
                                        TextPaint textPaint8 = Theme.chat_quoteTextPaint;
                                        TextPaint textPaint9 = Theme.chat_msgTextPaint;
                                        int color4 = this.currentMessageObject.isOutOwner() ? Theme.getColor(Theme.key_chat_messageLinkOut, this.resourcesProvider) : this.quoteLine.getColor();
                                        textPaint9.linkColor = color4;
                                        textPaint8.linkColor = color4;
                                        textPaint7.linkColor = color4;
                                        textPaint6.linkColor = color4;
                                        if (!textLayoutBlock.quoteCollapse || textLayoutBlock.height <= textLayoutBlock.collapsedHeight) {
                                            textLayoutBlock2 = textLayoutBlock;
                                            i10 = dp3;
                                            i13 = color3;
                                            f5 = 1.0f;
                                        } else {
                                            float collapsed = textLayoutBlock.collapsed(this.transitionParams);
                                            if (this.quoteArrow == null) {
                                                Drawable mutate = getContext().getResources().getDrawable(R.drawable.arrow_more).mutate();
                                                this.quoteArrow = mutate;
                                                int color5 = this.quoteLine.getColor();
                                                this.quoteArrowColor = color5;
                                                mutate.setColorFilter(new PorterDuffColorFilter(color5, PorterDuff.Mode.SRC_IN));
                                            }
                                            if (this.quoteLine.getColor() != this.quoteArrowColor) {
                                                Drawable drawable2 = this.quoteArrow;
                                                int color6 = this.quoteLine.getColor();
                                                this.quoteArrowColor = color6;
                                                drawable2.setColorFilter(new PorterDuffColorFilter(color6, PorterDuff.Mode.SRC_IN));
                                            }
                                            canvas.save();
                                            int dp4 = AndroidUtilities.dp(16.0f);
                                            int i26 = ((int) dp2) + dp3;
                                            this.quoteArrow.setBounds((i26 - dp4) - AndroidUtilities.dp(7.0f), (textLayoutBlock.height(this.transitionParams) - dp4) - AndroidUtilities.dp(2.0f), i26 - AndroidUtilities.dp(7.0f), textLayoutBlock.height(this.transitionParams) - AndroidUtilities.dp(2.0f));
                                            canvas.rotate(AndroidUtilities.lerp(NotificationCenter.updateBotMenuButton, 0, collapsed), this.quoteArrow.getBounds().centerX(), this.quoteArrow.getBounds().centerY());
                                            this.quoteArrow.setAlpha(i25);
                                            this.quoteArrow.draw(canvas);
                                            canvas.restore();
                                            i10 = dp3;
                                            textLayoutBlock2 = textLayoutBlock;
                                            canvas.saveLayerAlpha(dp2, 0.0f, f15 + dp2, textLayoutBlock.height(this.transitionParams) - 1, NotificationCenter.newLocationAvailable, 31);
                                            i13 = color3;
                                            f5 = collapsed;
                                        }
                                    }
                                    i15 = i12;
                                    if (i15 == this.linkSelectionBlockNum && this.quoteHighlight == null && !this.urlPathSelection.isEmpty() && !z3) {
                                        MessageObject messageObject4 = this.currentMessageObject;
                                        Paint paint2 = (messageObject4 == null && messageObject4.isOutOwner()) ? Theme.chat_outUrlPaint : Theme.chat_urlPaint;
                                        MessageObject messageObject5 = this.currentMessageObject;
                                        paint2.setColor(getThemedColor((messageObject5 == null && messageObject5.isOutOwner() && !this.currentMessageObject.preview) ? Theme.key_chat_outReplyLine : Theme.key_chat_inReplyLine));
                                        int alpha3 = (int) (paint2.getAlpha() * (!Theme.isCurrentThemeDark() ? 0.2f : 0.3f));
                                        paint2.setAlpha((int) (alpha3 * (!this.highlightedQuote ? getHighlightAlpha() : 1.0f)));
                                        for (i18 = 0; i18 < this.urlPathSelection.size(); i18++) {
                                            canvas.drawPath((Path) this.urlPathSelection.get(i18), paint2);
                                        }
                                        paint2.setAlpha(alpha3);
                                    }
                                    chatMessageCellDelegate = this.delegate;
                                    if (chatMessageCellDelegate != null && chatMessageCellDelegate.getTextSelectionHelper() != null && this.transitionParams.animateChangeProgress == 1.0f && !z3) {
                                        TextSelectionHelper.ChatListTextSelectionHelper textSelectionHelper = this.delegate.getTextSelectionHelper();
                                        MessageObject messageObject6 = this.currentMessageObject;
                                        if (z4) {
                                            textSelectionHelper.draw(messageObject6, textLayoutBlock2, canvas);
                                        } else {
                                            textSelectionHelper.drawCaption(messageObject6, textLayoutBlock2, canvas);
                                        }
                                    }
                                    try {
                                        Emoji.emojiDrawingYOffset = -this.transitionYOffsetForDrawables;
                                        i16 = i15;
                                        f7 = f5;
                                        i17 = size;
                                        textLayoutBlock3 = textLayoutBlock2;
                                        f8 = 0.0f;
                                    } catch (Exception e) {
                                        e = e;
                                        i16 = i15;
                                        f7 = f5;
                                        i17 = size;
                                        textLayoutBlock3 = textLayoutBlock2;
                                        f8 = 0.0f;
                                    }
                                    try {
                                        SpoilerEffect.renderWithRipple(this, this.invalidateSpoilersParent, i13, 0, textLayoutBlock2.spoilersPatchedTextLayout, 0, textLayoutBlock2.textLayout, textLayoutBlock2.spoilers, canvas, this.currentPosition == null);
                                        Emoji.emojiDrawingYOffset = 0.0f;
                                    } catch (Exception e2) {
                                        e = e2;
                                        FileLog.e(e);
                                        textLayoutBlock4 = textLayoutBlock3;
                                        if (!textLayoutBlock4.quoteCollapse) {
                                        }
                                        canvas.restoreToCount(i11);
                                        i8 = i16 + 1;
                                        f10 = f;
                                        arrayList2 = arrayList;
                                        size = i17;
                                    }
                                    textLayoutBlock4 = textLayoutBlock3;
                                    if (!textLayoutBlock4.quoteCollapse && textLayoutBlock4.height > textLayoutBlock4.collapsedHeight) {
                                        if (this.clip == null) {
                                            this.clip = new GradientClip();
                                        }
                                        canvas.save();
                                        RectF rectF4 = AndroidUtilities.rectTmp;
                                        rectF4.set(f8, textLayoutBlock4.height(this.transitionParams) - AndroidUtilities.dp(24.0f), i10, textLayoutBlock4.height(this.transitionParams));
                                        this.clip.draw(canvas, rectF4, 3, f7);
                                        canvas.restore();
                                    }
                                    canvas.restoreToCount(i11);
                                    i8 = i16 + 1;
                                    f10 = f;
                                    arrayList2 = arrayList;
                                    size = i17;
                                }
                                if (z5) {
                                    Theme.chat_msgTextPaint.setAlpha(i6);
                                    TextPaint textPaint10 = Theme.chat_msgTextPaint;
                                    textPaint10.linkColor = ColorUtils.setAlphaComponent(textPaint10.linkColor, i5);
                                }
                                i9 = i7;
                                if (i9 != Integer.MIN_VALUE) {
                                    canvas.restoreToCount(i9);
                                    return;
                                }
                                return;
                            }
                            Theme.MessageDrawable messageDrawable2 = this.currentBackgroundDrawable;
                            if (messageDrawable2 != null) {
                                int i27 = messageDrawable2.getBounds().top;
                                int i28 = this.currentBackgroundDrawable.getBounds().bottom;
                                if (z4) {
                                    rectF = this.rect;
                                    currentBackgroundLeft = getCurrentBackgroundLeft() - AndroidUtilities.dp(10.0f);
                                    f9 = i27;
                                    i20 = this.currentBackgroundDrawable.getBounds().right + AndroidUtilities.dp(10.0f);
                                } else {
                                    if (getY() < 0.0f) {
                                        i27 = (int) (-getY());
                                    }
                                    float y = getY() + getMeasuredHeight();
                                    float f16 = this.parentHeight;
                                    if (y > f16) {
                                        i28 = (int) (f16 - getY());
                                    }
                                    rectF = this.rect;
                                    currentBackgroundLeft = getCurrentBackgroundLeft();
                                    f9 = i27;
                                    i20 = this.currentBackgroundDrawable.getBounds().right;
                                }
                                rectF.set(currentBackgroundLeft, f9, i20, i28);
                            } else {
                                this.rect.set(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight());
                            }
                            i4 = canvas.saveLayerAlpha(this.rect, (int) (f4 * 255.0f), 31);
                            i2 = 0;
                            i3 = 0;
                        }
                        z5 = false;
                        int color7 = (this.currentMessageObject.isOutOwner() || ChatObject.isChannelAndNotMegaGroup(this.currentMessageObject.getChatId(), this.currentAccount)) ? Theme.chat_msgTextPaint.getColor() : getThemedColor(Theme.key_chat_outTimeText);
                        if (this.quoteHighlight == null) {
                        }
                        i5 = i2;
                        i6 = i3;
                        i7 = i4;
                        i8 = i;
                        while (i8 <= size) {
                            textLayoutBlock = (MessageObject.TextLayoutBlock) arrayList2.get(i8);
                            int saveCount2 = canvas.getSaveCount();
                            canvas.save();
                            if (textLayoutBlock.isRtl()) {
                            }
                            canvas.translate(f10 - dp2, f2 + textLayoutBlock.textYOffset(arrayList2, this.transitionParams) + this.transitionYOffsetForDrawables + textLayoutBlock.padTop);
                            if (i8 == this.linkBlockNum) {
                            }
                            int dp32 = (int) (textLayoutBlock.maxRight + ((float) AndroidUtilities.dp(24.0f)) <= 0.7f * dp ? dp : textLayoutBlock.maxRight + AndroidUtilities.dp(24.0f));
                            if (textLayoutBlock.quote) {
                            }
                            i15 = i12;
                            if (i15 == this.linkSelectionBlockNum) {
                                MessageObject messageObject42 = this.currentMessageObject;
                                if (messageObject42 == null) {
                                }
                                MessageObject messageObject52 = this.currentMessageObject;
                                paint2.setColor(getThemedColor((messageObject52 == null && messageObject52.isOutOwner() && !this.currentMessageObject.preview) ? Theme.key_chat_outReplyLine : Theme.key_chat_inReplyLine));
                                int alpha32 = (int) (paint2.getAlpha() * (!Theme.isCurrentThemeDark() ? 0.2f : 0.3f));
                                paint2.setAlpha((int) (alpha32 * (!this.highlightedQuote ? getHighlightAlpha() : 1.0f)));
                                while (i18 < this.urlPathSelection.size()) {
                                }
                                paint2.setAlpha(alpha32);
                            }
                            chatMessageCellDelegate = this.delegate;
                            if (chatMessageCellDelegate != null) {
                                TextSelectionHelper.ChatListTextSelectionHelper textSelectionHelper2 = this.delegate.getTextSelectionHelper();
                                MessageObject messageObject62 = this.currentMessageObject;
                                if (z4) {
                                }
                            }
                            Emoji.emojiDrawingYOffset = -this.transitionYOffsetForDrawables;
                            i16 = i15;
                            f7 = f5;
                            i17 = size;
                            textLayoutBlock3 = textLayoutBlock2;
                            f8 = 0.0f;
                            SpoilerEffect.renderWithRipple(this, this.invalidateSpoilersParent, i13, 0, textLayoutBlock2.spoilersPatchedTextLayout, 0, textLayoutBlock2.textLayout, textLayoutBlock2.spoilers, canvas, this.currentPosition == null);
                            Emoji.emojiDrawingYOffset = 0.0f;
                            textLayoutBlock4 = textLayoutBlock3;
                            if (!textLayoutBlock4.quoteCollapse) {
                                if (this.clip == null) {
                                }
                                canvas.save();
                                RectF rectF42 = AndroidUtilities.rectTmp;
                                rectF42.set(f8, textLayoutBlock4.height(this.transitionParams) - AndroidUtilities.dp(24.0f), i10, textLayoutBlock4.height(this.transitionParams));
                                this.clip.draw(canvas, rectF42, 3, f7);
                                canvas.restore();
                            }
                            canvas.restoreToCount(i11);
                            i8 = i16 + 1;
                            f10 = f;
                            arrayList2 = arrayList;
                            size = i17;
                        }
                        if (z5) {
                        }
                        i9 = i7;
                        if (i9 != Integer.MIN_VALUE) {
                        }
                    }
                }
                backgroundDrawableRight = getBackgroundDrawableRight() + this.transitionParams.deltaRight;
                float dp5 = (backgroundDrawableRight - (AndroidUtilities.dp(10 + ((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6)) + getExtraTextX())) - f10;
                if (f4 != 1.0f) {
                }
                z5 = false;
                int color72 = (this.currentMessageObject.isOutOwner() || ChatObject.isChannelAndNotMegaGroup(this.currentMessageObject.getChatId(), this.currentAccount)) ? Theme.chat_msgTextPaint.getColor() : getThemedColor(Theme.key_chat_outTimeText);
                if (this.quoteHighlight == null) {
                }
                i5 = i2;
                i6 = i3;
                i7 = i4;
                i8 = i;
                while (i8 <= size) {
                }
                if (z5) {
                }
                i9 = i7;
                if (i9 != Integer.MIN_VALUE) {
                }
            }
        }
        if (i >= 0) {
        }
    }

    public void drawMessageText(Canvas canvas) {
        float f;
        float f2;
        float f3;
        int dp;
        float f4;
        int dp2;
        float f5;
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        float f6;
        boolean z;
        boolean z2;
        boolean z3;
        float f7;
        boolean z4;
        ChatMessageCell chatMessageCell;
        float f8;
        Canvas canvas2;
        int dp3;
        int dp4;
        int i;
        int dp5;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.isSponsored()) {
            return;
        }
        float f9 = this.textY;
        TransitionParams transitionParams = this.transitionParams;
        if (transitionParams.animateText) {
            float f10 = transitionParams.animateFromTextY;
            float f11 = transitionParams.animateChangeProgress;
            f = (f10 * (1.0f - f11)) + (f11 * f9);
        } else {
            f = f9;
        }
        if (transitionParams.animateChangeProgress == 1.0f || !transitionParams.animateMessageText) {
            boolean z5 = transitionParams.animateLinkAbove;
            if (!z5 || this.currentBackgroundDrawable == null) {
                float f12 = this.textX;
                MessageObject messageObject2 = this.currentMessageObject;
                drawMessageText(f12, f, canvas, messageObject2.textLayoutBlocks, messageObject2.textXOffset, true, 1.0f, true, false, false);
                return;
            }
            if (z5) {
                float textHeight = (this.linkPreviewAbove ? 1 : -1) * this.currentMessageObject.textHeight(transitionParams);
                TransitionParams transitionParams2 = this.transitionParams;
                f = f9 + (textHeight * (1.0f - transitionParams2.animateChangeProgress));
                f2 = transitionParams2.animateFromTextY - (((this.linkPreviewAbove ? 1 : -1) * this.currentMessageObject.textHeight(transitionParams2)) * this.transitionParams.animateChangeProgress);
            } else {
                f2 = f;
            }
            canvas.save();
            RectF rectF = AndroidUtilities.rectTmp;
            rectF.set(this.currentBackgroundDrawable.getBounds());
            if (!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.pinnedBottom) {
                rectF.left += AndroidUtilities.dp(4.0f);
                f3 = rectF.right;
                dp = AndroidUtilities.dp(4.0f);
            } else {
                rectF.left += AndroidUtilities.dp(4.0f);
                f3 = rectF.right;
                dp = AndroidUtilities.dp(10.0f);
            }
            rectF.right = f3 - dp;
            float f13 = rectF.left;
            float f14 = this.transitionParams.animateFromTextY;
            canvas.clipRect(f13, f14, rectF.right, this.currentMessageObject.textHeight(r1) + f14 + AndroidUtilities.dp(4.0f));
            float f15 = this.textX;
            MessageObject messageObject3 = this.currentMessageObject;
            drawMessageText(f15, f2, canvas, messageObject3.textLayoutBlocks, messageObject3.textXOffset, false, 1.0f - this.transitionParams.animateChangeProgress, true, false, false);
            canvas.restore();
            canvas.save();
            rectF.set(this.currentBackgroundDrawable.getBounds());
            if (!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.pinnedBottom) {
                rectF.left += AndroidUtilities.dp(4.0f);
                f4 = rectF.right;
                dp2 = AndroidUtilities.dp(4.0f);
            } else {
                rectF.left += AndroidUtilities.dp(4.0f);
                f4 = rectF.right;
                dp2 = AndroidUtilities.dp(10.0f);
            }
            rectF.right = f4 - dp2;
            canvas.clipRect(rectF.left, this.textY, rectF.right, r1 + this.currentMessageObject.textHeight(this.transitionParams) + AndroidUtilities.dp(4.0f));
            f5 = this.textX;
            MessageObject messageObject4 = this.currentMessageObject;
            arrayList = messageObject4.textLayoutBlocks;
            f6 = messageObject4.textXOffset;
            z = false;
            z2 = false;
            z3 = true;
            f7 = 1.0f;
            z4 = true;
            chatMessageCell = this;
            f8 = f;
            canvas2 = canvas;
        } else {
            canvas.save();
            Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
            if (messageDrawable != null) {
                Rect bounds = messageDrawable.getBounds();
                if (!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.pinnedBottom) {
                    dp3 = bounds.left + AndroidUtilities.dp(4.0f);
                    dp4 = bounds.top + AndroidUtilities.dp(4.0f);
                    i = bounds.right;
                    dp5 = AndroidUtilities.dp(4.0f);
                } else {
                    dp3 = bounds.left + AndroidUtilities.dp(4.0f);
                    dp4 = bounds.top + AndroidUtilities.dp(4.0f);
                    i = bounds.right;
                    dp5 = AndroidUtilities.dp(10.0f);
                }
                canvas.clipRect(dp3, dp4, i - dp5, bounds.bottom - AndroidUtilities.dp(4.0f));
            }
            z = false;
            z2 = false;
            z4 = true;
            f8 = f;
            canvas2 = canvas;
            drawMessageText(this.textX, f8, canvas2, this.transitionParams.animateOutTextBlocks, this.transitionParams.animateOutTextXOffset, false, 1.0f - this.transitionParams.animateChangeProgress, true, false, false);
            f5 = this.textX;
            MessageObject messageObject5 = this.currentMessageObject;
            arrayList = messageObject5.textLayoutBlocks;
            f6 = messageObject5.textXOffset;
            f7 = this.transitionParams.animateChangeProgress;
            z3 = true;
            chatMessageCell = this;
        }
        chatMessageCell.drawMessageText(f5, f8, canvas2, arrayList, f6, z3, f7, z4, z, z2);
        canvas.restore();
    }

    public void drawMessageText(Canvas canvas, ArrayList arrayList, boolean z, float f, boolean z2) {
        float f2;
        float f3 = this.textY;
        TransitionParams transitionParams = this.transitionParams;
        if (transitionParams.animateText) {
            float f4 = transitionParams.animateFromTextY;
            float f5 = transitionParams.animateChangeProgress;
            f2 = (f4 * (1.0f - f5)) + (f3 * f5);
        } else {
            f2 = f3;
        }
        float f6 = this.textX;
        MessageObject messageObject = this.currentMessageObject;
        drawMessageText(f6, f2, canvas, arrayList, messageObject == null ? 0.0f : messageObject.textXOffset, z, f, false, z2, false);
    }

    /* JADX WARN: Code restructure failed: missing block: B:551:0x10c0, code lost:
    
        if (r6.type == 0) goto L720;
     */
    /* JADX WARN: Code restructure failed: missing block: B:553:0x10d6, code lost:
    
        if ((org.telegram.messenger.MessageObject.getMedia(r41.currentMessageObject.replyMessageObject.messageOwner) instanceof org.telegram.tgnet.TLRPC.TL_messageMediaGame) != false) goto L724;
     */
    /* JADX WARN: Code restructure failed: missing block: B:555:0x10e4, code lost:
    
        if ((org.telegram.messenger.MessageObject.getMedia(r41.currentMessageObject.replyMessageObject.messageOwner) instanceof org.telegram.tgnet.TLRPC.TL_messageMediaInvoice) != false) goto L724;
     */
    /* JADX WARN: Code restructure failed: missing block: B:557:0x10c8, code lost:
    
        if (android.text.TextUtils.isEmpty(r6.caption) == false) goto L720;
     */
    /* JADX WARN: Code restructure failed: missing block: B:577:0x1131, code lost:
    
        if (r6.type == 0) goto L743;
     */
    /* JADX WARN: Code restructure failed: missing block: B:579:0x1147, code lost:
    
        if ((org.telegram.messenger.MessageObject.getMedia(r41.currentMessageObject.replyMessageObject.messageOwner) instanceof org.telegram.tgnet.TLRPC.TL_messageMediaGame) != false) goto L747;
     */
    /* JADX WARN: Code restructure failed: missing block: B:581:0x1155, code lost:
    
        if ((org.telegram.messenger.MessageObject.getMedia(r41.currentMessageObject.replyMessageObject.messageOwner) instanceof org.telegram.tgnet.TLRPC.TL_messageMediaInvoice) != false) goto L747;
     */
    /* JADX WARN: Code restructure failed: missing block: B:583:0x1139, code lost:
    
        if (android.text.TextUtils.isEmpty(r6.caption) == false) goto L743;
     */
    /* JADX WARN: Removed duplicated region for block: B:135:0x0c10  */
    /* JADX WARN: Removed duplicated region for block: B:146:0x0c66  */
    /* JADX WARN: Removed duplicated region for block: B:158:0x0cc6  */
    /* JADX WARN: Removed duplicated region for block: B:161:0x0ccd  */
    /* JADX WARN: Removed duplicated region for block: B:202:0x0e87  */
    /* JADX WARN: Removed duplicated region for block: B:617:0x0dad  */
    /* JADX WARN: Removed duplicated region for block: B:653:0x080d  */
    /* JADX WARN: Removed duplicated region for block: B:655:0x081b  */
    /* JADX WARN: Removed duplicated region for block: B:856:0x0572  */
    /* JADX WARN: Removed duplicated region for block: B:893:0x0521  */
    /* JADX WARN: Removed duplicated region for block: B:899:0x054d  */
    /* JADX WARN: Removed duplicated region for block: B:952:0x02e3  */
    /* JADX WARN: Removed duplicated region for block: B:955:0x02f3  */
    /* JADX WARN: Removed duplicated region for block: B:959:0x02ff  */
    /* JADX WARN: Removed duplicated region for block: B:962:0x030c  */
    /* JADX WARN: Removed duplicated region for block: B:965:0x0313  */
    /* JADX WARN: Removed duplicated region for block: B:966:0x0302  */
    /* JADX WARN: Removed duplicated region for block: B:967:0x02e6  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawNamesLayout(Canvas canvas, float f) {
        int i;
        float f2;
        float f3;
        float f4;
        int dp;
        TextPaint textPaint;
        int i2;
        TLRPC.User user;
        TypefaceSpan typefaceSpan;
        TypefaceSpan typefaceSpan2;
        int i3;
        MessageObject.GroupedMessages groupedMessages;
        int i4;
        int i5;
        int dp2;
        float f5;
        float f6;
        int i6;
        boolean z;
        float f7;
        int themedColor;
        int i7;
        int i8;
        int i9;
        float f8;
        float f9;
        float f10;
        float backgroundDrawableRight;
        float f11;
        float f12;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        boolean z2;
        float f13;
        float f14;
        float f15;
        MessageObject messageObject;
        TLRPC.Message message;
        int i10;
        int i11;
        StaticLayout staticLayout;
        int i12;
        ChatMessageCellDelegate chatMessageCellDelegate;
        MessageObject.GroupedMessagePosition groupedMessagePosition2;
        float extraTextX;
        float dp3;
        TransitionParams transitionParams;
        float dp4;
        MessageObject.GroupedMessagePosition groupedMessagePosition3;
        float f16;
        int i13;
        int alpha;
        float f17;
        int i14;
        float f18;
        MessageTopicButton messageTopicButton;
        float f19;
        float f20;
        boolean z3;
        ForwardBackground forwardBackground;
        int i15;
        float f21;
        ForwardBackground forwardBackground2;
        int color;
        float f22;
        int dp5;
        int dp6;
        int dp7;
        int dp8;
        int colorId;
        TextPaint textPaint2;
        int color2;
        TLRPC.MessageFwdHeader messageFwdHeader;
        int i16;
        MessageTopicButton messageTopicButton2;
        MessageObject.GroupedMessages groupedMessages2;
        long elapsedRealtime = SystemClock.elapsedRealtime();
        long j = elapsedRealtime - this.lastNamesAnimationTime;
        if (j > 17) {
            j = 17;
        }
        this.lastNamesAnimationTime = elapsedRealtime;
        if (!this.currentMessageObject.deleted || this.drawingToBitmap || (groupedMessages2 = this.currentMessagesGroup) == null || groupedMessages2.messages.size() < 1) {
            if (f != 1.0f) {
                this.rect.set(0.0f, 0.0f, getMaxNameWidth(), getMeasuredHeight());
                i = canvas.saveLayerAlpha(this.rect, (int) (f * 255.0f), 31);
            } else {
                i = Integer.MIN_VALUE;
            }
            if (!this.isRoundVideo || this.hasLinkPreview) {
                f2 = 1.0f;
            } else {
                float videoTranscriptionProgress = (1.0f - getVideoTranscriptionProgress()) * 1.0f;
                TransitionParams transitionParams2 = this.transitionParams;
                if (transitionParams2.animatePlayingRound) {
                    boolean z4 = this.isPlayingRound;
                    float f23 = transitionParams2.animateChangeProgress;
                    if (z4) {
                        f23 = 1.0f - f23;
                    }
                    videoTranscriptionProgress *= f23;
                } else if (this.isPlayingRound) {
                    f2 = 0.0f;
                }
                f2 = videoTranscriptionProgress;
            }
            boolean z5 = this.drawNameLayout;
            if ((z5 || this.transitionParams.animateDrawNameLayout) && this.nameLayout != null) {
                TransitionParams transitionParams3 = this.transitionParams;
                if (transitionParams3.animateDrawNameLayout) {
                    f3 = transitionParams3.animateChangeProgress;
                    if (!z5) {
                        f3 = 1.0f - f3;
                    }
                } else {
                    f3 = 1.0f;
                }
                canvas.save();
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    Theme.chat_namePaint.setColor(getThemedColor(Theme.key_chat_stickerNameText));
                    this.nameX = this.currentMessageObject.isOutOwner() ? AndroidUtilities.dp(28.0f) : this.backgroundDrawableLeft + this.transitionParams.deltaLeft + this.backgroundDrawableRight + AndroidUtilities.dp(22.0f);
                    if (this.currentNameBotVerificationId != 0) {
                        this.nameX += AndroidUtilities.dp(20.0f);
                    }
                    this.nameY = this.layoutHeight - AndroidUtilities.dp(38.0f);
                    float f24 = (this.currentMessageObject.isOut() && (this.checkBoxVisible || this.checkBoxAnimationInProgress)) ? 1.0f - this.checkBoxAnimationProgress : 1.0f;
                    this.rect.set(((int) this.nameX) - AndroidUtilities.dp(12.0f), ((int) this.nameY) - AndroidUtilities.dp(5.0f), ((int) this.nameX) + AndroidUtilities.dp(12.0f) + this.nameWidth, ((int) this.nameY) + AndroidUtilities.dp(22.0f));
                    applyServiceShaderMatrix();
                    int alpha2 = getThemedPaint("paintChatActionBackground").getAlpha();
                    getThemedPaint("paintChatActionBackground").setAlpha((int) (alpha2 * f24 * f2));
                    canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), getThemedPaint("paintChatActionBackground"));
                    if (hasGradientService()) {
                        int alpha3 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha3 * this.timeAlpha * f2));
                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha3);
                    }
                    if (this.viaSpan1 != null || this.viaSpan2 != null) {
                        int alpha4 = (((int) (Color.alpha(getThemedColor(r6)) * f24)) << 24) | (getThemedColor(Theme.key_chat_stickerViaBotNameText) & 16777215);
                        TypefaceSpan typefaceSpan3 = this.viaSpan1;
                        if (typefaceSpan3 != null) {
                            typefaceSpan3.setColor(alpha4);
                        }
                        TypefaceSpan typefaceSpan4 = this.viaSpan2;
                        if (typefaceSpan4 != null) {
                            typefaceSpan4.setColor(alpha4);
                        }
                    }
                    this.nameX -= this.nameOffsetX;
                    getThemedPaint("paintChatActionBackground").setAlpha(alpha2);
                } else {
                    if (this.mediaBackground || this.currentMessageObject.isOutOwner()) {
                        f4 = this.backgroundDrawableLeft + this.transitionParams.deltaLeft;
                        dp = AndroidUtilities.dp(11.0f);
                    } else {
                        f4 = this.backgroundDrawableLeft + this.transitionParams.deltaLeft;
                        dp = AndroidUtilities.dp((this.mediaBackground || !this.drawPinnedBottom) ? 17.0f : 11.0f);
                    }
                    this.nameX = ((f4 + dp) - this.nameOffsetX) + getExtraTextX();
                    if (this.currentNameBotVerificationId != 0) {
                        this.nameX += AndroidUtilities.dp(20.0f);
                    }
                    if (this.currentMessageObject.isOutOwner() && ChatObject.isChannel(this.currentChat)) {
                        Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
                        if (messageDrawable != null && messageDrawable.hasGradient()) {
                            textPaint = Theme.chat_namePaint;
                            i2 = Theme.key_chat_messageTextOut;
                            textPaint.setColor(getThemedColor(i2));
                            this.nameY = AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f);
                            if (this.viaSpan1 == null) {
                            }
                            int themedColor2 = getThemedColor(!this.currentMessageObject.isOutOwner() ? Theme.key_chat_outViaBotNameText : Theme.key_chat_inViaBotNameText);
                            typefaceSpan = this.viaSpan1;
                            if (typefaceSpan != null) {
                            }
                            typefaceSpan2 = this.viaSpan2;
                            if (typefaceSpan2 != null) {
                            }
                        }
                        textPaint = Theme.chat_namePaint;
                        i2 = Theme.key_chat_outForwardedNameText;
                        textPaint.setColor(getThemedColor(i2));
                        this.nameY = AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f);
                        if (this.viaSpan1 == null) {
                        }
                        int themedColor22 = getThemedColor(!this.currentMessageObject.isOutOwner() ? Theme.key_chat_outViaBotNameText : Theme.key_chat_inViaBotNameText);
                        typefaceSpan = this.viaSpan1;
                        if (typefaceSpan != null) {
                        }
                        typefaceSpan2 = this.viaSpan2;
                        if (typefaceSpan2 != null) {
                        }
                    } else {
                        if (!this.currentMessageObject.isOutOwner()) {
                            MessageObject messageObject2 = this.currentMessageObject;
                            if (messageObject2.overrideLinkColor >= 0 || ((messageObject2.isFromUser() && this.currentUser != null) || (this.currentMessageObject.isFromChannel() && this.currentChat != null))) {
                                MessageObject messageObject3 = this.currentMessageObject;
                                int i17 = messageObject3.overrideLinkColor;
                                if (i17 < 0) {
                                    i17 = (!messageObject3.isFromUser() || (user = this.currentUser) == null) ? ChatObject.getColorId(this.currentChat) : UserObject.getColorId(user);
                                }
                                if (i17 < 7) {
                                    textPaint = Theme.chat_namePaint;
                                    i2 = Theme.keys_avatar_nameInMessage[i17];
                                    textPaint.setColor(getThemedColor(i2));
                                    this.nameY = AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f);
                                    if (this.viaSpan1 == null || this.viaSpan2 != null) {
                                        int themedColor222 = getThemedColor(!this.currentMessageObject.isOutOwner() ? Theme.key_chat_outViaBotNameText : Theme.key_chat_inViaBotNameText);
                                        typefaceSpan = this.viaSpan1;
                                        if (typefaceSpan != null) {
                                            typefaceSpan.setColor(themedColor222);
                                        }
                                        typefaceSpan2 = this.viaSpan2;
                                        if (typefaceSpan2 != null) {
                                            typefaceSpan2.setColor(themedColor222);
                                        }
                                    }
                                } else {
                                    MessagesController.PeerColors peerColors = MessagesController.getInstance(this.currentAccount).peerColors;
                                    MessagesController.PeerColor color3 = peerColors != null ? peerColors.getColor(i17) : null;
                                    if (color3 != null) {
                                        Theme.chat_namePaint.setColor(color3.getColor(0, this.resourcesProvider));
                                        this.nameY = AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f);
                                        if (this.viaSpan1 == null) {
                                        }
                                        int themedColor2222 = getThemedColor(!this.currentMessageObject.isOutOwner() ? Theme.key_chat_outViaBotNameText : Theme.key_chat_inViaBotNameText);
                                        typefaceSpan = this.viaSpan1;
                                        if (typefaceSpan != null) {
                                        }
                                        typefaceSpan2 = this.viaSpan2;
                                        if (typefaceSpan2 != null) {
                                        }
                                    }
                                }
                            }
                            textPaint = Theme.chat_namePaint;
                            i2 = Theme.key_chat_inForwardedNameText;
                            textPaint.setColor(getThemedColor(i2));
                            this.nameY = AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f);
                            if (this.viaSpan1 == null) {
                            }
                            int themedColor22222 = getThemedColor(!this.currentMessageObject.isOutOwner() ? Theme.key_chat_outViaBotNameText : Theme.key_chat_inViaBotNameText);
                            typefaceSpan = this.viaSpan1;
                            if (typefaceSpan != null) {
                            }
                            typefaceSpan2 = this.viaSpan2;
                            if (typefaceSpan2 != null) {
                            }
                        }
                        textPaint = Theme.chat_namePaint;
                        i2 = Theme.key_chat_outForwardedNameText;
                        textPaint.setColor(getThemedColor(i2));
                        this.nameY = AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f);
                        if (this.viaSpan1 == null) {
                        }
                        int themedColor222222 = getThemedColor(!this.currentMessageObject.isOutOwner() ? Theme.key_chat_outViaBotNameText : Theme.key_chat_inViaBotNameText);
                        typefaceSpan = this.viaSpan1;
                        if (typefaceSpan != null) {
                        }
                        typefaceSpan2 = this.viaSpan2;
                        if (typefaceSpan2 != null) {
                        }
                    }
                }
                MessageObject.GroupedMessages groupedMessages3 = this.currentMessagesGroup;
                if (groupedMessages3 != null) {
                    MessageObject.GroupedMessages.TransitionParams transitionParams4 = groupedMessages3.transitionParams;
                    if (transitionParams4.backgroundChangeBounds) {
                        this.nameX += transitionParams4.offsetLeft;
                        this.nameY += transitionParams4.offsetTop - getTranslationY();
                    }
                }
                this.nameX += this.animationOffsetX;
                float f25 = this.nameY;
                TransitionParams transitionParams5 = this.transitionParams;
                this.nameY = f25 + transitionParams5.deltaTop;
                float f26 = transitionParams5.animateSign ? this.transitionParams.animateNameX + ((this.nameX - this.transitionParams.animateNameX) * this.transitionParams.animateChangeProgress) : this.nameX;
                if (!this.currentMessageObject.isSponsored()) {
                    int multAlpha = Theme.multAlpha(Theme.chat_namePaint.getColor(), 0.12f);
                    Drawable drawable = this.nameLayoutSelector;
                    if (drawable == null) {
                        this.nameLayoutSelectorColor = multAlpha;
                        Drawable createRadSelectorDrawable = Theme.createRadSelectorDrawable(multAlpha, 6, 6);
                        this.nameLayoutSelector = createRadSelectorDrawable;
                        createRadSelectorDrawable.setCallback(this);
                    } else if (this.nameLayoutSelectorColor != multAlpha) {
                        this.nameLayoutSelectorColor = multAlpha;
                        Theme.setSelectorDrawableColor(drawable, multAlpha, true);
                    }
                    this.nameLayoutSelector.setBounds((int) ((this.nameOffsetX + f26) - AndroidUtilities.dp(4.0f)), (int) (this.nameY - AndroidUtilities.dp(1.33f)), (int) (this.nameOffsetX + f26 + (this.viaNameWidth > 0 ? r13 - AndroidUtilities.dp(32.0f) : this.nameLayoutWidth) + AndroidUtilities.dp(4.0f)), (int) (this.nameY + this.nameLayout.getHeight() + AndroidUtilities.dp(1.33f)));
                    int i18 = (int) (f3 * 255.0f);
                    this.nameLayoutSelector.setAlpha(i18);
                    this.nameLayoutSelector.draw(canvas);
                    if (this.currentNameStatus != null) {
                        Drawable drawable2 = this.nameStatusSelector;
                        if (drawable2 == null) {
                            this.nameStatusSelectorColor = multAlpha;
                            Drawable createRadSelectorDrawable2 = Theme.createRadSelectorDrawable(multAlpha, 6, 6);
                            this.nameStatusSelector = createRadSelectorDrawable2;
                            createRadSelectorDrawable2.setCallback(this);
                        } else if (this.nameStatusSelectorColor != multAlpha) {
                            this.nameStatusSelectorColor = multAlpha;
                            Theme.setSelectorDrawableColor(drawable2, multAlpha, true);
                        }
                        boolean z6 = this.currentNameStatus instanceof Drawable;
                        float f27 = z6 ? 1.5f : 0.0f;
                        float f28 = z6 ? -5.0f : 0.0f;
                        float f29 = 3.33f - f27;
                        i3 = i;
                        this.nameStatusSelector.setBounds((int) (this.nameOffsetX + f26 + (this.viaNameWidth > 0 ? r12 - AndroidUtilities.dp(32.0f) : this.nameLayoutWidth)), (int) (this.nameY - AndroidUtilities.dp(f29)), (int) (this.nameOffsetX + f26 + (this.viaNameWidth > 0 ? r14 - AndroidUtilities.dp(32.0f) : this.nameLayoutWidth) + AndroidUtilities.dp(f28 + 24.0f)), (int) (this.nameY + this.nameLayout.getHeight() + AndroidUtilities.dp(f29)));
                        this.nameStatusSelector.setAlpha(i18);
                        this.nameStatusSelector.draw(canvas);
                        canvas.translate(f26, this.nameY);
                        int alpha5 = Theme.chat_namePaint.getAlpha();
                        Theme.chat_namePaint.setAlpha((int) (alpha5 * f3));
                        this.nameLayout.draw(canvas);
                        Theme.chat_namePaint.setAlpha(alpha5);
                        canvas.restore();
                        groupedMessages = this.currentMessagesGroup;
                        if (groupedMessages != null || groupedMessages.isDocuments) {
                            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                                if (this.mediaBackground || !this.currentMessageObject.isOutOwner()) {
                                    i4 = this.backgroundDrawableLeft;
                                    i5 = this.backgroundDrawableRight;
                                } else {
                                    dp2 = (this.backgroundDrawableLeft + this.backgroundDrawableRight) - AndroidUtilities.dp(6.0f);
                                    f5 = dp2;
                                }
                            } else if (this.currentMessageObject.isOutOwner()) {
                                i4 = AndroidUtilities.dp(39.0f);
                                i5 = this.nameWidth;
                            } else {
                                f5 = this.backgroundDrawableLeft + this.transitionParams.deltaLeft + this.backgroundDrawableRight + AndroidUtilities.dp(33.0f) + this.nameWidth;
                            }
                            dp2 = i4 + i5;
                            f5 = dp2;
                        } else {
                            int groupPhotosWidth = getGroupPhotosWidth();
                            int i19 = 0;
                            for (int i20 = 0; i20 < this.currentMessagesGroup.posArray.size(); i20++) {
                                if (this.currentMessagesGroup.posArray.get(i20).minY != 0) {
                                    break;
                                }
                                double d = i19;
                                double ceil = Math.ceil(((r6.pw + r6.leftSpanOffset) / 1000.0f) * groupPhotosWidth);
                                Double.isNaN(d);
                                i19 = (int) (d + ceil);
                            }
                            f5 = ((this.mediaBackground || !this.currentMessageObject.isOutOwner()) ? this.backgroundDrawableLeft + i19 : (this.backgroundDrawableLeft + i19) - AndroidUtilities.dp(6.0f)) - (getExtraTextX() + AndroidUtilities.dp(8.0f));
                            if (!this.currentMessageObject.isOutOwner()) {
                                f5 -= AndroidUtilities.dp(48.0f);
                            }
                        }
                        float f30 = f5 + this.transitionParams.deltaRight;
                        if (this.adminLayout != null) {
                            Theme.chat_adminPaint.setColor(getThemedColor(this.currentMessageObject.shouldDrawWithoutBackground() ? Theme.key_chat_stickerReplyNameText : this.currentMessageObject.isOutOwner() ? isDrawSelectionBackground() ? Theme.key_chat_outAdminSelectedText : Theme.key_chat_outAdminText : isDrawSelectionBackground() ? Theme.key_chat_inAdminSelectedText : Theme.key_chat_inAdminText));
                            canvas.save();
                            float dp9 = (f30 - AndroidUtilities.dp(11.0f)) - this.adminLayout.getLineWidth(0);
                            float dp10 = this.nameY + AndroidUtilities.dp(0.5f);
                            BoostCounterSpan boostCounterSpan = this.boostCounterSpan;
                            if (boostCounterSpan != null && this.boostCounterBounds != null) {
                                float dp11 = (f30 - AndroidUtilities.dp(boostCounterSpan.isRtl ? 5.0f : 7.5f)) - this.boostCounterSpan.getWidth();
                                this.boostCounterBounds.set(dp11, dp10, this.boostCounterSpan.getWidth() + dp11, this.adminLayout.getHeight() + dp10);
                                int multAlpha2 = Theme.multAlpha(Theme.chat_namePaint.getColor(), 0.12f);
                                Drawable drawable3 = this.boostCounterLayoutSelector;
                                if (drawable3 == null) {
                                    this.boostCounterSelectorColor = multAlpha2;
                                    Drawable createRadSelectorDrawable3 = Theme.createRadSelectorDrawable(multAlpha2, 6, 6);
                                    this.boostCounterLayoutSelector = createRadSelectorDrawable3;
                                    createRadSelectorDrawable3.setCallback(this);
                                } else if (this.boostCounterSelectorColor != multAlpha2) {
                                    this.boostCounterSelectorColor = multAlpha2;
                                    Theme.setSelectorDrawableColor(drawable3, multAlpha2, true);
                                }
                                Drawable drawable4 = this.boostCounterLayoutSelector;
                                int dp12 = ((int) this.boostCounterBounds.left) - AndroidUtilities.dp(4.0f);
                                RectF rectF = this.boostCounterBounds;
                                drawable4.setBounds(dp12, (int) rectF.top, (int) rectF.right, (int) rectF.bottom);
                                this.boostCounterLayoutSelector.setAlpha((int) (f3 * 255.0f));
                                this.boostCounterLayoutSelector.draw(canvas);
                            }
                            canvas.translate(dp9, this.nameY + AndroidUtilities.dp(0.5f));
                            if (this.transitionParams.animateSign) {
                                Theme.chat_adminPaint.setAlpha((int) (Color.alpha(r4) * this.transitionParams.animateChangeProgress));
                            }
                            this.adminLayout.draw(canvas);
                            canvas.restore();
                        }
                    }
                }
                i3 = i;
                canvas.translate(f26, this.nameY);
                int alpha52 = Theme.chat_namePaint.getAlpha();
                Theme.chat_namePaint.setAlpha((int) (alpha52 * f3));
                this.nameLayout.draw(canvas);
                Theme.chat_namePaint.setAlpha(alpha52);
                canvas.restore();
                groupedMessages = this.currentMessagesGroup;
                if (groupedMessages != null) {
                }
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                }
                dp2 = i4 + i5;
                f5 = dp2;
                float f302 = f5 + this.transitionParams.deltaRight;
                if (this.adminLayout != null) {
                }
            } else {
                i3 = i;
            }
            boolean z7 = this.drawForwardedName || this.currentMessageObject.type == 23;
            boolean z8 = this.replyNameLayout != null;
            StaticLayout[] staticLayoutArr = this.forwardedNameLayout;
            int i21 = this.forwardedNameWidth;
            if (!this.transitionParams.animateForwardedLayout) {
                f6 = 1.0f;
            } else if (this.currentMessageObject.needDrawForwarded()) {
                f6 = this.transitionParams.animateChangeProgress;
            } else {
                TransitionParams transitionParams6 = this.transitionParams;
                staticLayoutArr = transitionParams6.animatingForwardedNameLayout;
                f6 = 1.0f - transitionParams6.animateChangeProgress;
                i21 = transitionParams6.animateForwardNameWidth;
                z7 = true;
            }
            if (!z7 || staticLayoutArr[0] == null || staticLayoutArr[1] == null || !((groupedMessagePosition3 = this.currentPosition) == null || (groupedMessagePosition3.minY == 0 && groupedMessagePosition3.minX == 0))) {
                i6 = -1;
                z = true;
                f7 = 0.0f;
            } else {
                MessageObject messageObject4 = this.currentMessageObject;
                if (messageObject4.type == 5 || messageObject4.isAnyKindOfSticker()) {
                    Theme.chat_forwardNamePaint.setColor(getThemedColor(Theme.key_chat_stickerReplyNameText));
                    MessageObject messageObject5 = this.currentMessageObject;
                    if (messageObject5.type == 19) {
                        if (messageObject5.isOutOwner()) {
                            if (this.currentMessageObject.needDrawForwarded()) {
                                float dp13 = this.backgroundDrawableLeft + AndroidUtilities.dp(11.0f) + getExtraTextX();
                                this.forwardNameX = dp13;
                                f20 = dp13 + this.transitionParams.deltaLeft;
                            } else {
                                f20 = this.transitionParams.animateForwardNameX;
                            }
                            f19 = f20 - Math.max(0.0f, (Math.max(AndroidUtilities.dp(14.0f) + i21, z8 ? Math.max(this.replyNameWidth, this.replyTextWidth) + AndroidUtilities.dp(14.0f) : 0) + f20) - AndroidUtilities.displaySize.x);
                        } else {
                            float f31 = 11.0f;
                            if (this.currentMessageObject.needDrawForwarded()) {
                                int i22 = this.backgroundDrawableLeft;
                                if (!this.mediaBackground && !this.drawPinnedBottom) {
                                    f31 = 17.0f;
                                }
                                f19 = i22 + AndroidUtilities.dp(f31) + getExtraTextX();
                                this.forwardNameX = f19;
                            } else {
                                f19 = this.transitionParams.animateForwardNameX;
                            }
                        }
                        f16 = f19 - AndroidUtilities.dp(7.0f);
                    } else if (messageObject5.needDrawForwarded()) {
                        f16 = this.currentMessageObject.isOutOwner() ? AndroidUtilities.dp(23.0f) : this.backgroundDrawableLeft + this.backgroundDrawableRight + AndroidUtilities.dp(17.0f);
                        this.forwardNameX = f16;
                    } else {
                        f16 = this.transitionParams.animateForwardNameX;
                    }
                    if (!this.currentMessageObject.isVoiceTranscriptionOpen() && ((this.currentMessageObject.isOutOwner() && this.currentMessageObject.type == 5 && this.transitionParams.animatePlayingRound) || this.isPlayingRound)) {
                        f16 -= AndroidUtilities.dp(78.0f) * (this.isPlayingRound ? this.transitionParams.animateChangeProgress : 1.0f - this.transitionParams.animateChangeProgress);
                    }
                    this.forwardNameY = AndroidUtilities.dp(12.0f) + ((!this.drawTopic || (messageTopicButton = this.topicButton) == null) ? 0 : messageTopicButton.height() + AndroidUtilities.dp(14.0f));
                    this.forwardHeight = AndroidUtilities.dp(4.0f) + (((int) Theme.chat_forwardNamePaint.getTextSize()) * 2);
                    int dp14 = i21 + AndroidUtilities.dp(14.0f);
                    if (z8) {
                        int max = (Math.max(this.replyNameWidth, this.replyTextWidth) - AndroidUtilities.dp(4.0f)) + AndroidUtilities.dp(7.0f);
                        RectF rectF2 = this.rect;
                        int i23 = (int) f16;
                        float dp15 = i23 - AndroidUtilities.dp(7.0f);
                        float dp16 = this.forwardNameY - AndroidUtilities.dp(6.0f);
                        int max2 = Math.max(dp14, max) + (i23 - AndroidUtilities.dp(7.0f));
                        i13 = max2;
                        rectF2.set(dp15, dp16, max2, this.forwardNameY + this.forwardHeight + AndroidUtilities.dp(6.0f) + this.replyHeight + AndroidUtilities.dp(3.0f));
                        z = false;
                    } else {
                        int i24 = (int) f16;
                        this.rect.set(i24 - AndroidUtilities.dp(7.0f), this.forwardNameY - AndroidUtilities.dp(6.0f), (i24 - AndroidUtilities.dp(7.0f)) + dp14, this.forwardNameY + this.forwardHeight + AndroidUtilities.dp(6.0f));
                        z = true;
                        i13 = -1;
                    }
                    if (z8 || this.forwardBg == null) {
                        applyServiceShaderMatrix(getMeasuredWidth(), this.backgroundHeight, getX(), this.viewTop);
                        if (f6 == 1.0f && f2 == 1.0f) {
                            alpha = -1;
                        } else {
                            alpha = getThemedPaint("paintChatActionBackground").getAlpha();
                            getThemedPaint("paintChatActionBackground").setAlpha((int) (alpha * f6 * f2));
                        }
                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), getThemedPaint("paintChatActionBackground"));
                        if (hasGradientService()) {
                            if (f6 == 1.0f && f2 == 1.0f) {
                                i14 = -1;
                            } else {
                                i14 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (i14 * f6 * f2));
                            }
                            f17 = f16;
                            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                        } else {
                            f17 = f16;
                            i14 = -1;
                        }
                    } else {
                        applyServiceShaderMatrix(getMeasuredWidth(), this.backgroundHeight, getX() + f16, this.viewTop + this.forwardNameY);
                        canvas.save();
                        canvas.translate(f16, this.forwardNameY);
                        float scale = this.forwardBg.bounce.getScale(0.02f);
                        canvas.scale(scale, scale, this.forwardBg.bounds.centerX(), this.forwardBg.bounds.centerY());
                        if (f6 == 1.0f && f2 == 1.0f) {
                            alpha = -1;
                        } else {
                            alpha = getThemedPaint("paintChatActionBackground").getAlpha();
                            getThemedPaint("paintChatActionBackground").setAlpha((int) (alpha * f6 * f2));
                        }
                        canvas.drawPath(this.forwardBg.path, getThemedPaint("paintChatActionBackground"));
                        if (hasGradientService()) {
                            if (f6 == 1.0f && f2 == 1.0f) {
                                i14 = -1;
                            } else {
                                i14 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                                Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (i14 * f6 * f2));
                            }
                            canvas.drawPath(this.forwardBg.path, Theme.chat_actionBackgroundGradientDarkenPaint);
                        } else {
                            i14 = -1;
                        }
                        canvas.restore();
                        f17 = f16;
                    }
                    if (alpha >= 0) {
                        getThemedPaint("paintChatActionBackground").setAlpha(alpha);
                    }
                    if (i14 >= 0) {
                        Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(i14);
                    }
                    f18 = f17;
                } else {
                    int dp17 = AndroidUtilities.dp(7.0f) + (this.drawNameLayout ? AndroidUtilities.dp(6.0f) + ((int) Theme.chat_namePaint.getTextSize()) : 0) + ((!this.drawTopic || (messageTopicButton2 = this.topicButton) == null) ? 0 : messageTopicButton2.height() + AndroidUtilities.dp((this.currentMessageObject.type != 0 ? 3 : 0) + 7));
                    this.forwardNameY = dp17;
                    if (!this.drawNameLayout && ((i16 = this.currentMessageObject.type) == 8 || i16 == 1 || i16 == 3 || i16 == 23 || i16 == 29 || i16 == 9)) {
                        this.forwardNameY = dp17 + AndroidUtilities.dp(2.0f);
                    }
                    if (!this.drawNameLayout && this.currentMessageObject.type == 0 && !this.drawPinnedTop) {
                        this.forwardNameY += AndroidUtilities.dp(2.0f);
                    }
                    this.forwardHeight = AndroidUtilities.dp(4.0f) + (((int) Theme.chat_forwardNamePaint.getTextSize()) * 2);
                    Theme.chat_forwardNamePaint.setColor(getThemedColor(this.hasPsaHint ? Theme.key_chat_inPsaNameText : Theme.key_chat_inForwardedNameText));
                    if (this.currentMessageObject.isOutOwner()) {
                        Theme.chat_forwardNamePaint.setColor(getThemedColor(this.hasPsaHint ? Theme.key_chat_outPsaNameText : Theme.key_chat_outForwardedNameText));
                    } else if (!this.hasPsaHint) {
                        MessageObject messageObject6 = this.currentMessageObject;
                        if (messageObject6.messageOwner != null && (messageObject6.isStoryMedia() || ((messageFwdHeader = this.currentMessageObject.messageOwner.fwd_from) != null && messageFwdHeader.from_id != null))) {
                            long peerDialogId = DialogObject.getPeerDialogId(this.currentMessageObject.isStoryMedia() ? MessageObject.getMedia(this.currentMessageObject).peer : this.currentMessageObject.messageOwner.fwd_from.from_id);
                            if (peerDialogId < 0) {
                                TLRPC.Chat chat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-peerDialogId));
                                if (chat != null) {
                                    colorId = ChatObject.getColorId(chat);
                                    if (colorId >= 7) {
                                        textPaint2 = Theme.chat_forwardNamePaint;
                                        color2 = getThemedColor(Theme.keys_avatar_nameInMessage[colorId]);
                                    } else {
                                        MessagesController.PeerColors peerColors2 = MessagesController.getInstance(this.currentAccount).peerColors;
                                        MessagesController.PeerColor color4 = peerColors2 != null ? peerColors2.getColor(colorId) : null;
                                        if (color4 != null) {
                                            textPaint2 = Theme.chat_forwardNamePaint;
                                            color2 = color4.getColor(0, this.resourcesProvider);
                                        }
                                    }
                                    textPaint2.setColor(color2);
                                }
                                colorId = 5;
                                if (colorId >= 7) {
                                }
                                textPaint2.setColor(color2);
                            } else {
                                TLRPC.User user2 = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(peerDialogId));
                                if (user2 != null) {
                                    colorId = UserObject.getColorId(user2);
                                    if (colorId >= 7) {
                                    }
                                    textPaint2.setColor(color2);
                                }
                                colorId = 5;
                                if (colorId >= 7) {
                                }
                                textPaint2.setColor(color2);
                            }
                        }
                    }
                    if (this.currentMessageObject.isOutOwner()) {
                        if (this.currentMessageObject.needDrawForwarded()) {
                            float dp18 = this.backgroundDrawableLeft + AndroidUtilities.dp(10.0f) + getExtraTextX();
                            this.forwardNameX = dp18;
                            f18 = dp18 + this.transitionParams.deltaLeft;
                            z = true;
                            i13 = -1;
                        }
                        f18 = this.transitionParams.animateForwardNameX;
                        z = true;
                        i13 = -1;
                    } else {
                        if (this.currentMessageObject.needDrawForwarded()) {
                            f18 = this.backgroundDrawableLeft + AndroidUtilities.dp((this.mediaBackground || this.drawPinnedBottom) ? 10.0f : 16.0f) + getExtraTextX();
                            this.forwardNameX = f18;
                            z = true;
                            i13 = -1;
                        }
                        f18 = this.transitionParams.animateForwardNameX;
                        z = true;
                        i13 = -1;
                    }
                }
                if (this.transitionParams.animateForwardedLayout && this.currentBackgroundDrawable != null && this.currentMessagesGroup == null) {
                    MessageObject messageObject7 = this.currentMessageObject;
                    if (messageObject7.type != 5 && !messageObject7.isAnyKindOfSticker()) {
                        Rect bounds = this.currentBackgroundDrawable.getBounds();
                        canvas.save();
                        if (!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.pinnedBottom) {
                            dp5 = bounds.left + AndroidUtilities.dp(4.0f);
                            dp6 = bounds.top + AndroidUtilities.dp(4.0f);
                            dp7 = bounds.right - AndroidUtilities.dp(4.0f);
                            dp8 = bounds.bottom - AndroidUtilities.dp(4.0f);
                        } else {
                            dp5 = bounds.left + AndroidUtilities.dp(4.0f);
                            dp6 = bounds.top + AndroidUtilities.dp(4.0f);
                            dp7 = bounds.right - AndroidUtilities.dp(10.0f);
                            dp8 = bounds.bottom - AndroidUtilities.dp(4.0f);
                        }
                        canvas.clipRect(dp5, dp6, dp7, dp8);
                        z3 = true;
                        canvas.save();
                        canvas.translate(f18, this.forwardNameY);
                        ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
                        boolean z9 = chatMessageCellDelegate2 == null && chatMessageCellDelegate2.isProgressLoading(this, 6);
                        forwardBackground = this.forwardBg;
                        if (forwardBackground != null) {
                            float scale2 = forwardBackground.bounce.getScale(0.02f);
                            canvas.scale(scale2, scale2, this.forwardBg.bounds.centerX(), this.forwardBg.bounds.centerY());
                            MessageObject messageObject8 = this.currentMessageObject;
                            if (messageObject8.type == 5 || messageObject8.isAnyKindOfSticker()) {
                                forwardBackground2 = this.forwardBg;
                                color = Theme.getColor(Theme.key_listSelector, this.resourcesProvider);
                                f22 = 1.35f;
                            } else {
                                forwardBackground2 = this.forwardBg;
                                color = Theme.chat_forwardNamePaint.getColor();
                                f22 = 0.15f;
                            }
                            forwardBackground2.setColor(Theme.multAlpha(color, f22));
                            this.forwardBg.draw(canvas, z9);
                        }
                        for (i15 = 0; i15 < 2; i15++) {
                            canvas.save();
                            canvas.translate(-this.forwardNameOffsetX[i15], ((this.forwardHeight / 2.0f) + AndroidUtilities.dp(1.33f)) * i15);
                            if (f6 == 1.0f && f2 == 1.0f) {
                                staticLayoutArr[i15].draw(canvas);
                            } else {
                                int alpha6 = staticLayoutArr[i15].getPaint().getAlpha();
                                staticLayoutArr[i15].getPaint().setAlpha((int) (alpha6 * f6 * f2));
                                staticLayoutArr[i15].draw(canvas);
                                staticLayoutArr[i15].getPaint().setAlpha(alpha6);
                            }
                            canvas.restore();
                        }
                        canvas.restore();
                        if (z3) {
                            canvas.restore();
                        }
                        if (this.hasPsaHint) {
                            f7 = f18;
                        } else {
                            if (this.psaButtonVisible || this.psaButtonProgress > 0.0f) {
                                Drawable drawable5 = Theme.chat_psaHelpDrawable[this.currentMessageObject.isOutOwner() ? 1 : 0];
                                int intrinsicWidth = this.psaHelpX + (drawable5.getIntrinsicWidth() / 2);
                                int intrinsicHeight = this.psaHelpY + (drawable5.getIntrinsicHeight() / 2);
                                if (this.psaButtonVisible) {
                                    float f32 = this.psaButtonProgress;
                                    if (f32 < 1.0f) {
                                        f21 = AnimationProperties.overshootInterpolator.getInterpolation(f32);
                                        int intrinsicWidth2 = ((int) (drawable5.getIntrinsicWidth() * f21)) / 2;
                                        f7 = f18;
                                        int intrinsicHeight2 = ((int) (drawable5.getIntrinsicHeight() * f21)) / 2;
                                        drawable5.setBounds(intrinsicWidth - intrinsicWidth2, intrinsicHeight - intrinsicHeight2, intrinsicWidth + intrinsicWidth2, intrinsicHeight + intrinsicHeight2);
                                        drawable5.draw(canvas);
                                        if (Build.VERSION.SDK_INT >= 21 && this.selectorDrawable[0] != null && this.selectorDrawableMaskType[0] == 3) {
                                            canvas.save();
                                            float f33 = this.psaButtonProgress;
                                            canvas.scale(f33, f33, this.selectorDrawable[0].getBounds().centerX(), this.selectorDrawable[0].getBounds().centerY());
                                            this.selectorDrawable[0].draw(canvas);
                                            canvas.restore();
                                        }
                                    }
                                }
                                f21 = this.psaButtonProgress;
                                int intrinsicWidth22 = ((int) (drawable5.getIntrinsicWidth() * f21)) / 2;
                                f7 = f18;
                                int intrinsicHeight22 = ((int) (drawable5.getIntrinsicHeight() * f21)) / 2;
                                drawable5.setBounds(intrinsicWidth - intrinsicWidth22, intrinsicHeight - intrinsicHeight22, intrinsicWidth + intrinsicWidth22, intrinsicHeight + intrinsicHeight22);
                                drawable5.draw(canvas);
                                if (Build.VERSION.SDK_INT >= 21) {
                                    canvas.save();
                                    float f332 = this.psaButtonProgress;
                                    canvas.scale(f332, f332, this.selectorDrawable[0].getBounds().centerX(), this.selectorDrawable[0].getBounds().centerY());
                                    this.selectorDrawable[0].draw(canvas);
                                    canvas.restore();
                                }
                            } else {
                                f7 = f18;
                            }
                            boolean z10 = this.psaButtonVisible;
                            if (z10) {
                                float f34 = this.psaButtonProgress;
                                if (f34 < 1.0f) {
                                    this.psaButtonProgress = f34 + (j / 180.0f);
                                    invalidate();
                                    if (this.psaButtonProgress > 1.0f) {
                                        this.psaButtonProgress = 1.0f;
                                        setInvalidatesParent(false);
                                    }
                                }
                            }
                            if (!z10) {
                                float f35 = this.psaButtonProgress;
                                if (f35 > 0.0f) {
                                    this.psaButtonProgress = f35 - (j / 180.0f);
                                    invalidate();
                                    if (this.psaButtonProgress < 0.0f) {
                                        this.psaButtonProgress = 0.0f;
                                        setInvalidatesParent(false);
                                    }
                                }
                            }
                        }
                        i6 = i13;
                    }
                }
                z3 = false;
                canvas.save();
                canvas.translate(f18, this.forwardNameY);
                ChatMessageCellDelegate chatMessageCellDelegate22 = this.delegate;
                if (chatMessageCellDelegate22 == null) {
                }
                forwardBackground = this.forwardBg;
                if (forwardBackground != null) {
                }
                while (i15 < 2) {
                }
                canvas.restore();
                if (z3) {
                }
                if (this.hasPsaHint) {
                }
                i6 = i13;
            }
            if (this.drawTopic && this.topicButton != null && f6 > 0.0f && f2 > 0.0f && ((groupedMessagePosition2 = this.currentPosition) == null || (groupedMessagePosition2.minY == 0 && groupedMessagePosition2.minX == 0))) {
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    MessageObject messageObject9 = this.currentMessageObject;
                    if (messageObject9.type != 19) {
                        if (messageObject9.isOutOwner()) {
                            dp4 = AndroidUtilities.dp(23.0f);
                            if (this.isPlayingRound) {
                                dp4 -= AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize;
                            }
                        } else {
                            dp4 = this.currentMessageObject.type == 5 ? this.backgroundDrawableLeft + this.backgroundDrawableRight + AndroidUtilities.dp(4.0f) : this.backgroundDrawableLeft + this.backgroundDrawableRight + AndroidUtilities.dp(17.0f);
                        }
                        dp3 = AndroidUtilities.dp(12.0f);
                        extraTextX = dp4 - AndroidUtilities.dp(8.0f);
                        transitionParams = this.transitionParams;
                        if (transitionParams.animateBackgroundBoundsInner) {
                            extraTextX += transitionParams.deltaLeft;
                        }
                        this.topicButton.draw(canvas, extraTextX, dp3, f6 * f2);
                    }
                }
                int dp19 = (this.currentMessageObject.isOutOwner() || this.mediaBackground) ? this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) : this.backgroundDrawableLeft + AndroidUtilities.dp(this.drawPinnedBottom ? 12.0f : 18.0f);
                extraTextX = (dp19 + getExtraTextX()) - AndroidUtilities.dp(2.33f);
                dp3 = AndroidUtilities.dp(12.0f) + ((!this.drawNameLayout || this.nameLayout == null) ? 0 : AndroidUtilities.dp(6.0f) + ((int) Theme.chat_namePaint.getTextSize()));
                transitionParams = this.transitionParams;
                if (transitionParams.animateBackgroundBoundsInner) {
                }
                this.topicButton.draw(canvas, extraTextX, dp3, f6 * f2);
            }
            if (z8) {
                float f36 = this.replyStartX;
                float f37 = this.replyStartY;
                MessageObject.GroupedMessages groupedMessages4 = this.currentMessagesGroup;
                if (groupedMessages4 != null) {
                    MessageObject.GroupedMessages.TransitionParams transitionParams7 = groupedMessages4.transitionParams;
                    if (transitionParams7.backgroundChangeBounds) {
                        f36 += transitionParams7.offsetLeft;
                    }
                }
                TransitionParams transitionParams8 = this.transitionParams;
                if (transitionParams8.animateBackgroundBoundsInner) {
                    f36 += this.isRoundVideo ? (this.currentMessageObject.isOutOwner() ? 0.0f : this.transitionParams.deltaLeft) + this.transitionParams.deltaRight : transitionParams8.deltaLeft;
                    TransitionParams transitionParams9 = this.transitionParams;
                    f37 = AndroidUtilities.lerp(transitionParams9.animateFromReplyY, this.replyStartY, transitionParams9.animateChangeProgress);
                }
                float f38 = f37;
                float f39 = !z ? f7 : f36;
                boolean z11 = (this.currentMessageObject == null || (chatMessageCellDelegate = this.delegate) == null || !chatMessageCellDelegate.isProgressLoading(this, 0)) ? false : true;
                if (this.replyPressedFloat == null) {
                    this.replyPressedFloat = new AnimatedFloat(this);
                }
                float f40 = this.replyPressedFloat.set((this.replySelectorPressed || z11) ? 1.0f : 0.0f);
                if (this.replyLine == null) {
                    this.replyLine = new ReplyMessageLine(this);
                }
                Theme.chat_replyNamePaint.setColor(this.replyLine.check(this.currentMessageObject, this.currentUser, this.currentChat, this.resourcesProvider, 0));
                int alphaComponent = ColorUtils.setAlphaComponent(this.replyLine.getColor(), 30);
                if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                    Theme.chat_replyLinePaint.setColor(getThemedColor(Theme.key_chat_stickerReplyLine));
                    Theme.chat_replyLinePaint.setAlpha((int) (Theme.chat_replyLinePaint.getAlpha() * this.timeAlpha * f2));
                    int alphaComponent2 = ColorUtils.setAlphaComponent(Theme.chat_replyLinePaint.getColor(), Color.alpha(alphaComponent));
                    Theme.chat_replyNamePaint.setColor(getThemedColor(Theme.key_chat_stickerReplyNameText));
                    Theme.chat_replyNamePaint.setAlpha((int) (Theme.chat_replyNamePaint.getAlpha() * this.timeAlpha * f2));
                    TextPaint textPaint3 = Theme.chat_replyTextPaint;
                    int i25 = Theme.key_chat_stickerReplyMessageText;
                    textPaint3.setColor(getThemedColor(i25));
                    Theme.chat_replyTextPaint.linkColor = getThemedColor(i25);
                    Theme.chat_replyTextPaint.setAlpha((int) (Theme.chat_replyTextPaint.getAlpha() * this.timeAlpha * f2));
                    if (z) {
                        if (this.replyBounce == null) {
                            this.replyBounce = new ButtonBounce(this, 2.0f, 2.0f);
                        }
                        canvas.save();
                        float scale3 = this.replyBounce.getScale(0.0125f);
                        int i26 = (int) f39;
                        i12 = alphaComponent2;
                        this.rect.set(i26 - AndroidUtilities.dp(7.0f), f38 - AndroidUtilities.dp(3.0f), (i26 - AndroidUtilities.dp(4.0f)) + Math.max(this.replyNameWidth, this.replyTextWidth), AndroidUtilities.dp(3.0f) + f38 + this.replyHeight);
                        float f41 = this.replyBounceX;
                        RectF rectF3 = this.rect;
                        float clamp = Utilities.clamp(f41, rectF3.right, rectF3.left);
                        float f42 = this.replyBounceY;
                        RectF rectF4 = this.rect;
                        canvas.scale(scale3, scale3, clamp, Utilities.clamp(f42, rectF4.bottom, rectF4.top));
                        applyServiceShaderMatrix();
                        int alpha7 = getThemedPaint("paintChatActionBackground").getAlpha();
                        getThemedPaint("paintChatActionBackground").setAlpha((int) (alpha7 * this.timeAlpha * f2));
                        canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), getThemedPaint("paintChatActionBackground"));
                        getThemedPaint("paintChatActionBackground").setAlpha(alpha7);
                        if (hasGradientService()) {
                            int alpha8 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
                            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (alpha8 * this.timeAlpha * f2));
                            canvas.drawRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha8);
                        }
                        canvas.restore();
                    } else {
                        i12 = alphaComponent2;
                    }
                    i8 = i12;
                } else {
                    if (this.currentMessageObject.isOutOwner()) {
                        if (!this.currentMessageObject.isReplyToStory()) {
                            themedColor = getThemedColor(Theme.key_chat_outReplyMessageText);
                            MessageObject messageObject10 = this.currentMessageObject;
                            if (!messageObject10.forceAvatar) {
                                if (messageObject10.hasValidReplyMessageObject()) {
                                    MessageObject messageObject11 = this.currentMessageObject.replyMessageObject;
                                    if (messageObject11.contentType != 1) {
                                    }
                                }
                                if (!this.hasReplyQuote) {
                                    i7 = isDrawSelectionBackground() ? Theme.key_chat_outReplyMediaMessageSelectedText : Theme.key_chat_outReplyMediaMessageText;
                                    themedColor = getThemedColor(i7);
                                    f40 = (f40 * 0.4f) + 0.6f;
                                }
                            }
                            Theme.chat_replyTextPaint.setColor(ColorUtils.blendARGB(themedColor, Theme.adaptHue(themedColor, Theme.chat_replyNamePaint.getColor()), f40));
                            Theme.chat_replyTextPaint.linkColor = ColorUtils.blendARGB(themedColor, Theme.adaptHue(themedColor, Theme.chat_replyNamePaint.getColor()), Utilities.clamp(f40 * 2.0f, 1.0f, 0.0f));
                        }
                        Theme.chat_replyTextPaint.setColor(Theme.chat_replyNamePaint.getColor());
                        TextPaint textPaint4 = Theme.chat_replyTextPaint;
                        textPaint4.linkColor = textPaint4.getColor();
                    } else {
                        if (!this.currentMessageObject.isReplyToStory()) {
                            themedColor = getThemedColor(Theme.key_chat_inReplyMessageText);
                            MessageObject messageObject12 = this.currentMessageObject;
                            if (!messageObject12.forceAvatar) {
                                if (messageObject12.hasValidReplyMessageObject()) {
                                    MessageObject messageObject13 = this.currentMessageObject.replyMessageObject;
                                    if (messageObject13.contentType != 1) {
                                    }
                                }
                                if (!this.hasReplyQuote) {
                                    i7 = isDrawSelectionBackground() ? Theme.key_chat_inReplyMediaMessageSelectedText : Theme.key_chat_inReplyMediaMessageText;
                                    themedColor = getThemedColor(i7);
                                    f40 = (f40 * 0.4f) + 0.6f;
                                }
                            }
                            Theme.chat_replyTextPaint.setColor(ColorUtils.blendARGB(themedColor, Theme.adaptHue(themedColor, Theme.chat_replyNamePaint.getColor()), f40));
                            Theme.chat_replyTextPaint.linkColor = ColorUtils.blendARGB(themedColor, Theme.adaptHue(themedColor, Theme.chat_replyNamePaint.getColor()), Utilities.clamp(f40 * 2.0f, 1.0f, 0.0f));
                        }
                        Theme.chat_replyTextPaint.setColor(Theme.chat_replyNamePaint.getColor());
                        TextPaint textPaint42 = Theme.chat_replyTextPaint;
                        textPaint42.linkColor = textPaint42.getColor();
                    }
                    i8 = alphaComponent;
                }
                Theme.chat_quoteTextPaint.setColor(Theme.chat_replyTextPaint.getColor());
                Theme.chat_quoteTextPaint.linkColor = Theme.chat_replyTextPaint.linkColor;
                float dp20 = AndroidUtilities.dp(10.0f);
                this.forwardNameX = (f39 - this.replyTextOffset) + dp20 + (this.needReplyImage ? r2 + AndroidUtilities.dp(25.0f) : 0);
                MessageObject.GroupedMessagePosition groupedMessagePosition4 = this.currentPosition;
                if ((groupedMessagePosition4 == null || (groupedMessagePosition4.minY == 0 && groupedMessagePosition4.minX == 0)) && (!this.enterTransitionInProgress || this.currentMessageObject.isVoice())) {
                    float alpha9 = (this.transitionParams.ignoreAlpha ? 1.0f : getAlpha()) * f2;
                    if (alpha9 != 1.0f) {
                        RectF rectF5 = AndroidUtilities.rectTmp;
                        rectF5.set(0.0f, 0.0f, getWidth(), getHeight());
                        i9 = canvas.saveLayerAlpha(rectF5, (int) (alpha9 * 255.0f), 31);
                    } else {
                        i9 = -1;
                    }
                    float min = Math.min(4.0f, SharedConfig.bubbleRadius);
                    if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                        float f43 = z ? 6.0f : 4.0f;
                        f8 = dp20;
                        this.replySelectorRect.set(f39 - AndroidUtilities.dp(7.0f), f38 - AndroidUtilities.dp(3.0f), (Math.max(this.replyNameWidth, this.replyTextWidth) + f39) - AndroidUtilities.dp(4.0f), this.replyHeight + f38 + AndroidUtilities.dp(3.0f));
                        if (i6 > 0) {
                            RectF rectF6 = this.replySelectorRect;
                            rectF6.right = Math.max(rectF6.right, i6);
                        }
                        f10 = f2;
                        f12 = f43;
                        f9 = f39;
                        f11 = f12;
                    } else {
                        f8 = dp20;
                        float f44 = (this.drawTopic || this.drawNameLayout || (this.drawForwardedName && this.forwardedNameLayout[0] != null)) ? min : (this.currentMessageObject.isOutOwner() && this.drawPinnedTop) ? SharedConfig.bubbleRadius / 3.0f : SharedConfig.bubbleRadius * 0.6f;
                        if (this.currentMessagesGroup != null && (groupedMessagePosition = this.currentPosition) != null) {
                            int i27 = groupedMessagePosition.flags;
                            if ((i27 & 1) == 0 || (i27 & 2) == 0) {
                                int minTabletSide = AndroidUtilities.isTablet() ? AndroidUtilities.getMinTabletSide() : getParentWidth();
                                int i28 = 0;
                                int i29 = 0;
                                while (i28 < this.currentMessagesGroup.posArray.size()) {
                                    if (this.currentMessagesGroup.posArray.get(i28).minY != 0) {
                                        break;
                                    }
                                    float f45 = f39;
                                    double d2 = i29;
                                    double ceil2 = Math.ceil(((r8.pw + r8.leftSpanOffset) / 1000.0f) * minTabletSide);
                                    Double.isNaN(d2);
                                    i29 = (int) (d2 + ceil2);
                                    i28++;
                                    f2 = f2;
                                    f39 = f45;
                                }
                                f9 = f39;
                                f10 = f2;
                                backgroundDrawableRight = ((this.mediaBackground || !this.currentMessageObject.isOutOwner()) ? this.backgroundDrawableLeft + i29 : (this.backgroundDrawableLeft + i29) - AndroidUtilities.dp(6.0f)) - (getExtraTextX() + AndroidUtilities.dp((this.isAvatarVisible ? 48 : 0) + 8));
                                this.replySelectorRect.set(this.backgroundDrawableLeft + this.transitionParams.deltaLeft + AndroidUtilities.dp(10 + ((!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6)) + getExtraTextX(), (f38 - AndroidUtilities.dp((this.mediaBackground && this.drawPinnedTop && !this.drawNameLayout) ? 2 : 0)) - ((this.drawForwardedName || this.forwardedNameLayout[0] == null || this.drawNameLayout) ? 0 : 2), backgroundDrawableRight - (AndroidUtilities.dp(10 + ((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6)) + getExtraTextX()), this.replyHeight + f38 + AndroidUtilities.dp(4.0f));
                                f11 = f44;
                                f12 = min;
                            }
                        }
                        f9 = f39;
                        f10 = f2;
                        backgroundDrawableRight = getBackgroundDrawableRight() + this.transitionParams.deltaRight;
                        this.replySelectorRect.set(this.backgroundDrawableLeft + this.transitionParams.deltaLeft + AndroidUtilities.dp(10 + ((!this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6)) + getExtraTextX(), (f38 - AndroidUtilities.dp((this.mediaBackground && this.drawPinnedTop && !this.drawNameLayout) ? 2 : 0)) - ((this.drawForwardedName || this.forwardedNameLayout[0] == null || this.drawNameLayout) ? 0 : 2), backgroundDrawableRight - (AndroidUtilities.dp(10 + ((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6)) + getExtraTextX()), this.replyHeight + f38 + AndroidUtilities.dp(4.0f));
                        f11 = f44;
                        f12 = min;
                    }
                    if (z) {
                        if (this.replyBounce == null) {
                            this.replyBounce = new ButtonBounce(this, 2.0f, 2.0f);
                        }
                        if (i9 == -1) {
                            i9 = canvas.getSaveCount();
                        }
                        canvas.save();
                        float scale4 = this.replyBounce.getScale(0.0125f);
                        float f46 = this.replyBounceX;
                        RectF rectF7 = this.replySelectorRect;
                        float clamp2 = Utilities.clamp(f46, rectF7.right, rectF7.left);
                        float f47 = this.replyBounceY;
                        RectF rectF8 = this.replySelectorRect;
                        canvas.scale(scale4, scale4, clamp2, Utilities.clamp(f47, rectF8.bottom, rectF8.top));
                    }
                    int i30 = i9;
                    this.replyLine.setLoading(z11);
                    this.replyLine.drawBackground(canvas, this.replySelectorRect, f12, f11, f12, f, this.isReplyQuote, this.currentMessageObject.shouldDrawWithoutBackground());
                    if (this.replySelector == null) {
                        this.replySelectorColor = i8;
                        Drawable createRadSelectorDrawable4 = Theme.createRadSelectorDrawable(i8, 0, 0);
                        this.replySelector = createRadSelectorDrawable4;
                        createRadSelectorDrawable4.setCallback(this);
                    }
                    Drawable drawable6 = this.replySelector;
                    RectF rectF9 = this.replySelectorRect;
                    drawable6.setBounds((int) rectF9.left, (int) rectF9.top, (int) rectF9.right, (int) rectF9.bottom);
                    if (f12 != this.replySelectorRadLeft || f11 != this.replySelectorRadRight) {
                        Drawable drawable7 = this.replySelector;
                        this.replySelectorRadLeft = f12;
                        this.replySelectorRadRight = f11;
                        Theme.setMaskDrawableRad(drawable7, f12, f11, f12, f12);
                    }
                    if (i8 != this.replySelectorColor) {
                        Drawable drawable8 = this.replySelector;
                        this.replySelectorColor = i8;
                        Theme.setSelectorDrawableColor(drawable8, i8, true);
                    }
                    this.replySelector.draw(canvas);
                    Path path = this.replyRoundRectPath;
                    if (path == null) {
                        this.replyRoundRectPath = new Path();
                    } else {
                        path.rewind();
                    }
                    this.replyLine.drawLine(canvas, this.replySelectorRect);
                    this.replyLine.drawLoadingBackground(canvas, this.replySelectorRect, f12, f11, f12, f);
                    if (this.needReplyImage) {
                        this.replyImageReceiver.setAlpha(f10);
                        float min2 = Math.min(this.replySelectorRect.height() - AndroidUtilities.dp(10.0f), AndroidUtilities.dp(this.isReplyQuote ? 3.0f : 7.0f) + Theme.chat_replyNamePaint.getTextSize() + Theme.chat_replyTextPaint.getTextSize());
                        ImageReceiver imageReceiver = this.replyImageReceiver;
                        float dp21 = this.replySelectorRect.left + AndroidUtilities.dp(8.0f);
                        float f48 = this.replySelectorRect.top;
                        if (!this.isReplyQuote || (staticLayout = this.replyTextLayout) == null || staticLayout.getLineCount() > 1) {
                            i10 = 5;
                            i11 = 0;
                        } else {
                            i10 = 5;
                            i11 = 2;
                        }
                        imageReceiver.setImageCoords(dp21, f48 + AndroidUtilities.dp(i11 + i10), min2, min2);
                        this.replyImageReceiver.draw(canvas);
                        MessageObject messageObject14 = this.currentMessageObject;
                        if (messageObject14 != null && messageObject14.hasValidReplyMessageObject() && this.currentMessageObject.replyMessageObject.hasMediaSpoilers()) {
                            int[] roundRadius = this.replyImageReceiver.getRoundRadius();
                            float[] fArr = this.mediaSpoilerRadii;
                            z2 = false;
                            float f49 = roundRadius[0];
                            fArr[1] = f49;
                            fArr[0] = f49;
                            float f50 = roundRadius[1];
                            fArr[3] = f50;
                            fArr[2] = f50;
                            float f51 = roundRadius[2];
                            fArr[5] = f51;
                            fArr[4] = f51;
                            float f52 = roundRadius[3];
                            fArr[7] = f52;
                            fArr[6] = f52;
                            this.mediaSpoilerPath.rewind();
                            RectF rectF10 = AndroidUtilities.rectTmp;
                            rectF10.set(this.replyImageReceiver.getImageX(), this.replyImageReceiver.getImageY(), this.replyImageReceiver.getImageX2(), this.replyImageReceiver.getImageY2());
                            this.mediaSpoilerPath.addRoundRect(rectF10, this.mediaSpoilerRadii, Path.Direction.CW);
                            canvas.save();
                            canvas.clipPath(this.mediaSpoilerPath);
                            this.mediaSpoilerEffect.setColor(ColorUtils.setAlphaComponent(-1, (int) (Color.alpha(-1) * 0.325f * this.replyImageReceiver.getAlpha())));
                            this.mediaSpoilerEffect.setBounds((int) this.replyImageReceiver.getImageX(), (int) this.replyImageReceiver.getImageY(), (int) this.replyImageReceiver.getImageX2(), (int) this.replyImageReceiver.getImageY2());
                            this.mediaSpoilerEffect.draw(canvas);
                            canvas.restore();
                            invalidate();
                        } else {
                            z2 = false;
                        }
                        f13 = min2;
                    } else {
                        z2 = false;
                        f13 = 0.0f;
                    }
                    MessageObject messageObject15 = this.currentMessageObject;
                    if (messageObject15 == null || !messageObject15.shouldDrawWithoutBackground()) {
                        f14 = 1.0f;
                        f15 = -AndroidUtilities.dp(1.0f);
                    } else {
                        f15 = -AndroidUtilities.dp(6.0f);
                        f14 = 1.0f;
                    }
                    MessageObject messageObject16 = this.currentMessageObject;
                    float dp22 = (messageObject16 == null || !messageObject16.shouldDrawWithoutBackground()) ? AndroidUtilities.dp(3.0f) : AndroidUtilities.dp(f14);
                    boolean z12 = this.isReplyQuote;
                    if (z12 && (messageObject = this.currentMessageObject) != null && (message = messageObject.messageOwner) != null && message.reply_to.quote) {
                        z2 = true;
                    }
                    if (z12 && z2 && this.replyQuoteDrawable != null) {
                        if (this.replyLine.getColor() != this.replyQuoteDrawableColor) {
                            Drawable drawable9 = this.replyQuoteDrawable;
                            int color5 = this.replyLine.getColor();
                            this.replyQuoteDrawableColor = color5;
                            drawable9.setColorFilter(new PorterDuffColorFilter(color5, PorterDuff.Mode.SRC_IN));
                        }
                        this.replyQuoteDrawable.setBounds((int) ((this.replySelectorRect.right - AndroidUtilities.dp((!this.drawPinnedTop ? 1 : 0) + 2)) - this.replyQuoteDrawable.getIntrinsicWidth()), (int) (this.replySelectorRect.top + AndroidUtilities.dp((!this.drawPinnedTop ? 1 : 0) + 2)), (int) (this.replySelectorRect.right - AndroidUtilities.dp((!this.drawPinnedTop ? 1 : 0) + 2)), (int) (this.replySelectorRect.top + AndroidUtilities.dp((1 ^ (this.drawPinnedTop ? 1 : 0)) + 2) + this.replyQuoteDrawable.getIntrinsicHeight()));
                        this.replyQuoteDrawable.draw(canvas);
                    }
                    if (this.replyNameLayout != null) {
                        canvas.save();
                        canvas.translate(((f9 + f15) - this.replyNameOffset) + f8 + (this.needReplyImage ? f13 + AndroidUtilities.dp(3.0f) : 0.0f), f38 + dp22);
                        this.replyNameLayout.draw(canvas);
                        canvas.restore();
                    }
                    MessageObject messageObject17 = this.currentMessageObject;
                    int color6 = (messageObject17 == null || !messageObject17.isOutOwner() || ChatObject.isChannelAndNotMegaGroup(this.currentMessageObject.getChatId(), this.currentAccount)) ? Theme.chat_replyTextPaint.getColor() : getThemedColor(Theme.key_chat_outTimeText);
                    if (this.transitionParams.animateReplyTextLayout != null && this.transitionParams.animateChangeProgress < 1.0f) {
                        canvas.save();
                        canvas.clipRect(this.replySelectorRect);
                        canvas.save();
                        float f53 = f9 + f8 + f15;
                        if (this.isReplyQuote && this.needReplyImage) {
                            f53 -= AndroidUtilities.dp(2.0f);
                        }
                        if (this.needReplyImage && (!this.isReplyQuote || this.replyTextRTL)) {
                            f53 += AndroidUtilities.dp(3.0f) + f13;
                        }
                        if (this.replyTextRTL && this.transitionParams.animateReplyTextOffset > 0.0f) {
                            f53 = (this.replySelectorRect.right - AndroidUtilities.dp(8.0f)) - this.transitionParams.animateReplyTextLayout.getWidth();
                        }
                        canvas.translate(f53, ((f38 + dp22) - AndroidUtilities.dp(1.0f)) + Theme.chat_replyNamePaint.getTextSize() + AndroidUtilities.dp(5.0f));
                        TextPaint paint = this.transitionParams.animateReplyTextLayout.getPaint();
                        int alpha10 = paint.getAlpha();
                        paint.setAlpha((int) (alpha10 * (1.0f - this.transitionParams.animateChangeProgress)));
                        SpoilerEffect.renderWithRipple(this, this.invalidateSpoilersParent, color6, -AndroidUtilities.dp(2.0f), this.spoilersPatchedReplyTextLayout, 0, this.transitionParams.animateReplyTextLayout, this.replySpoilers, canvas, false);
                        AnimatedEmojiSpan.drawAnimatedEmojis(canvas, this.transitionParams.animateReplyTextLayout, this.transitionParams.animateOutAnimateEmojiReply, 0.0f, this.replySpoilers, 0.0f, 0.0f, 0.0f, f, getAdaptiveEmojiColorFilter(2, paint.getColor()));
                        paint.setAlpha(alpha10);
                        canvas.restore();
                    }
                    if (this.replyTextLayout != null) {
                        canvas.save();
                        float f54 = f9 + f8 + f15;
                        if (this.isReplyQuote && this.needReplyImage) {
                            f54 -= AndroidUtilities.dp(2.0f);
                        }
                        if (this.needReplyImage && (!this.isReplyQuote || this.replyTextRTL)) {
                            f54 += f13 + AndroidUtilities.dp(3.0f);
                        }
                        if (this.replyTextRTL && this.replyTextOffset > 0) {
                            f54 = (this.replySelectorRect.right - AndroidUtilities.dp(8.0f)) - this.replyTextLayout.getWidth();
                        }
                        canvas.translate(f54, ((f38 + dp22) - AndroidUtilities.dp(1.0f)) + Theme.chat_replyNamePaint.getTextSize() + AndroidUtilities.dp(5.0f));
                        TextPaint paint2 = this.replyTextLayout.getPaint();
                        int alpha11 = paint2.getAlpha();
                        paint2.setAlpha((int) (alpha11 * (this.transitionParams.animateReplyTextLayout != null ? this.transitionParams.animateChangeProgress : 1.0f)));
                        SpoilerEffect.renderWithRipple(this, this.invalidateSpoilersParent, color6, -AndroidUtilities.dp(2.0f), this.spoilersPatchedReplyTextLayout, 0, this.replyTextLayout, this.replySpoilers, canvas, false);
                        AnimatedEmojiSpan.drawAnimatedEmojis(canvas, this.replyTextLayout, this.animatedEmojiReplyStack, 0.0f, this.replySpoilers, 0.0f, 0.0f, 0.0f, f, getAdaptiveEmojiColorFilter(2, paint2.getColor()));
                        paint2.setAlpha(alpha11);
                        canvas.restore();
                    }
                    if (this.transitionParams.animateReplyTextLayout != null && this.transitionParams.animateChangeProgress < 1.0f) {
                        canvas.restore();
                    }
                    if (i30 >= 0) {
                        canvas.restoreToCount(i30);
                    }
                }
            }
            int i31 = i3;
            if (i31 != Integer.MIN_VALUE) {
                canvas.restoreToCount(i31);
            }
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:38:0x006e, code lost:
    
        if ((r2 & 1) != 0) goto L42;
     */
    /* JADX WARN: Removed duplicated region for block: B:165:0x01e6  */
    /* JADX WARN: Removed duplicated region for block: B:167:0x01e9  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawOutboundsContent(Canvas canvas) {
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        float f;
        int color;
        int i;
        TLRPC.User user;
        TLRPC.TL_peerColor tL_peerColor;
        float dp;
        float f2;
        int i2;
        MessageObject.GroupedMessages groupedMessages;
        MessageObject.GroupedMessagePosition groupedMessagePosition2;
        float f3;
        MessageObject messageObject;
        MessageObject messageObject2;
        ChannelRecommendationsCell channelRecommendationsCell = this.channelRecommendationsCell;
        if (channelRecommendationsCell != null && (messageObject2 = this.currentMessageObject) != null && messageObject2.type == 27) {
            channelRecommendationsCell.draw(canvas);
            return;
        }
        MessageObject messageObject3 = this.currentMessageObject;
        if (messageObject3 == null) {
            return;
        }
        int i3 = messageObject3.type;
        if ((i3 == 0 || i3 == 24 || i3 == 19 || messageObject3.isGiveawayOrGiveawayResults()) && this.transitionParams.animateExpandedQuotes) {
            layoutTextXY(false);
            drawMessageText(canvas);
        }
        if (this.currentMessagesGroup != null) {
            updateCaptionLayout();
            drawFactCheck(canvas, 1.0f);
        }
        drawFactCheckText(canvas, 1.0f);
        if (!this.enterTransitionInProgress) {
            drawAnimatedEmojis(canvas, 1.0f);
        }
        if (this.reactionsLayoutInBubble.hasOverlay() && (messageObject = this.currentMessageObject) != null && messageObject.shouldDrawReactions()) {
            MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
            if (groupedMessagePosition3 != null) {
                int i4 = groupedMessagePosition3.flags;
                if ((i4 & 8) != 0) {
                }
            }
            if (!this.reactionsLayoutInBubble.isSmall) {
                drawReactionsLayoutOverlay(canvas, 1.0f);
                invalidateOutbounds();
            }
        }
        if ((this.currentNameStatusDrawable != null || this.currentNameEmojiStatusDrawable != null) && this.drawNameLayout && this.nameLayout != null && (((groupedMessagePosition = this.currentPosition) == null || (groupedMessagePosition.minX == 0 && groupedMessagePosition.minY == 0)) && (!this.currentMessageObject.deleted || this.drawingToBitmap || (groupedMessages = this.currentMessagesGroup) == null || groupedMessages.messages.size() < 1))) {
            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                i2 = getThemedColor(Theme.key_chat_stickerNameText);
                float dp2 = this.currentMessageObject.isOutOwner() ? AndroidUtilities.dp(28.0f) : this.backgroundDrawableLeft + this.transitionParams.deltaLeft + this.backgroundDrawableRight + AndroidUtilities.dp(22.0f);
                if (this.currentNameBotVerificationId != 0) {
                    dp2 += AndroidUtilities.dp(20.0f);
                }
                dp = this.layoutHeight - AndroidUtilities.dp(38.0f);
                f2 = dp2 - this.nameOffsetX;
            } else {
                float f4 = 11.0f;
                if (this.mediaBackground || this.currentMessageObject.isOutOwner()) {
                    f = this.backgroundDrawableLeft + this.transitionParams.deltaLeft;
                } else {
                    f = this.backgroundDrawableLeft + this.transitionParams.deltaLeft;
                    if (this.mediaBackground || !this.drawPinnedBottom) {
                        f4 = 17.0f;
                    }
                }
                float dp3 = f + AndroidUtilities.dp(f4) + getExtraTextX();
                if (this.currentNameBotVerificationId != 0) {
                    dp3 += AndroidUtilities.dp(20.0f);
                }
                if (this.currentMessageObject.isOutOwner() && ChatObject.isChannel(this.currentChat)) {
                    Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
                    if (messageDrawable != null && messageDrawable.hasGradient()) {
                        i = Theme.key_chat_messageTextOut;
                        color = getThemedColor(i);
                        dp = AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f);
                        int i5 = color;
                        f2 = dp3;
                        i2 = i5;
                    }
                    i = Theme.key_chat_outForwardedNameText;
                    color = getThemedColor(i);
                    dp = AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f);
                    int i52 = color;
                    f2 = dp3;
                    i2 = i52;
                } else {
                    if (!this.currentMessageObject.isOutOwner()) {
                        MessageObject messageObject4 = this.currentMessageObject;
                        if (messageObject4.overrideLinkColor >= 0 || ((messageObject4.isFromUser() && this.currentUser != null) || ((this.currentMessageObject.isFromChannel() && this.currentChat != null) || ((tL_peerColor = this.currentMessageObject.sponsoredColor) != null && tL_peerColor.color != -1)))) {
                            MessageObject messageObject5 = this.currentMessageObject;
                            int i6 = messageObject5.overrideLinkColor;
                            if (i6 < 0) {
                                TLRPC.TL_peerColor tL_peerColor2 = messageObject5.sponsoredColor;
                                i6 = tL_peerColor2 != null ? tL_peerColor2.color : (!messageObject5.isFromUser() || (user = this.currentUser) == null) ? ChatObject.getColorId(this.currentChat) : UserObject.getColorId(user);
                            }
                            if (i6 < 7) {
                                i = Theme.keys_avatar_nameInMessage[i6];
                                color = getThemedColor(i);
                                dp = AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f);
                                int i522 = color;
                                f2 = dp3;
                                i2 = i522;
                            } else {
                                MessagesController.PeerColors peerColors = MessagesController.getInstance(this.currentAccount).peerColors;
                                MessagesController.PeerColor color2 = peerColors != null ? peerColors.getColor(i6) : null;
                                if (color2 != null) {
                                    color = color2.getColor(0, this.resourcesProvider);
                                    dp = AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f);
                                    int i5222 = color;
                                    f2 = dp3;
                                    i2 = i5222;
                                }
                            }
                        }
                        i = Theme.key_chat_inForwardedNameText;
                        color = getThemedColor(i);
                        dp = AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f);
                        int i52222 = color;
                        f2 = dp3;
                        i2 = i52222;
                    }
                    i = Theme.key_chat_outForwardedNameText;
                    color = getThemedColor(i);
                    dp = AndroidUtilities.dp(!this.drawPinnedTop ? 9.0f : 10.0f);
                    int i522222 = color;
                    f2 = dp3;
                    i2 = i522222;
                }
            }
            MessageObject.GroupedMessages groupedMessages2 = this.currentMessagesGroup;
            if (groupedMessages2 != null) {
                MessageObject.GroupedMessages.TransitionParams transitionParams = groupedMessages2.transitionParams;
                if (transitionParams.backgroundChangeBounds) {
                    f2 += transitionParams.offsetLeft;
                    dp += transitionParams.offsetTop - getTranslationY();
                }
            }
            float f5 = f2 + this.animationOffsetX;
            TransitionParams transitionParams2 = this.transitionParams;
            float f6 = dp + transitionParams2.deltaTop;
            if (transitionParams2.animateSign) {
                f5 = ((f5 - this.transitionParams.animateNameX) * this.transitionParams.animateChangeProgress) + this.transitionParams.animateNameX;
            }
            AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable = this.currentNameEmojiStatusDrawable;
            if (swapAnimatedEmojiDrawable != null) {
                swapAnimatedEmojiDrawable.setBounds((int) (Math.abs(f5) - AndroidUtilities.dp(20.0f)), (int) (((this.nameLayout.getHeight() / 2) + f6) - AndroidUtilities.dp(9.0f)), (int) (Math.abs(f5) - AndroidUtilities.dp(2.0f)), (int) ((this.nameLayout.getHeight() / 2) + f6 + AndroidUtilities.dp(9.0f)));
                this.currentNameEmojiStatusDrawable.setColor(Integer.valueOf(ColorUtils.setAlphaComponent(i2, 115)));
                this.currentNameEmojiStatusDrawable.draw(canvas);
            }
            AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable2 = this.currentNameStatusDrawable;
            if (swapAnimatedEmojiDrawable2 != null) {
                swapAnimatedEmojiDrawable2.setBounds((int) (Math.abs(f5) + (this.viaNameWidth > 0 ? r10 - AndroidUtilities.dp(32.0f) : this.nameLayoutWidth) + AndroidUtilities.dp(2.0f)), (int) (((this.nameLayout.getHeight() / 2) + f6) - AndroidUtilities.dp(10.0f)), (int) (Math.abs(f5) + (this.viaNameWidth > 0 ? r12 - AndroidUtilities.dp(32.0f) : this.nameLayoutWidth) + AndroidUtilities.dp(22.0f)), (int) (f6 + (this.nameLayout.getHeight() / 2) + AndroidUtilities.dp(10.0f)));
                this.currentNameStatusDrawable.setColor(Integer.valueOf(ColorUtils.setAlphaComponent(i2, 115)));
                this.currentNameStatusDrawable.draw(canvas);
            }
        }
        if (this.drawTopic && this.topicButton != null && ((groupedMessagePosition2 = this.currentPosition) == null || (groupedMessagePosition2.minY == 0 && groupedMessagePosition2.minX == 0))) {
            if (!this.isRoundVideo || this.hasLinkPreview) {
                f3 = 1.0f;
            } else {
                f3 = (1.0f - getVideoTranscriptionProgress()) * 1.0f;
                TransitionParams transitionParams3 = this.transitionParams;
                if (transitionParams3.animatePlayingRound) {
                    boolean z = this.isPlayingRound;
                    float f7 = transitionParams3.animateChangeProgress;
                    if (z) {
                        f7 = 1.0f - f7;
                    }
                    f3 *= f7;
                } else if (this.isPlayingRound) {
                    f3 = 0.0f;
                }
            }
            this.topicButton.drawOutbounds(canvas, (this.transitionParams.animateForwardedLayout ? !this.currentMessageObject.needDrawForwarded() ? 1.0f - this.transitionParams.animateChangeProgress : this.transitionParams.animateChangeProgress : 1.0f) * f3);
        }
        if (!this.transitionParams.transitionBotButtons.isEmpty()) {
            if (this.transitionParams.animateBotButtonsChanged) {
                drawBotButtons(canvas, this.transitionParams.transitionBotButtons, (int) (MathUtils.clamp(1.0f - ((float) Math.pow(r2.animateChangeProgress, 2.0d)), 0.0f, 1.0f) * 255.0f));
            }
        }
        if (!this.botButtons.isEmpty()) {
            drawBotButtons(canvas, this.botButtons, (int) ((this.transitionParams.animateBotButtonsChanged ? 1.0f - MathUtils.clamp(1.0f - ((float) Math.pow(r2.animateChangeProgress, 2.0d)), 0.0f, 1.0f) : 1.0f) * 255.0f));
        }
        drawSideButton(canvas);
    }

    /* JADX WARN: Code restructure failed: missing block: B:1041:0x122b, code lost:
    
        if (r11 < r14) goto L722;
     */
    /* JADX WARN: Code restructure failed: missing block: B:186:0x1b5d, code lost:
    
        if (r4 > 1.0f) goto L1130;
     */
    /* JADX WARN: Code restructure failed: missing block: B:187:0x1b5f, code lost:
    
        r54.roundPlayingDrawableProgress = r5;
     */
    /* JADX WARN: Code restructure failed: missing block: B:209:0x1b76, code lost:
    
        invalidate();
     */
    /* JADX WARN: Code restructure failed: missing block: B:214:0x1b73, code lost:
    
        if (r4 < 0.0f) goto L1130;
     */
    /* JADX WARN: Code restructure failed: missing block: B:292:0x18a5, code lost:
    
        if (r1 < 1.0f) goto L1016;
     */
    /* JADX WARN: Code restructure failed: missing block: B:307:0x16b5, code lost:
    
        if (r1.revealingMediaSpoilers != false) goto L916;
     */
    /* JADX WARN: Code restructure failed: missing block: B:317:0x16d6, code lost:
    
        if (r54.radialProgress.getIcon() != 4) goto L916;
     */
    /* JADX WARN: Code restructure failed: missing block: B:680:0x0b43, code lost:
    
        if (r0 == 3) goto L395;
     */
    /* JADX WARN: Code restructure failed: missing block: B:783:0x0c53, code lost:
    
        if (r54.currentMessageObject.isOutOwner() != false) goto L446;
     */
    /* JADX WARN: Code restructure failed: missing block: B:784:0x0c6d, code lost:
    
        r11 = org.telegram.ui.ActionBar.Theme.key_chat_inAudioSeekbarFill;
     */
    /* JADX WARN: Code restructure failed: missing block: B:810:0x0c6a, code lost:
    
        r11 = org.telegram.ui.ActionBar.Theme.key_chat_outAudioSeekbarFill;
     */
    /* JADX WARN: Code restructure failed: missing block: B:818:0x0c68, code lost:
    
        if (r54.currentMessageObject.isOutOwner() != false) goto L446;
     */
    /* JADX WARN: Code restructure failed: missing block: B:952:0x14c5, code lost:
    
        if (r0 <= 0.0f) goto L814;
     */
    /* JADX WARN: Code restructure failed: missing block: B:953:0x14c7, code lost:
    
        r54.animatingDrawVideoImageButtonProgress = r1;
        r54.animatingDrawVideoImageButton = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:954:0x14e2, code lost:
    
        invalidate();
     */
    /* JADX WARN: Code restructure failed: missing block: B:958:0x14f5, code lost:
    
        if (r0 <= 0.0f) goto L825;
     */
    /* JADX WARN: Code restructure failed: missing block: B:959:0x14f7, code lost:
    
        r54.animatingNoSoundProgress = r1;
        r54.animatingNoSound = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:960:0x150f, code lost:
    
        invalidate();
     */
    /* JADX WARN: Code restructure failed: missing block: B:975:0x1540, code lost:
    
        if (r0 > r13) goto L855;
     */
    /* JADX WARN: Code restructure failed: missing block: B:976:0x1554, code lost:
    
        invalidate();
     */
    /* JADX WARN: Code restructure failed: missing block: B:977:0x1552, code lost:
    
        r54.animatingLoadingProgressProgress = r13;
     */
    /* JADX WARN: Code restructure failed: missing block: B:981:0x1550, code lost:
    
        if (r0 < r13) goto L855;
     */
    /* JADX WARN: Code restructure failed: missing block: B:988:0x150c, code lost:
    
        if (r0 >= 1.0f) goto L825;
     */
    /* JADX WARN: Code restructure failed: missing block: B:992:0x14df, code lost:
    
        if (r0 >= 1.0f) goto L814;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:1000:0x115f  */
    /* JADX WARN: Removed duplicated region for block: B:1027:0x1198  */
    /* JADX WARN: Removed duplicated region for block: B:1030:0x1209  */
    /* JADX WARN: Removed duplicated region for block: B:1038:0x1221  */
    /* JADX WARN: Removed duplicated region for block: B:1045:0x1236  */
    /* JADX WARN: Removed duplicated region for block: B:1086:0x13c3  */
    /* JADX WARN: Removed duplicated region for block: B:1089:0x13cd  */
    /* JADX WARN: Removed duplicated region for block: B:1108:0x1482  */
    /* JADX WARN: Removed duplicated region for block: B:1110:0x13d2  */
    /* JADX WARN: Removed duplicated region for block: B:1111:0x13c6  */
    /* JADX WARN: Removed duplicated region for block: B:1128:0x119f  */
    /* JADX WARN: Removed duplicated region for block: B:132:0x197d  */
    /* JADX WARN: Removed duplicated region for block: B:240:0x1ca7  */
    /* JADX WARN: Removed duplicated region for block: B:268:? A[ADDED_TO_REGION, RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:271:0x1864  */
    /* JADX WARN: Removed duplicated region for block: B:289:0x189a  */
    /* JADX WARN: Removed duplicated region for block: B:295:0x17cd  */
    /* JADX WARN: Removed duplicated region for block: B:304:0x16ad  */
    /* JADX WARN: Removed duplicated region for block: B:320:0x16e0  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x155b  */
    /* JADX WARN: Removed duplicated region for block: B:394:0x03c6  */
    /* JADX WARN: Removed duplicated region for block: B:404:0x03ca  */
    /* JADX WARN: Removed duplicated region for block: B:507:0x063a  */
    /* JADX WARN: Removed duplicated region for block: B:510:0x063d  */
    /* JADX WARN: Removed duplicated region for block: B:516:0x062c  */
    /* JADX WARN: Removed duplicated region for block: B:517:0x0631  */
    /* JADX WARN: Removed duplicated region for block: B:635:0x096d  */
    /* JADX WARN: Removed duplicated region for block: B:647:0x09c8  */
    /* JADX WARN: Removed duplicated region for block: B:64:0x177e  */
    /* JADX WARN: Removed duplicated region for block: B:651:0x09e4  */
    /* JADX WARN: Removed duplicated region for block: B:654:0x09f4  */
    /* JADX WARN: Removed duplicated region for block: B:661:0x0a0e  */
    /* JADX WARN: Removed duplicated region for block: B:664:0x0a54  */
    /* JADX WARN: Removed duplicated region for block: B:675:0x0b34  */
    /* JADX WARN: Removed duplicated region for block: B:679:0x0b42  */
    /* JADX WARN: Removed duplicated region for block: B:67:0x1789  */
    /* JADX WARN: Removed duplicated region for block: B:682:0x0b49  */
    /* JADX WARN: Removed duplicated region for block: B:685:0x0b78  */
    /* JADX WARN: Removed duplicated region for block: B:686:0x0b46  */
    /* JADX WARN: Removed duplicated region for block: B:689:0x0b88  */
    /* JADX WARN: Removed duplicated region for block: B:705:0x0daf  */
    /* JADX WARN: Removed duplicated region for block: B:728:0x0f63  */
    /* JADX WARN: Removed duplicated region for block: B:731:0x0f6d A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:77:0x17ac  */
    /* JADX WARN: Removed duplicated region for block: B:788:0x0c7a  */
    /* JADX WARN: Removed duplicated region for block: B:824:0x0f84  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x17ca  */
    /* JADX WARN: Removed duplicated region for block: B:852:0x101f  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x17d6  */
    /* JADX WARN: Removed duplicated region for block: B:860:0x0b7c A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:863:0x0b16  */
    /* JADX WARN: Removed duplicated region for block: B:867:0x0aa4  */
    /* JADX WARN: Removed duplicated region for block: B:868:0x0a1d  */
    /* JADX WARN: Removed duplicated region for block: B:869:0x09e7  */
    /* JADX WARN: Removed duplicated region for block: B:89:0x1839  */
    /* JADX WARN: Removed duplicated region for block: B:929:0x110b  */
    /* JADX WARN: Removed duplicated region for block: B:93:0x185a  */
    /* JADX WARN: Removed duplicated region for block: B:940:0x1120  */
    /* JADX WARN: Removed duplicated region for block: B:945:0x112c A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:951:0x14b7  */
    /* JADX WARN: Removed duplicated region for block: B:957:0x14ea  */
    /* JADX WARN: Removed duplicated region for block: B:963:0x1517  */
    /* JADX WARN: Removed duplicated region for block: B:968:0x1529  */
    /* JADX WARN: Removed duplicated region for block: B:974:0x1537  */
    /* JADX WARN: Removed duplicated region for block: B:978:0x1543  */
    /* JADX WARN: Removed duplicated region for block: B:97:0x18b9  */
    /* JADX WARN: Removed duplicated region for block: B:985:0x14fd  */
    /* JADX WARN: Removed duplicated region for block: B:989:0x14cd  */
    /* JADX WARN: Removed duplicated region for block: B:997:0x1158  */
    /* JADX WARN: Type inference failed for: r3v38 */
    /* JADX WARN: Type inference failed for: r3v39, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r3v97 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawOverlays(Canvas canvas) {
        Canvas canvas2;
        String str;
        int i;
        float f;
        boolean isPlayingMessage;
        boolean z;
        int i2;
        int i3;
        MessageObject messageObject;
        int i4;
        boolean z2;
        float f2;
        float f3;
        boolean z3;
        float f4;
        float isSmallImage;
        int i5;
        int i6;
        boolean z4;
        String str2;
        long j;
        RectF rectF;
        float f5;
        StaticLayout staticLayout;
        float f6;
        StaticLayout staticLayout2;
        MessageObject messageObject2;
        int i7;
        int i8;
        long j2;
        float f7;
        int i9;
        float f8;
        float f9;
        float f10;
        float f11;
        Drawable drawable;
        float f12;
        float f13;
        int i10;
        Canvas canvas3;
        int themedColor;
        int i11;
        float f14;
        Canvas canvas4;
        int i12;
        ?? r3;
        int i13;
        float f15;
        int i14;
        Canvas canvas5;
        int size;
        int i15;
        StaticLayout staticLayout3;
        TextPaint textPaint;
        int i16;
        Paint paint;
        int i17;
        Canvas canvas6;
        int i18;
        PollButton pollButton;
        int i19;
        int i20;
        Paint paint2;
        int i21;
        Paint paint3;
        int i22;
        int i23;
        int i24;
        TLRPC.Poll poll;
        long max;
        int dp;
        int dp2;
        float f16;
        int dp3;
        int i25;
        float f17;
        float f18;
        float f19;
        Drawable drawable2;
        Drawable drawable3;
        TextPaint textPaint2;
        int i26;
        boolean z5;
        float f20;
        int dp4;
        Drawable drawable4;
        StaticLayout staticLayout4;
        String str3;
        TextPaint textPaint3;
        int i27;
        String formatLocationLeftTime;
        StaticLayout staticLayout5;
        float abs;
        float f21;
        boolean z6;
        StaticLayout staticLayout6;
        Paint paint4;
        int i28;
        Canvas canvas7;
        float currentAlpha;
        Theme.MessageDrawable messageDrawable;
        boolean z7;
        int i29;
        AnimatedFloat animatedFloat;
        float f22;
        float f23;
        MessageObject messageObject3;
        float f24;
        MessageObject messageObject4;
        MessageObject messageObject5;
        float imageX;
        float imageY2;
        float f25;
        float dp5;
        float dp6;
        float f26;
        RoundVideoPlayingDrawable roundVideoPlayingDrawable;
        float f27;
        MessageObject messageObject6;
        boolean z8;
        RadialProgress2 radialProgress2;
        float videoTranscriptionProgress;
        int i30;
        AnimatedFileDrawable animation;
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (!this.drawFromPinchToZoom && (chatMessageCellDelegate = this.delegate) != null && chatMessageCellDelegate.getPinchToZoomHelper() != null && this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this)) {
            return;
        }
        long elapsedRealtime = SystemClock.elapsedRealtime();
        long j3 = elapsedRealtime - this.lastAnimationTime;
        if (j3 > 17) {
            j3 = 17;
        }
        this.lastAnimationTime = elapsedRealtime;
        if (this.currentMessageObject.hadAnimationNotReadyLoading && this.photoImage.getVisible() && !this.currentMessageObject.needDrawBluredPreview() && (((i30 = this.documentAttachType) == 7 || i30 == 4 || i30 == 2) && (animation = this.photoImage.getAnimation()) != null && animation.hasBitmap())) {
            this.currentMessageObject.hadAnimationNotReadyLoading = false;
            updateButtonState(false, true, false);
        }
        if (!this.hasGamePreview) {
            MessageObject messageObject7 = this.currentMessageObject;
            int i31 = messageObject7.type;
            if (i31 == 3 || i31 == 1 || i31 == 20 || (i10 = this.documentAttachType) == 4 || i10 == 2) {
                canvas2 = canvas;
                str = "paintChatTimeBackground";
                if (this.photoImage.getVisible()) {
                    MessageObject messageObject8 = this.currentMessageObject;
                    if (!messageObject8.isRepostPreview) {
                        if (!messageObject8.needDrawBluredPreview() && !this.currentMessageObject.isSponsored()) {
                            MessageObject messageObject9 = this.currentMessageObject;
                            if (!messageObject9.isRepostPreview && !messageObject9.preview && !this.isSmallImage) {
                                i = 4;
                                if (this.documentAttachType == 4) {
                                    int alpha = ((BitmapDrawable) Theme.chat_msgMediaMenuDrawable).getPaint().getAlpha();
                                    if (this.drawMediaCheckBox) {
                                        drawable = Theme.chat_msgMediaMenuDrawable;
                                        f12 = alpha * this.controlsAlpha;
                                        f = 1.0f;
                                        f13 = 1.0f - this.checkBoxAnimationProgress;
                                    } else {
                                        f = 1.0f;
                                        drawable = Theme.chat_msgMediaMenuDrawable;
                                        f12 = alpha;
                                        f13 = this.controlsAlpha;
                                    }
                                    drawable.setAlpha((int) (f12 * f13));
                                    Drawable drawable5 = Theme.chat_msgMediaMenuDrawable;
                                    int imageX2 = (int) ((this.photoImage.getImageX() + this.photoImage.getImageWidth()) - AndroidUtilities.dp(14.0f));
                                    this.otherX = imageX2;
                                    int imageY = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.1f));
                                    this.otherY = imageY;
                                    BaseCell.setDrawableBounds(drawable5, imageX2, imageY);
                                    Theme.chat_msgMediaMenuDrawable.draw(canvas2);
                                    Theme.chat_msgMediaMenuDrawable.setAlpha(alpha);
                                    isPlayingMessage = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
                                    if (this.animatingNoSoundPlaying != isPlayingMessage) {
                                        this.animatingNoSoundPlaying = isPlayingMessage;
                                        this.animatingNoSound = isPlayingMessage ? 1 : 2;
                                        this.animatingNoSoundProgress = isPlayingMessage ? 1.0f : 0.0f;
                                    }
                                    MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                                    z = groupedMessagePosition != null || (groupedMessagePosition.flags & 3) == 3;
                                    i2 = this.documentAttachType;
                                    if ((((i2 != i || i2 == 2) && ((i3 = this.buttonState) == 1 || i3 == 2 || i3 == 0 || i3 == 3 || i3 == -1)) || this.currentMessageObject.needDrawBluredPreview()) && !this.currentMessageObject.isRepostVideoPreview) {
                                        if (this.autoPlayingMedia) {
                                            updatePlayingMessageProgress();
                                        }
                                        if ((this.infoLayout == null || this.loadingProgressLayout != null) && ((!this.forceNotDrawTime || this.autoPlayingMedia || this.drawVideoImageButton || this.animatingLoadingProgressProgress != 0.0f || ((z && this.docTitleLayout != null) || (this.loadingProgressLayout != null && this.currentPosition != null && ((i7 = this.buttonState) == 1 || (i7 == 3 && this.miniButtonState == 1))))) && (messageObject = this.currentMessageObject) != null && !messageObject.sendPreview)) {
                                            if (z) {
                                                z2 = (this.buttonState == 1 || this.miniButtonState == 1 || this.animatingLoadingProgressProgress != 0.0f) && !messageObject.isSecretMedia() && ((i4 = this.documentAttachType) == i || i4 == 2 || i4 == 1);
                                                MessageObject messageObject10 = this.currentMessageObject;
                                                int i32 = messageObject10.type;
                                                if ((i32 == 3 || i32 == 8 || this.documentAttachType == i) && !(messageObject10.needDrawBluredPreview() && this.docTitleLayout == null)) {
                                                    f2 = this.animatingDrawVideoImageButtonProgress;
                                                    f3 = 0.0f;
                                                } else {
                                                    f3 = 0.0f;
                                                    f2 = 0.0f;
                                                }
                                                boolean z9 = f2 > f3 && this.docTitleLayout != null;
                                                if (z9 || !(z2 || this.infoLayout == null)) {
                                                    z3 = z9;
                                                    f4 = 1.0f;
                                                } else {
                                                    z3 = z9;
                                                    f4 = this.animatingLoadingProgressProgress;
                                                }
                                            } else {
                                                f4 = this.animatingLoadingProgressProgress;
                                                z2 = true;
                                                z3 = false;
                                                f2 = 0.0f;
                                            }
                                            isSmallImage = f4 * (f - isSmallImage());
                                            if (this.drawPhotoImage && (messageObject2 = this.currentMessageObject) != null && messageObject2.hasMediaSpoilers() && this.currentMessageObject.isSensitive()) {
                                                if (this.currentMessageObject.isMediaSpoilersRevealed) {
                                                    float f28 = this.mediaSpoilerRevealProgress;
                                                    if (f28 != 0.0f) {
                                                    }
                                                }
                                                isSmallImage *= this.mediaSpoilerRevealProgress;
                                            }
                                            if (isSmallImage > 0.0f) {
                                                int i33 = this.documentAttachType;
                                                boolean z10 = (i33 == 7 || i33 == 6 || this.currentMessageObject.type == 19 || SharedConfig.bubbleRadius < 10) ? false : true;
                                                Theme.chat_infoPaint.setColor(getThemedColor(Theme.key_chat_mediaInfoText));
                                                int imageX3 = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(4.0f));
                                                int imageY3 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(4.0f));
                                                int intrinsicWidth = (!this.autoPlayingMedia || (isPlayingMessage && this.animatingNoSound == 0)) ? 0 : (int) ((Theme.chat_msgNoSoundDrawable.getIntrinsicWidth() + AndroidUtilities.dp(4.0f)) * this.animatingNoSoundProgress);
                                                if (!z2 || (staticLayout2 = this.loadingProgressLayout) == null) {
                                                    i5 = intrinsicWidth;
                                                    i6 = this.infoWidth;
                                                } else {
                                                    i6 = (int) staticLayout2.getLineWidth(0);
                                                    i5 = 0;
                                                }
                                                z4 = z;
                                                int ceil = (int) Math.ceil(i6 + AndroidUtilities.dp(z10 ? 12.0f : 8.0f) + i5 + ((((Math.max((this.infoWidth == i6 ? i5 : 0) + i6, this.docTitleWidth) + (this.canStreamVideo ? AndroidUtilities.dp(32.0f) : 0)) - i6) - i5) * f2));
                                                if (f2 != 0.0f && this.docTitleLayout == null) {
                                                    f2 = 0.0f;
                                                }
                                                canvas.save();
                                                str2 = str;
                                                int alpha2 = getThemedPaint(str2).getAlpha();
                                                j = j3;
                                                getThemedPaint(str2).setAlpha((int) (alpha2 * this.controlsAlpha * isSmallImage * (this.currentMessageObject.needDrawBluredPreview() ? 0.4f : 1.0f)));
                                                float f29 = imageX3;
                                                float f30 = imageY3;
                                                this.rect.set(f29, f30, imageX3 + ceil, imageY3 + AndroidUtilities.dp((15.5f * f2) + 16.5f));
                                                int[] roundRadius = this.photoImage.getRoundRadius();
                                                int min = Math.min(AndroidUtilities.dp(8.0f), Math.max(roundRadius[0], roundRadius[1]));
                                                if (this.currentMessageObject.needDrawBluredPreview()) {
                                                    this.rectPath.reset();
                                                    f5 = min;
                                                    this.rectPath.addRoundRect(this.rect, f5, f5, Path.Direction.CW);
                                                    canvas.save();
                                                    canvas2.clipPath(this.rectPath);
                                                    float alpha3 = this.photoImage.getAlpha();
                                                    this.photoImage.setAlpha(0.5f * alpha3);
                                                    this.photoImage.draw(canvas2);
                                                    this.photoImage.setAlpha(alpha3);
                                                    canvas.restore();
                                                    rectF = this.rect;
                                                } else {
                                                    if (!z3 && ((!z2 || this.loadingProgressLayout == null) && (z2 || this.infoLayout == null))) {
                                                        canvas2.scale(isSmallImage, isSmallImage, f29, f30);
                                                        Theme.chat_infoPaint.setAlpha((int) (this.controlsAlpha * 255.0f * isSmallImage));
                                                        Theme.chat_infoBoldPaint.setColor(Theme.chat_infoPaint.getColor());
                                                        int imageX4 = (int) (this.photoImage.getImageX() + AndroidUtilities.dp((!z10 ? 10 : 8) + (!this.canStreamVideo ? 30.0f * f2 : 0.0f)));
                                                        this.noSoundCenterX = imageX4;
                                                        canvas2.translate(imageX4, this.photoImage.getImageY() + AndroidUtilities.dp((0.2f * f2) + 5.5f));
                                                        staticLayout = this.infoLayout;
                                                        if (staticLayout != null && (!z2 || z3)) {
                                                            staticLayout.draw(canvas2);
                                                        }
                                                        if (i5 != 0 || (z2 && !z3)) {
                                                            f6 = 14.0f;
                                                        } else {
                                                            canvas.save();
                                                            Drawable drawable6 = Theme.chat_msgNoSoundDrawable;
                                                            float f31 = this.animatingNoSoundProgress;
                                                            drawable6.setAlpha((int) (f31 * 255.0f * f31 * this.controlsAlpha));
                                                            f6 = 14.0f;
                                                            int dp7 = AndroidUtilities.dp(this.animatingNoSoundProgress * 14.0f);
                                                            int dp8 = (AndroidUtilities.dp(14.0f) - dp7) / 2;
                                                            int dp9 = this.infoWidth + AndroidUtilities.dp(4.0f);
                                                            canvas2.translate(dp9, 0.0f);
                                                            Theme.chat_msgNoSoundDrawable.setBounds(0, dp8, dp7, dp8 + dp7);
                                                            Theme.chat_msgNoSoundDrawable.draw(canvas2);
                                                            this.noSoundCenterX += dp9 + (dp7 / 2);
                                                            canvas.restore();
                                                        }
                                                        if (!z2 && this.loadingProgressLayout != null) {
                                                            canvas.save();
                                                            if (z3) {
                                                                Theme.chat_infoPaint.setAlpha((int) (this.controlsAlpha * 255.0f * f2));
                                                                canvas2.translate(0.0f, AndroidUtilities.dp(f2 * 14.3f));
                                                            }
                                                            this.loadingProgressLayout.draw(canvas2);
                                                            canvas.restore();
                                                        } else if (z3) {
                                                            Theme.chat_infoPaint.setAlpha((int) (this.controlsAlpha * 255.0f * f2));
                                                            canvas2.translate(0.0f, AndroidUtilities.dp(f2 * 14.3f));
                                                            this.docTitleLayout.draw(canvas2);
                                                        }
                                                        canvas.restore();
                                                        Theme.chat_infoPaint.setAlpha(NotificationCenter.newLocationAvailable);
                                                        getThemedPaint(str2).setAlpha(alpha2);
                                                        i8 = this.animatingDrawVideoImageButton;
                                                        if (i8 == 1) {
                                                            j2 = j;
                                                            float f32 = this.animatingDrawVideoImageButtonProgress - (j2 / 160.0f);
                                                            this.animatingDrawVideoImageButtonProgress = f32;
                                                            f7 = 0.0f;
                                                        } else {
                                                            j2 = j;
                                                            if (i8 == 2) {
                                                                float f33 = this.animatingDrawVideoImageButtonProgress + (j2 / 160.0f);
                                                                this.animatingDrawVideoImageButtonProgress = f33;
                                                                f7 = 1.0f;
                                                            }
                                                        }
                                                        i9 = this.animatingNoSound;
                                                        if (i9 == 1) {
                                                            float f34 = this.animatingNoSoundProgress - (j2 / 180.0f);
                                                            this.animatingNoSoundProgress = f34;
                                                            f8 = 0.0f;
                                                        } else if (i9 == 2) {
                                                            float f35 = this.animatingNoSoundProgress + (j2 / 180.0f);
                                                            this.animatingNoSoundProgress = f35;
                                                            f8 = 1.0f;
                                                        }
                                                        if ((this.buttonState != 1 || this.miniButtonState == 1) && this.loadingProgressLayout != null) {
                                                            f9 = 0.0f;
                                                            f10 = 1.0f;
                                                        } else {
                                                            f9 = 0.0f;
                                                            f10 = 0.0f;
                                                        }
                                                        if (f10 == f9 && this.infoLayout != null && z4) {
                                                            this.animatingLoadingProgressProgress = f9;
                                                        }
                                                        f11 = this.animatingLoadingProgressProgress;
                                                        if (f11 < f10) {
                                                            float f36 = f11 + (j2 / 160.0f);
                                                            this.animatingLoadingProgressProgress = f36;
                                                        } else if (f11 != f10) {
                                                            float f37 = f11 - (j2 / 160.0f);
                                                            this.animatingLoadingProgressProgress = f37;
                                                        }
                                                        if (this.drawImageButton || !this.photoImage.getVisible() || this.isSmallImage || this.currentMessageObject.isRepostVideoPreview) {
                                                            messageDrawable = null;
                                                        } else {
                                                            float f38 = this.controlsAlpha;
                                                            if (f38 != 1.0f) {
                                                                this.radialProgress.setOverrideAlpha(f38);
                                                            }
                                                            if (this.photoImage.hasImageSet()) {
                                                                messageDrawable = null;
                                                                this.radialProgress.setBackgroundDrawable(null);
                                                            } else {
                                                                messageDrawable = null;
                                                                this.radialProgress.setBackgroundDrawable(isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
                                                            }
                                                            MessageObject messageObject11 = this.currentMessageObject;
                                                            if (messageObject11 == null || !messageObject11.isRoundVideo() || (this.currentMessageObject.mediaExists() && !this.currentMessageObject.isRoundOnce())) {
                                                                MessageObject messageObject12 = this.currentMessageObject;
                                                                if (messageObject12 != null && messageObject12.isRoundVideo()) {
                                                                    this.radialProgress.setProgressRect(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX() + this.photoImage.getImageWidth(), this.photoImage.getImageY() + this.photoImage.getImageHeight());
                                                                    canvas2.saveLayerAlpha(this.radialProgress.getProgressRect(), (int) (getVideoTranscriptionProgress() * 255.0f), 31);
                                                                    float imageHeight = this.photoImage.getImageHeight() / (this.radialProgress.getRadius() * 2);
                                                                    canvas2.scale(imageHeight, imageHeight, this.radialProgress.getProgressRect().centerX(), this.radialProgress.getProgressRect().centerY());
                                                                    z8 = true;
                                                                    if ((this.isRoundVideo || !this.hasLinkPreview) && (!this.currentMessageObject.needDrawBluredPreview() || !MediaController.getInstance().isPlayingMessage(this.currentMessageObject))) {
                                                                        if (this.currentMessageObject.hasMediaSpoilers()) {
                                                                            MessageObject messageObject13 = this.currentMessageObject;
                                                                            if (messageObject13.isMediaSpoilersRevealed) {
                                                                            }
                                                                            if (SharedConfig.isAutoplayVideo()) {
                                                                                if (!this.currentMessageObject.isRepostPreview) {
                                                                                    if (this.currentMessagesGroup == null) {
                                                                                        if (this.radialProgress.getIcon() != 0) {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        if (!this.currentMessageObject.isHiddenSensitive()) {
                                                                            if (this.currentMessageObject.needDrawBluredPreview()) {
                                                                                radialProgress2 = this.radialProgress;
                                                                                videoTranscriptionProgress = 0.0f;
                                                                            } else {
                                                                                if (this.isRoundVideo) {
                                                                                    radialProgress2 = this.radialProgress;
                                                                                    videoTranscriptionProgress = ((1.0f - getVideoTranscriptionProgress()) * 0.75f) + 0.25f;
                                                                                }
                                                                                if (!this.currentMessageObject.isRoundOnce() && ((!SharedConfig.isAutoplayVideo() || this.currentMessagesGroup != null) && this.currentMessageObject.hasMediaSpoilers() && !this.currentMessageObject.isMediaSpoilersRevealed && this.radialProgress.getIcon() == 0)) {
                                                                                    canvas2.saveLayerAlpha(this.radialProgress.getProgressRect(), (int) (this.mediaSpoilerRevealProgress * 255.0f), 31);
                                                                                }
                                                                                drawRadialProgress(canvas);
                                                                                if (!this.currentMessageObject.isRoundOnce() && ((!SharedConfig.isAutoplayVideo() || this.currentMessagesGroup != null) && this.currentMessageObject.hasMediaSpoilers() && !this.currentMessageObject.isMediaSpoilersRevealed && this.radialProgress.getIcon() == 0)) {
                                                                                    canvas.restore();
                                                                                }
                                                                                if (!this.currentMessageObject.needDrawBluredPreview() || this.isRoundVideo) {
                                                                                    this.radialProgress.overrideCircleAlpha = 1.0f;
                                                                                }
                                                                            }
                                                                            radialProgress2.overrideCircleAlpha = videoTranscriptionProgress;
                                                                            if (!this.currentMessageObject.isRoundOnce()) {
                                                                                canvas2.saveLayerAlpha(this.radialProgress.getProgressRect(), (int) (this.mediaSpoilerRevealProgress * 255.0f), 31);
                                                                            }
                                                                            drawRadialProgress(canvas);
                                                                            if (!this.currentMessageObject.isRoundOnce()) {
                                                                                canvas.restore();
                                                                            }
                                                                            if (!this.currentMessageObject.needDrawBluredPreview()) {
                                                                            }
                                                                            this.radialProgress.overrideCircleAlpha = 1.0f;
                                                                        }
                                                                    }
                                                                    if (z8) {
                                                                        canvas.restore();
                                                                    }
                                                                }
                                                            } else {
                                                                this.radialProgress.setProgressRect(this.photoImage.getImageX() + ((this.photoImage.getImageWidth() / 2.0f) - this.radialProgress.getRadius()), this.photoImage.getImageY() + ((this.photoImage.getImageHeight() / 2.0f) - this.radialProgress.getRadius()), this.photoImage.getImageX() + (this.photoImage.getImageWidth() / 2.0f) + this.radialProgress.getRadius(), this.photoImage.getImageY() + (this.photoImage.getImageHeight() / 2.0f) + this.radialProgress.getRadius());
                                                            }
                                                            z8 = false;
                                                            if (this.isRoundVideo) {
                                                            }
                                                            if (this.currentMessageObject.hasMediaSpoilers()) {
                                                            }
                                                            if (!this.currentMessageObject.isHiddenSensitive()) {
                                                            }
                                                            if (z8) {
                                                            }
                                                        }
                                                        z7 = (this.buttonState == -1 || (messageObject6 = this.currentMessageObject) == null || !messageObject6.needDrawBluredPreview() || MediaController.getInstance().isPlayingMessage(this.currentMessageObject) || this.currentMessageObject.messageOwner.destroyTime == 0) ? false : true;
                                                        if (z7 || this.timerParticlesAlpha != null) {
                                                            i29 = -1;
                                                        } else {
                                                            i29 = -1;
                                                            this.timerParticlesAlpha = new AnimatedFloat(0.0f, this, 150L, 120L, CubicBezierInterpolator.EASE_OUT);
                                                        }
                                                        animatedFloat = this.timerParticlesAlpha;
                                                        if (animatedFloat != null) {
                                                            f23 = 0.0f;
                                                            f22 = 0.0f;
                                                        } else {
                                                            f22 = animatedFloat.set(z7);
                                                            f23 = 0.0f;
                                                        }
                                                        if (f22 > f23 && this.photoImage.getVisible()) {
                                                            Theme.chat_deleteProgressPaint.setColor(i29);
                                                            Theme.chat_deleteProgressPaint.setAlpha((int) (f22 * 255.0f * this.controlsAlpha));
                                                            Theme.chat_deleteProgressPaint.setStrokeWidth(AndroidUtilities.dp(2.0f));
                                                            float max2 = (Math.max(0L, (this.currentMessageObject.messageOwner.destroyTime * 1000) - (System.currentTimeMillis() + (ConnectionsManager.getInstance(this.currentAccount).getTimeDifference() * MediaDataController.MAX_STYLE_RUNS_COUNT))) / (this.currentMessageObject.messageOwner.ttl * 1000.0f)) * (-360.0f);
                                                            canvas.drawArc(this.deleteProgressRect, -90.0f, max2, false, Theme.chat_deleteProgressPaint);
                                                            if (this.timerParticles == null) {
                                                                this.timerParticles = new TimerParticles();
                                                            }
                                                            this.timerParticles.draw(canvas, Theme.chat_deleteProgressPaint, this.deleteProgressRect, max2, this.controlsAlpha);
                                                            invalidate();
                                                            updateSecretTimeText(this.currentMessageObject);
                                                        }
                                                        if (!this.drawVideoImageButton || this.animatingDrawVideoImageButton != 0) {
                                                            messageObject3 = this.currentMessageObject;
                                                            if (!messageObject3.isRepostPreview && !messageObject3.sendPreview && this.photoImage.getVisible() && !this.isSmallImage && !this.currentMessageObject.isHiddenSensitive()) {
                                                                f24 = this.controlsAlpha;
                                                                if (this.drawPhotoImage && (messageObject4 = this.currentMessageObject) != null && messageObject4.hasMediaSpoilers() && this.currentMessageObject.isSensitive()) {
                                                                    if (this.currentMessageObject.isMediaSpoilersRevealed) {
                                                                        float f39 = this.mediaSpoilerRevealProgress;
                                                                        if (f39 != 0.0f) {
                                                                        }
                                                                    }
                                                                    f24 *= this.mediaSpoilerRevealProgress;
                                                                }
                                                                this.videoRadialProgress.setOverrideAlpha(f24);
                                                                this.videoRadialProgress.draw(canvas2);
                                                            }
                                                        }
                                                        if (this.drawMediaCheckBox) {
                                                            int i34 = this.documentAttachType;
                                                            if (i34 == 5 || (i34 == 1 && !this.drawPhotoImage)) {
                                                                int dp10 = AndroidUtilities.dp(20.0f);
                                                                this.mediaCheckBox.setBackgroundType(this.radialProgress.getMiniIcon() != 4 ? 12 : 13);
                                                                this.mediaCheckBox.setBounds(this.buttonX + AndroidUtilities.dp(28.0f), this.buttonY + AndroidUtilities.dp(28.0f), dp10, dp10);
                                                                this.mediaCheckBox.setColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outTimeText : Theme.key_chat_inTimeText, this.currentMessageObject.isOutOwner() ? Theme.key_chat_outLoader : Theme.key_chat_inLoader, this.currentMessageObject.isOutOwner() ? Theme.key_chat_outBubble : Theme.key_chat_inBubble);
                                                                this.mediaCheckBox.setBackgroundDrawable(isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
                                                            } else {
                                                                int dp11 = AndroidUtilities.dp(21.0f);
                                                                this.mediaCheckBox.setBackgroundType(0);
                                                                this.mediaCheckBox.setBounds(((int) this.photoImage.getImageX2()) - AndroidUtilities.dp(25.0f), ((int) this.photoImage.getImageY()) + AndroidUtilities.dp(4.0f), dp11, dp11);
                                                                this.mediaCheckBox.setColor(i29, i29, this.currentMessageObject.isOutOwner() ? Theme.key_chat_outBubbleSelected : Theme.key_chat_inBubbleSelected);
                                                                this.mediaCheckBox.setBackgroundDrawable(messageDrawable);
                                                            }
                                                            this.mediaCheckBox.draw(canvas2);
                                                        }
                                                        if (this.documentAttachType == 7) {
                                                            boolean isPlayingMessage2 = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
                                                            MessageObject messageObject14 = this.currentMessageObject;
                                                            if (messageObject14.type == 5) {
                                                                if (messageObject14.isOutOwner()) {
                                                                    float f40 = (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize) * 0.2f;
                                                                    boolean z11 = this.isPlayingRound;
                                                                    float f41 = z11 ? f40 : 0.0f;
                                                                    TransitionParams transitionParams = this.transitionParams;
                                                                    f25 = transitionParams.animatePlayingRound ? f40 * (z11 ? transitionParams.animateChangeProgress : 1.0f - transitionParams.animateChangeProgress) : f41;
                                                                } else {
                                                                    f25 = 0.0f;
                                                                }
                                                                MessageObject messageObject15 = this.currentMessageObject;
                                                                if (messageObject15 == null || !messageObject15.isRoundOnce()) {
                                                                    dp5 = this.backgroundDrawableLeft + this.transitionParams.deltaLeft + ((this.currentMessageObject.isOutOwner() || this.drawPinnedBottom || !this.drawBackground) ? 0 : AndroidUtilities.dp(6.0f)) + AndroidUtilities.dp(8.0f) + this.roundPlayingDrawableProgress + f25;
                                                                    dp6 = this.layoutHeight - AndroidUtilities.dp(28 - (this.drawPinnedBottom ? 2 : 0));
                                                                } else {
                                                                    dp5 = this.photoImage.getImageX();
                                                                    dp6 = (this.photoImage.getImageY2() - ((AndroidUtilities.dp(this.drawPinnedBottom ? 4.0f : 5.0f) + this.reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress)) * (1.0f - getVideoTranscriptionProgress()))) - AndroidUtilities.dp(17.0f);
                                                                }
                                                                if (!this.reactionsLayoutInBubble.isEmpty) {
                                                                    dp6 -= r3.totalHeight;
                                                                }
                                                                TransitionParams transitionParams2 = this.transitionParams;
                                                                transitionParams2.lastDrawRoundVideoDotY = dp6;
                                                                if (transitionParams2.animateRoundVideoDotY) {
                                                                    float f42 = transitionParams2.animateFromRoundVideoDotY;
                                                                    float f43 = transitionParams2.animateChangeProgress;
                                                                    dp6 = (dp6 * f43) + (f42 * (1.0f - f43));
                                                                }
                                                                int i35 = this.timeAudioX;
                                                                if (!this.hasLinkPreview) {
                                                                    if (this.currentMessageObject.isOutOwner()) {
                                                                        int width = getWidth();
                                                                        TransitionParams transitionParams3 = this.transitionParams;
                                                                        i35 = ((width - (transitionParams3.animateBackgroundBoundsInner ? (int) ((this.backgroundWidth - transitionParams3.deltaLeft) + transitionParams3.deltaRight) : this.backgroundWidth)) - ((this.drawPinnedBottom || !this.mediaBackground) ? 0 : AndroidUtilities.dp(8.0f))) + AndroidUtilities.dp(67.0f);
                                                                    }
                                                                    dp5 = AndroidUtilities.lerp(dp5, i35 - AndroidUtilities.dp(4.0f), getVideoTranscriptionProgress());
                                                                    dp6 = AndroidUtilities.lerp(dp6, ((AndroidUtilities.dp(44.0f) + this.namesOffset) + this.mediaOffsetY) - AndroidUtilities.dp(1.7f), getVideoTranscriptionProgress());
                                                                }
                                                                this.rect.set(dp5, dp6, this.timeWidthAudio + dp5 + AndroidUtilities.dp(22.0f), AndroidUtilities.dp(17.0f) + dp6);
                                                                applyServiceShaderMatrix();
                                                                Paint themedPaint = getThemedPaint("paintChatActionBackground");
                                                                int alpha4 = themedPaint.getAlpha();
                                                                themedPaint.setAlpha((int) (alpha4 * this.timeAlpha * 0.5f * (1.0f - getVideoTranscriptionProgress())));
                                                                canvas2.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), themedPaint);
                                                                if (hasGradientService()) {
                                                                    Paint themedPaint2 = getThemedPaint("paintChatActionBackgroundDarken");
                                                                    int alpha5 = themedPaint2.getAlpha();
                                                                    themedPaint2.setAlpha((int) (alpha5 * this.timeAlpha * (1.0f - getVideoTranscriptionProgress())));
                                                                    canvas2.drawRoundRect(this.rect, AndroidUtilities.dp(6.0f), AndroidUtilities.dp(6.0f), themedPaint2);
                                                                    themedPaint2.setAlpha(alpha5);
                                                                }
                                                                themedPaint.setAlpha(alpha4);
                                                                boolean z12 = isPlayingMessage2 || !this.currentMessageObject.isContentUnread();
                                                                if (z12) {
                                                                    float f44 = this.roundPlayingDrawableProgress;
                                                                    f26 = 1.0f;
                                                                    if (f44 != 1.0f) {
                                                                        float f45 = f44 + 0.10666667f;
                                                                        this.roundPlayingDrawableProgress = f45;
                                                                    }
                                                                }
                                                                if (!z12) {
                                                                    float f46 = this.roundPlayingDrawableProgress;
                                                                    f26 = 0.0f;
                                                                    if (f46 != 0.0f) {
                                                                        float f47 = f46 - 0.10666667f;
                                                                        this.roundPlayingDrawableProgress = f47;
                                                                    }
                                                                }
                                                                if (z12) {
                                                                    if (!isPlayingMessage2 || MediaController.getInstance().isMessagePaused()) {
                                                                        this.roundVideoPlayingDrawable.stop();
                                                                    } else {
                                                                        this.roundVideoPlayingDrawable.start();
                                                                    }
                                                                }
                                                                if (this.roundPlayingDrawableProgress < 1.0f) {
                                                                    float dp12 = this.timeWidthAudio + dp5 + AndroidUtilities.dp(12.0f);
                                                                    float dp13 = AndroidUtilities.dp(8.3f) + dp6;
                                                                    canvas.save();
                                                                    float f48 = 1.0f - this.roundPlayingDrawableProgress;
                                                                    canvas2.scale(f48, f48, dp12, dp13);
                                                                    Theme.chat_docBackPaint.setColor(Theme.chat_timePaint.getColor());
                                                                    Theme.chat_docBackPaint.setAlpha((int) (this.timeAlpha * 255.0f * (1.0f - this.roundPlayingDrawableProgress)));
                                                                    canvas2.drawCircle(dp12, dp13, AndroidUtilities.dp(3.0f), Theme.chat_docBackPaint);
                                                                    canvas.restore();
                                                                }
                                                                if (this.roundPlayingDrawableProgress > 0.0f) {
                                                                    BaseCell.setDrawableBounds(this.roundVideoPlayingDrawable, this.timeWidthAudio + dp5 + AndroidUtilities.dp(6.0f), AndroidUtilities.dp(2.3f) + dp6);
                                                                    canvas.save();
                                                                    float f49 = this.roundPlayingDrawableProgress;
                                                                    canvas2.scale(f49, f49, this.roundVideoPlayingDrawable.getBounds().centerX(), this.roundVideoPlayingDrawable.getBounds().centerY());
                                                                    if (this.hasLinkPreview) {
                                                                        roundVideoPlayingDrawable = this.roundVideoPlayingDrawable;
                                                                        f27 = 0.0f;
                                                                    } else {
                                                                        this.roundVideoPlayingDrawable.timeColor = Theme.chat_timePaint.getColor();
                                                                        roundVideoPlayingDrawable = this.roundVideoPlayingDrawable;
                                                                        f27 = getVideoTranscriptionProgress();
                                                                    }
                                                                    roundVideoPlayingDrawable.colorProgress = f27;
                                                                    this.roundVideoPlayingDrawable.setAlpha((int) (this.roundPlayingDrawableProgress * 255.0f * (1.0f - getVideoTranscriptionProgress())));
                                                                    this.roundVideoPlayingDrawable.draw(canvas2);
                                                                    canvas.restore();
                                                                }
                                                                imageX = dp5 + AndroidUtilities.dp(4.0f);
                                                                imageY2 = dp6 + AndroidUtilities.dp(1.7f);
                                                            } else {
                                                                imageX = this.photoImage.getImageX();
                                                                imageY2 = this.photoImage.getImageY2() - (this.durationLayout != null ? r2.getHeight() : 0);
                                                            }
                                                            if (this.durationLayout != null) {
                                                                Theme.chat_timePaint.setAlpha((int) (this.timeAlpha * 255.0f));
                                                                canvas.save();
                                                                canvas2.translate(imageX, imageY2);
                                                                this.durationLayout.draw(canvas2);
                                                                canvas.restore();
                                                                Theme.chat_timePaint.setAlpha(NotificationCenter.newLocationAvailable);
                                                            }
                                                        }
                                                        if (this.drawPhotoImage || (messageObject5 = this.currentMessageObject) == null || !messageObject5.hasMediaSpoilers() || !this.currentMessageObject.isSensitive()) {
                                                            return;
                                                        }
                                                        if (this.currentMessageObject.isMediaSpoilersRevealed) {
                                                            float f50 = this.mediaSpoilerRevealProgress;
                                                            if (f50 == 0.0f || f50 >= 1.0f) {
                                                                return;
                                                            }
                                                        }
                                                        if (this.sensitiveText == null) {
                                                            SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder("x " + LocaleController.getString(R.string.MessageSensitiveContent));
                                                            spannableStringBuilder.setSpan(new ColoredImageSpan(R.drawable.filled_sensitive), 0, 1, 33);
                                                            this.sensitiveText = new Text(spannableStringBuilder, f6, AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
                                                        }
                                                        Text text = this.sensitiveText;
                                                        if (this.photoImage.getImageWidth() < AndroidUtilities.dp(26.0f) + this.sensitiveText.getCurrentWidth()) {
                                                            if (this.sensitiveTextShort == null) {
                                                                SpannableStringBuilder spannableStringBuilder2 = new SpannableStringBuilder("x " + LocaleController.getString(R.string.MessageSensitiveContentShort));
                                                                spannableStringBuilder2.setSpan(new ColoredImageSpan(R.drawable.filled_sensitive), 0, 1, 33);
                                                                this.sensitiveTextShort = new Text(spannableStringBuilder2, f6, AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
                                                            }
                                                            text = this.sensitiveTextShort;
                                                        }
                                                        float imageX5 = this.photoImage.getImageX() + (this.photoImage.getImageWidth() / 2.0f);
                                                        float imageHeight2 = (this.photoImage.getImageHeight() / 2.0f) + this.photoImage.getImageY();
                                                        float currentWidth = text.getCurrentWidth() + AndroidUtilities.dp(26.0f);
                                                        float dp14 = AndroidUtilities.dp(32.0f) / 2.0f;
                                                        float lerp = AndroidUtilities.lerp(0.8f, 1.0f, 1.0f - this.mediaSpoilerRevealProgress);
                                                        RectF rectF2 = AndroidUtilities.rectTmp;
                                                        float f51 = currentWidth / 2.0f;
                                                        float f52 = f51 * lerp;
                                                        float f53 = dp14 * lerp;
                                                        rectF2.set(imageX5 - f52, imageHeight2 - f53, f52 + imageX5, f53 + imageHeight2);
                                                        this.rectPath.reset();
                                                        this.rectPath.addRoundRect(rectF2, dp14, dp14, Path.Direction.CW);
                                                        canvas.save();
                                                        canvas2.clipPath(this.rectPath);
                                                        float alpha6 = this.blurredPhotoImage.getAlpha();
                                                        this.blurredPhotoImage.setAlpha((1.0f - this.mediaSpoilerRevealProgress) * alpha6);
                                                        this.blurredPhotoImage.draw(canvas2);
                                                        this.blurredPhotoImage.setAlpha(alpha6);
                                                        canvas.restore();
                                                        int alpha7 = getThemedPaint(str2).getAlpha();
                                                        getThemedPaint(str2).setAlpha((int) (alpha7 * this.controlsAlpha * (1.0f - this.mediaSpoilerRevealProgress) * 0.35f));
                                                        canvas2.drawRoundRect(rectF2, dp14, dp14, getThemedPaint(str2));
                                                        getThemedPaint(str2).setAlpha(alpha7);
                                                        canvas.save();
                                                        canvas2.scale(lerp, lerp, imageX5, imageHeight2);
                                                        text.draw(canvas, AndroidUtilities.dp(13.0f) + (imageX5 - f51), imageHeight2, -1, 1.0f - this.mediaSpoilerRevealProgress);
                                                        canvas.restore();
                                                        return;
                                                    }
                                                    canvas2.scale(isSmallImage, isSmallImage, f29, f30);
                                                    rectF = this.rect;
                                                    f5 = min;
                                                }
                                                canvas2.drawRoundRect(rectF, f5, f5, getThemedPaint(str2));
                                                Theme.chat_infoPaint.setAlpha((int) (this.controlsAlpha * 255.0f * isSmallImage));
                                                Theme.chat_infoBoldPaint.setColor(Theme.chat_infoPaint.getColor());
                                                int imageX42 = (int) (this.photoImage.getImageX() + AndroidUtilities.dp((!z10 ? 10 : 8) + (!this.canStreamVideo ? 30.0f * f2 : 0.0f)));
                                                this.noSoundCenterX = imageX42;
                                                canvas2.translate(imageX42, this.photoImage.getImageY() + AndroidUtilities.dp((0.2f * f2) + 5.5f));
                                                staticLayout = this.infoLayout;
                                                if (staticLayout != null) {
                                                    staticLayout.draw(canvas2);
                                                }
                                                if (i5 != 0) {
                                                }
                                                f6 = 14.0f;
                                                if (!z2) {
                                                }
                                                if (z3) {
                                                }
                                                canvas.restore();
                                                Theme.chat_infoPaint.setAlpha(NotificationCenter.newLocationAvailable);
                                                getThemedPaint(str2).setAlpha(alpha2);
                                                i8 = this.animatingDrawVideoImageButton;
                                                if (i8 == 1) {
                                                }
                                                i9 = this.animatingNoSound;
                                                if (i9 == 1) {
                                                }
                                                if (this.buttonState != 1) {
                                                }
                                                f9 = 0.0f;
                                                f10 = 1.0f;
                                                if (f10 == f9) {
                                                    this.animatingLoadingProgressProgress = f9;
                                                }
                                                f11 = this.animatingLoadingProgressProgress;
                                                if (f11 < f10) {
                                                }
                                                if (this.drawImageButton) {
                                                }
                                                messageDrawable = null;
                                                if (this.buttonState == -1) {
                                                }
                                                if (z7) {
                                                }
                                                i29 = -1;
                                                animatedFloat = this.timerParticlesAlpha;
                                                if (animatedFloat != null) {
                                                }
                                                if (f22 > f23) {
                                                    Theme.chat_deleteProgressPaint.setColor(i29);
                                                    Theme.chat_deleteProgressPaint.setAlpha((int) (f22 * 255.0f * this.controlsAlpha));
                                                    Theme.chat_deleteProgressPaint.setStrokeWidth(AndroidUtilities.dp(2.0f));
                                                    float max22 = (Math.max(0L, (this.currentMessageObject.messageOwner.destroyTime * 1000) - (System.currentTimeMillis() + (ConnectionsManager.getInstance(this.currentAccount).getTimeDifference() * MediaDataController.MAX_STYLE_RUNS_COUNT))) / (this.currentMessageObject.messageOwner.ttl * 1000.0f)) * (-360.0f);
                                                    canvas.drawArc(this.deleteProgressRect, -90.0f, max22, false, Theme.chat_deleteProgressPaint);
                                                    if (this.timerParticles == null) {
                                                    }
                                                    this.timerParticles.draw(canvas, Theme.chat_deleteProgressPaint, this.deleteProgressRect, max22, this.controlsAlpha);
                                                    invalidate();
                                                    updateSecretTimeText(this.currentMessageObject);
                                                }
                                                if (!this.drawVideoImageButton) {
                                                }
                                                messageObject3 = this.currentMessageObject;
                                                if (!messageObject3.isRepostPreview) {
                                                    f24 = this.controlsAlpha;
                                                    if (this.drawPhotoImage) {
                                                        if (this.currentMessageObject.isMediaSpoilersRevealed) {
                                                        }
                                                        f24 *= this.mediaSpoilerRevealProgress;
                                                    }
                                                    this.videoRadialProgress.setOverrideAlpha(f24);
                                                    this.videoRadialProgress.draw(canvas2);
                                                }
                                                if (this.drawMediaCheckBox) {
                                                }
                                                if (this.documentAttachType == 7) {
                                                }
                                                if (this.drawPhotoImage) {
                                                    return;
                                                } else {
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                    z4 = z;
                                    j = j3;
                                    str2 = str;
                                    f6 = 14.0f;
                                    i8 = this.animatingDrawVideoImageButton;
                                    if (i8 == 1) {
                                    }
                                    i9 = this.animatingNoSound;
                                    if (i9 == 1) {
                                    }
                                    if (this.buttonState != 1) {
                                    }
                                    f9 = 0.0f;
                                    f10 = 1.0f;
                                    if (f10 == f9) {
                                    }
                                    f11 = this.animatingLoadingProgressProgress;
                                    if (f11 < f10) {
                                    }
                                    if (this.drawImageButton) {
                                    }
                                    messageDrawable = null;
                                    if (this.buttonState == -1) {
                                    }
                                    if (z7) {
                                    }
                                    i29 = -1;
                                    animatedFloat = this.timerParticlesAlpha;
                                    if (animatedFloat != null) {
                                    }
                                    if (f22 > f23) {
                                    }
                                    if (!this.drawVideoImageButton) {
                                    }
                                    messageObject3 = this.currentMessageObject;
                                    if (!messageObject3.isRepostPreview) {
                                    }
                                    if (this.drawMediaCheckBox) {
                                    }
                                    if (this.documentAttachType == 7) {
                                    }
                                    if (this.drawPhotoImage) {
                                    }
                                }
                                f = 1.0f;
                                isPlayingMessage = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
                                if (this.animatingNoSoundPlaying != isPlayingMessage) {
                                }
                                MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
                                if (groupedMessagePosition2 != null) {
                                }
                                i2 = this.documentAttachType;
                                if (i2 != i) {
                                }
                                if (this.autoPlayingMedia) {
                                }
                                if (this.infoLayout == null) {
                                }
                                if (z) {
                                }
                                isSmallImage = f4 * (f - isSmallImage());
                                if (this.drawPhotoImage) {
                                    if (this.currentMessageObject.isMediaSpoilersRevealed) {
                                    }
                                    isSmallImage *= this.mediaSpoilerRevealProgress;
                                }
                                if (isSmallImage > 0.0f) {
                                }
                                z4 = z;
                                j = j3;
                                str2 = str;
                                f6 = 14.0f;
                                i8 = this.animatingDrawVideoImageButton;
                                if (i8 == 1) {
                                }
                                i9 = this.animatingNoSound;
                                if (i9 == 1) {
                                }
                                if (this.buttonState != 1) {
                                }
                                f9 = 0.0f;
                                f10 = 1.0f;
                                if (f10 == f9) {
                                }
                                f11 = this.animatingLoadingProgressProgress;
                                if (f11 < f10) {
                                }
                                if (this.drawImageButton) {
                                }
                                messageDrawable = null;
                                if (this.buttonState == -1) {
                                }
                                if (z7) {
                                }
                                i29 = -1;
                                animatedFloat = this.timerParticlesAlpha;
                                if (animatedFloat != null) {
                                }
                                if (f22 > f23) {
                                }
                                if (!this.drawVideoImageButton) {
                                }
                                messageObject3 = this.currentMessageObject;
                                if (!messageObject3.isRepostPreview) {
                                }
                                if (this.drawMediaCheckBox) {
                                }
                                if (this.documentAttachType == 7) {
                                }
                                if (this.drawPhotoImage) {
                                }
                            }
                        }
                        i = 4;
                        f = 1.0f;
                        isPlayingMessage = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
                        if (this.animatingNoSoundPlaying != isPlayingMessage) {
                        }
                        MessageObject.GroupedMessagePosition groupedMessagePosition22 = this.currentPosition;
                        if (groupedMessagePosition22 != null) {
                        }
                        i2 = this.documentAttachType;
                        if (i2 != i) {
                        }
                        if (this.autoPlayingMedia) {
                        }
                        if (this.infoLayout == null) {
                        }
                        if (z) {
                        }
                        isSmallImage = f4 * (f - isSmallImage());
                        if (this.drawPhotoImage) {
                        }
                        if (isSmallImage > 0.0f) {
                        }
                        z4 = z;
                        j = j3;
                        str2 = str;
                        f6 = 14.0f;
                        i8 = this.animatingDrawVideoImageButton;
                        if (i8 == 1) {
                        }
                        i9 = this.animatingNoSound;
                        if (i9 == 1) {
                        }
                        if (this.buttonState != 1) {
                        }
                        f9 = 0.0f;
                        f10 = 1.0f;
                        if (f10 == f9) {
                        }
                        f11 = this.animatingLoadingProgressProgress;
                        if (f11 < f10) {
                        }
                        if (this.drawImageButton) {
                        }
                        messageDrawable = null;
                        if (this.buttonState == -1) {
                        }
                        if (z7) {
                        }
                        i29 = -1;
                        animatedFloat = this.timerParticlesAlpha;
                        if (animatedFloat != null) {
                        }
                        if (f22 > f23) {
                        }
                        if (!this.drawVideoImageButton) {
                        }
                        messageObject3 = this.currentMessageObject;
                        if (!messageObject3.isRepostPreview) {
                        }
                        if (this.drawMediaCheckBox) {
                        }
                        if (this.documentAttachType == 7) {
                        }
                        if (this.drawPhotoImage) {
                        }
                    }
                }
            } else {
                if (i31 != 4) {
                    canvas3 = canvas;
                    if (i31 == 16) {
                        boolean isVideoCall = messageObject7.isVideoCall();
                        if (this.currentMessageObject.isOutOwner()) {
                            drawable2 = Theme.chat_msgCallUpGreenDrawable;
                            if (this.currentMessageObject.isVideoCall()) {
                                isDrawSelectionBackground();
                                str3 = "drawableMsgOutCallVideo";
                            } else {
                                str3 = isDrawSelectionBackground() ? "drawableMsgOutCallAudioSelected" : "drawableMsgOutCallAudio";
                            }
                            drawable3 = getThemedDrawable(str3);
                        } else {
                            TLRPC.PhoneCallDiscardReason phoneCallDiscardReason = this.currentMessageObject.messageOwner.action.reason;
                            drawable2 = ((phoneCallDiscardReason instanceof TLRPC.TL_phoneCallDiscardReasonMissed) || (phoneCallDiscardReason instanceof TLRPC.TL_phoneCallDiscardReasonBusy)) ? Theme.chat_msgCallDownRedDrawable : Theme.chat_msgCallDownGreenDrawable;
                            drawable3 = isDrawSelectionBackground() ? Theme.chat_msgInCallSelectedDrawable[isVideoCall ? 1 : 0] : Theme.chat_msgInCallDrawable[isVideoCall ? 1 : 0];
                        }
                        if (this.currentMessageObject.isOutOwner()) {
                            Theme.chat_audioTitlePaint.setColor(getThemedColor(Theme.key_chat_messageTextOut));
                            textPaint2 = Theme.chat_contactPhonePaint;
                            i26 = isDrawSelectionBackground() ? Theme.key_chat_outTimeSelectedText : Theme.key_chat_outTimeText;
                        } else {
                            Theme.chat_audioTitlePaint.setColor(getThemedColor(Theme.key_chat_messageTextIn));
                            textPaint2 = Theme.chat_contactPhonePaint;
                            i26 = isDrawSelectionBackground() ? Theme.key_chat_inTimeSelectedText : Theme.key_chat_inTimeText;
                        }
                        textPaint2.setColor(getThemedColor(i26));
                        this.forceNotDrawTime = true;
                        int dp15 = this.currentMessageObject.isOutOwner() ? (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(16.0f) : AndroidUtilities.dp(needDrawAvatar() ? 74.0f : 25.0f);
                        this.otherX = dp15;
                        if (LocaleController.isRTL) {
                            dp15 += drawable3.getIntrinsicWidth() + AndroidUtilities.dp(12.0f);
                        }
                        if (this.titleLayout != null) {
                            canvas.save();
                            canvas3.translate(dp15, AndroidUtilities.dp(12.0f) + this.namesOffset);
                            this.titleLayout.draw(canvas3);
                            canvas.restore();
                        }
                        if (this.docTitleLayout != null) {
                            canvas.save();
                            canvas3.translate(AndroidUtilities.dp(LocaleController.isRTL ? -19.0f : 19.0f) + dp15, AndroidUtilities.dp(37.0f) + this.namesOffset);
                            this.docTitleLayout.draw(canvas3);
                            canvas.restore();
                        }
                        BaseCell.setDrawableBounds(drawable2, (dp15 + ((!LocaleController.isRTL || (staticLayout4 = this.docTitleLayout) == null) ? 0 : staticLayout4.getWidth() - drawable2.getIntrinsicWidth())) - AndroidUtilities.dp(1.0f), AndroidUtilities.dp(37.0f) + this.namesOffset);
                        drawable2.draw(canvas3);
                        if (Build.VERSION.SDK_INT >= 21 && (drawable4 = this.selectorDrawable[0]) != null) {
                            if (this.selectorDrawableMaskType[0] == 4) {
                                drawable4.draw(canvas3);
                            }
                            z5 = this.pinnedBottom;
                            if (z5 && !this.pinnedTop) {
                                f20 = 18.5f;
                            } else if (!z5 && this.pinnedTop) {
                                f20 = 18.0f;
                            } else if (z5) {
                                dp4 = AndroidUtilities.dp(17.0f);
                                this.otherY = dp4;
                                BaseCell.setDrawableBounds(drawable3, this.otherX + AndroidUtilities.dp((!LocaleController.isRTL ? 0 : NotificationCenter.storyQualityUpdate) + (!isVideoCall ? 1 : 0)), this.otherY);
                                drawable3.draw(canvas3);
                            } else {
                                f20 = 19.0f;
                            }
                            dp4 = AndroidUtilities.dp(f20);
                            this.otherY = dp4;
                            BaseCell.setDrawableBounds(drawable3, this.otherX + AndroidUtilities.dp((!LocaleController.isRTL ? 0 : NotificationCenter.storyQualityUpdate) + (!isVideoCall ? 1 : 0)), this.otherY);
                            drawable3.draw(canvas3);
                        }
                        z5 = this.pinnedBottom;
                        if (z5) {
                        }
                        if (!z5) {
                        }
                        if (z5) {
                        }
                    } else if (i31 == 17) {
                        long currentTimeMillis = System.currentTimeMillis();
                        long j4 = currentTimeMillis - this.voteLastUpdateTime;
                        if (j4 > 17) {
                            j4 = 17;
                        }
                        this.voteLastUpdateTime = currentTimeMillis;
                        if (this.currentMessageObject.isOutOwner()) {
                            themedColor = getThemedColor(Theme.key_chat_messageTextOut);
                            i11 = isDrawSelectionBackground() ? Theme.key_chat_outTimeSelectedText : Theme.key_chat_outTimeText;
                        } else {
                            themedColor = getThemedColor(Theme.key_chat_messageTextIn);
                            i11 = isDrawSelectionBackground() ? Theme.key_chat_inTimeSelectedText : Theme.key_chat_inTimeText;
                        }
                        int themedColor2 = getThemedColor(i11);
                        Theme.chat_audioTitlePaint.setColor(themedColor);
                        Theme.chat_audioPerformerPaint.setColor(themedColor);
                        Theme.chat_instantViewPaint.setColor(themedColor);
                        Theme.chat_timePaint.setColor(themedColor2);
                        Theme.chat_livePaint.setColor(themedColor2);
                        Theme.chat_locationAddressPaint.setColor(themedColor2);
                        canvas.save();
                        TransitionParams transitionParams4 = this.transitionParams;
                        if (transitionParams4.animateForwardedLayout) {
                            float f54 = this.namesOffset;
                            float f55 = transitionParams4.animateChangeProgress;
                            float f56 = (f54 * f55) + (transitionParams4.animateForwardedNamesOffset * (1.0f - f55));
                            if (this.currentMessageObject.needDrawForwarded()) {
                                f56 -= this.namesOffset;
                            }
                            f14 = 0.0f;
                            canvas3.translate(0.0f, f56);
                        } else {
                            f14 = 0.0f;
                        }
                        int dp16 = this.currentMessageObject.isOutOwner() ? (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(11.0f) : needDrawAvatar() ? AndroidUtilities.dp(68.0f) : AndroidUtilities.dp(20.0f);
                        if (this.titleLayout != null) {
                            canvas.save();
                            canvas3.translate(getExtraTextX() + dp16, AndroidUtilities.dp(15.0f) + this.namesOffset);
                            this.titleLayout.draw(canvas3);
                            StaticLayout staticLayout7 = this.titleLayout;
                            AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans = this.animatedEmojiPollQuestion;
                            ColorFilter adaptiveEmojiColorFilter = getAdaptiveEmojiColorFilter(1, staticLayout7.getPaint().getColor());
                            i13 = NotificationCenter.newLocationAvailable;
                            canvas4 = canvas3;
                            str = "paintChatTimeBackground";
                            i12 = 2;
                            r3 = 0;
                            f15 = 14.0f;
                            AnimatedEmojiSpan.drawAnimatedEmojis(canvas, staticLayout7, emojiGroupedSpans, 0.0f, null, 0.0f, 0.0f, 0.0f, 1.0f, adaptiveEmojiColorFilter);
                            canvas.restore();
                        } else {
                            canvas4 = canvas3;
                            str = "paintChatTimeBackground";
                            i12 = 2;
                            r3 = 0;
                            i13 = NotificationCenter.newLocationAvailable;
                            f15 = 14.0f;
                        }
                        StaticLayout staticLayout8 = this.titleLayout;
                        int height = (staticLayout8 != null ? staticLayout8.getHeight() : 0) + AndroidUtilities.dp(20.0f) + this.namesOffset;
                        if (this.docTitleLayout != null) {
                            canvas.save();
                            canvas4.translate(this.docTitleOffsetX + dp16 + getExtraTextX(), height);
                            this.docTitleLayout.draw(canvas4);
                            canvas.restore();
                            TLRPC.TL_messageMediaPoll tL_messageMediaPoll = (TLRPC.TL_messageMediaPoll) MessageObject.getMedia(this.currentMessageObject.messageOwner);
                            if (!this.lastPoll.quiz || (!(this.pollVoted || this.pollClosed) || TextUtils.isEmpty(tL_messageMediaPoll.results.solution))) {
                                this.pollHintX = -1;
                            } else {
                                Drawable themedDrawable = getThemedDrawable(this.currentMessageObject.isOutOwner() ? "drawable_chat_pollHintDrawableOut" : "drawable_chat_pollHintDrawableIn");
                                if (this.pollVoteInProgress) {
                                    themedDrawable.setAlpha((int) (this.pollAnimationProgress * 255.0f));
                                } else {
                                    themedDrawable.setAlpha(i13);
                                }
                                int i36 = this.docTitleOffsetX;
                                this.pollHintX = (i36 < 0 || (i36 == 0 && this.docTitleLayout.getLineLeft(r3) == f14)) ? (this.currentBackgroundDrawable.getBounds().right - themedDrawable.getIntrinsicWidth()) - AndroidUtilities.dp(this.currentMessageObject.isOutOwner() ? 17.0f : 11.0f) : getCurrentBackgroundLeft() + AndroidUtilities.dp(11.0f);
                                this.pollHintY = height - AndroidUtilities.dp(6.0f);
                                int intrinsicWidth2 = this.pollHintX + (themedDrawable.getIntrinsicWidth() / i12);
                                int intrinsicHeight = this.pollHintY + (themedDrawable.getIntrinsicHeight() / i12);
                                if (this.hintButtonVisible) {
                                    float f57 = this.hintButtonProgress;
                                    if (f57 < 1.0f) {
                                        f19 = AnimationProperties.overshootInterpolator.getInterpolation(f57);
                                        int intrinsicWidth3 = ((int) (themedDrawable.getIntrinsicWidth() * f19)) / i12;
                                        int intrinsicHeight2 = ((int) (themedDrawable.getIntrinsicHeight() * f19)) / i12;
                                        themedDrawable.setBounds(intrinsicWidth2 - intrinsicWidth3, intrinsicHeight - intrinsicHeight2, intrinsicWidth2 + intrinsicWidth3, intrinsicHeight + intrinsicHeight2);
                                        themedDrawable.draw(canvas4);
                                    }
                                }
                                f19 = this.hintButtonProgress;
                                int intrinsicWidth32 = ((int) (themedDrawable.getIntrinsicWidth() * f19)) / i12;
                                int intrinsicHeight22 = ((int) (themedDrawable.getIntrinsicHeight() * f19)) / i12;
                                themedDrawable.setBounds(intrinsicWidth2 - intrinsicWidth32, intrinsicHeight - intrinsicHeight22, intrinsicWidth2 + intrinsicWidth32, intrinsicHeight + intrinsicHeight22);
                                themedDrawable.draw(canvas4);
                            }
                            if (this.pollAvatarImages != null && !this.isBot) {
                                int ceil2 = (int) Math.ceil(this.docTitleLayout.getLineLeft(r3));
                                if (this.docTitleOffsetX == 0 && ceil2 == 0) {
                                    i25 = AndroidUtilities.dp(13.0f);
                                    dp3 = ((int) Math.ceil(this.docTitleLayout.getLineWidth(r3))) + dp16 + AndroidUtilities.dp(7.0f) + getExtraTextX();
                                } else {
                                    int i37 = -AndroidUtilities.dp(13.0f);
                                    int i38 = this.docTitleOffsetX;
                                    dp3 = i38 != 0 ? ((i38 + dp16) - AndroidUtilities.dp(23.0f)) - getExtraTextX() : ((ceil2 + dp16) - AndroidUtilities.dp(23.0f)) - getExtraTextX();
                                    i25 = i37;
                                }
                                for (int length = this.pollAvatarImages.length - 1; length >= 0; length--) {
                                    if (this.pollAvatarImagesVisible[length] && this.pollAvatarImages[length].hasImageSet()) {
                                        this.pollAvatarImages[length].setImageX((i25 * length) + dp3);
                                        this.pollAvatarImages[length].setImageY(height - AndroidUtilities.dp(1.0f));
                                        ImageReceiver[] imageReceiverArr = this.pollAvatarImages;
                                        if (length != imageReceiverArr.length - 1) {
                                            canvas4.drawCircle(imageReceiverArr[length].getCenterX(), this.pollAvatarImages[length].getCenterY(), AndroidUtilities.dp(9.0f), this.currentBackgroundDrawable.getPaint());
                                        }
                                        if (this.animatePollAvatars && this.animatePollAnswerAlpha) {
                                            if (this.pollUnvoteInProgress) {
                                                f17 = 1.0f;
                                                f18 = (1.0f - this.pollAnimationProgress) / 0.3f;
                                            } else {
                                                f17 = 1.0f;
                                                f18 = this.pollAnimationProgress;
                                            }
                                            this.pollAvatarImages[length].setAlpha(Math.min(f18, f17));
                                        }
                                        this.pollAvatarImages[length].draw(canvas4);
                                    }
                                }
                                if ((!this.pollClosed && !this.pollVoted) || this.pollVoteInProgress) {
                                    poll = this.lastPoll;
                                    if (poll.quiz && poll.close_period != 0) {
                                        max = Math.max(0L, (this.lastPoll.close_date * 1000) - ConnectionsManager.getInstance(this.currentAccount).getCurrentTimeMillis());
                                        if (this.closeTimeText != null || this.lastPollCloseTime != max) {
                                            this.closeTimeText = AndroidUtilities.formatDurationNoHours((int) Math.ceil(max / 1000.0f), r3);
                                            this.closeTimeWidth = (int) Math.ceil(Theme.chat_timePaint.measureText(r0));
                                            this.lastPollCloseTime = max;
                                        }
                                        if (max <= 0 && !this.pollClosed) {
                                            if (this.currentMessageObject.pollLastCheckTime + 1000 < SystemClock.elapsedRealtime()) {
                                                this.currentMessageObject.pollLastCheckTime = 0L;
                                            }
                                            this.delegate.needReloadPolls();
                                        }
                                        int dp17 = (this.currentBackgroundDrawable.getBounds().right - this.closeTimeWidth) - AndroidUtilities.dp(!this.currentMessageObject.isOutOwner() ? 40.0f : 34.0f);
                                        if (max <= 5000) {
                                            Theme.chat_timePaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outPollWrongAnswer : Theme.key_chat_inPollWrongAnswer));
                                        }
                                        if (!this.animatePollAnswer) {
                                            Theme.chat_timePaint.setAlpha((int) ((1.0f - this.pollAnimationProgress) * 255.0f));
                                        }
                                        canvas5 = canvas;
                                        canvas5.drawText(this.closeTimeText, dp17, height + AndroidUtilities.dp(11.0f), Theme.chat_timePaint);
                                        Theme.chat_pollTimerPaint.setColor(Theme.chat_timePaint.getColor());
                                        dp = dp17 + this.closeTimeWidth + AndroidUtilities.dp(13.0f);
                                        int dp18 = AndroidUtilities.dp(5.1f);
                                        dp2 = height + AndroidUtilities.dp(6.0f);
                                        if (max > 60000) {
                                            this.rect.set(dp - dp18, dp2 - dp18, dp + dp18, dp18 + dp2);
                                            float min2 = (max / (Math.min(60, this.lastPoll.close_period) * 1000.0f)) * (-360.0f);
                                            f16 = 0.0f;
                                            i14 = dp16;
                                            canvas.drawArc(this.rect, -90.0f, min2, false, Theme.chat_pollTimerPaint);
                                            this.timerParticles.draw(canvas, Theme.chat_pollTimerPaint, this.rect, min2, this.pollVoteInProgress ? 1.0f - this.pollAnimationProgress : 1.0f);
                                        } else {
                                            i14 = dp16;
                                            f16 = 0.0f;
                                            canvas5.drawCircle(dp, dp2, dp18, Theme.chat_pollTimerPaint);
                                        }
                                        if (max <= 60000 || this.timerTransitionProgress != f16) {
                                            Theme.chat_pollTimerPaint.setAlpha((int) (this.timerTransitionProgress * 255.0f));
                                            float f58 = dp;
                                            canvas.drawLine(f58 - (AndroidUtilities.dp(2.1f) * this.timerTransitionProgress), dp2 - AndroidUtilities.dp(7.5f), f58 + (AndroidUtilities.dp(2.1f) * this.timerTransitionProgress), dp2 - AndroidUtilities.dp(7.5f), Theme.chat_pollTimerPaint);
                                            float f59 = dp2;
                                            canvas.drawLine(f58, f59 - (AndroidUtilities.dp(3.0f) * this.timerTransitionProgress), f58, f59, Theme.chat_pollTimerPaint);
                                            if (max <= 60000) {
                                                float f60 = this.timerTransitionProgress - (j4 / 180.0f);
                                                this.timerTransitionProgress = f60;
                                                if (f60 < f16) {
                                                    this.timerTransitionProgress = f16;
                                                }
                                            }
                                        }
                                        invalidate();
                                        if (Build.VERSION.SDK_INT < 21 && this.selectorDrawable[0] != null) {
                                            i23 = this.selectorDrawableMaskType[0];
                                            i24 = i23 == 1 ? 3 : 3;
                                            if (i23 == i24) {
                                                canvas.save();
                                                float f61 = this.hintButtonProgress;
                                                canvas5.scale(f61, f61, this.selectorDrawable[0].getBounds().centerX(), this.selectorDrawable[0].getBounds().centerY());
                                            }
                                            this.selectorDrawable[0].draw(canvas5);
                                            if (this.selectorDrawableMaskType[0] == i24) {
                                                canvas.restore();
                                            }
                                        }
                                        size = this.pollButtons.size();
                                        i15 = 0;
                                        int i39 = 0;
                                        while (i15 < size) {
                                            PollButton pollButton2 = (PollButton) this.pollButtons.get(i15);
                                            int i40 = i14;
                                            pollButton2.x = i40;
                                            canvas.save();
                                            canvas5.translate(AndroidUtilities.dp(35.0f) + i40, pollButton2.y + this.namesOffset);
                                            pollButton2.title.draw(canvas5);
                                            AnimatedEmojiSpan.drawAnimatedEmojis(canvas, pollButton2.title, pollButton2.animatedEmoji, 0.0f, null, 0.0f, 0.0f, 0.0f, 1.0f, getAdaptiveEmojiColorFilter(1, pollButton2.title.getPaint().getColor()));
                                            int min3 = (int) (this.animatePollAnswerAlpha ? Math.min((this.pollUnvoteInProgress ? 1.0f - this.pollAnimationProgress : this.pollAnimationProgress) / 0.3f, 1.0f) * 255.0f : 255.0f);
                                            boolean z13 = this.pollVoted;
                                            if (z13 || this.pollClosed || this.animatePollAnswerAlpha) {
                                                if (this.lastPoll.quiz && z13 && pollButton2.chosen) {
                                                    int i41 = pollButton2.correct ? this.currentMessageObject.isOutOwner() ? Theme.key_chat_outPollCorrectAnswer : Theme.key_chat_inPollCorrectAnswer : this.currentMessageObject.isOutOwner() ? Theme.key_chat_outPollWrongAnswer : Theme.key_chat_inPollWrongAnswer;
                                                    if (!this.currentBackgroundDrawable.hasGradient() || Theme.hasThemeKey(i41)) {
                                                        Theme.chat_docBackPaint.setColor(getThemedColor(i41));
                                                        if (this.animatePollAnswerAlpha) {
                                                            float f62 = min3;
                                                            Theme.chat_instantViewPaint.setAlpha((int) ((Theme.chat_instantViewPaint.getAlpha() / 255.0f) * f62));
                                                            Theme.chat_docBackPaint.setAlpha((int) (f62 * (Theme.chat_docBackPaint.getAlpha() / 255.0f)));
                                                        }
                                                        canvas6 = canvas;
                                                        canvas6.drawText(String.format("%d%%", Integer.valueOf((int) Math.ceil(pollButton2.prevPercent + ((pollButton2.percent - pollButton2.prevPercent) * this.pollAnimationProgress)))), (-AndroidUtilities.dp(6.5f)) - ((int) Math.ceil(Theme.chat_instantViewPaint.measureText(r10))), AndroidUtilities.dp(f15), Theme.chat_instantViewPaint);
                                                        this.rect.set(0.0f, pollButton2.height + AndroidUtilities.dp(6.0f), (this.backgroundWidth - AndroidUtilities.dp(76.0f)) * (pollButton2.prevPercentProgress + ((pollButton2.percentProgress - pollButton2.prevPercentProgress) * this.pollAnimationProgress)), pollButton2.height + AndroidUtilities.dp(11.0f));
                                                        canvas6.drawRoundRect(this.rect, AndroidUtilities.dp(2.0f), AndroidUtilities.dp(2.0f), Theme.chat_docBackPaint);
                                                        if (!pollButton2.chosen || pollButton2.prevChosen || (this.lastPoll.quiz && pollButton2.correct && (this.pollVoted || this.pollClosed))) {
                                                            float dp19 = this.rect.left - AndroidUtilities.dp(13.5f);
                                                            float centerY = this.rect.centerY();
                                                            canvas6.drawCircle(dp19, centerY, AndroidUtilities.dp(7.0f), Theme.chat_docBackPaint);
                                                            Drawable drawable7 = (this.lastPoll.quiz || !pollButton2.chosen || pollButton2.correct) ? Theme.chat_pollCheckDrawable[this.currentMessageObject.isOutOwner() ? 1 : 0] : Theme.chat_pollCrossDrawable[this.currentMessageObject.isOutOwner() ? 1 : 0];
                                                            drawable7.setAlpha(min3);
                                                            BaseCell.setDrawableBounds(drawable7, dp19 - (drawable7.getIntrinsicWidth() / 2), centerY - (drawable7.getIntrinsicHeight() / 2));
                                                            drawable7.draw(canvas6);
                                                            if ((!this.pollVoted || this.pollClosed) && !this.animatePollAnswerAlpha) {
                                                                i18 = i40;
                                                                pollButton = pollButton2;
                                                                i19 = i15;
                                                                i20 = size;
                                                            } else {
                                                                if (isDrawSelectionBackground()) {
                                                                    paint2 = Theme.chat_replyLinePaint;
                                                                    i21 = this.currentMessageObject.isOutOwner() ? Theme.key_chat_outVoiceSeekbarSelected : Theme.key_chat_inVoiceSeekbarSelected;
                                                                } else {
                                                                    paint2 = Theme.chat_replyLinePaint;
                                                                    i21 = this.currentMessageObject.isOutOwner() ? Theme.key_chat_outVoiceSeekbar : Theme.key_chat_inVoiceSeekbar;
                                                                }
                                                                paint2.setColor(getThemedColor(i21));
                                                                if (this.animatePollAnswerAlpha) {
                                                                    Theme.chat_replyLinePaint.setAlpha((int) ((255 - min3) * (Theme.chat_replyLinePaint.getAlpha() / 255.0f)));
                                                                }
                                                                i18 = i40;
                                                                pollButton = pollButton2;
                                                                i19 = i15;
                                                                i20 = size;
                                                                canvas.drawLine(-AndroidUtilities.dp(2.0f), pollButton2.height + AndroidUtilities.dp(13.0f), this.backgroundWidth - AndroidUtilities.dp(58.0f), pollButton2.height + AndroidUtilities.dp(13.0f), Theme.chat_replyLinePaint);
                                                                if (this.pollVoteInProgress && i19 == this.pollVoteInProgressNum) {
                                                                    Theme.chat_instantViewRectPaint.setColor(getThemedColor(this.currentMessageObject.isOutOwner() ? Theme.key_chat_outAudioSeekbarFill : Theme.key_chat_inAudioSeekbarFill));
                                                                    if (this.animatePollAnswerAlpha) {
                                                                        Theme.chat_instantViewRectPaint.setAlpha((int) ((255 - min3) * (Theme.chat_instantViewRectPaint.getAlpha() / 255.0f)));
                                                                    }
                                                                    this.rect.set((-AndroidUtilities.dp(22.0f)) - AndroidUtilities.dp(8.5f), AndroidUtilities.dp(9.0f) - AndroidUtilities.dp(8.5f), (-AndroidUtilities.dp(23.0f)) + AndroidUtilities.dp(8.5f), AndroidUtilities.dp(9.0f) + AndroidUtilities.dp(8.5f));
                                                                    canvas.drawArc(this.rect, this.voteRadOffset, this.voteCurrentCircleLength, false, Theme.chat_instantViewRectPaint);
                                                                } else {
                                                                    if (this.currentMessageObject.isOutOwner()) {
                                                                        paint3 = Theme.chat_instantViewRectPaint;
                                                                        i22 = isDrawSelectionBackground() ? Theme.key_chat_outMenuSelected : Theme.key_chat_outMenu;
                                                                    } else {
                                                                        paint3 = Theme.chat_instantViewRectPaint;
                                                                        i22 = isDrawSelectionBackground() ? Theme.key_chat_inMenuSelected : Theme.key_chat_inMenu;
                                                                    }
                                                                    paint3.setColor(getThemedColor(i22));
                                                                    if (this.animatePollAnswerAlpha) {
                                                                        Theme.chat_instantViewRectPaint.setAlpha((int) ((255 - min3) * (Theme.chat_instantViewRectPaint.getAlpha() / 255.0f)));
                                                                    }
                                                                    canvas6.drawCircle(-AndroidUtilities.dp(22.0f), AndroidUtilities.dp(9.0f), AndroidUtilities.dp(8.5f), Theme.chat_instantViewRectPaint);
                                                                    if (this.lastPoll.multiple_choice) {
                                                                        int dp20 = AndroidUtilities.dp(8.5f);
                                                                        int i42 = Theme.key_checkboxCheck;
                                                                        if (this.currentMessageObject.isOutOwner() && getThemedColor(i42) == -1) {
                                                                            i42 = Theme.key_chat_outBubble;
                                                                        }
                                                                        this.pollCheckBox[i19].setColor(-1, this.currentMessageObject.isOutOwner() ? Theme.key_chat_outAudioSeekbarFill : Theme.key_chat_inAudioSeekbarFill, i42);
                                                                        int i43 = dp20 / 2;
                                                                        this.pollCheckBox[i19].setBounds((-AndroidUtilities.dp(22.0f)) - i43, AndroidUtilities.dp(9.0f) - i43, dp20, dp20);
                                                                        this.pollCheckBox[i19].draw(canvas6);
                                                                    }
                                                                }
                                                            }
                                                            canvas.restore();
                                                            if (i19 == i20 - 1) {
                                                                i39 = pollButton.y + this.namesOffset + pollButton.height;
                                                            }
                                                            i15 = i19 + 1;
                                                            size = i20;
                                                            canvas5 = canvas6;
                                                            i14 = i18;
                                                        }
                                                    } else {
                                                        paint = Theme.chat_docBackPaint;
                                                    }
                                                } else {
                                                    paint = Theme.chat_docBackPaint;
                                                }
                                                paint.setColor(getThemedColor(i17));
                                                if (this.animatePollAnswerAlpha) {
                                                }
                                                canvas6 = canvas;
                                                canvas6.drawText(String.format("%d%%", Integer.valueOf((int) Math.ceil(pollButton2.prevPercent + ((pollButton2.percent - pollButton2.prevPercent) * this.pollAnimationProgress)))), (-AndroidUtilities.dp(6.5f)) - ((int) Math.ceil(Theme.chat_instantViewPaint.measureText(r10))), AndroidUtilities.dp(f15), Theme.chat_instantViewPaint);
                                                this.rect.set(0.0f, pollButton2.height + AndroidUtilities.dp(6.0f), (this.backgroundWidth - AndroidUtilities.dp(76.0f)) * (pollButton2.prevPercentProgress + ((pollButton2.percentProgress - pollButton2.prevPercentProgress) * this.pollAnimationProgress)), pollButton2.height + AndroidUtilities.dp(11.0f));
                                                canvas6.drawRoundRect(this.rect, AndroidUtilities.dp(2.0f), AndroidUtilities.dp(2.0f), Theme.chat_docBackPaint);
                                                if (!pollButton2.chosen) {
                                                }
                                                float dp192 = this.rect.left - AndroidUtilities.dp(13.5f);
                                                float centerY2 = this.rect.centerY();
                                                canvas6.drawCircle(dp192, centerY2, AndroidUtilities.dp(7.0f), Theme.chat_docBackPaint);
                                                if (this.lastPoll.quiz) {
                                                }
                                                drawable7.setAlpha(min3);
                                                BaseCell.setDrawableBounds(drawable7, dp192 - (drawable7.getIntrinsicWidth() / 2), centerY2 - (drawable7.getIntrinsicHeight() / 2));
                                                drawable7.draw(canvas6);
                                                if (this.pollVoted) {
                                                }
                                                i18 = i40;
                                                pollButton = pollButton2;
                                                i19 = i15;
                                                i20 = size;
                                                canvas.restore();
                                                if (i19 == i20 - 1) {
                                                }
                                                i15 = i19 + 1;
                                                size = i20;
                                                canvas5 = canvas6;
                                                i14 = i18;
                                            } else {
                                                canvas6 = canvas;
                                            }
                                            if (this.pollVoted) {
                                            }
                                            i18 = i40;
                                            pollButton = pollButton2;
                                            i19 = i15;
                                            i20 = size;
                                            canvas.restore();
                                            if (i19 == i20 - 1) {
                                            }
                                            i15 = i19 + 1;
                                            size = i20;
                                            canvas5 = canvas6;
                                            i14 = i18;
                                        }
                                        canvas2 = canvas5;
                                        int i44 = i14;
                                        if (this.drawInstantView) {
                                            int currentBackgroundLeft = getCurrentBackgroundLeft() + AndroidUtilities.dp((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 2.0f : 8.0f);
                                            int dp21 = i39 + AndroidUtilities.dp(13.0f);
                                            if (this.currentMessageObject.isOutOwner()) {
                                                textPaint = Theme.chat_instantViewPaint;
                                                i16 = Theme.key_chat_outPreviewInstantText;
                                            } else {
                                                textPaint = Theme.chat_instantViewPaint;
                                                i16 = Theme.key_chat_inPreviewInstantText;
                                            }
                                            textPaint.setColor(getThemedColor(i16));
                                            this.instantButtonRect.set(currentBackgroundLeft, dp21, this.instantWidth + currentBackgroundLeft, AndroidUtilities.dp(44.0f) + dp21);
                                            Drawable drawable8 = this.selectorDrawable[0];
                                            if (drawable8 != null && this.selectorDrawableMaskType[0] == 2) {
                                                drawable8.setBounds(currentBackgroundLeft - AndroidUtilities.dp(this.pollInstantViewTouchesBottom ? 6.0f : 0.0f), dp21, this.instantWidth + currentBackgroundLeft, AndroidUtilities.dp(44.0f) + dp21);
                                                this.selectorDrawable[0].draw(canvas2);
                                            }
                                            if (this.instantViewLayout != null) {
                                                canvas.save();
                                                canvas2.translate(currentBackgroundLeft + this.instantTextX, dp21 + AndroidUtilities.dp(14.5f));
                                                staticLayout3 = this.instantViewLayout;
                                                staticLayout3.draw(canvas2);
                                                canvas.restore();
                                            }
                                            updatePollAnimations(j4);
                                            canvas.restore();
                                        } else {
                                            if (this.infoLayout != null) {
                                                TLRPC.Poll poll2 = this.lastPoll;
                                                if (poll2.public_voters || poll2.multiple_choice) {
                                                    i39 += AndroidUtilities.dp(6.0f);
                                                }
                                                canvas.save();
                                                canvas2.translate(i44 + this.infoX, i39 + AndroidUtilities.dp(22.0f));
                                                staticLayout3 = this.infoLayout;
                                                staticLayout3.draw(canvas2);
                                                canvas.restore();
                                            }
                                            updatePollAnimations(j4);
                                            canvas.restore();
                                        }
                                    }
                                }
                                i14 = dp16;
                                canvas5 = canvas4;
                                if (Build.VERSION.SDK_INT < 21) {
                                    i23 = this.selectorDrawableMaskType[0];
                                    if (i23 == 1) {
                                    }
                                    if (i23 == i24) {
                                    }
                                    this.selectorDrawable[0].draw(canvas5);
                                    if (this.selectorDrawableMaskType[0] == i24) {
                                    }
                                }
                                size = this.pollButtons.size();
                                i15 = 0;
                                int i392 = 0;
                                while (i15 < size) {
                                }
                                canvas2 = canvas5;
                                int i442 = i14;
                                if (this.drawInstantView) {
                                }
                            }
                        }
                        if (!this.pollClosed) {
                            poll = this.lastPoll;
                            if (poll.quiz) {
                                max = Math.max(0L, (this.lastPoll.close_date * 1000) - ConnectionsManager.getInstance(this.currentAccount).getCurrentTimeMillis());
                                if (this.closeTimeText != null) {
                                }
                                this.closeTimeText = AndroidUtilities.formatDurationNoHours((int) Math.ceil(max / 1000.0f), r3);
                                this.closeTimeWidth = (int) Math.ceil(Theme.chat_timePaint.measureText(r0));
                                this.lastPollCloseTime = max;
                                if (max <= 0) {
                                    if (this.currentMessageObject.pollLastCheckTime + 1000 < SystemClock.elapsedRealtime()) {
                                    }
                                    this.delegate.needReloadPolls();
                                }
                                int dp172 = (this.currentBackgroundDrawable.getBounds().right - this.closeTimeWidth) - AndroidUtilities.dp(!this.currentMessageObject.isOutOwner() ? 40.0f : 34.0f);
                                if (max <= 5000) {
                                }
                                if (!this.animatePollAnswer) {
                                }
                                canvas5 = canvas;
                                canvas5.drawText(this.closeTimeText, dp172, height + AndroidUtilities.dp(11.0f), Theme.chat_timePaint);
                                Theme.chat_pollTimerPaint.setColor(Theme.chat_timePaint.getColor());
                                dp = dp172 + this.closeTimeWidth + AndroidUtilities.dp(13.0f);
                                int dp182 = AndroidUtilities.dp(5.1f);
                                dp2 = height + AndroidUtilities.dp(6.0f);
                                if (max > 60000) {
                                }
                                if (max <= 60000) {
                                }
                                Theme.chat_pollTimerPaint.setAlpha((int) (this.timerTransitionProgress * 255.0f));
                                float f582 = dp;
                                canvas.drawLine(f582 - (AndroidUtilities.dp(2.1f) * this.timerTransitionProgress), dp2 - AndroidUtilities.dp(7.5f), f582 + (AndroidUtilities.dp(2.1f) * this.timerTransitionProgress), dp2 - AndroidUtilities.dp(7.5f), Theme.chat_pollTimerPaint);
                                float f592 = dp2;
                                canvas.drawLine(f582, f592 - (AndroidUtilities.dp(3.0f) * this.timerTransitionProgress), f582, f592, Theme.chat_pollTimerPaint);
                                if (max <= 60000) {
                                }
                                invalidate();
                                if (Build.VERSION.SDK_INT < 21) {
                                }
                                size = this.pollButtons.size();
                                i15 = 0;
                                int i3922 = 0;
                                while (i15 < size) {
                                }
                                canvas2 = canvas5;
                                int i4422 = i14;
                                if (this.drawInstantView) {
                                }
                            }
                            i14 = dp16;
                            canvas5 = canvas4;
                            if (Build.VERSION.SDK_INT < 21) {
                            }
                            size = this.pollButtons.size();
                            i15 = 0;
                            int i39222 = 0;
                            while (i15 < size) {
                            }
                            canvas2 = canvas5;
                            int i44222 = i14;
                            if (this.drawInstantView) {
                            }
                        }
                        poll = this.lastPoll;
                        if (poll.quiz) {
                        }
                        i14 = dp16;
                        canvas5 = canvas4;
                        if (Build.VERSION.SDK_INT < 21) {
                        }
                        size = this.pollButtons.size();
                        i15 = 0;
                        int i392222 = 0;
                        while (i15 < size) {
                        }
                        canvas2 = canvas5;
                        int i442222 = i14;
                        if (this.drawInstantView) {
                        }
                    } else {
                        canvas2 = canvas3;
                        str = "paintChatTimeBackground";
                        if (i31 == 12) {
                            drawContact(canvas);
                        }
                    }
                } else if (this.docTitleLayout != null) {
                    if (messageObject7.isOutOwner()) {
                        Theme.chat_locationTitlePaint.setColor(getThemedColor(Theme.key_chat_messageTextOut));
                        textPaint3 = Theme.chat_locationAddressPaint;
                        i27 = isDrawSelectionBackground() ? Theme.key_chat_outVenueInfoSelectedText : Theme.key_chat_outVenueInfoText;
                    } else {
                        Theme.chat_locationTitlePaint.setColor(getThemedColor(Theme.key_chat_messageTextIn));
                        textPaint3 = Theme.chat_locationAddressPaint;
                        i27 = isDrawSelectionBackground() ? Theme.key_chat_inVenueInfoSelectedText : Theme.key_chat_inVenueInfoText;
                    }
                    textPaint3.setColor(getThemedColor(i27));
                    if (MessageObject.getMedia(this.currentMessageObject.messageOwner) instanceof TLRPC.TL_messageMediaGeoLive) {
                        int imageY22 = (int) (this.photoImage.getImageY2() + AndroidUtilities.dp(30.0f));
                        if (this.locationExpired) {
                            TransitionParams transitionParams5 = this.transitionParams;
                            if (!transitionParams5.animateLocationIsExpired) {
                                transitionParams5.lastDrawLocationExpireText = null;
                                transitionParams5.lastDrawDocTitleLayout = null;
                                transitionParams5.lastDrawInfoLayout = null;
                                canvas3 = canvas;
                                currentAlpha = !this.photoImage.isCrossfadingWithOldImage() ? 1.0f : this.photoImage.getCurrentAlpha();
                                if (currentAlpha > 0.0f && (this.photoImage.hasNotThumb() || this.photoImage.isCrossfadingWithOldImage())) {
                                    int imageX6 = (int) ((this.photoImage.getImageX() + (this.photoImage.getImageWidth() / 2.0f)) - AndroidUtilities.dp(31.0f));
                                    int imageY4 = (int) (((this.photoImage.getImageY() + (this.photoImage.getImageHeight() / 2.0f)) - AndroidUtilities.dp(38.0f)) - (AndroidUtilities.dp(16.0f) * (1.0f - CubicBezierInterpolator.EASE_OUT_BACK.getInterpolation(currentAlpha))));
                                    Drawable avatarLiveLocation = this.sharedResources.getAvatarLiveLocation();
                                    BaseCell.setDrawableBounds(avatarLiveLocation, imageX6, imageY4);
                                    float f63 = currentAlpha * 5.0f;
                                    avatarLiveLocation.setAlpha((int) (Math.min(1.0f, f63) * 255.0f));
                                    avatarLiveLocation.draw(canvas3);
                                    this.locationImageReceiver.setImageCoords(imageX6 + AndroidUtilities.dp(5.0f), imageY4 + AndroidUtilities.dp(5.0f), AndroidUtilities.dp(52.0f), AndroidUtilities.dp(52.0f));
                                    this.locationImageReceiver.setAlpha(Math.min(1.0f, f63));
                                    this.locationImageReceiver.draw(canvas3);
                                }
                            }
                        }
                        this.forceNotDrawTime = true;
                        StaticLayout staticLayout9 = this.docTitleLayout;
                        StaticLayout staticLayout10 = this.infoLayout;
                        TransitionParams transitionParams6 = this.transitionParams;
                        if (transitionParams6.animateLocationIsExpired) {
                            float f64 = transitionParams6.lastDrawLocationExpireProgress;
                            String str4 = transitionParams6.lastDrawLocationExpireText;
                            StaticLayout staticLayout11 = transitionParams6.lastDrawDocTitleLayout;
                            StaticLayout staticLayout12 = transitionParams6.lastDrawInfoLayout;
                            abs = f64;
                            f21 = 1.0f - transitionParams6.animateChangeProgress;
                            staticLayout6 = staticLayout12;
                            z6 = false;
                            staticLayout5 = staticLayout11;
                            formatLocationLeftTime = str4;
                        } else {
                            if (MessageObject.getMedia(this.currentMessageObject.messageOwner).period == Integer.MAX_VALUE) {
                                staticLayout5 = staticLayout9;
                                formatLocationLeftTime = "";
                                abs = 1.0f;
                                f21 = 1.0f;
                                z6 = true;
                            } else {
                                formatLocationLeftTime = LocaleController.formatLocationLeftTime(Math.abs(MessageObject.getMedia(this.currentMessageObject.messageOwner).period - (ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - this.currentMessageObject.messageOwner.date)));
                                staticLayout5 = staticLayout9;
                                abs = 1.0f - (Math.abs(ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - this.currentMessageObject.messageOwner.date) / MessageObject.getMedia(this.currentMessageObject.messageOwner).period);
                                f21 = 1.0f;
                                z6 = false;
                            }
                            staticLayout6 = staticLayout10;
                        }
                        this.rect.set(this.photoImage.getImageX2() - AndroidUtilities.dp(43.0f), imageY22 - AndroidUtilities.dp(15.0f), this.photoImage.getImageX2() - AndroidUtilities.dp(13.0f), AndroidUtilities.dp(15.0f) + imageY22);
                        if (this.currentMessageObject.isOutOwner()) {
                            paint4 = Theme.chat_radialProgress2Paint;
                            i28 = Theme.key_chat_outInstant;
                        } else {
                            paint4 = Theme.chat_radialProgress2Paint;
                            i28 = Theme.key_chat_inInstant;
                        }
                        paint4.setColor(getThemedColor(i28));
                        Theme.chat_livePaint.setColor(getThemedColor(i28));
                        int alpha8 = Theme.chat_locationTitlePaint.getAlpha();
                        int alpha9 = Theme.chat_locationAddressPaint.getAlpha();
                        int alpha10 = Theme.chat_livePaint.getAlpha();
                        if (f21 != 1.0f) {
                            Theme.chat_locationTitlePaint.setAlpha((int) (alpha8 * f21));
                            Theme.chat_locationAddressPaint.setAlpha((int) (alpha9 * f21));
                            Theme.chat_livePaint.setAlpha((int) (alpha10 * f21));
                            canvas.save();
                            canvas7 = canvas;
                            canvas7.translate(0.0f, (-AndroidUtilities.dp(50.0f)) * this.transitionParams.animateChangeProgress);
                        } else {
                            canvas7 = canvas;
                        }
                        Theme.chat_radialProgress2Paint.setAlpha((int) (f21 * 50.0f));
                        canvas7.drawCircle(this.rect.centerX(), this.rect.centerY(), AndroidUtilities.dp(15.0f), Theme.chat_radialProgress2Paint);
                        Theme.chat_radialProgress2Paint.setAlpha((int) (f21 * 255.0f));
                        canvas3 = canvas7;
                        StaticLayout staticLayout13 = staticLayout6;
                        String str5 = formatLocationLeftTime;
                        StaticLayout staticLayout14 = staticLayout5;
                        canvas.drawArc(this.rect, -90.0f, abs * (-360.0f), false, Theme.chat_radialProgress2Paint);
                        if (z6) {
                            if (this.foreverDrawable == null) {
                                this.foreverDrawable = getContext().getResources().getDrawable(R.drawable.filled_location_forever).mutate();
                            }
                            if (Theme.chat_livePaint.getColor() != this.foreverDrawableColor) {
                                Drawable drawable9 = this.foreverDrawable;
                                int color = Theme.chat_livePaint.getColor();
                                this.foreverDrawableColor = color;
                                drawable9.setColorFilter(new PorterDuffColorFilter(color, PorterDuff.Mode.SRC_IN));
                            }
                            this.foreverDrawable.setBounds(((int) this.rect.centerX()) - (this.foreverDrawable.getIntrinsicWidth() / 2), ((int) this.rect.centerY()) - (this.foreverDrawable.getIntrinsicHeight() / 2), ((int) this.rect.centerX()) + (this.foreverDrawable.getIntrinsicWidth() / 2), ((int) this.rect.centerY()) + (this.foreverDrawable.getIntrinsicHeight() / 2));
                            this.foreverDrawable.draw(canvas3);
                        } else {
                            float measureText = Theme.chat_livePaint.measureText(str5);
                            int length2 = str5.length();
                            float f65 = length2 > 4 ? 0.75f : length2 > 3 ? 0.85f : 1.0f;
                            canvas.save();
                            canvas3.scale(f65, f65, this.rect.centerX(), this.rect.centerY());
                            canvas3.drawText(str5, this.rect.centerX() - (measureText / 2.0f), imageY22 + AndroidUtilities.dp(4.0f), Theme.chat_livePaint);
                            canvas.restore();
                        }
                        if (staticLayout14 != null && staticLayout13 != null) {
                            canvas.save();
                            canvas3.translate(this.photoImage.getImageX() + AndroidUtilities.dp(10.0f), this.photoImage.getImageY2() + AndroidUtilities.dp(10.0f));
                            staticLayout14.draw(canvas3);
                            canvas3.translate(0.0f, AndroidUtilities.dp(23.0f));
                            staticLayout13.draw(canvas3);
                            canvas.restore();
                        }
                        if (f21 != 1.0f) {
                            Theme.chat_locationTitlePaint.setAlpha(alpha8);
                            Theme.chat_locationAddressPaint.setAlpha(alpha9);
                            Theme.chat_livePaint.setAlpha(alpha10);
                            canvas.restore();
                        }
                        TransitionParams transitionParams7 = this.transitionParams;
                        transitionParams7.lastDrawLocationExpireProgress = abs;
                        transitionParams7.lastDrawLocationExpireText = str5;
                        transitionParams7.lastDrawDocTitleLayout = staticLayout14;
                        transitionParams7.lastDrawInfoLayout = staticLayout13;
                        if (!this.photoImage.isCrossfadingWithOldImage()) {
                        }
                        if (currentAlpha > 0.0f) {
                            int imageX62 = (int) ((this.photoImage.getImageX() + (this.photoImage.getImageWidth() / 2.0f)) - AndroidUtilities.dp(31.0f));
                            int imageY42 = (int) (((this.photoImage.getImageY() + (this.photoImage.getImageHeight() / 2.0f)) - AndroidUtilities.dp(38.0f)) - (AndroidUtilities.dp(16.0f) * (1.0f - CubicBezierInterpolator.EASE_OUT_BACK.getInterpolation(currentAlpha))));
                            Drawable avatarLiveLocation2 = this.sharedResources.getAvatarLiveLocation();
                            BaseCell.setDrawableBounds(avatarLiveLocation2, imageX62, imageY42);
                            float f632 = currentAlpha * 5.0f;
                            avatarLiveLocation2.setAlpha((int) (Math.min(1.0f, f632) * 255.0f));
                            avatarLiveLocation2.draw(canvas3);
                            this.locationImageReceiver.setImageCoords(imageX62 + AndroidUtilities.dp(5.0f), imageY42 + AndroidUtilities.dp(5.0f), AndroidUtilities.dp(52.0f), AndroidUtilities.dp(52.0f));
                            this.locationImageReceiver.setAlpha(Math.min(1.0f, f632));
                            this.locationImageReceiver.draw(canvas3);
                        }
                    } else {
                        canvas3 = canvas;
                        canvas.save();
                        canvas3.translate(this.photoImage.getImageX() + AndroidUtilities.dp(6.0f), this.photoImage.getImageY2() + AndroidUtilities.dp(8.0f));
                        this.docTitleLayout.draw(canvas3);
                        if (this.infoLayout != null) {
                            canvas3.translate(0.0f, AndroidUtilities.dp(21.0f));
                            this.infoLayout.draw(canvas3);
                        }
                        canvas.restore();
                    }
                }
                canvas2 = canvas3;
                str2 = "paintChatTimeBackground";
                f6 = 14.0f;
                if (this.drawImageButton) {
                }
                messageDrawable = null;
                if (this.buttonState == -1) {
                }
                if (z7) {
                }
                i29 = -1;
                animatedFloat = this.timerParticlesAlpha;
                if (animatedFloat != null) {
                }
                if (f22 > f23) {
                }
                if (!this.drawVideoImageButton) {
                }
                messageObject3 = this.currentMessageObject;
                if (!messageObject3.isRepostPreview) {
                }
                if (this.drawMediaCheckBox) {
                }
                if (this.documentAttachType == 7) {
                }
                if (this.drawPhotoImage) {
                }
            }
            str2 = str;
            f6 = 14.0f;
            if (this.drawImageButton) {
            }
            messageDrawable = null;
            if (this.buttonState == -1) {
            }
            if (z7) {
            }
            i29 = -1;
            animatedFloat = this.timerParticlesAlpha;
            if (animatedFloat != null) {
            }
            if (f22 > f23) {
            }
            if (!this.drawVideoImageButton) {
            }
            messageObject3 = this.currentMessageObject;
            if (!messageObject3.isRepostPreview) {
            }
            if (this.drawMediaCheckBox) {
            }
            if (this.documentAttachType == 7) {
            }
            if (this.drawPhotoImage) {
            }
        }
        canvas2 = canvas;
        str2 = "paintChatTimeBackground";
        f6 = 14.0f;
        if (this.drawImageButton) {
        }
        messageDrawable = null;
        if (this.buttonState == -1) {
        }
        if (z7) {
        }
        i29 = -1;
        animatedFloat = this.timerParticlesAlpha;
        if (animatedFloat != null) {
        }
        if (f22 > f23) {
        }
        if (!this.drawVideoImageButton) {
        }
        messageObject3 = this.currentMessageObject;
        if (!messageObject3.isRepostPreview) {
        }
        if (this.drawMediaCheckBox) {
        }
        if (this.documentAttachType == 7) {
        }
        if (this.drawPhotoImage) {
        }
    }

    protected void drawPhotoBlurRect(Canvas canvas, RectF rectF) {
        this.rectPath.rewind();
        this.rectPath.addRoundRect(rectF, rectF.width() / 2.0f, rectF.height() / 2.0f, Path.Direction.CW);
        canvas.save();
        canvas.clipPath(this.rectPath);
        float alpha = this.photoImage.getAlpha();
        this.photoImage.setAlpha((this.currentMessageObject.isRoundOnce() ? 1.0f : 0.5f) * alpha);
        this.photoImage.draw(canvas);
        this.photoImage.setAlpha(alpha);
        canvas.restore();
        Paint themedPaint = getThemedPaint("paintChatTimeBackground");
        int alpha2 = themedPaint.getAlpha();
        themedPaint.setAlpha((int) (alpha2 * this.controlsAlpha * 0.4f));
        canvas.drawRoundRect(rectF, rectF.width() / 2.0f, rectF.height() / 2.0f, themedPaint);
        themedPaint.setAlpha(alpha2);
    }

    protected boolean drawPhotoImage(Canvas canvas) {
        return this.photoImage.draw(canvas);
    }

    public boolean drawPinnedBottom() {
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages == null || !groupedMessages.isDocuments) {
            return this.pinnedBottom;
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition == null || (groupedMessagePosition.flags & 8) == 0) {
            return true;
        }
        return this.pinnedBottom;
    }

    public boolean drawPinnedTop() {
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages == null || !groupedMessages.isDocuments) {
            return this.pinnedTop;
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition == null || (groupedMessagePosition.flags & 4) == 0) {
            return true;
        }
        return this.pinnedTop;
    }

    public void drawProgressLoadingLink(Canvas canvas, int i) {
        updateProgressLoadingLink();
        ArrayList arrayList = this.progressLoadingLinkDrawables;
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        MessageObject messageObject = this.currentMessageObject;
        int themedColor = getThemedColor((messageObject == null || !messageObject.isOutOwner()) ? Theme.key_chat_linkSelectBackground : Theme.key_chat_outLinkSelectBackground);
        int i2 = 0;
        while (i2 < this.progressLoadingLinkDrawables.size()) {
            LoadingDrawableLocation loadingDrawableLocation = (LoadingDrawableLocation) this.progressLoadingLinkDrawables.get(i2);
            if (loadingDrawableLocation.blockNum == i) {
                LoadingDrawable loadingDrawable = loadingDrawableLocation.drawable;
                loadingDrawable.setColors(Theme.multAlpha(themedColor, 0.85f), Theme.multAlpha(themedColor, 2.0f), Theme.multAlpha(themedColor, 3.5f), Theme.multAlpha(themedColor, 6.0f));
                loadingDrawable.draw(canvas);
                invalidate();
                if (loadingDrawable.isDisappeared()) {
                    this.progressLoadingLinkDrawables.remove(i2);
                    i2--;
                }
            }
            i2++;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:20:0x009d, code lost:
    
        if (r3 < 1.0f) goto L29;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    protected void drawRadialProgress(Canvas canvas) {
        MessageObject messageObject;
        boolean isRoundOnce = this.currentMessageObject.isRoundOnce();
        if (isRoundOnce) {
            RectF rectF = AndroidUtilities.rectTmp;
            rectF.set(this.radialProgress.getProgressRect());
            rectF.inset(-AndroidUtilities.dp(15.0f), -AndroidUtilities.dp(15.0f));
            canvas.saveLayerAlpha(rectF, (int) (this.radialProgressAlpha * 255.0f), 31);
        } else {
            canvas.save();
            int i = this.currentMessageObject.type;
            if (this.drawPhotoImage && (i == 3 || i == 1 || i == 8)) {
                canvas.clipRect(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
            }
        }
        if (this.currentMessageObject.needDrawBluredPreview()) {
            drawPhotoBlurRect(canvas, this.radialProgress.getProgressRect());
        }
        this.radialProgress.iconScale = 1.0f;
        if (this.drawPhotoImage && (messageObject = this.currentMessageObject) != null && messageObject.hasMediaSpoilers() && this.currentMessageObject.isSensitive()) {
            if (this.currentMessageObject.isMediaSpoilersRevealed) {
                float f = this.mediaSpoilerRevealProgress;
                if (f != 0.0f) {
                }
            }
            this.radialProgress.iconScale *= this.mediaSpoilerRevealProgress;
        }
        this.radialProgress.draw(canvas);
        if (isRoundOnce) {
            canvas.save();
            drawPhotoBlurRect(canvas, getRadialProgress().getProgressRect());
            getRadialProgress().draw(canvas);
            RectF progressRect = getRadialProgress().getProgressRect();
            float centerX = progressRect.centerX() + AndroidUtilities.dp(18.0f);
            float centerY = progressRect.centerY() + AndroidUtilities.dp(18.0f);
            float dp = AndroidUtilities.dp(10.0f);
            float dp2 = AndroidUtilities.dp(1.33f) + dp;
            if (this.clipPaint == null) {
                Paint paint = new Paint(1);
                this.clipPaint = paint;
                paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
            }
            canvas.drawCircle(centerX, centerY, dp2, this.clipPaint);
            RectF rectF2 = AndroidUtilities.rectTmp;
            rectF2.set(centerX - dp, centerY - dp, centerX + dp, dp + centerY);
            drawPhotoBlurRect(canvas, rectF2);
            if (this.oncePeriod == null) {
                CaptionContainerView.PeriodDrawable periodDrawable = new CaptionContainerView.PeriodDrawable(3);
                this.oncePeriod = periodDrawable;
                periodDrawable.updateColors(-1, 0, 0);
                CaptionContainerView.PeriodDrawable periodDrawable2 = this.oncePeriod;
                periodDrawable2.diameterDp = 14.0f;
                periodDrawable2.setTextSize(10.0f);
                this.oncePeriod.strokePaint.setStrokeWidth(AndroidUtilities.dpf2(1.5f));
                this.oncePeriod.setValue(1, false, false);
                this.oncePeriod.textOffsetX = -AndroidUtilities.dpf2(0.33f);
                this.oncePeriod.textOffsetY = AndroidUtilities.dpf2(0.33f);
            }
            CaptionContainerView.PeriodDrawable periodDrawable3 = this.oncePeriod;
            periodDrawable3.diameterDp = 14.0f;
            periodDrawable3.setTextSize(10.0f);
            this.oncePeriod.setClear(false);
            this.oncePeriod.setCenterXY(centerX, centerY);
            this.oncePeriod.draw(canvas, 1.0f);
            canvas.restore();
        }
        canvas.restore();
    }

    public void drawReactionsLayout(Canvas canvas, float f, Integer num) {
        if (this.isRoundVideo) {
            this.reactionsLayoutInBubble.drawServiceShaderBackground = 1.0f - getVideoTranscriptionProgress();
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || !messageObject.shouldDrawReactions()) {
            return;
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        boolean z = true;
        if (groupedMessagePosition != null) {
            int i = groupedMessagePosition.flags;
            if ((i & 8) == 0 || (i & 1) == 0) {
                return;
            }
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        if (reactionsLayoutInBubble.isSmall) {
            return;
        }
        if (reactionsLayoutInBubble.drawServiceShaderBackground > 0.0f) {
            applyServiceShaderMatrix();
        }
        if (getAlpha() != 1.0f) {
            RectF rectF = AndroidUtilities.rectTmp;
            rectF.set(0.0f, 0.0f, getWidth(), getHeight());
            canvas.saveLayerAlpha(rectF, (int) (getAlpha() * 255.0f), 31);
        } else {
            z = false;
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
        if (reactionsLayoutInBubble2.drawServiceShaderBackground > 0.0f || !this.transitionParams.animateBackgroundBoundsInner || this.currentPosition != null || this.isRoundVideo) {
            reactionsLayoutInBubble2.setScrimProgress(0.0f, false);
            ReactionsLayoutInBubble reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
            TransitionParams transitionParams = this.transitionParams;
            reactionsLayoutInBubble3.draw(canvas, transitionParams.animateChange ? transitionParams.animateChangeProgress : 1.0f, num);
        } else {
            canvas.save();
            canvas.clipRect(0.0f, 0.0f, getMeasuredWidth(), getBackgroundDrawableBottom() + this.transitionParams.deltaBottom);
            this.reactionsLayoutInBubble.setScrimProgress(0.0f, false);
            ReactionsLayoutInBubble reactionsLayoutInBubble4 = this.reactionsLayoutInBubble;
            TransitionParams transitionParams2 = this.transitionParams;
            reactionsLayoutInBubble4.draw(canvas, transitionParams2.animateChange ? transitionParams2.animateChangeProgress : 1.0f, num);
            canvas.restore();
        }
        if (z) {
            canvas.restore();
        }
    }

    public void drawReactionsLayoutOverlay(Canvas canvas, float f) {
        if (this.isRoundVideo) {
            this.reactionsLayoutInBubble.drawServiceShaderBackground = 1.0f - getVideoTranscriptionProgress();
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || !messageObject.shouldDrawReactions()) {
            return;
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        boolean z = true;
        if (groupedMessagePosition != null) {
            int i = groupedMessagePosition.flags;
            if ((i & 8) == 0 || (i & 1) == 0) {
                return;
            }
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        if (reactionsLayoutInBubble.isSmall) {
            return;
        }
        if (reactionsLayoutInBubble.drawServiceShaderBackground > 0.0f) {
            applyServiceShaderMatrix();
        }
        if (getAlpha() != 1.0f) {
            RectF rectF = AndroidUtilities.rectTmp;
            rectF.set(0.0f, 0.0f, getWidth(), getHeight());
            canvas.saveLayerAlpha(rectF, (int) (getAlpha() * 255.0f), 31);
        } else {
            z = false;
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble2 = this.reactionsLayoutInBubble;
        if (reactionsLayoutInBubble2.drawServiceShaderBackground > 0.0f || !this.transitionParams.animateBackgroundBoundsInner || this.currentPosition != null || this.isRoundVideo) {
            TransitionParams transitionParams = this.transitionParams;
            reactionsLayoutInBubble2.drawOverlay(canvas, transitionParams.animateChange ? transitionParams.animateChangeProgress : 1.0f);
        } else {
            canvas.save();
            canvas.clipRect(0.0f, 0.0f, getMeasuredWidth(), getBackgroundDrawableBottom() + this.transitionParams.deltaBottom);
            ReactionsLayoutInBubble reactionsLayoutInBubble3 = this.reactionsLayoutInBubble;
            TransitionParams transitionParams2 = this.transitionParams;
            reactionsLayoutInBubble3.drawOverlay(canvas, transitionParams2.animateChange ? transitionParams2.animateChangeProgress : 1.0f);
            canvas.restore();
        }
        if (z) {
            canvas.restore();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:21:0x0065  */
    /* JADX WARN: Removed duplicated region for block: B:27:0x008c  */
    /* JADX WARN: Removed duplicated region for block: B:31:0x009f  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00c4  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0121  */
    /* JADX WARN: Removed duplicated region for block: B:48:0x0155  */
    /* JADX WARN: Removed duplicated region for block: B:53:0x01a1  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x01ac  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0279  */
    /* JADX WARN: Removed duplicated region for block: B:68:0x0293  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x02e9  */
    /* JADX WARN: Removed duplicated region for block: B:77:0x02d5  */
    /* JADX WARN: Removed duplicated region for block: B:79:0x0270  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x01a6  */
    /* JADX WARN: Removed duplicated region for block: B:83:0x013e  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x0145  */
    /* JADX WARN: Removed duplicated region for block: B:86:0x0096  */
    /* JADX WARN: Removed duplicated region for block: B:89:0x0077  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawRoundProgress(Canvas canvas) {
        float interpolation;
        TransitionParams transitionParams;
        int i;
        VideoForwardDrawable videoForwardDrawable;
        int i2;
        float f;
        int i3;
        float dp = this.isPlayingRound ? AndroidUtilities.dp(4.0f) : 0.0f;
        boolean z = false;
        boolean z2 = MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && MediaController.getInstance().isMessagePaused();
        if (z2 && this.roundSeekbarTouched == 1) {
            z = true;
        }
        if (z2) {
            float f2 = this.roundToPauseProgress;
            if (f2 != 1.0f) {
                float f3 = f2 + 0.07272727f;
                this.roundToPauseProgress = f3;
                if (f3 > 1.0f) {
                    this.roundToPauseProgress = 1.0f;
                    if (z) {
                        float f4 = this.roundToPauseProgress2;
                        if (f4 != 1.0f) {
                            float f5 = f4 + 0.10666667f;
                            this.roundToPauseProgress2 = f5;
                            if (f5 > 1.0f) {
                                this.roundToPauseProgress2 = 1.0f;
                                interpolation = z2 ? AndroidUtilities.overshootInterpolator.getInterpolation(this.roundToPauseProgress) : this.roundToPauseProgress;
                                transitionParams = this.transitionParams;
                                if (transitionParams.animatePlayingRound) {
                                    dp = (this.isPlayingRound ? transitionParams.animateChangeProgress : 1.0f - transitionParams.animateChangeProgress) * AndroidUtilities.dp(4.0f);
                                }
                                float dp2 = dp + (AndroidUtilities.dp(16.0f) * interpolation);
                                if (this.roundToPauseProgress > 0.0f) {
                                    Theme.getRadialSeekbarShadowDrawable().draw(canvas, this.photoImage.getCenterX(), this.photoImage.getCenterY(), this.photoImage.getImageWidth() / 2.0f, this.roundToPauseProgress);
                                }
                                this.rect.set(this.photoImage.getImageX() + AndroidUtilities.dpf2(1.5f) + dp2, this.photoImage.getImageY() + AndroidUtilities.dpf2(1.5f) + dp2, (this.photoImage.getImageX2() - AndroidUtilities.dpf2(1.5f)) - dp2, (this.photoImage.getImageY2() - AndroidUtilities.dpf2(1.5f)) - dp2);
                                if (this.roundProgressAlpha == 1.0f || (!this.hasLinkPreview && getVideoTranscriptionProgress() > 0.0f)) {
                                    int alpha = Theme.chat_radialProgressPaint.getAlpha();
                                    Theme.chat_radialProgressPaint.setAlpha((int) (this.roundProgressAlpha * (!this.hasLinkPreview ? 1.0f - getVideoTranscriptionProgress() : 1.0f) * alpha));
                                    i = alpha;
                                } else {
                                    i = -1;
                                }
                                videoForwardDrawable = this.videoForwardDrawable;
                                if (videoForwardDrawable != null && videoForwardDrawable.isAnimating()) {
                                    this.videoForwardDrawable.setBounds((int) this.photoImage.getImageX(), (int) this.photoImage.getImageY(), (int) (this.photoImage.getImageX() + this.photoImage.getImageWidth()), (int) (this.photoImage.getImageY() + this.photoImage.getImageHeight()));
                                    this.videoForwardDrawable.draw(canvas);
                                }
                                int alpha2 = Theme.chat_radialProgressPaint.getAlpha();
                                float strokeWidth = Theme.chat_radialProgressPaint.getStrokeWidth();
                                float f6 = this.roundProgressAlpha == 1.0f ? this.currentMessageObject.audioProgress : this.lastDrawingAudioProgress;
                                if (interpolation > 0.0f) {
                                    float width = this.rect.width() / 2.0f;
                                    Theme.chat_radialProgressPaint.setStrokeWidth((0.5f * strokeWidth * this.roundToPauseProgress) + strokeWidth);
                                    Theme.chat_radialProgressPaint.setAlpha((int) (alpha2 * this.roundToPauseProgress * 0.3f));
                                    canvas.drawCircle(this.rect.centerX(), this.rect.centerY(), width, Theme.chat_radialProgressPaint);
                                    Theme.chat_radialProgressPaint.setAlpha(alpha2);
                                    double centerX = this.rect.centerX();
                                    double d = ((-360.0f) * f6) + 180.0f;
                                    double sin = Math.sin(Math.toRadians(d));
                                    i2 = i;
                                    double d2 = width;
                                    Double.isNaN(d2);
                                    Double.isNaN(centerX);
                                    this.seekbarRoundX = (float) (centerX + (sin * d2));
                                    double centerY = this.rect.centerY();
                                    double cos = Math.cos(Math.toRadians(d));
                                    Double.isNaN(d2);
                                    Double.isNaN(centerY);
                                    this.seekbarRoundY = (float) (centerY + (cos * d2));
                                    Theme.chat_radialProgressPausedSeekbarPaint.setColor(-1);
                                    Theme.chat_radialProgressPausedSeekbarPaint.setAlpha((int) (Math.min(1.0f, interpolation) * 255.0f * (!this.hasLinkPreview ? 1.0f - getVideoTranscriptionProgress() : 1.0f)));
                                    canvas.drawCircle(this.seekbarRoundX, this.seekbarRoundY, AndroidUtilities.dp(3.0f) + (AndroidUtilities.dp(5.0f) * interpolation) + (AndroidUtilities.dp(3.0f) * this.roundToPauseProgress2), Theme.chat_radialProgressPausedSeekbarPaint);
                                } else {
                                    i2 = i;
                                }
                                f = this.roundSeekbarOutAlpha;
                                if (f != 0.0f) {
                                    float f7 = f - 0.10666667f;
                                    this.roundSeekbarOutAlpha = f7;
                                    if (f7 < 0.0f) {
                                        this.roundSeekbarOutAlpha = 0.0f;
                                    } else {
                                        invalidate();
                                    }
                                }
                                int i4 = i2;
                                if (this.roundSeekbarOutAlpha != 0.0f) {
                                    i3 = i4 == -1 ? Theme.chat_radialProgressPaint.getAlpha() : i4;
                                    float f8 = alpha2;
                                    Theme.chat_radialProgressPaint.setAlpha((int) ((1.0f - this.roundSeekbarOutAlpha) * f8));
                                    canvas.drawArc(this.rect, -90.0f, f6 * 360.0f, false, Theme.chat_radialProgressPaint);
                                    Theme.chat_radialProgressPaint.setAlpha((int) (f8 * this.roundSeekbarOutAlpha));
                                    canvas.drawArc(this.rect, -90.0f, this.roundSeekbarOutProgress * 360.0f, false, Theme.chat_radialProgressPaint);
                                } else {
                                    canvas.drawArc(this.rect, -90.0f, f6 * 360.0f, false, Theme.chat_radialProgressPaint);
                                    i3 = i4;
                                }
                                if (i3 != -1) {
                                    Theme.chat_radialProgressPaint.setAlpha(i3);
                                }
                                Theme.chat_radialProgressPaint.setStrokeWidth(strokeWidth);
                            }
                            invalidate();
                            interpolation = z2 ? AndroidUtilities.overshootInterpolator.getInterpolation(this.roundToPauseProgress) : this.roundToPauseProgress;
                            transitionParams = this.transitionParams;
                            if (transitionParams.animatePlayingRound) {
                            }
                            float dp22 = dp + (AndroidUtilities.dp(16.0f) * interpolation);
                            if (this.roundToPauseProgress > 0.0f) {
                            }
                            this.rect.set(this.photoImage.getImageX() + AndroidUtilities.dpf2(1.5f) + dp22, this.photoImage.getImageY() + AndroidUtilities.dpf2(1.5f) + dp22, (this.photoImage.getImageX2() - AndroidUtilities.dpf2(1.5f)) - dp22, (this.photoImage.getImageY2() - AndroidUtilities.dpf2(1.5f)) - dp22);
                            if (this.roundProgressAlpha == 1.0f) {
                            }
                            int alpha3 = Theme.chat_radialProgressPaint.getAlpha();
                            Theme.chat_radialProgressPaint.setAlpha((int) (this.roundProgressAlpha * (!this.hasLinkPreview ? 1.0f - getVideoTranscriptionProgress() : 1.0f) * alpha3));
                            i = alpha3;
                            videoForwardDrawable = this.videoForwardDrawable;
                            if (videoForwardDrawable != null) {
                                this.videoForwardDrawable.setBounds((int) this.photoImage.getImageX(), (int) this.photoImage.getImageY(), (int) (this.photoImage.getImageX() + this.photoImage.getImageWidth()), (int) (this.photoImage.getImageY() + this.photoImage.getImageHeight()));
                                this.videoForwardDrawable.draw(canvas);
                            }
                            int alpha22 = Theme.chat_radialProgressPaint.getAlpha();
                            float strokeWidth2 = Theme.chat_radialProgressPaint.getStrokeWidth();
                            if (this.roundProgressAlpha == 1.0f) {
                            }
                            if (interpolation > 0.0f) {
                            }
                            f = this.roundSeekbarOutAlpha;
                            if (f != 0.0f) {
                            }
                            int i42 = i2;
                            if (this.roundSeekbarOutAlpha != 0.0f) {
                            }
                            if (i3 != -1) {
                            }
                            Theme.chat_radialProgressPaint.setStrokeWidth(strokeWidth2);
                        }
                    }
                    if (!z) {
                        float f9 = this.roundToPauseProgress2;
                        if (f9 != 0.0f) {
                            float f10 = f9 - 0.10666667f;
                            this.roundToPauseProgress2 = f10;
                            if (f10 < 0.0f) {
                                this.roundToPauseProgress2 = 0.0f;
                            }
                            invalidate();
                        }
                    }
                    interpolation = z2 ? AndroidUtilities.overshootInterpolator.getInterpolation(this.roundToPauseProgress) : this.roundToPauseProgress;
                    transitionParams = this.transitionParams;
                    if (transitionParams.animatePlayingRound) {
                    }
                    float dp222 = dp + (AndroidUtilities.dp(16.0f) * interpolation);
                    if (this.roundToPauseProgress > 0.0f) {
                    }
                    this.rect.set(this.photoImage.getImageX() + AndroidUtilities.dpf2(1.5f) + dp222, this.photoImage.getImageY() + AndroidUtilities.dpf2(1.5f) + dp222, (this.photoImage.getImageX2() - AndroidUtilities.dpf2(1.5f)) - dp222, (this.photoImage.getImageY2() - AndroidUtilities.dpf2(1.5f)) - dp222);
                    if (this.roundProgressAlpha == 1.0f) {
                    }
                    int alpha32 = Theme.chat_radialProgressPaint.getAlpha();
                    Theme.chat_radialProgressPaint.setAlpha((int) (this.roundProgressAlpha * (!this.hasLinkPreview ? 1.0f - getVideoTranscriptionProgress() : 1.0f) * alpha32));
                    i = alpha32;
                    videoForwardDrawable = this.videoForwardDrawable;
                    if (videoForwardDrawable != null) {
                    }
                    int alpha222 = Theme.chat_radialProgressPaint.getAlpha();
                    float strokeWidth22 = Theme.chat_radialProgressPaint.getStrokeWidth();
                    if (this.roundProgressAlpha == 1.0f) {
                    }
                    if (interpolation > 0.0f) {
                    }
                    f = this.roundSeekbarOutAlpha;
                    if (f != 0.0f) {
                    }
                    int i422 = i2;
                    if (this.roundSeekbarOutAlpha != 0.0f) {
                    }
                    if (i3 != -1) {
                    }
                    Theme.chat_radialProgressPaint.setStrokeWidth(strokeWidth22);
                }
                invalidate();
                if (z) {
                }
                if (!z) {
                }
                interpolation = z2 ? AndroidUtilities.overshootInterpolator.getInterpolation(this.roundToPauseProgress) : this.roundToPauseProgress;
                transitionParams = this.transitionParams;
                if (transitionParams.animatePlayingRound) {
                }
                float dp2222 = dp + (AndroidUtilities.dp(16.0f) * interpolation);
                if (this.roundToPauseProgress > 0.0f) {
                }
                this.rect.set(this.photoImage.getImageX() + AndroidUtilities.dpf2(1.5f) + dp2222, this.photoImage.getImageY() + AndroidUtilities.dpf2(1.5f) + dp2222, (this.photoImage.getImageX2() - AndroidUtilities.dpf2(1.5f)) - dp2222, (this.photoImage.getImageY2() - AndroidUtilities.dpf2(1.5f)) - dp2222);
                if (this.roundProgressAlpha == 1.0f) {
                }
                int alpha322 = Theme.chat_radialProgressPaint.getAlpha();
                Theme.chat_radialProgressPaint.setAlpha((int) (this.roundProgressAlpha * (!this.hasLinkPreview ? 1.0f - getVideoTranscriptionProgress() : 1.0f) * alpha322));
                i = alpha322;
                videoForwardDrawable = this.videoForwardDrawable;
                if (videoForwardDrawable != null) {
                }
                int alpha2222 = Theme.chat_radialProgressPaint.getAlpha();
                float strokeWidth222 = Theme.chat_radialProgressPaint.getStrokeWidth();
                if (this.roundProgressAlpha == 1.0f) {
                }
                if (interpolation > 0.0f) {
                }
                f = this.roundSeekbarOutAlpha;
                if (f != 0.0f) {
                }
                int i4222 = i2;
                if (this.roundSeekbarOutAlpha != 0.0f) {
                }
                if (i3 != -1) {
                }
                Theme.chat_radialProgressPaint.setStrokeWidth(strokeWidth222);
            }
        }
        if (!z2) {
            float f11 = this.roundToPauseProgress;
            if (f11 != 0.0f) {
                float f12 = f11 - 0.10666667f;
                this.roundToPauseProgress = f12;
                if (f12 < 0.0f) {
                    this.roundToPauseProgress = 0.0f;
                }
                invalidate();
            }
        }
        if (z) {
        }
        if (!z) {
        }
        interpolation = z2 ? AndroidUtilities.overshootInterpolator.getInterpolation(this.roundToPauseProgress) : this.roundToPauseProgress;
        transitionParams = this.transitionParams;
        if (transitionParams.animatePlayingRound) {
        }
        float dp22222 = dp + (AndroidUtilities.dp(16.0f) * interpolation);
        if (this.roundToPauseProgress > 0.0f) {
        }
        this.rect.set(this.photoImage.getImageX() + AndroidUtilities.dpf2(1.5f) + dp22222, this.photoImage.getImageY() + AndroidUtilities.dpf2(1.5f) + dp22222, (this.photoImage.getImageX2() - AndroidUtilities.dpf2(1.5f)) - dp22222, (this.photoImage.getImageY2() - AndroidUtilities.dpf2(1.5f)) - dp22222);
        if (this.roundProgressAlpha == 1.0f) {
        }
        int alpha3222 = Theme.chat_radialProgressPaint.getAlpha();
        Theme.chat_radialProgressPaint.setAlpha((int) (this.roundProgressAlpha * (!this.hasLinkPreview ? 1.0f - getVideoTranscriptionProgress() : 1.0f) * alpha3222));
        i = alpha3222;
        videoForwardDrawable = this.videoForwardDrawable;
        if (videoForwardDrawable != null) {
        }
        int alpha22222 = Theme.chat_radialProgressPaint.getAlpha();
        float strokeWidth2222 = Theme.chat_radialProgressPaint.getStrokeWidth();
        if (this.roundProgressAlpha == 1.0f) {
        }
        if (interpolation > 0.0f) {
        }
        f = this.roundSeekbarOutAlpha;
        if (f != 0.0f) {
        }
        int i42222 = i2;
        if (this.roundSeekbarOutAlpha != 0.0f) {
        }
        if (i3 != -1) {
        }
        Theme.chat_radialProgressPaint.setStrokeWidth(strokeWidth2222);
    }

    public void drawScrimReaction(Canvas canvas, Integer num, float f, boolean z) {
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null) {
            int i = groupedMessagePosition.flags;
            if ((i & 8) == 0 || (i & 1) == 0) {
                return;
            }
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        if (reactionsLayoutInBubble.isSmall) {
            return;
        }
        reactionsLayoutInBubble.setScrimProgress(f, z);
        this.reactionsLayoutInBubble.draw(canvas, this.transitionParams.animateChangeProgress, num);
    }

    public void drawScrimReactionPreview(View view, Canvas canvas, int i, Integer num, float f) {
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null) {
            int i2 = groupedMessagePosition.flags;
            if ((i2 & 8) == 0 || (i2 & 1) == 0) {
                return;
            }
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        if (reactionsLayoutInBubble.isSmall) {
            return;
        }
        reactionsLayoutInBubble.setScrimProgress(f);
        this.reactionsLayoutInBubble.drawPreview(view, canvas, i, num);
    }

    public void drawServiceBackground(Canvas canvas, RectF rectF, float f, float f2) {
        applyServiceShaderMatrix();
        if (f2 != 1.0f) {
            int alpha = getThemedPaint("paintChatActionBackground").getAlpha();
            getThemedPaint("paintChatActionBackground").setAlpha((int) (alpha * f2));
            canvas.drawRoundRect(rectF, f, f, getThemedPaint("paintChatActionBackground"));
            getThemedPaint("paintChatActionBackground").setAlpha(alpha);
        } else {
            canvas.drawRoundRect(rectF, f, f, getThemedPaint(this.sideButtonPressed ? "paintChatActionBackgroundSelected" : "paintChatActionBackground"));
        }
        if (hasGradientService()) {
            if (f2 == 1.0f) {
                canvas.drawRoundRect(rectF, f, f, Theme.chat_actionBackgroundGradientDarkenPaint);
                return;
            }
            int alpha2 = Theme.chat_actionBackgroundGradientDarkenPaint.getAlpha();
            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha((int) (f2 * alpha2));
            canvas.drawRoundRect(rectF, f, f, Theme.chat_actionBackgroundGradientDarkenPaint);
            Theme.chat_actionBackgroundGradientDarkenPaint.setAlpha(alpha2);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:103:0x00f3  */
    /* JADX WARN: Removed duplicated region for block: B:106:0x0117  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void drawTime(Canvas canvas, float f, boolean z) {
        MessageObject messageObject;
        float f2;
        float f3;
        TransitionParams transitionParams;
        float f4;
        float f5;
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (this.drawFromPinchToZoom || (chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.getPinchToZoomHelper() == null || !this.delegate.getPinchToZoomHelper().isInOverlayModeFor(this) || !shouldDrawTimeOnMedia()) {
            MessageObject messageObject2 = this.currentMessageObject;
            if (messageObject2 == null || messageObject2.type != 27) {
                int i = 0;
                while (true) {
                    int i2 = 2;
                    if (i >= 2) {
                        break;
                    }
                    if (i != 0 || !isDrawSelectionBackground() || this.currentSelectedBackgroundAlpha != 1.0f || shouldDrawTimeOnMedia()) {
                        if (i == 1 && ((!isDrawSelectionBackground() && this.currentSelectedBackgroundAlpha == 0.0f) || shouldDrawTimeOnMedia())) {
                            break;
                        }
                        boolean z2 = i == 1;
                        if (i == 1) {
                            f3 = this.currentSelectedBackgroundAlpha;
                        } else if (shouldDrawTimeOnMedia()) {
                            f2 = f;
                            if (this.transitionParams.animateShouldDrawTimeOnMedia || this.transitionParams.animateChangeProgress == 1.0f) {
                                transitionParams = this.transitionParams;
                                if (transitionParams.shouldAnimateTimeX) {
                                    float f6 = this.timeX + transitionParams.deltaRight;
                                    f4 = this.timeWidth;
                                    f5 = f6;
                                } else {
                                    float f7 = this.timeX;
                                    float f8 = transitionParams.animateChangeProgress;
                                    f5 = (f7 * f8) + (transitionParams.animateFromTimeX * (1.0f - f8));
                                    f4 = (this.timeWidth * f8) + (transitionParams.animateTimeWidth * (1.0f - this.transitionParams.animateChangeProgress));
                                }
                                drawTimeInternal(canvas, f2, z, f5, this.timeLayout, f4, z2);
                            } else {
                                if (shouldDrawTimeOnMedia()) {
                                    this.overideShouldDrawTimeOnMedia = 1;
                                    drawTimeInternal(canvas, f2 * this.transitionParams.animateChangeProgress, z, this.timeX, this.timeLayout, this.timeWidth, z2);
                                } else {
                                    this.overideShouldDrawTimeOnMedia = 2;
                                    drawTimeInternal(canvas, f2 * this.transitionParams.animateChangeProgress, z, this.timeX, this.timeLayout, this.timeWidth, z2);
                                    i2 = 1;
                                }
                                this.overideShouldDrawTimeOnMedia = i2;
                                TransitionParams transitionParams2 = this.transitionParams;
                                drawTimeInternal(canvas, f2 * (1.0f - transitionParams2.animateChangeProgress), z, transitionParams2.animateFromTimeX, transitionParams2.animateTimeLayout, this.transitionParams.animateTimeWidth, z2);
                                this.overideShouldDrawTimeOnMedia = 0;
                            }
                        } else {
                            f3 = 1.0f - this.currentSelectedBackgroundAlpha;
                        }
                        f2 = f3 * f;
                        if (this.transitionParams.animateShouldDrawTimeOnMedia) {
                        }
                        transitionParams = this.transitionParams;
                        if (transitionParams.shouldAnimateTimeX) {
                        }
                        drawTimeInternal(canvas, f2, z, f5, this.timeLayout, f4, z2);
                    }
                    i++;
                }
                if (this.transitionParams.animateBackgroundBoundsInner && ((messageObject = this.currentMessageObject) == null || !messageObject.preview)) {
                    drawOverlays(canvas);
                }
                if (this.effectDrawable != null) {
                    if (this.effectDrawableBounce == null) {
                        this.effectDrawableBounce = new ButtonBounce(this);
                    }
                    float scale = this.effectDrawableBounce.getScale(0.2f);
                    int timeX = (int) ((getTimeX() - AndroidUtilities.dp(this.effectId == 0 ? 0.0f : 18.0f)) + (this.timeWidth * (this.currentMessageObject.sendPreview ? 1.0f - this.timeAlpha : 0.0f)));
                    int timeY = (int) getTimeY();
                    MessageObject messageObject3 = this.currentMessageObject;
                    if (messageObject3 != null && !messageObject3.notime && this.pinnedBottom && !shouldDrawTimeOnMedia()) {
                        timeY += AndroidUtilities.dp(2.0f);
                    }
                    if (shouldDrawTimeOnMedia() && this.currentMessageObject.sendPreview) {
                        timeX -= AndroidUtilities.dp(1.0f);
                    }
                    MessageObject messageObject4 = this.currentMessageObject;
                    if (messageObject4 != null && (messageObject4.type == 15 || messageObject4.isAnyKindOfSticker())) {
                        timeX -= AndroidUtilities.dp(6.0f);
                    }
                    int dp = AndroidUtilities.dp(14.0f) / 2;
                    int i3 = timeY + dp;
                    float f9 = timeX + dp;
                    float f10 = dp * scale;
                    float f11 = i3;
                    this.effectDrawable.setBounds((int) (f9 - f10), (int) (f11 - f10), (int) (f9 + f10), (int) (f11 + f10));
                    if (!this.currentMessageObject.sendPreview) {
                        this.effectDrawable.setAlpha((int) (this.timeAlpha * 255.0f));
                    }
                    this.effectDrawable.draw(canvas);
                }
            }
        }
    }

    public void drawVideoTimestamps(Canvas canvas, int i) {
        if (this.currentMessageObject == null || this.controlsAlpha <= 0.0f || !this.photoImage.getVisible()) {
            return;
        }
        MessageObject messageObject = this.currentMessageObject;
        float clamp01 = Utilities.clamp01((messageObject.openedInViewer || messageObject.getVideoStartsTimestamp() == -1) ? this.currentMessageObject.getVideoSavedProgress() : this.currentMessageObject.getVideoStartsTimestamp() / ((float) this.currentMessageObject.getDuration()));
        if (clamp01 > 0.0f) {
            int[] roundRadius = this.photoImage.getRoundRadius();
            canvas.save();
            if (roundRadius[0] > 0 || roundRadius[1] > 0 || roundRadius[2] > 0 || roundRadius[3] > 0) {
                if (this.photoImageClipPath == null) {
                    this.photoImageClipPath = new Path();
                    this.photoImageClipPathRadii = new float[8];
                }
                float[] fArr = this.photoImageClipPathRadii;
                float max = Math.max(0, roundRadius[0]);
                fArr[1] = max;
                fArr[0] = max;
                float[] fArr2 = this.photoImageClipPathRadii;
                float max2 = Math.max(0, roundRadius[1]);
                fArr2[3] = max2;
                fArr2[2] = max2;
                float[] fArr3 = this.photoImageClipPathRadii;
                float max3 = Math.max(0, roundRadius[2]);
                fArr3[5] = max3;
                fArr3[4] = max3;
                float[] fArr4 = this.photoImageClipPathRadii;
                float max4 = Math.max(0, roundRadius[3]);
                fArr4[7] = max4;
                fArr4[6] = max4;
                this.photoImageClipPath.rewind();
                this.photoImageClipPath.addRoundRect(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2(), this.photoImageClipPathRadii, Path.Direction.CW);
                canvas.clipPath(this.photoImageClipPath);
            } else {
                canvas.clipRect(this.photoImage.getImageX(), this.photoImage.getImageY(), this.photoImage.getImageX2(), this.photoImage.getImageY2());
            }
            Theme.chat_videoProgressPaint.setColor(Theme.multAlpha(-1, this.controlsAlpha * 0.35f));
            canvas.drawRect(this.photoImage.getImageX(), this.photoImage.getImageY2() - AndroidUtilities.dp(3.0f), this.photoImage.getImageX2(), this.photoImage.getImageY2(), Theme.chat_videoProgressPaint);
            Theme.chat_videoProgressPaint.setColor(Theme.multAlpha(i, this.controlsAlpha));
            RectF rectF = AndroidUtilities.rectTmp;
            rectF.set(this.photoImage.getImageX() - AndroidUtilities.dp(2.0f), this.photoImage.getImageY2() - AndroidUtilities.dp(3.0f), this.photoImage.getImageX() + (this.photoImage.getImageWidth() * clamp01), this.photoImage.getImageY2());
            canvas.drawRoundRect(rectF, AndroidUtilities.dp(2.0f), AndroidUtilities.dp(2.0f), Theme.chat_videoProgressPaint);
            canvas.restore();
        }
    }

    public void drawVoiceOnce(Canvas canvas, float f, Runnable runnable) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || !messageObject.isVoiceOnce()) {
            runnable.run();
            return;
        }
        float centerX = this.radialProgress.progressRect.centerX();
        double lerp = AndroidUtilities.lerp(NotificationCenter.storiesSendAsUpdate, 45, f) / 180.0f;
        Double.isNaN(lerp);
        float cos = centerX + (((float) Math.cos(lerp * 3.141592653589793d)) * AndroidUtilities.dp(22.6274f));
        float centerY = this.radialProgress.progressRect.centerY();
        double lerp2 = AndroidUtilities.lerp(NotificationCenter.storiesSendAsUpdate, 45, f) / 180.0f;
        Double.isNaN(lerp2);
        float sin = centerY + (((float) Math.sin(lerp2 * 3.141592653589793d)) * AndroidUtilities.dp(22.6274f));
        RectF rectF = AndroidUtilities.rectTmp;
        rectF.set(this.radialProgress.progressRect);
        rectF.inset(-AndroidUtilities.dp(1.0f), -AndroidUtilities.dp(1.0f));
        canvas.saveLayerAlpha(rectF, NotificationCenter.newLocationAvailable, 31);
        this.radialProgress.setBackgroundDrawable(isDrawSelectionBackground() ? this.currentBackgroundSelectedDrawable : this.currentBackgroundDrawable);
        this.radialProgress.iconScale = f;
        runnable.run();
        if (this.onceClearPaint == null) {
            Paint paint = new Paint(1);
            this.onceClearPaint = paint;
            paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
        }
        if (f < 1.0f) {
            canvas.save();
            float f2 = 1.0f - f;
            float f3 = 0.7f * f2;
            float centerX2 = this.radialProgress.progressRect.centerX();
            RectF rectF2 = this.radialProgress.progressRect;
            canvas.scale(f3, f3, centerX2, AndroidUtilities.lerp(rectF2.top, rectF2.bottom, 0.5f));
            if (this.onceFire == null) {
                RLottieDrawable rLottieDrawable = new RLottieDrawable(R.raw.fire_once, "fire_once", AndroidUtilities.dp(32.0f), AndroidUtilities.dp(32.0f), true, null);
                this.onceFire = rLottieDrawable;
                rLottieDrawable.setMasterParent(this);
                this.onceFire.setAllowDecodeSingleFrame(true);
                this.onceFire.setAutoRepeat(1);
                this.onceFire.start();
                this.onceFire.scaleByCanvas = true;
            }
            RLottieDrawable rLottieDrawable2 = this.onceFire;
            RectF rectF3 = this.radialProgress.progressRect;
            rLottieDrawable2.setBounds((int) rectF3.left, (int) rectF3.top, (int) rectF3.right, (int) rectF3.bottom);
            if (this.onceRadialPaint == null) {
                this.onceRadialPaint = new Paint(1);
            }
            if (this.onceRadialCutPaint == null) {
                Paint paint2 = new Paint(1);
                this.onceRadialCutPaint = paint2;
                paint2.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));
            }
            if (this.onceRadialStrokePaint == null) {
                Paint paint3 = new Paint(1);
                this.onceRadialStrokePaint = paint3;
                paint3.setStyle(Paint.Style.STROKE);
            }
            RadialProgress2 radialProgress2 = this.radialProgress;
            int i = radialProgress2.iconColorKey;
            int themedColor = i >= 0 ? getThemedColor(i) : radialProgress2.iconColor;
            this.onceRadialPaint.setColor(themedColor);
            this.onceRadialStrokePaint.setColor(themedColor);
            this.radialProgress.mediaActionDrawable.applyShaderMatrix(false);
            this.onceRadialPaint.setShader(this.radialProgress.mediaActionDrawable.paint2.getShader());
            this.onceRadialStrokePaint.setShader(this.radialProgress.mediaActionDrawable.paint2.getShader());
            rectF.set(this.onceFire.getBounds());
            canvas.saveLayerAlpha(rectF, NotificationCenter.newLocationAvailable, 31);
            rectF.inset(1.0f, 1.0f);
            canvas.drawRect(rectF, this.onceRadialPaint);
            this.onceFire.draw(canvas, this.onceRadialCutPaint);
            canvas.restore();
            canvas.restore();
            this.onceRadialStrokePaint.setAlpha((int) (255.0f * f2));
            this.onceRadialStrokePaint.setStrokeWidth(AndroidUtilities.dp(1.66f));
            this.rect.set(this.radialProgress.progressRect);
            this.rect.inset(AndroidUtilities.dp(3.0f), AndroidUtilities.dp(3.0f));
            canvas.drawArc(this.rect, -90.0f, (1.0f - this.seekBarWaveform.explodeProgress) * (-360.0f), false, this.onceRadialStrokePaint);
            if (this.timerParticles == null) {
                this.timerParticles = new TimerParticles();
            }
            this.timerParticles.draw(canvas, this.onceRadialStrokePaint, this.rect, (1.0f - this.seekBarWaveform.explodeProgress) * (-360.0f), f2);
        } else {
            RLottieDrawable rLottieDrawable3 = this.onceFire;
            if (rLottieDrawable3 != null) {
                rLottieDrawable3.recycle(true);
                this.onceFire = null;
                if (this.timerParticles != null) {
                    this.timerParticles = null;
                }
            }
        }
        canvas.drawCircle(cos, sin, AndroidUtilities.dp((f * 1.5f) + 10.0f) * f, this.onceClearPaint);
        canvas.restore();
        if (this.oncePeriod == null) {
            CaptionContainerView.PeriodDrawable periodDrawable = new CaptionContainerView.PeriodDrawable(3);
            this.oncePeriod = periodDrawable;
            periodDrawable.updateColors(-1, 0, 0);
            CaptionContainerView.PeriodDrawable periodDrawable2 = this.oncePeriod;
            periodDrawable2.diameterDp = 14.0f;
            periodDrawable2.setTextSize(10.0f);
            this.oncePeriod.strokePaint.setStrokeWidth(AndroidUtilities.dpf2(1.5f));
            this.oncePeriod.setValue(1, false, false);
            this.oncePeriod.textOffsetX = -AndroidUtilities.dpf2(0.33f);
            this.oncePeriod.textOffsetY = AndroidUtilities.dpf2(0.33f);
        }
        CaptionContainerView.PeriodDrawable periodDrawable3 = this.oncePeriod;
        periodDrawable3.diameterDp = f * 14.0f;
        periodDrawable3.setTextSize(f * 10.0f);
        canvas.saveLayerAlpha(cos - AndroidUtilities.dp(10.0f), sin - AndroidUtilities.dp(10.0f), cos + AndroidUtilities.dp(10.0f), sin + AndroidUtilities.dp(10.0f), NotificationCenter.newLocationAvailable, 31);
        canvas.drawCircle(cos, sin, AndroidUtilities.dp(10.0f) * f, this.radialProgress.circlePaint);
        this.oncePeriod.setClear(AndroidUtilities.computePerceivedBrightness(this.radialProgress.circlePaint.getColor()) > 0.8f);
        this.oncePeriod.setCenterXY(cos, sin);
        this.oncePeriod.draw(canvas, f);
        canvas.restore();
    }

    public void forceResetMessageObject() {
        MessageObject messageObject = this.messageObjectToSet;
        if (messageObject == null) {
            messageObject = this.currentMessageObject;
        }
        this.currentMessageObject = null;
        setMessageObject(messageObject, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
    }

    @Override // android.view.View
    public AccessibilityNodeProvider getAccessibilityNodeProvider() {
        return new MessageAccessibilityNodeProvider();
    }

    @Override // android.view.View
    public float getAlpha() {
        return this.ALPHA_PROPERTY_WORKAROUND ? this.alphaInternal : super.getAlpha();
    }

    /* JADX WARN: Removed duplicated region for block: B:12:0x0038  */
    /* JADX WARN: Removed duplicated region for block: B:15:0x0043  */
    /* JADX WARN: Removed duplicated region for block: B:17:0x0048  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x0050  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x0061 A[LOOP:1: B:26:0x0061->B:28:0x0064, LOOP_START, PHI: r3 r5
      0x0061: PHI (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:25:0x005f, B:28:0x0064] A[DONT_GENERATE, DONT_INLINE]
      0x0061: PHI (r5v2 int) = (r5v1 int), (r5v3 int) binds: [B:25:0x005f, B:28:0x0064] A[DONT_GENERATE, DONT_INLINE]] */
    /* JADX WARN: Removed duplicated region for block: B:32:0x005e  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x004a  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0045  */
    /* JADX WARN: Removed duplicated region for block: B:8:0x0021  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public AnimatedEmojiSpan[] getAnimatedEmojiSpans() {
        AnimatedEmojiSpan[] animatedEmojiSpanArr;
        MessageObject messageObject;
        AnimatedEmojiSpan[] animatedEmojiSpanArr2;
        int i;
        MessageObject messageObject2 = this.currentMessageObject;
        AnimatedEmojiSpan[] animatedEmojiSpanArr3 = null;
        int i2 = 0;
        if (messageObject2 != null) {
            CharSequence charSequence = messageObject2.messageText;
            if (charSequence instanceof Spanned) {
                animatedEmojiSpanArr = (AnimatedEmojiSpan[]) ((Spanned) charSequence).getSpans(0, charSequence.length(), AnimatedEmojiSpan.class);
                messageObject = this.currentMessageObject;
                if (messageObject != null) {
                    CharSequence charSequence2 = messageObject.caption;
                    if (charSequence2 instanceof Spanned) {
                        animatedEmojiSpanArr2 = (AnimatedEmojiSpan[]) ((Spanned) charSequence2).getSpans(0, charSequence2.length(), AnimatedEmojiSpan.class);
                        if ((animatedEmojiSpanArr != null && animatedEmojiSpanArr.length != 0) || (animatedEmojiSpanArr2 != null && animatedEmojiSpanArr2.length != 0)) {
                            animatedEmojiSpanArr3 = new AnimatedEmojiSpan[(animatedEmojiSpanArr != null ? 0 : animatedEmojiSpanArr.length) + (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length)];
                            if (animatedEmojiSpanArr == null) {
                                int i3 = 0;
                                i = 0;
                                while (i3 < animatedEmojiSpanArr.length) {
                                    animatedEmojiSpanArr3[i] = animatedEmojiSpanArr[i3];
                                    i3++;
                                    i++;
                                }
                            } else {
                                i = 0;
                            }
                            if (animatedEmojiSpanArr2 != null) {
                                while (i2 < animatedEmojiSpanArr2.length) {
                                    animatedEmojiSpanArr3[i] = animatedEmojiSpanArr2[i2];
                                    i2++;
                                    i++;
                                }
                            }
                        }
                        return animatedEmojiSpanArr3;
                    }
                }
                animatedEmojiSpanArr2 = null;
                if (animatedEmojiSpanArr != null) {
                    animatedEmojiSpanArr3 = new AnimatedEmojiSpan[(animatedEmojiSpanArr != null ? 0 : animatedEmojiSpanArr.length) + (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length)];
                    if (animatedEmojiSpanArr == null) {
                    }
                    if (animatedEmojiSpanArr2 != null) {
                    }
                    return animatedEmojiSpanArr3;
                }
                animatedEmojiSpanArr3 = new AnimatedEmojiSpan[(animatedEmojiSpanArr != null ? 0 : animatedEmojiSpanArr.length) + (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length)];
                if (animatedEmojiSpanArr == null) {
                }
                if (animatedEmojiSpanArr2 != null) {
                }
                return animatedEmojiSpanArr3;
            }
        }
        animatedEmojiSpanArr = null;
        messageObject = this.currentMessageObject;
        if (messageObject != null) {
        }
        animatedEmojiSpanArr2 = null;
        if (animatedEmojiSpanArr != null) {
        }
        animatedEmojiSpanArr3 = new AnimatedEmojiSpan[(animatedEmojiSpanArr != null ? 0 : animatedEmojiSpanArr.length) + (animatedEmojiSpanArr2 != null ? 0 : animatedEmojiSpanArr2.length)];
        if (animatedEmojiSpanArr == null) {
        }
        if (animatedEmojiSpanArr2 != null) {
        }
        return animatedEmojiSpanArr3;
    }

    public float getAnimationOffsetX() {
        return this.animationOffsetX;
    }

    public ImageReceiver getAvatarImage() {
        if (this.isAvatarVisible) {
            return this.avatarImage;
        }
        return null;
    }

    public MessageBackgroundDrawable getBackgroundDrawable() {
        return this.backgroundDrawable;
    }

    public int getBackgroundDrawableBottom() {
        int i;
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if (groupedMessagePosition != null) {
            int i2 = 4;
            i = (groupedMessagePosition.flags & 4) == 0 ? AndroidUtilities.dp(3.0f) : 0;
            if ((this.currentPosition.flags & 8) == 0) {
                MessageObject messageObject = this.currentMessageObject;
                if (messageObject != null && messageObject.isOutOwner()) {
                    i2 = 3;
                }
                i += AndroidUtilities.dp(i2);
            }
        } else {
            i = 0;
        }
        boolean z = this.drawPinnedBottom;
        int backgroundDrawableTop = ((getBackgroundDrawableTop() + this.layoutHeight) - ((z && this.drawPinnedTop) ? 0 : z ? AndroidUtilities.dp(1.0f) : AndroidUtilities.dp(2.0f))) + i;
        if (this.mediaBackground) {
            return backgroundDrawableTop;
        }
        if (this.drawPinnedTop) {
            backgroundDrawableTop += AndroidUtilities.dp(1.0f);
        }
        return this.drawPinnedBottom ? backgroundDrawableTop + AndroidUtilities.dp(1.0f) : backgroundDrawableTop;
    }

    public int getBackgroundDrawableLeft() {
        int dp;
        int dp2;
        int i;
        MessageObject messageObject = getMessageObject();
        if (messageObject != null && messageObject.isOutOwner()) {
            if (this.isRoundVideo) {
                return (this.layoutWidth - this.backgroundWidth) - ((int) ((1.0f - getVideoTranscriptionProgress()) * AndroidUtilities.dp(9.0f)));
            }
            return (this.layoutWidth - this.backgroundWidth) - (this.mediaBackground ? AndroidUtilities.dp(9.0f) : 0);
        }
        if (this.isRoundVideo) {
            if ((this.isChat || ((messageObject != null && (messageObject.isRepostPreview || messageObject.forceAvatar)) || messageObject.getDialogId() == UserObject.VERIFY)) && this.isAvatarVisible) {
                r1 = 48;
            }
            dp = AndroidUtilities.dp(r1 + 3) + ((int) (AndroidUtilities.dp(6.0f) * (1.0f - getVideoTranscriptionProgress())));
        } else {
            if ((this.isChat || ((messageObject != null && (messageObject.isRepostPreview || messageObject.forceAvatar)) || messageObject.getDialogId() == UserObject.VERIFY)) && this.isAvatarVisible) {
                r1 = 48;
            }
            dp = AndroidUtilities.dp(r1 + (this.mediaBackground ? 9 : 3));
        }
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages != null && !groupedMessages.isDocuments && (i = this.currentPosition.leftSpanOffset) != 0) {
            dp += (int) Math.ceil((i / 1000.0f) * getGroupPhotosWidth());
        }
        if (this.isRoundVideo) {
            if (!this.drawPinnedBottom) {
                return dp;
            }
            dp2 = (int) (AndroidUtilities.dp(6.0f) * (1.0f - getVideoTranscriptionProgress()));
        } else {
            if (this.mediaBackground || !this.drawPinnedBottom) {
                return dp;
            }
            dp2 = AndroidUtilities.dp(6.0f);
        }
        return dp + dp2;
    }

    public int getBackgroundDrawableRight() {
        int dp;
        MessageObject messageObject;
        MessageObject messageObject2;
        int i = this.backgroundWidth;
        if (this.isRoundVideo) {
            dp = i - ((int) (getVideoTranscriptionProgress() * AndroidUtilities.dp(3.0f)));
            if (this.drawPinnedBottom && (messageObject2 = this.currentMessageObject) != null && messageObject2.isOutOwner()) {
                dp = (int) (dp - (AndroidUtilities.dp(6.0f) * (1.0f - getVideoTranscriptionProgress())));
            }
            if (this.drawPinnedBottom && ((messageObject = this.currentMessageObject) == null || !messageObject.isOutOwner())) {
                dp = (int) (dp - (AndroidUtilities.dp(6.0f) * (1.0f - getVideoTranscriptionProgress())));
            }
        } else {
            dp = i - (this.mediaBackground ? 0 : AndroidUtilities.dp(3.0f));
            if (!this.mediaBackground && this.drawPinnedBottom) {
                dp -= AndroidUtilities.dp(6.0f);
            }
        }
        return getBackgroundDrawableLeft() + dp;
    }

    public int getBackgroundDrawableTop() {
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        int dp = ((groupedMessagePosition == null || (groupedMessagePosition.flags & 4) != 0) ? 0 : 0 - AndroidUtilities.dp(3.0f)) + (this.drawPinnedTop ? 0 : AndroidUtilities.dp(1.0f));
        return (this.mediaBackground || !this.drawPinnedTop) ? dp : dp - AndroidUtilities.dp(1.0f);
    }

    public int getBackgroundHeight() {
        return this.backgroundHeight;
    }

    public ImageReceiver getBlurredPhotoImage() {
        return this.blurredPhotoImage;
    }

    @Override // org.telegram.ui.Cells.BaseCell
    public int getBoundsLeft() {
        int i;
        float f;
        MessageObject messageObject = this.currentMessageObject;
        boolean z = messageObject != null && messageObject.isOutOwner();
        if (needDrawAvatar()) {
            if (this.currentPosition != null) {
                f = 73.0f;
            } else {
                MessageObject messageObject2 = this.currentMessageObject;
                f = (messageObject2 == null || !messageObject2.isRepostPreview) ? 63 : 42;
            }
            i = AndroidUtilities.dp(f);
        } else {
            i = 0;
        }
        int dp = (z && (checkNeedDrawShareButton(this.currentMessageObject) || this.useTranscribeButton)) ? AndroidUtilities.dp(48.0f) : 0;
        ArrayList arrayList = this.botButtons;
        int i2 = ConnectionsManager.DEFAULT_DATACENTER_ID;
        if (arrayList != null) {
            int widthForButtons = getWidthForButtons();
            MessageObject messageObject3 = this.currentMessageObject;
            int dp2 = (messageObject3 == null || !messageObject3.isOutOwner()) ? this.backgroundDrawableLeft + AndroidUtilities.dp((this.mediaBackground || this.drawPinnedBottom) ? 1.0f : 7.0f) : (getMeasuredWidth() - widthForButtons) - AndroidUtilities.dp(10.0f);
            for (int i3 = 0; i3 < this.botButtons.size(); i3++) {
                i2 = Math.max(i2, ((int) (((BotButton) this.botButtons.get(i3)).x * widthForButtons)) + dp2);
            }
        }
        return Math.max(0, Math.min(i2, (getBackgroundDrawableLeft() - i) - dp));
    }

    @Override // org.telegram.ui.Cells.BaseCell
    public int getBoundsRight() {
        int dp;
        MessageObject messageObject = this.currentMessageObject;
        int i = 0;
        int dp2 = (messageObject == null || messageObject.isOutOwner() || !(checkNeedDrawShareButton(this.currentMessageObject) || this.useTranscribeButton)) ? 0 : AndroidUtilities.dp(48.0f);
        if (this.botButtons != null) {
            int widthForButtons = getWidthForButtons();
            MessageObject messageObject2 = this.currentMessageObject;
            if (messageObject2 == null || !messageObject2.isOutOwner()) {
                dp = this.backgroundDrawableLeft + AndroidUtilities.dp((this.mediaBackground || this.drawPinnedBottom) ? 1.0f : 7.0f);
            } else {
                dp = (getMeasuredWidth() - getWidthForButtons()) - AndroidUtilities.dp(10.0f);
            }
            int i2 = 0;
            while (i < this.botButtons.size()) {
                BotButton botButton = (BotButton) this.botButtons.get(i);
                float f = widthForButtons;
                i2 = Math.max(i2, ((int) (botButton.x * f)) + dp + ((int) (botButton.width * f)));
                i++;
            }
            i = i2;
        }
        return Math.max(getBackgroundDrawableRight() + dp2, i);
    }

    public MessageObject.TextLayoutBlocks getCaptionLayout() {
        return this.captionLayout;
    }

    public float getCaptionX() {
        float f;
        float f2;
        TransitionParams transitionParams = this.transitionParams;
        if (transitionParams.animateBackgroundBoundsInner) {
            if (transitionParams.transformGroupToSingleMessage) {
                this.captionX += transitionParams.deltaLeft;
            } else {
                if (transitionParams.moveCaption) {
                    float f3 = this.captionX;
                    TransitionParams transitionParams2 = this.transitionParams;
                    float f4 = transitionParams2.animateChangeProgress;
                    f = f3 * f4;
                    f2 = transitionParams2.captionFromX * (1.0f - f4);
                } else if (!this.currentMessageObject.isVoice() || !TextUtils.isEmpty(this.currentMessageObject.caption)) {
                    f = this.captionX;
                    f2 = this.transitionParams.deltaLeft;
                }
                this.captionX = f + f2;
            }
        }
        return this.captionX;
    }

    public float getCaptionY() {
        float f = this.captionY;
        TransitionParams transitionParams = this.transitionParams;
        if (!transitionParams.animateBackgroundBoundsInner) {
            return f;
        }
        if (transitionParams.transformGroupToSingleMessage) {
            return f - getTranslationY();
        }
        if (!transitionParams.moveCaption) {
            return f;
        }
        float f2 = this.captionY;
        TransitionParams transitionParams2 = this.transitionParams;
        float f3 = transitionParams2.animateChangeProgress;
        return (f2 * f3) + (transitionParams2.captionFromY * (1.0f - f3));
    }

    public float getCheckBoxTranslation() {
        return this.checkBoxTranslation;
    }

    public int getChecksX() {
        return this.layoutWidth - AndroidUtilities.dp(SharedConfig.bubbleRadius >= 10 ? 27.3f : 25.3f);
    }

    public int getChecksY() {
        float f;
        Drawable drawable;
        if (this.currentMessageObject.shouldDrawWithoutBackground()) {
            f = this.drawTimeY;
            drawable = getThemedDrawable("drawableMsgStickerCheck");
        } else {
            f = this.drawTimeY;
            drawable = Theme.chat_msgMediaCheckDrawable;
        }
        return (int) (f - drawable.getIntrinsicHeight());
    }

    public Theme.MessageDrawable getCurrentBackgroundDrawable(boolean z) {
        if (z) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            boolean z2 = groupedMessagePosition != null && (groupedMessagePosition.flags & 8) == 0 && this.currentMessagesGroup.isDocuments && !this.drawPinnedBottom;
            this.currentBackgroundDrawable = (Theme.MessageDrawable) getThemedDrawable(this.currentMessageObject.isOutOwner() ? (this.mediaBackground || this.drawPinnedBottom || z2) ? "drawableMsgOutMedia" : "drawableMsgOut" : (this.mediaBackground || this.drawPinnedBottom || z2) ? "drawableMsgInMedia" : "drawableMsgIn");
        }
        this.currentBackgroundDrawable.getBackgroundDrawable();
        return this.currentBackgroundDrawable;
    }

    public int getCurrentBackgroundLeft() {
        Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
        if (messageDrawable == null) {
            return 0;
        }
        int i = messageDrawable.getBounds().left;
        if (this.currentMessageObject.isOutOwner() || this.transitionParams.changePinnedBottomProgress == 1.0f) {
            return i;
        }
        boolean z = this.isRoundVideo;
        return ((z || !this.mediaBackground) && !this.drawPinnedBottom) ? z ? (int) (i - (AndroidUtilities.dp(6.0f) * getVideoTranscriptionProgress())) : i - AndroidUtilities.dp(6.0f) : i;
    }

    public int getCurrentBackgroundRight() {
        Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
        if (messageDrawable == null) {
            return getWidth();
        }
        int i = messageDrawable.getBounds().right;
        if (!this.currentMessageObject.isOutOwner() || this.transitionParams.changePinnedBottomProgress == 1.0f) {
            return i;
        }
        boolean z = this.isRoundVideo;
        return ((z || !this.mediaBackground) && !this.drawPinnedBottom) ? z ? (int) (i + (AndroidUtilities.dp(6.0f) * getVideoTranscriptionProgress())) : i + AndroidUtilities.dp(6.0f) : i;
    }

    public TLRPC.Chat getCurrentChat() {
        return this.currentChat;
    }

    public MessageObject.GroupedMessages getCurrentMessagesGroup() {
        return this.currentMessagesGroup;
    }

    public MessageObject.GroupedMessagePosition getCurrentPosition() {
        return this.currentPosition;
    }

    public TLRPC.User getCurrentUser() {
        return this.currentUser;
    }

    public ChatMessageCellDelegate getDelegate() {
        return this.delegate;
    }

    /* JADX WARN: Removed duplicated region for block: B:17:0x00ec  */
    /* JADX WARN: Removed duplicated region for block: B:7:0x00b4  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public float getDescriptionLayoutX() {
        int i;
        float dp;
        float dp2;
        int dp3;
        if (this.hasGamePreview) {
            AndroidUtilities.dp(14.0f);
            dp3 = this.unmovedTextX - AndroidUtilities.dp(10.0f);
        } else {
            if (this.hasInvoicePreview) {
                AndroidUtilities.dp(14.0f);
            } else {
                if (!this.currentMessageObject.isSponsored()) {
                    float f = 12.0f;
                    if (this.currentMessageObject.isOutOwner()) {
                        dp = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                        if (this.currentMessageObject.type == 19) {
                            dp -= Math.max(0.0f, ((Math.max(this.replyNameWidth, this.replyTextWidth) + dp) + AndroidUtilities.dp(14.0f)) - AndroidUtilities.displaySize.x);
                        }
                    } else {
                        if (this.mediaBackground) {
                            i = this.backgroundDrawableLeft;
                        } else {
                            i = this.backgroundDrawableLeft;
                            if (!this.drawPinnedBottom) {
                                f = 18.0f;
                            }
                        }
                        dp = i + AndroidUtilities.dp(f) + getExtraTextX();
                    }
                    dp2 = (dp + this.transitionParams.deltaLeft) - AndroidUtilities.dp(1.33f);
                    float f2 = this.linkPreviewY;
                    TransitionParams transitionParams = this.transitionParams;
                    if (transitionParams.animateLinkPreviewY) {
                        AndroidUtilities.lerp(transitionParams.animateFromLinkPreviewY, f2, transitionParams.animateChangeProgress);
                    }
                    float backgroundDrawableRight = getBackgroundDrawableRight();
                    return dp2 + AndroidUtilities.dp(10.0f) + (Math.abs(this.descriptionLayoutLeft) > 1 ? ((((int) ((((backgroundDrawableRight + (this.transitionParams != null ? r4.deltaRight : 0.0f)) - AndroidUtilities.dp(10 + ((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6))) - getExtraTextX()) - dp2)) - AndroidUtilities.dp(20.0f)) - this.descriptionLayoutWidth) - this.descriptionLayoutLeft : 0);
                }
                AndroidUtilities.dp(2.0f);
            }
            dp3 = this.unmovedTextX + AndroidUtilities.dp(1.0f);
        }
        dp2 = dp3;
        float backgroundDrawableRight2 = getBackgroundDrawableRight();
        return dp2 + AndroidUtilities.dp(10.0f) + (Math.abs(this.descriptionLayoutLeft) > 1 ? ((((int) ((((backgroundDrawableRight2 + (this.transitionParams != null ? r4.deltaRight : 0.0f)) - AndroidUtilities.dp(10 + ((this.currentMessageObject.isOutOwner() || this.mediaBackground || this.drawPinnedBottom) ? 0 : 6))) - getExtraTextX()) - dp2)) - AndroidUtilities.dp(20.0f)) - this.descriptionLayoutWidth) - this.descriptionLayoutLeft : 0);
    }

    public float getDescriptionLayoutY() {
        float f = this.descriptionY;
        TransitionParams transitionParams = this.transitionParams;
        return f + (!transitionParams.animateLinkPreviewY ? (-transitionParams.deltaTop) + transitionParams.deltaBottom : 0.0f);
    }

    public StaticLayout getDescriptionlayout() {
        return this.descriptionLayout;
    }

    public float getDrawTopicHeight() {
        if (this.topicButton != null) {
            return r0.height();
        }
        return 0.0f;
    }

    public TLRPC.TL_availableEffect getEffect() {
        MessageObject messageObject;
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if ((groupedMessagePosition == null || groupedMessagePosition.last) && (messageObject = this.currentMessageObject) != null) {
            return messageObject.getEffect();
        }
        return null;
    }

    public int getExtraInsetHeight() {
        int i = this.addedCaptionHeight;
        if (this.hasFactCheck) {
            i += AndroidUtilities.dp((this.reactionsLayoutInBubble.isEmpty ? 18 : 0) + 2) + this.factCheckHeight;
        }
        if (this.drawCommentButton) {
            i += AndroidUtilities.dp(shouldDrawTimeOnMedia() ? 41.3f : 43.0f);
        }
        return (this.reactionsLayoutInBubble.isEmpty || !this.currentMessageObject.shouldDrawReactionsInLayout()) ? i : i + this.reactionsLayoutInBubble.totalHeight;
    }

    int getExtraTextX() {
        float f;
        int i = SharedConfig.bubbleRadius;
        if (i >= 15) {
            f = 2.0f;
        } else {
            if (i < 11) {
                return 0;
            }
            f = 1.0f;
        }
        return AndroidUtilities.dp(f);
    }

    public StaticLayout getFactCheckLayout() {
        return this.factCheckTextLayout;
    }

    public String getFilename() {
        int i;
        int i2;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return null;
        }
        int i3 = messageObject.type;
        if (i3 == 1) {
            TLRPC.PhotoSize photoSize = this.currentPhotoObject;
            if (photoSize == null) {
                return null;
            }
            return FileLoader.getAttachFileName(photoSize);
        }
        if (i3 == 8 || (i2 = this.documentAttachType) == 7 || i2 == 4 || i2 == 8 || i3 == 9 || i2 == 3 || i2 == 5) {
            if (messageObject.useCustomPhoto) {
                return null;
            }
            if (messageObject.attachPathExists && !TextUtils.isEmpty(messageObject.messageOwner.attachPath)) {
                return this.currentMessageObject.messageOwner.attachPath;
            }
            if (!this.currentMessageObject.isSendError() || (i = this.documentAttachType) == 3 || i == 5) {
                return this.currentMessageObject.getFileName();
            }
        } else {
            if (i2 != 0) {
                return FileLoader.getAttachFileName(this.documentAttach);
            }
            TLRPC.PhotoSize photoSize2 = this.currentPhotoObject;
            if (photoSize2 != null) {
                return FileLoader.getAttachFileName(photoSize2);
            }
        }
        return null;
    }

    public int getForwardNameCenterX() {
        TLRPC.User user = this.currentUser;
        return (int) ((user == null || user.id != 0) ? this.forwardNameX + this.forwardNameCenterX : this.avatarImage.getCenterX());
    }

    public float getHighlightAlpha() {
        return getHighlightAlpha(false);
    }

    public float getHighlightAlpha(boolean z) {
        float f;
        QuoteHighlight quoteHighlight;
        if (this.drawSelectionBackground || !this.isHighlightedAnimated) {
            f = 1.0f;
        } else {
            int i = this.highlightProgress;
            f = (i >= 300 ? 1.0f : i / 300.0f) * 1.0f;
        }
        return (z || (quoteHighlight = this.quoteHighlight) == null) ? f : f * (1.0f - quoteHighlight.getT());
    }

    public int getLayoutHeight() {
        return this.layoutHeight;
    }

    /* JADX WARN: Code restructure failed: missing block: B:52:0x00d1, code lost:
    
        if (needDrawAvatar() != false) goto L52;
     */
    /* JADX WARN: Code restructure failed: missing block: B:53:0x00d3, code lost:
    
        r1 = 42.0f;
     */
    /* JADX WARN: Code restructure failed: missing block: B:54:0x00d5, code lost:
    
        r0 = r0 - org.telegram.messenger.AndroidUtilities.dp(r1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:55:0x00ee, code lost:
    
        r1 = r7.currentMessageObject;
     */
    /* JADX WARN: Code restructure failed: missing block: B:56:0x00f0, code lost:
    
        if (r1 == null) goto L66;
     */
    /* JADX WARN: Code restructure failed: missing block: B:58:0x00f4, code lost:
    
        if (r1.isSaved == false) goto L66;
     */
    /* JADX WARN: Code restructure failed: missing block: B:60:0x00fa, code lost:
    
        if (r1.isOutOwner() == false) goto L66;
     */
    /* JADX WARN: Code restructure failed: missing block: B:62:0x0102, code lost:
    
        if (checkNeedDrawShareButton(r7.currentMessageObject) == false) goto L66;
     */
    /* JADX WARN: Code restructure failed: missing block: B:63:0x0104, code lost:
    
        r0 = r0 - org.telegram.messenger.AndroidUtilities.dp(25.0f);
     */
    /* JADX WARN: Code restructure failed: missing block: B:65:0x010d, code lost:
    
        if (r7.isPlayingRound == false) goto L74;
     */
    /* JADX WARN: Code restructure failed: missing block: B:66:0x010f, code lost:
    
        r1 = r7.currentMessageObject;
     */
    /* JADX WARN: Code restructure failed: missing block: B:67:0x0111, code lost:
    
        if (r1 == null) goto L72;
     */
    /* JADX WARN: Code restructure failed: missing block: B:69:0x0117, code lost:
    
        if (r1.isVoiceTranscriptionOpen() != false) goto L74;
     */
    /* JADX WARN: Code restructure failed: missing block: B:71:0x0127, code lost:
    
        return (r0 - (r7.backgroundWidth - (org.telegram.messenger.AndroidUtilities.roundPlayingMessageSize - org.telegram.messenger.AndroidUtilities.roundMessageSize))) - org.telegram.messenger.AndroidUtilities.dp(57.0f);
     */
    /* JADX WARN: Code restructure failed: missing block: B:73:0x0130, code lost:
    
        return (r0 - r7.backgroundWidth) - org.telegram.messenger.AndroidUtilities.dp(57.0f);
     */
    /* JADX WARN: Code restructure failed: missing block: B:75:0x00eb, code lost:
    
        if (needDrawAvatar() != false) goto L52;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public int getMaxNameWidth() {
        int min;
        MessageObject messageObject;
        int i;
        int i2 = this.documentAttachType;
        if (i2 != 6 && i2 != 8 && (i = (messageObject = this.currentMessageObject).type) != 5) {
            MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
            if (groupedMessages == null || groupedMessages.isDocuments) {
                if (i == 19) {
                    return Math.max(messageObject.textWidth, (int) (((AndroidUtilities.displaySize.x - AndroidUtilities.dp(52.0f)) - (this.isAvatarVisible ? AndroidUtilities.dp(48.0f) : 0)) * 0.5f));
                }
                int i3 = this.backgroundWidth;
                if (messageObject.isSaved && messageObject.isOutOwner() && checkNeedDrawShareButton(this.currentMessageObject)) {
                    i3 -= AndroidUtilities.dp(25.0f);
                }
                return i3 - AndroidUtilities.dp(this.mediaBackground ? 22.0f : 31.0f);
            }
            int minTabletSide = AndroidUtilities.isTablet() ? AndroidUtilities.getMinTabletSide() : getParentWidth();
            int i4 = 0;
            for (int i5 = 0; i5 < this.currentMessagesGroup.posArray.size(); i5++) {
                if (this.currentMessagesGroup.posArray.get(i5).minY != 0) {
                    break;
                }
                double d = i4;
                double ceil = Math.ceil(((r3.pw + r3.leftSpanOffset) / 1000.0f) * minTabletSide);
                Double.isNaN(d);
                i4 = (int) (d + ceil);
            }
            return i4 - AndroidUtilities.dp((needDrawAvatar() ? 48 : 0) + 31);
        }
        float f = 0.0f;
        if (AndroidUtilities.isTablet()) {
            min = AndroidUtilities.getMinTabletSide();
        } else {
            min = Math.min(getParentWidth(), AndroidUtilities.displaySize.y);
        }
    }

    public int getMediaOffsetY() {
        return this.transitionParams.animateMediaOffsetY ? AndroidUtilities.lerp(this.transitionParams.animateFromMediaOffsetY, this.mediaOffsetY, this.transitionParams.animateChangeProgress) : this.mediaOffsetY;
    }

    public MessageObject getMessageObject() {
        MessageObject messageObject = this.messageObjectToSet;
        return messageObject != null ? messageObject : this.currentMessageObject;
    }

    public int getNameStatusX() {
        return (int) (this.nameX + this.nameOffsetX + (this.viaNameWidth > 0 ? r1 - AndroidUtilities.dp(32.0f) : this.nameLayoutWidth) + AndroidUtilities.dp(2.0f) + (AndroidUtilities.dp(20.0f) / 2));
    }

    public int getNameStatusY() {
        return (int) (this.nameY + ((this.nameLayout == null ? 0 : r1.getHeight()) / 2));
    }

    public int getNoSoundIconCenterX() {
        return this.noSoundCenterX;
    }

    public float getNonAnimationTranslationX(boolean z) {
        boolean z2;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.isOutOwner()) {
            return this.slidingOffsetX;
        }
        if (z && ((z2 = this.checkBoxVisible) || this.checkBoxAnimationInProgress)) {
            this.checkBoxTranslation = (int) Math.ceil((z2 ? CubicBezierInterpolator.EASE_OUT : CubicBezierInterpolator.EASE_IN).getInterpolation(this.checkBoxAnimationProgress) * AndroidUtilities.dp(35.0f));
        }
        return this.slidingOffsetX + this.checkBoxTranslation;
    }

    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    public int getObserverTag() {
        return this.TAG;
    }

    public int getParentWidth() {
        int i;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            messageObject = this.messageObjectToSet;
        }
        return (messageObject == null || !messageObject.preview || (i = this.parentWidth) <= 0) ? AndroidUtilities.displaySize.x : i;
    }

    public float getPhotoBottom() {
        return this.groupMedia != null ? r0.y + r0.height : this.photoImage.getImageY2();
    }

    public ImageReceiver getPhotoImage() {
        return this.photoImage;
    }

    public ImageReceiver getPhotoImage(int i) {
        GroupMedia groupMedia = this.groupMedia;
        return groupMedia != null ? groupMedia.getPhotoImage(i) : this.photoImage;
    }

    public ArrayList<PollButton> getPollButtons() {
        return this.pollButtons;
    }

    public MessageObject getPrimaryMessageObject() {
        MessageObject messageObject = this.currentMessageObject;
        MessageObject findPrimaryMessageObject = (messageObject == null || this.currentMessagesGroup == null || !messageObject.hasValidGroupId()) ? null : this.currentMessagesGroup.findPrimaryMessageObject();
        return findPrimaryMessageObject != null ? findPrimaryMessageObject : this.currentMessageObject;
    }

    public RadialProgress2 getRadialProgress() {
        return this.radialProgress;
    }

    public ReactionsLayoutInBubble.ReactionButton getReactionButton(ReactionsLayoutInBubble.VisibleReaction visibleReaction) {
        return this.reactionsLayoutInBubble.getReactionButton(visibleReaction);
    }

    public Theme.ResourcesProvider getResourcesProvider() {
        return this.resourcesProvider;
    }

    public SeekBar getSeekBar() {
        return this.seekBar;
    }

    public SeekBarWaveform getSeekBarWaveform() {
        return this.seekBarWaveform;
    }

    public float getSlidingOffsetX() {
        return this.slidingOffsetX;
    }

    public TLRPC.Document getStreamingMedia() {
        int i = this.documentAttachType;
        if (i == 4 || i == 7 || i == 2) {
            return this.documentAttach;
        }
        return null;
    }

    public int getTextX() {
        return this.textX;
    }

    public int getTextY() {
        return this.textY;
    }

    public int getThemedColor(int i) {
        return Theme.getColor(i, this.resourcesProvider);
    }

    public Paint getThemedPaint(String str) {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        Paint paint = resourcesProvider != null ? resourcesProvider.getPaint(str) : null;
        return paint != null ? paint : Theme.getThemePaint(str);
    }

    public float getTimeAlpha() {
        return this.timeAlpha;
    }

    public float getTimeX() {
        return this.transitionParams.shouldAnimateTimeX ? AndroidUtilities.lerp(r0.animateFromTimeX, this.timeX, r0.animateChangeProgress) : this.timeX;
    }

    public float getTimeY() {
        float f;
        int i;
        int i2 = 0;
        if (shouldDrawTimeOnMedia()) {
            if (this.drawCommentButton) {
                f = 41.3f;
                i2 = AndroidUtilities.dp(f);
            }
            i = -i2;
        } else if (this.currentMessageObject.isSponsored()) {
            i = -AndroidUtilities.dp(48.0f);
            if (this.hasNewLineForTime) {
                i -= AndroidUtilities.dp(4.0f);
            }
        } else {
            if (this.drawCommentButton) {
                f = 43.0f;
                i2 = AndroidUtilities.dp(f);
            }
            i = -i2;
        }
        return getTimeY(i);
    }

    public float getTimeY(float f) {
        if (shouldDrawTimeOnMedia() && this.documentAttachType != 7) {
            return ((getPhotoBottom() + this.additionalTimeOffsetY) - AndroidUtilities.dp(7.3f)) - this.timeLayout.getHeight();
        }
        float dp = ((this.layoutHeight - AndroidUtilities.dp((this.pinnedBottom || this.pinnedTop) ? 7.5f : 6.5f)) - this.timeLayout.getHeight()) + f;
        if (this.isRoundVideo) {
            dp -= (AndroidUtilities.dp(this.drawPinnedBottom ? 4.0f : 5.0f) + this.reactionsLayoutInBubble.getCurrentTotalHeight(this.transitionParams.animateChangeProgress)) * (1.0f - getVideoTranscriptionProgress());
        }
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        if (groupedMessages == null) {
            TransitionParams transitionParams = this.transitionParams;
            return dp + (transitionParams.deltaBottom - transitionParams.deltaTop);
        }
        MessageObject.GroupedMessages.TransitionParams transitionParams2 = groupedMessages.transitionParams;
        float f2 = dp + transitionParams2.offsetBottom;
        return transitionParams2.backgroundChangeBounds ? f2 - getTranslationY() : f2;
    }

    public int getTopMediaOffset() {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || messageObject.type != 14) {
            return 0;
        }
        return this.mediaOffsetY + this.namesOffset;
    }

    public TransitionParams getTransitionParams() {
        return this.transitionParams;
    }

    public float getVideoTranscriptionProgress() {
        MessageObject messageObject;
        if (this.transitionParams == null || (messageObject = this.currentMessageObject) == null || !messageObject.isRoundVideo()) {
            return 1.0f;
        }
        TransitionParams transitionParams = this.transitionParams;
        if (!transitionParams.animateDrawBackground) {
            return this.drawBackground ? 1.0f : 0.0f;
        }
        boolean z = this.drawBackground;
        float f = transitionParams.animateChangeProgress;
        return z ? f : 1.0f - f;
    }

    public float getViewTop() {
        return this.viewTop;
    }

    public int getWidthForButtons() {
        TransitionParams transitionParams = this.transitionParams;
        return transitionParams.animateWidthForButton ? AndroidUtilities.lerp(transitionParams.animateFromWidthForButton, this.widthForButtons, transitionParams.animateChangeProgress) : this.widthForButtons;
    }

    public boolean hasCaptionLayout() {
        return this.captionLayout != null;
    }

    public boolean hasCommentLayout() {
        return this.drawCommentButton;
    }

    public boolean hasGradientService() {
        Theme.ResourcesProvider resourcesProvider = this.resourcesProvider;
        return resourcesProvider != null ? resourcesProvider.hasGradientService() : Theme.hasGradientService();
    }

    public boolean hasNameLayout() {
        if (this.drawNameLayout && this.nameLayout != null) {
            return true;
        }
        if (this.drawForwardedName) {
            StaticLayout[] staticLayoutArr = this.forwardedNameLayout;
            if (staticLayoutArr[0] != null && staticLayoutArr[1] != null) {
                MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                if (groupedMessagePosition == null) {
                    return true;
                }
                if (groupedMessagePosition.minY == 0 && groupedMessagePosition.minX == 0) {
                    return true;
                }
            }
        }
        return this.replyNameLayout != null || this.drawTopic;
    }

    public boolean hasOutboundsContent() {
        AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable;
        MessageObject messageObject;
        MessageObject messageObject2;
        int i;
        AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable2 = this.effectDrawable;
        if ((swapAnimatedEmojiDrawable2 != null && swapAnimatedEmojiDrawable2.isNotEmpty() > 0.0f) || this.hasFactCheck) {
            return true;
        }
        if (this.transitionParams.animateExpandedQuotes && ((i = (messageObject2 = this.currentMessageObject).type) == 0 || i == 24 || i == 19 || messageObject2.isGiveawayOrGiveawayResults())) {
            return true;
        }
        if (this.channelRecommendationsCell != null && (messageObject = this.currentMessageObject) != null && messageObject.type == 27) {
            return true;
        }
        if (getAlpha() != 1.0f) {
            return false;
        }
        if (this.reactionsLayoutInBubble.hasOverlay()) {
            return true;
        }
        if ((!this.transitionParams.transitionBotButtons.isEmpty() && this.transitionParams.animateBotButtonsChanged) || !this.botButtons.isEmpty() || this.drawSideButton != 0) {
            return true;
        }
        if (this.drawNameLayout && this.nameLayout != null && (swapAnimatedEmojiDrawable = this.currentNameStatusDrawable) != null && swapAnimatedEmojiDrawable.getDrawable() != null) {
            return true;
        }
        AnimatedEmojiSpan.EmojiGroupedSpans emojiGroupedSpans = this.animatedEmojiStack;
        if (emojiGroupedSpans != null && !emojiGroupedSpans.holders.isEmpty()) {
            return true;
        }
        if (this.drawTopic && this.topicButton != null) {
            MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
            if (groupedMessagePosition == null) {
                return true;
            }
            if (groupedMessagePosition.minY == 0 && groupedMessagePosition.minX == 0) {
                return true;
            }
        }
        if (this.currentMessagesGroup == null) {
            TransitionParams transitionParams = this.transitionParams;
            if (((transitionParams.animateReplaceCaptionLayout && transitionParams.animateChangeProgress != 1.0f) || (transitionParams.animateChangeProgress != 1.0f && transitionParams.animateMessageText)) && transitionParams.animateOutAnimateEmoji != null && !this.transitionParams.animateOutAnimateEmoji.holders.isEmpty()) {
                return true;
            }
        }
        return false;
    }

    public boolean hasSpoilers() {
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
        if (textLayoutBlocks != null && (arrayList = textLayoutBlocks.textLayoutBlocks) != null) {
            Iterator<MessageObject.TextLayoutBlock> it = arrayList.iterator();
            while (it.hasNext()) {
                if (!it.next().spoilers.isEmpty()) {
                    return true;
                }
            }
        }
        if (getMessageObject() == null || getMessageObject().textLayoutBlocks == null) {
            return false;
        }
        Iterator<MessageObject.TextLayoutBlock> it2 = getMessageObject().textLayoutBlocks.iterator();
        while (it2.hasNext()) {
            if (!it2.next().spoilers.isEmpty()) {
                return true;
            }
        }
        return false;
    }

    @Override // org.telegram.ui.Cells.BaseCell, android.view.View
    public void invalidate() {
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (this.currentMessageObject == null) {
            return;
        }
        Runnable runnable = this.invalidateCallback;
        if (runnable != null) {
            runnable.run();
        }
        Runnable runnable2 = this.overrideInvalidate;
        if (runnable2 != null) {
            runnable2.run();
            return;
        }
        Runnable runnable3 = this.invalidateListener;
        if (runnable3 != null) {
            runnable3.run();
        }
        super.invalidate();
        if ((this.invalidatesParent || (this.currentMessagesGroup != null && invalidateParentForce())) && getParent() != null) {
            View view = (View) getParent();
            if (view.getParent() != null) {
                view.invalidate();
                ((View) view.getParent()).invalidate();
            }
        }
        if (!this.isBlurred || (chatMessageCellDelegate = this.delegate) == null) {
            return;
        }
        chatMessageCellDelegate.invalidateBlur();
    }

    @Override // android.view.View
    public void invalidate(int i, int i2, int i3, int i4) {
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (this.currentMessageObject == null) {
            return;
        }
        Runnable runnable = this.overrideInvalidate;
        if (runnable != null) {
            runnable.run();
            return;
        }
        Runnable runnable2 = this.invalidateListener;
        if (runnable2 != null) {
            runnable2.run();
        }
        super.invalidate(i, i2, i3, i4);
        if (this.invalidatesParent && getParent() != null) {
            ((View) getParent()).invalidate(((int) getX()) + i, ((int) getY()) + i2, ((int) getX()) + i3, ((int) getY()) + i4);
        }
        if (!this.isBlurred || (chatMessageCellDelegate = this.delegate) == null) {
            return;
        }
        chatMessageCellDelegate.invalidateBlur();
    }

    @Override // android.view.View, android.graphics.drawable.Drawable.Callback
    public void invalidateDrawable(Drawable drawable) {
        super.invalidateDrawable(drawable);
        if (this.currentMessagesGroup != null) {
            invalidateWithParent();
        }
    }

    @Override // org.telegram.ui.Cells.BaseCell
    public void invalidateLite() {
        ChatMessageCellDelegate chatMessageCellDelegate;
        if (this.currentMessageObject == null) {
            return;
        }
        Runnable runnable = this.overrideInvalidate;
        if (runnable != null) {
            runnable.run();
            return;
        }
        Runnable runnable2 = this.invalidateListener;
        if (runnable2 != null) {
            runnable2.run();
        }
        super.invalidate();
        if ((this.invalidatesParent || (this.currentMessagesGroup != null && invalidateParentForce())) && getParent() != null) {
            View view = (View) getParent();
            if (view.getParent() != null) {
                view.invalidate();
                ((View) view.getParent()).invalidate();
            }
        }
        if (!this.isBlurred || (chatMessageCellDelegate = this.delegate) == null) {
            return;
        }
        chatMessageCellDelegate.invalidateBlur();
    }

    public void invalidateOutbounds() {
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        if (chatMessageCellDelegate != null && chatMessageCellDelegate.canDrawOutboundsContent()) {
            super.invalidate();
        } else if (getParent() instanceof View) {
            ((View) getParent()).invalidate();
        }
    }

    public boolean isAdminLayoutChanged() {
        return !TextUtils.equals(this.lastPostAuthor, this.currentMessageObject.messageOwner.post_author);
    }

    public boolean isAnimatingPollAnswer() {
        return this.animatePollAnswerAlpha;
    }

    public boolean isCellAttachedToWindow() {
        return this.attachedToWindow;
    }

    public boolean isCheckBoxVisible() {
        return this.checkBoxVisible || this.checkBoxAnimationInProgress;
    }

    public boolean isDrawNameLayout() {
        return this.drawNameLayout && this.nameLayout != null;
    }

    public boolean isDrawPinnedBottom() {
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        return this.mediaBackground || this.drawPinnedBottom || (groupedMessagePosition != null && (groupedMessagePosition.flags & 8) == 0 && this.currentMessagesGroup.isDocuments);
    }

    public boolean isDrawSelectionBackground() {
        MessageObject messageObject;
        return ((isPressed() && this.isCheckPressed) || ((!this.isCheckPressed && this.isPressed) || this.isHighlighted)) && !textIsSelectionMode() && !hasSelectionOverlay() && ((messageObject = this.currentMessageObject) == null || !messageObject.preview);
    }

    public boolean isDrawTopic() {
        return this.drawTopic;
    }

    public boolean isDrawingSelectionBackground() {
        return this.drawSelectionBackground || this.isHighlightedAnimated || this.isHighlighted;
    }

    public boolean isHighlighted() {
        return this.isHighlighted;
    }

    public boolean isHighlightedAnimated() {
        return this.isHighlightedAnimated;
    }

    public boolean isInsideBackground(float f, float f2) {
        if (this.currentBackgroundDrawable != null) {
            if (f >= this.backgroundDrawableLeft && f <= r3 + this.backgroundDrawableRight) {
                return true;
            }
        }
        return false;
    }

    protected boolean isNeedAuthorName() {
        TLRPC.Message message;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject.forceAvatar) {
            return true;
        }
        if (messageObject.getDialogId() == UserObject.VERIFY && (message = this.currentMessageObject.messageOwner) != null && message.fwd_from != null) {
            return true;
        }
        if (this.currentMessageObject.isSponsored() || this.currentMessageObject.isGiveawayOrGiveawayResults()) {
            return false;
        }
        if (this.isPinnedChat && this.currentMessageObject.type == 0) {
            return true;
        }
        if (!this.pinnedTop && this.drawName && this.isChat) {
            if (!this.currentMessageObject.isOutOwner()) {
                return true;
            }
            if ((this.currentMessageObject.isSupergroup() && this.currentMessageObject.isFromGroup()) || this.currentMessageObject.isRepostPreview) {
                return true;
            }
        }
        return this.currentMessageObject.isImportedForward() && this.currentMessageObject.messageOwner.fwd_from.from_id == null;
    }

    public boolean isPinnedBottom() {
        return this.messageObjectToSet != null ? this.bottomNearToSet : this.pinnedBottom;
    }

    public boolean isPinnedTop() {
        return this.messageObjectToSet != null ? this.topNearToSet : this.pinnedTop;
    }

    public boolean isPlayingRound() {
        return this.isRoundVideo && this.isPlayingRound;
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public boolean isSeekBarDragAllowed() {
        MessageObject messageObject = this.currentMessageObject;
        return messageObject == null || !messageObject.isVoiceOnce();
    }

    protected boolean isWidthAdaptive() {
        return false;
    }

    /* JADX WARN: Code restructure failed: missing block: B:10:0x0070, code lost:
    
        if (r2 != null) goto L31;
     */
    /* JADX WARN: Code restructure failed: missing block: B:54:0x0084, code lost:
    
        r2 = r2.getLineBottom(r2.getLineCount() - 1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:59:0x0082, code lost:
    
        if (r2 != null) goto L31;
     */
    /* JADX WARN: Removed duplicated region for block: B:13:0x00fe  */
    /* JADX WARN: Removed duplicated region for block: B:17:0x0154  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x0191  */
    /* JADX WARN: Removed duplicated region for block: B:35:? A[ADDED_TO_REGION, RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:36:0x0165  */
    /* JADX WARN: Removed duplicated region for block: B:44:0x0108  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void layoutTextXY(boolean z) {
        int currentBackgroundLeft;
        int dp;
        int i;
        int dp2;
        int i2;
        StaticLayout staticLayout;
        int textHeight;
        int dp3;
        int dp4;
        int dp5;
        if (this.currentMessageObject.isOutOwner()) {
            currentBackgroundLeft = z ? (int) (this.backgroundDrawableLeft + this.transitionParams.deltaLeft) : getCurrentBackgroundLeft();
            dp = AndroidUtilities.dp(11.0f);
        } else {
            currentBackgroundLeft = z ? (int) (this.backgroundDrawableLeft + this.transitionParams.deltaLeft) : getCurrentBackgroundLeft();
            if (this.currentMessageObject.type == 19) {
                dp = 0;
            } else {
                dp = AndroidUtilities.dp((this.mediaBackground || !this.drawPinnedBottom) ? 17.0f : 11.0f);
            }
        }
        this.textX = currentBackgroundLeft + dp + getExtraTextX();
        if (!this.hasGamePreview) {
            if (this.hasInvoicePreview) {
                i = AndroidUtilities.dp(14.0f) + this.namesOffset;
                this.textY = i;
                staticLayout = this.siteNameLayout;
            } else if (this.currentMessageObject.type == 19) {
                this.textY = AndroidUtilities.dp(6.0f) + this.namesOffset;
                this.textX = !this.currentMessageObject.isOut() ? getCurrentBackgroundLeft() : this.textX - AndroidUtilities.dp(4.0f);
            } else {
                int dp6 = AndroidUtilities.dp(8.0f) + this.namesOffset;
                this.textY = dp6;
                if (this.currentMessageObject.hasCodeAtTop && (i2 = SharedConfig.bubbleRadius) > 10) {
                    this.textY = dp6 + AndroidUtilities.dp(i2 < 15 ? 1.0f : 2.0f);
                }
                if (this.currentMessageObject.hasCodeAtTop && this.namesOffset > 0) {
                    i = this.textY;
                    dp2 = AndroidUtilities.dp(5.0f);
                }
            }
            if (!this.currentMessageObject.isSponsored()) {
                textHeight = this.textY;
                dp3 = AndroidUtilities.dp(14.0f);
            } else {
                if (this.linkPreviewAbove) {
                    this.linkPreviewY = this.textY + AndroidUtilities.dp(10.0f);
                    this.textY += this.linkPreviewHeight + AndroidUtilities.dp(13.0f);
                    if (this.drawInstantView && !this.hasInvoicePreview && !this.currentMessageObject.isGiveawayOrGiveawayResults()) {
                        this.textY += AndroidUtilities.dp(44.0f);
                    }
                    if (this.linkPreviewAbove) {
                        dp4 = this.textY + this.currentMessageObject.textHeight(this.transitionParams);
                        dp5 = AndroidUtilities.dp(10.0f);
                    } else {
                        dp4 = this.linkPreviewY + this.linkPreviewHeight + AndroidUtilities.dp(this.drawInstantView ? 46.0f : 0.0f);
                        dp5 = AndroidUtilities.dp(this.linkPreviewHeight <= 0 ? -8.0f : 4.0f);
                    }
                    this.factCheckY = dp4 + dp5;
                    this.unmovedTextX = this.textX;
                    if (this.currentMessageObject.textXOffset == 0.0f || this.replyNameLayout == null) {
                        return;
                    }
                    int dp7 = this.backgroundWidth - AndroidUtilities.dp(31.0f);
                    MessageObject messageObject = this.currentMessageObject;
                    int i3 = dp7 - messageObject.textWidth;
                    if (!this.hasNewLineForTime) {
                        i3 -= this.timeWidth + AndroidUtilities.dp((messageObject.isOutOwner() ? 20 : 0) + 4);
                    }
                    if (i3 > 0) {
                        this.textX += i3 - getExtraTimeX();
                        return;
                    }
                    return;
                }
                textHeight = this.textY + this.currentMessageObject.textHeight(this.transitionParams);
                dp3 = AndroidUtilities.dp(10.0f);
            }
            this.linkPreviewY = textHeight + dp3;
            if (this.linkPreviewAbove) {
            }
            this.factCheckY = dp4 + dp5;
            this.unmovedTextX = this.textX;
            if (this.currentMessageObject.textXOffset == 0.0f) {
                return;
            } else {
                return;
            }
        }
        this.textX += AndroidUtilities.dp(11.0f);
        i = AndroidUtilities.dp(14.0f) + this.namesOffset;
        this.textY = i;
        staticLayout = this.siteNameLayout;
        this.textY = i + dp2;
        if (!this.currentMessageObject.isSponsored()) {
        }
        this.linkPreviewY = textHeight + dp3;
        if (this.linkPreviewAbove) {
        }
        this.factCheckY = dp4 + dp5;
        this.unmovedTextX = this.textX;
        if (this.currentMessageObject.textXOffset == 0.0f) {
        }
    }

    protected SpoilerEffect2 makeSpoilerEffect() {
        return SpoilerEffect2.getInstance(this);
    }

    public void markReactionsAsRead() {
        this.reactionsLayoutInBubble.hasUnreadReactions = false;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        messageObject.markReactionsAsRead();
    }

    public boolean needDelayRoundProgressDraw() {
        MessageObject messageObject;
        int i = this.documentAttachType;
        return (i == 7 || i == 4) && (messageObject = this.currentMessageObject) != null && messageObject.type != 5 && MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
    }

    public boolean needDrawAvatar() {
        MessageObject messageObject;
        MessageObject messageObject2;
        MessageObject messageObject3;
        return (this.isChat && !this.isSavedPreviewChat && ((!this.isThreadPost || this.isForum) && (messageObject3 = this.currentMessageObject) != null && !messageObject3.isOutOwner() && this.currentMessageObject.needDrawAvatar())) || ((messageObject = this.currentMessageObject) != null && messageObject.getDialogId() == UserObject.VERIFY) || ((messageObject2 = this.currentMessageObject) != null && messageObject2.forceAvatar);
    }

    public boolean needDrawTime() {
        MessageObject messageObject;
        return !this.forceNotDrawTime && ((messageObject = this.currentMessageObject) == null || messageObject.type != 27);
    }

    @Override // org.telegram.messenger.ImageReceiver.ImageReceiverDelegate
    public void onAnimationReady(ImageReceiver imageReceiver) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && imageReceiver == this.photoImage && messageObject.isAnimatedSticker()) {
            this.delegate.setShouldNotRepeatSticker(this.currentMessageObject);
        }
    }

    @Override // android.view.ViewGroup, android.view.View
    protected void onAttachedToWindow() {
        super.onAttachedToWindow();
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.startSpoilers);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.stopSpoilers);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didUpdatePremiumGiftStickers);
        NotificationCenter.getInstance(this.currentAccount).addObserver(this, NotificationCenter.userInfoDidLoad);
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null) {
            messageObject.animateComments = false;
        }
        MessageObject messageObject2 = this.messageObjectToSet;
        if (messageObject2 != null) {
            messageObject2.animateComments = false;
            setMessageContent(messageObject2, this.groupedMessagesToSet, this.bottomNearToSet, this.topNearToSet);
            this.messageObjectToSet = null;
            this.groupedMessagesToSet = null;
        }
        CheckBoxBase checkBoxBase = this.checkBox;
        if (checkBoxBase != null) {
            checkBoxBase.onAttachedToWindow();
        }
        CheckBoxBase checkBoxBase2 = this.mediaCheckBox;
        if (checkBoxBase2 != null) {
            checkBoxBase2.onAttachedToWindow();
        }
        if (this.pollCheckBox != null) {
            int i = 0;
            while (true) {
                CheckBoxBase[] checkBoxBaseArr = this.pollCheckBox;
                if (i >= checkBoxBaseArr.length) {
                    break;
                }
                checkBoxBaseArr[i].onAttachedToWindow();
                i++;
            }
        }
        this.attachedToWindow = true;
        this.animationOffsetX = 0.0f;
        this.slidingOffsetX = 0.0f;
        this.checkBoxTranslation = 0;
        updateTranslation();
        this.avatarImage.setParentView((View) getParent());
        this.avatarImage.onAttachedToWindow();
        checkImageReceiversAttachState();
        MessageObject messageObject3 = this.currentMessageObject;
        if (messageObject3 != null) {
            setAvatar(messageObject3);
        }
        int i2 = this.documentAttachType;
        if (i2 == 4 && this.autoPlayingMedia) {
            boolean isPlayingMessage = MediaController.getInstance().isPlayingMessage(this.currentMessageObject);
            this.animatingNoSoundPlaying = isPlayingMessage;
            this.animatingNoSoundProgress = isPlayingMessage ? 0.0f : 1.0f;
            this.animatingNoSound = 0;
        } else {
            this.animatingNoSoundPlaying = false;
            this.animatingNoSoundProgress = 0.0f;
            this.animatingDrawVideoImageButtonProgress = ((i2 == 4 || i2 == 2) && this.drawVideoSize) ? 1.0f : 0.0f;
        }
        if (getDelegate() != null && getDelegate().getTextSelectionHelper() != null) {
            getDelegate().getTextSelectionHelper().onChatMessageCellAttached(this);
        }
        if (this.documentAttachType == 5) {
            this.toSeekBarProgress = MediaController.getInstance().isPlayingMessage(this.currentMessageObject) ? 1.0f : 0.0f;
        }
        this.reactionsLayoutInBubble.onAttachToWindow();
        FlagSecureReason flagSecureReason = this.flagSecure;
        if (flagSecureReason != null) {
            flagSecureReason.attach();
        }
        GroupMedia groupMedia = this.groupMedia;
        if (groupMedia != null) {
            groupMedia.onAttachedToWindow();
        }
        updateFlagSecure();
        MessageObject messageObject4 = this.currentMessageObject;
        if (messageObject4 != null && messageObject4.type == 20 && this.unlockLayout != null) {
            invalidate();
        }
        MessageTopicButton messageTopicButton = this.topicButton;
        if (messageTopicButton != null) {
            messageTopicButton.onAttached(this);
        }
        AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable = this.currentNameStatusDrawable;
        if (swapAnimatedEmojiDrawable != null) {
            swapAnimatedEmojiDrawable.attach();
        }
        AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable2 = this.currentNameEmojiStatusDrawable;
        if (swapAnimatedEmojiDrawable2 != null) {
            swapAnimatedEmojiDrawable2.attach();
        }
        SpoilerEffect2 spoilerEffect2 = this.mediaSpoilerEffect2;
        if (spoilerEffect2 != null) {
            if (spoilerEffect2.destroyed) {
                SpoilerEffect2 makeSpoilerEffect = makeSpoilerEffect();
                this.mediaSpoilerEffect2 = makeSpoilerEffect;
                Integer num = this.mediaSpoilerEffect2Index;
                if (num != null) {
                    makeSpoilerEffect.reassignAttach(this, num.intValue());
                }
            } else {
                spoilerEffect2.attach(this);
            }
        }
        ChannelRecommendationsCell channelRecommendationsCell = this.channelRecommendationsCell;
        if (channelRecommendationsCell != null) {
            channelRecommendationsCell.onAttachedToWindow();
        }
        StickerSetLinkIcon stickerSetLinkIcon = this.stickerSetIcons;
        if (stickerSetLinkIcon != null) {
            stickerSetLinkIcon.attach(this);
        }
    }

    @Override // android.view.ViewGroup, android.view.View
    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.startSpoilers);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.stopSpoilers);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didUpdatePremiumGiftStickers);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.userInfoDidLoad);
        cancelShakeAnimation();
        CheckBoxBase checkBoxBase = this.checkBox;
        if (checkBoxBase != null) {
            checkBoxBase.onDetachedFromWindow();
        }
        CheckBoxBase checkBoxBase2 = this.mediaCheckBox;
        if (checkBoxBase2 != null) {
            checkBoxBase2.onDetachedFromWindow();
        }
        if (this.pollCheckBox != null) {
            int i = 0;
            while (true) {
                CheckBoxBase[] checkBoxBaseArr = this.pollCheckBox;
                if (i >= checkBoxBaseArr.length) {
                    break;
                }
                checkBoxBaseArr[i].onDetachedFromWindow();
                i++;
            }
        }
        this.attachedToWindow = false;
        GroupMedia groupMedia = this.groupMedia;
        if (groupMedia != null) {
            groupMedia.onDetachedFromWindow();
        }
        this.avatarImage.onDetachedFromWindow();
        checkImageReceiversAttachState();
        if (this.addedForTest && this.currentUrl != null && this.currentWebFile != null) {
            ImageLoader.getInstance().removeTestWebFile(this.currentUrl);
            this.addedForTest = false;
        }
        StickerSetLinkIcon stickerSetLinkIcon = this.stickerSetIcons;
        if (stickerSetLinkIcon != null) {
            stickerSetLinkIcon.detach(this);
        }
        DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
        if (getDelegate() != null && getDelegate().getTextSelectionHelper() != null) {
            getDelegate().getTextSelectionHelper().onChatMessageCellDetached(this);
        }
        this.transitionParams.onDetach();
        if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
            Theme.getCurrentAudiVisualizerDrawable().setParentView(null);
        }
        ValueAnimator valueAnimator = this.statusDrawableAnimator;
        if (valueAnimator != null) {
            valueAnimator.removeAllListeners();
            this.statusDrawableAnimator.cancel();
        }
        this.reactionsLayoutInBubble.onDetachFromWindow();
        this.statusDrawableAnimationInProgress = false;
        FlagSecureReason flagSecureReason = this.flagSecure;
        if (flagSecureReason != null) {
            flagSecureReason.detach();
        }
        MessageTopicButton messageTopicButton = this.topicButton;
        if (messageTopicButton != null) {
            messageTopicButton.onDetached(this);
        }
        AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable = this.currentNameStatusDrawable;
        if (swapAnimatedEmojiDrawable != null) {
            swapAnimatedEmojiDrawable.detach();
        }
        AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable swapAnimatedEmojiDrawable2 = this.currentNameEmojiStatusDrawable;
        if (swapAnimatedEmojiDrawable2 != null) {
            swapAnimatedEmojiDrawable2.detach();
        }
        SpoilerEffect2 spoilerEffect2 = this.mediaSpoilerEffect2;
        if (spoilerEffect2 != null) {
            spoilerEffect2.detach(this);
        }
        ChannelRecommendationsCell channelRecommendationsCell = this.channelRecommendationsCell;
        if (channelRecommendationsCell != null) {
            channelRecommendationsCell.onDetachedFromWindow();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:133:0x03ed  */
    /* JADX WARN: Removed duplicated region for block: B:135:0x0409  */
    /* JADX WARN: Removed duplicated region for block: B:154:0x0487  */
    @Override // android.view.View
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    protected void onDraw(Canvas canvas) {
        TextPaint textPaint;
        int i;
        int themedColor;
        int i2;
        boolean z;
        MessageObject messageObject;
        MessageObject.GroupedMessagePosition groupedMessagePosition;
        int i3;
        int dp;
        int extraTextX;
        int dp2;
        MessageTopicButton messageTopicButton;
        int height;
        int i4;
        int dp3;
        int i5;
        MessageTopicButton messageTopicButton2;
        Theme.MessageDrawable messageDrawable;
        MessageObject messageObject2;
        int i6;
        int i7;
        int i8;
        int i9;
        SeekBar seekBar;
        int themedColor2;
        int themedColor3;
        int themedColor4;
        int themedColor5;
        int i10;
        int adaptHue;
        if (this.currentMessageObject == null || this.doNotDraw) {
            return;
        }
        if (!this.wasLayout) {
            onLayout(false, getLeft(), getTop(), getRight(), getBottom());
        }
        if (this.enterTransitionInProgress && this.currentMessageObject.isAnimatedEmojiStickers()) {
            return;
        }
        if (this.channelRecommendationsCell != null && this.currentMessageObject.type == 27) {
            ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
            if (chatMessageCellDelegate == null || chatMessageCellDelegate.canDrawOutboundsContent()) {
                this.channelRecommendationsCell.draw(canvas);
            }
            this.transitionParams.recordDrawingState();
            return;
        }
        setupTextColors();
        if (this.documentAttach != null) {
            int i11 = this.documentAttachType;
            if (i11 == 3 || i11 == 7) {
                if (this.currentMessageObject.isOutOwner()) {
                    this.seekBarWaveform.setColors(getThemedColor(Theme.key_chat_outVoiceSeekbar), getThemedColor(Theme.key_chat_outVoiceSeekbarFill), getThemedColor(Theme.key_chat_outVoiceSeekbarSelected));
                    seekBar = this.seekBar;
                    themedColor2 = getThemedColor(Theme.key_chat_outAudioSeekbar);
                    themedColor3 = getThemedColor(Theme.key_chat_outAudioCacheSeekbar);
                    int i12 = Theme.key_chat_outAudioSeekbarFill;
                    themedColor4 = getThemedColor(i12);
                    themedColor5 = getThemedColor(i12);
                    i10 = Theme.key_chat_outAudioSeekbarSelected;
                    adaptHue = getThemedColor(i10);
                    seekBar.setColors(themedColor2, themedColor3, themedColor4, themedColor5, adaptHue);
                } else if (!this.hasLinkPreview || this.linkLine == null) {
                    this.seekBarWaveform.setColors(getThemedColor(Theme.key_chat_inVoiceSeekbar), getThemedColor(Theme.key_chat_inVoiceSeekbarFill), getThemedColor(Theme.key_chat_inVoiceSeekbarSelected));
                    seekBar = this.seekBar;
                    themedColor2 = getThemedColor(Theme.key_chat_inAudioSeekbar);
                    themedColor3 = getThemedColor(Theme.key_chat_inAudioCacheSeekbar);
                    int i13 = Theme.key_chat_inAudioSeekbarFill;
                    themedColor4 = getThemedColor(i13);
                    themedColor5 = getThemedColor(i13);
                    i10 = Theme.key_chat_inAudioSeekbarSelected;
                    adaptHue = getThemedColor(i10);
                    seekBar.setColors(themedColor2, themedColor3, themedColor4, themedColor5, adaptHue);
                } else {
                    this.seekBarWaveform.setColors(Theme.adaptHue(getThemedColor(Theme.key_chat_inVoiceSeekbar), this.linkLine.getColor()), Theme.adaptHue(getThemedColor(Theme.key_chat_inVoiceSeekbarFill), this.linkLine.getColor()), Theme.adaptHue(getThemedColor(Theme.key_chat_inVoiceSeekbarSelected), this.linkLine.getColor()));
                    seekBar = this.seekBar;
                    themedColor2 = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioSeekbar), this.linkLine.getColor());
                    themedColor3 = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioCacheSeekbar), this.linkLine.getColor());
                    int i14 = Theme.key_chat_inAudioSeekbarFill;
                    themedColor4 = Theme.adaptHue(getThemedColor(i14), this.linkLine.getColor());
                    themedColor5 = Theme.adaptHue(getThemedColor(i14), this.linkLine.getColor());
                    adaptHue = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioSeekbarSelected), this.linkLine.getColor());
                    seekBar.setColors(themedColor2, themedColor3, themedColor4, themedColor5, adaptHue);
                }
            } else if (i11 == 5) {
                if (!this.currentMessageObject.isOutOwner()) {
                    if (!this.hasLinkPreview || this.linkLine == null) {
                        SeekBar seekBar2 = this.seekBar;
                        int themedColor6 = getThemedColor(Theme.key_chat_inAudioSeekbar);
                        int themedColor7 = getThemedColor(Theme.key_chat_inAudioCacheSeekbar);
                        int i15 = Theme.key_chat_inAudioSeekbarFill;
                        seekBar2.setColors(themedColor6, themedColor7, getThemedColor(i15), getThemedColor(i15), getThemedColor(Theme.key_chat_inAudioSeekbarSelected));
                    }
                    seekBar = this.seekBar;
                    themedColor2 = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioSeekbar), this.linkLine.getColor());
                    themedColor3 = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioCacheSeekbar), this.linkLine.getColor());
                    int i142 = Theme.key_chat_inAudioSeekbarFill;
                    themedColor4 = Theme.adaptHue(getThemedColor(i142), this.linkLine.getColor());
                    themedColor5 = Theme.adaptHue(getThemedColor(i142), this.linkLine.getColor());
                    adaptHue = Theme.adaptHue(getThemedColor(Theme.key_chat_inAudioSeekbarSelected), this.linkLine.getColor());
                    seekBar.setColors(themedColor2, themedColor3, themedColor4, themedColor5, adaptHue);
                }
                seekBar = this.seekBar;
                themedColor2 = getThemedColor(Theme.key_chat_outAudioSeekbar);
                themedColor3 = getThemedColor(Theme.key_chat_outAudioCacheSeekbar);
                int i122 = Theme.key_chat_outAudioSeekbarFill;
                themedColor4 = getThemedColor(i122);
                themedColor5 = getThemedColor(i122);
                i10 = Theme.key_chat_outAudioSeekbarSelected;
                adaptHue = getThemedColor(i10);
                seekBar.setColors(themedColor2, themedColor3, themedColor4, themedColor5, adaptHue);
            }
        }
        MessageObject messageObject3 = this.currentMessageObject;
        if (messageObject3.type == 5) {
            textPaint = Theme.chat_timePaint;
            themedColor = ColorUtils.blendARGB(getThemedColor(Theme.key_chat_serviceText), getThemedColor(isDrawSelectionBackground() ? this.currentMessageObject.isOutOwner() ? Theme.key_chat_outTimeSelectedText : Theme.key_chat_inTimeSelectedText : this.currentMessageObject.isOutOwner() ? Theme.key_chat_outTimeText : Theme.key_chat_inTimeText), getVideoTranscriptionProgress());
        } else {
            if (this.mediaBackground) {
                if (messageObject3.shouldDrawWithoutBackground()) {
                    textPaint = Theme.chat_timePaint;
                    i = Theme.key_chat_serviceText;
                } else {
                    textPaint = Theme.chat_timePaint;
                    i = Theme.key_chat_mediaTimeText;
                }
            } else if (messageObject3.isOutOwner()) {
                textPaint = Theme.chat_timePaint;
                i = isDrawSelectionBackground() ? Theme.key_chat_outTimeSelectedText : Theme.key_chat_outTimeText;
            } else {
                textPaint = Theme.chat_timePaint;
                i = isDrawSelectionBackground() ? Theme.key_chat_inTimeSelectedText : Theme.key_chat_inTimeText;
            }
            themedColor = getThemedColor(i);
        }
        textPaint.setColor(themedColor);
        if (isWidthAdaptive()) {
            canvas.save();
            canvas.translate(-getBoundsLeft(), 0.0f);
        }
        drawBackgroundInternal(canvas, false);
        if (this.isHighlightedAnimated) {
            long currentTimeMillis = System.currentTimeMillis();
            long abs = Math.abs(currentTimeMillis - this.lastHighlightProgressTime);
            if (abs > 17) {
                abs = 17;
            }
            int i16 = (int) (this.highlightProgress - abs);
            this.highlightProgress = i16;
            this.lastHighlightProgressTime = currentTimeMillis;
            if (i16 <= 0) {
                this.highlightProgress = 0;
                this.isHighlightedAnimated = false;
                if (this.highlightedQuote) {
                    resetUrlPaths();
                }
                this.highlightedQuote = false;
            }
            invalidate();
            if (getParent() != null) {
                ((View) getParent()).invalidate();
            }
        }
        if (this.alphaInternal != 1.0f) {
            int measuredHeight = getMeasuredHeight();
            int measuredWidth = getMeasuredWidth();
            Theme.MessageDrawable messageDrawable2 = this.currentBackgroundDrawable;
            if (messageDrawable2 != null) {
                i9 = messageDrawable2.getBounds().top;
                i8 = this.currentBackgroundDrawable.getBounds().bottom;
                i7 = this.currentBackgroundDrawable.getBounds().left;
                i6 = this.currentBackgroundDrawable.getBounds().right;
            } else {
                i6 = measuredWidth;
                i7 = 0;
                i8 = measuredHeight;
                i9 = 0;
            }
            if (this.drawSideButton != 0) {
                if (this.currentMessageObject.isOutOwner()) {
                    i7 -= AndroidUtilities.dp(40.0f);
                } else {
                    i6 += AndroidUtilities.dp(40.0f);
                }
            }
            if (getY() < 0.0f) {
                i9 = (int) (-getY());
            }
            float y = getY() + getMeasuredHeight();
            float f = this.parentHeight;
            if (y > f) {
                i8 = (int) (f - getY());
            }
            this.rect.set(i7, i9, i6, i8);
            i2 = canvas.saveLayerAlpha(this.rect, (int) (this.alphaInternal * 255.0f), 31);
        } else {
            i2 = Integer.MIN_VALUE;
        }
        if (!this.transitionParams.animateBackgroundBoundsInner || (messageDrawable = this.currentBackgroundDrawable) == null || this.isRoundVideo || ((messageObject2 = this.currentMessageObject) != null && messageObject2.sendPreview)) {
            z = false;
        } else {
            Rect bounds = messageDrawable.getBounds();
            canvas.save();
            canvas.clipRect(bounds.left + AndroidUtilities.dp(4.0f), bounds.top + AndroidUtilities.dp(4.0f), bounds.right - AndroidUtilities.dp(4.0f), bounds.bottom - AndroidUtilities.dp(4.0f));
            z = true;
        }
        drawContent(canvas, false);
        ExpiredStoryView expiredStoryView = this.expiredStoryView;
        if (expiredStoryView != null && expiredStoryView.visible) {
            expiredStoryView.draw(canvas, this);
        }
        if (z) {
            canvas.restore();
        }
        if (this.replyNameLayout != null) {
            float f2 = this.replyTextHeight;
            TransitionParams transitionParams = this.transitionParams;
            if (transitionParams != null && transitionParams.animateReplyTextLayout != null) {
                f2 = AndroidUtilities.lerp(this.transitionParams.animateFromReplyTextHeight, f2, this.transitionParams.animateChangeProgress);
            }
            this.replyHeight = AndroidUtilities.dp(9.0f) + Theme.chat_replyNamePaint.getTextSize() + Math.max(f2 - AndroidUtilities.dp(3.66f), Theme.chat_replyTextPaint.getTextSize());
            if (this.currentMessageObject.shouldDrawWithoutBackground()) {
                MessageObject messageObject4 = this.currentMessageObject;
                if (messageObject4.type != 19) {
                    if (messageObject4.isOutOwner()) {
                        int dp4 = AndroidUtilities.dp(23.0f);
                        this.replyStartX = dp4;
                        if (this.isPlayingRound) {
                            i5 = dp4 - (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize);
                        }
                        if (this.drawForwardedName) {
                            int dp5 = AndroidUtilities.dp(12.0f);
                            this.replyStartY = dp5;
                            if (this.drawTopic && (messageTopicButton2 = this.topicButton) != null) {
                                height = dp5 + messageTopicButton2.height() + AndroidUtilities.dp(10.0f);
                                this.replyStartY = height;
                            }
                        } else {
                            int dp6 = AndroidUtilities.dp(4.0f) + (((int) Theme.chat_forwardNamePaint.getTextSize()) * 2);
                            this.forwardHeight = dp6;
                            this.replyStartY = this.forwardNameY + dp6 + AndroidUtilities.dp(6.0f);
                        }
                        this.replyStartY += AndroidUtilities.dp(0.66f);
                    } else {
                        if (this.currentMessageObject.type == 5) {
                            i4 = this.backgroundDrawableLeft + this.backgroundDrawableRight;
                            dp3 = AndroidUtilities.dp(4.0f);
                        } else {
                            i4 = this.backgroundDrawableLeft + this.backgroundDrawableRight;
                            dp3 = AndroidUtilities.dp(17.0f);
                        }
                        i5 = i4 + dp3;
                    }
                    this.replyStartX = i5;
                    if (this.drawForwardedName) {
                    }
                    this.replyStartY += AndroidUtilities.dp(0.66f);
                }
            }
            if (this.currentMessageObject.isOutOwner()) {
                int dp7 = this.backgroundDrawableLeft + AndroidUtilities.dp(12.0f) + getExtraTextX();
                this.replyStartX = dp7;
                if (this.currentMessageObject.type == 19) {
                    extraTextX = dp7 - Math.max(0, ((Math.max(this.replyNameWidth, this.replyTextWidth) + dp7) + AndroidUtilities.dp(14.0f)) - AndroidUtilities.displaySize.x);
                }
                if (this.currentMessageObject.type == 19) {
                    this.replyStartX -= AndroidUtilities.dp(7.0f);
                }
                this.forwardHeight = AndroidUtilities.dp(4.0f) + (((int) Theme.chat_forwardNamePaint.getTextSize()) * 2);
                dp2 = AndroidUtilities.dp(12.0f) + ((this.drawNameLayout || this.nameLayout == null) ? 0 : AndroidUtilities.dp(6.0f) + ((int) Theme.chat_namePaint.getTextSize())) + ((this.drawForwardedName || this.forwardedNameLayout[0] == null) ? 0 : AndroidUtilities.dp(4.0f) + this.forwardHeight);
                this.replyStartY = dp2;
                if (this.drawTopic && (messageTopicButton = this.topicButton) != null) {
                    height = dp2 + messageTopicButton.height() + AndroidUtilities.dp(5.0f);
                    this.replyStartY = height;
                }
                this.replyStartY += AndroidUtilities.dp(0.66f);
            } else {
                if (this.mediaBackground) {
                    i3 = this.backgroundDrawableLeft;
                    dp = AndroidUtilities.dp(12.0f);
                } else {
                    i3 = this.backgroundDrawableLeft;
                    dp = AndroidUtilities.dp(this.drawPinnedBottom ? 12.0f : 18.0f);
                }
                extraTextX = i3 + dp + getExtraTextX();
            }
            this.replyStartX = extraTextX;
            if (this.currentMessageObject.type == 19) {
            }
            this.forwardHeight = AndroidUtilities.dp(4.0f) + (((int) Theme.chat_forwardNamePaint.getTextSize()) * 2);
            dp2 = AndroidUtilities.dp(12.0f) + ((this.drawNameLayout || this.nameLayout == null) ? 0 : AndroidUtilities.dp(6.0f) + ((int) Theme.chat_namePaint.getTextSize())) + ((this.drawForwardedName || this.forwardedNameLayout[0] == null) ? 0 : AndroidUtilities.dp(4.0f) + this.forwardHeight);
            this.replyStartY = dp2;
            if (this.drawTopic) {
                height = dp2 + messageTopicButton.height() + AndroidUtilities.dp(5.0f);
                this.replyStartY = height;
            }
            this.replyStartY += AndroidUtilities.dp(0.66f);
        }
        if (this.currentPosition == null && !this.transitionParams.animateBackgroundBoundsInner && (!this.enterTransitionInProgress || this.currentMessageObject.isVoice())) {
            drawNamesLayout(canvas, 1.0f);
        }
        if ((!this.autoPlayingMedia || !MediaController.getInstance().isPlayingMessageAndReadyToDraw(this.currentMessageObject) || this.isRoundVideo) && !this.transitionParams.animateBackgroundBoundsInner && ((messageObject = this.currentMessageObject) == null || !messageObject.preview)) {
            drawOverlays(canvas);
        }
        if ((this.drawTime || !this.mediaBackground) && !this.forceNotDrawTime && !this.transitionParams.animateBackgroundBoundsInner && ((!this.enterTransitionInProgress || this.currentMessageObject.isVoice()) && (!this.currentMessageObject.isQuickReply() || this.currentMessageObject.isSendError()))) {
            drawTime(canvas, 1.0f, false);
        }
        if ((this.controlsAlpha != 1.0f || this.timeAlpha != 1.0f) && this.currentMessageObject.type != 5) {
            long currentTimeMillis2 = System.currentTimeMillis();
            long abs2 = Math.abs(this.lastControlsAlphaChangeTime - currentTimeMillis2);
            long j = this.totalChangeTime + (abs2 <= 17 ? abs2 : 17L);
            this.totalChangeTime = j;
            if (j > 200) {
                this.totalChangeTime = 200L;
            }
            this.lastControlsAlphaChangeTime = currentTimeMillis2;
            if (this.controlsAlpha != 1.0f) {
                this.controlsAlpha = AndroidUtilities.decelerateInterpolator.getInterpolation(this.totalChangeTime / 200.0f);
            }
            if (this.timeAlpha != 1.0f) {
                this.timeAlpha = AndroidUtilities.decelerateInterpolator.getInterpolation(this.totalChangeTime / 200.0f);
            }
            invalidate();
            if (this.forceNotDrawTime && (groupedMessagePosition = this.currentPosition) != null && groupedMessagePosition.last && getParent() != null) {
                ((View) getParent()).invalidate();
            }
        }
        if ((this.drawBackground || this.transitionParams.animateDrawBackground) && shouldDrawSelectionOverlay() && this.currentMessagesGroup == null && hasSelectionOverlay()) {
            if (this.selectionOverlayPaint == null) {
                this.selectionOverlayPaint = new Paint(1);
            }
            this.selectionOverlayPaint.setColor(getSelectionOverlayColor());
            int alpha = this.selectionOverlayPaint.getAlpha();
            this.selectionOverlayPaint.setAlpha((int) (alpha * getHighlightAlpha() * getAlpha()));
            if (this.selectionOverlayPaint.getAlpha() > 0) {
                canvas.save();
                canvas.clipRect(0, 0, getMeasuredWidth(), getMeasuredHeight());
                this.currentBackgroundDrawable.drawCached(canvas, this.backgroundCacheParams, this.selectionOverlayPaint);
                canvas.restore();
            }
            this.selectionOverlayPaint.setAlpha(alpha);
        }
        ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
        if (chatMessageCellDelegate2 == null || chatMessageCellDelegate2.canDrawOutboundsContent() || this.transitionParams.messageEntering || getAlpha() != 1.0f) {
            drawOutboundsContent(canvas);
        }
        if (i2 != Integer.MIN_VALUE) {
            canvas.restoreToCount(i2);
        }
        if (isWidthAdaptive()) {
            canvas.restore();
        }
        updateSelectionTextPosition();
    }

    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    public void onFailedDownload(String str, boolean z) {
        int i = this.documentAttachType;
        updateButtonState(true, i == 3 || i == 5, false);
    }

    @Override // android.view.View
    public boolean onHoverEvent(MotionEvent motionEvent) {
        int x = (int) motionEvent.getX();
        int y = (int) motionEvent.getY();
        if (motionEvent.getAction() == 9 || motionEvent.getAction() == 7) {
            for (int i = 0; i < this.accessibilityVirtualViewBounds.size(); i++) {
                if (((Rect) this.accessibilityVirtualViewBounds.valueAt(i)).contains(x, y)) {
                    int keyAt = this.accessibilityVirtualViewBounds.keyAt(i);
                    if (keyAt == this.currentFocusedVirtualView) {
                        return true;
                    }
                    this.currentFocusedVirtualView = keyAt;
                    sendAccessibilityEventForVirtualView(keyAt, 32768);
                    return true;
                }
            }
        } else if (motionEvent.getAction() == 10) {
            this.currentFocusedVirtualView = 0;
        }
        return super.onHoverEvent(motionEvent);
    }

    @Override // android.view.View
    public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo accessibilityNodeInfo) {
        super.onInitializeAccessibilityNodeInfo(accessibilityNodeInfo);
    }

    /* JADX WARN: Removed duplicated region for block: B:17:0x02d9  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x02ea  */
    /* JADX WARN: Removed duplicated region for block: B:320:0x0161  */
    /* JADX WARN: Removed duplicated region for block: B:323:0x0174  */
    /* JADX WARN: Removed duplicated region for block: B:329:0x0199  */
    /* JADX WARN: Removed duplicated region for block: B:334:0x01c0  */
    /* JADX WARN: Removed duplicated region for block: B:349:0x0203  */
    /* JADX WARN: Removed duplicated region for block: B:358:0x0193  */
    @Override // android.view.ViewGroup, android.view.View
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    protected void onLayout(boolean z, int i, int i2, int i3, int i4) {
        int i5;
        float f;
        int dp;
        int dp2;
        int i6;
        int i7;
        float f2;
        int dp3;
        int dp4;
        int dp5;
        MessageObject messageObject;
        int i8;
        int dp6;
        MessageObject.TextLayoutBlocks textLayoutBlocks;
        MessageObject.TextLayoutBlocks textLayoutBlocks2;
        int dp7;
        int dp8;
        int i9;
        int dp9;
        int dp10;
        MessageObject.TextLayoutBlocks textLayoutBlocks3;
        float f3;
        int dp11;
        MessageObject.TextLayoutBlocks textLayoutBlocks4;
        MessageObject.TextLayoutBlocks textLayoutBlocks5;
        int textHeight;
        int dp12;
        int dp13;
        if (this.currentMessageObject == null) {
            return;
        }
        int measuredHeight = getMeasuredHeight() + (getMeasuredWidth() << 16);
        if (this.lastSize != measuredHeight || !this.wasLayout) {
            this.layoutWidth = getMeasuredWidth();
            this.layoutHeight = getMeasuredHeight() - this.substractBackgroundHeight;
            if (this.timeTextWidth < 0) {
                this.timeTextWidth = AndroidUtilities.dp(10.0f);
            }
            if (this.currentTimeString != null) {
                this.timeLayout = new StaticLayout(this.currentTimeString, Theme.chat_timePaint, this.timeTextWidth + AndroidUtilities.dp(100.0f), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            } else {
                this.timeLayout = null;
            }
            if (this.mediaBackground) {
                if (this.currentMessageObject.isOutOwner()) {
                    dp2 = (this.layoutWidth - this.timeWidth) - AndroidUtilities.dp(42.0f);
                } else {
                    this.timeX = (this.backgroundWidth - AndroidUtilities.dp(4.0f)) - this.timeWidth;
                    if (this.currentMessageObject.isAnyKindOfSticker()) {
                        this.timeX = Math.max(AndroidUtilities.dp(26.0f), this.timeX);
                    }
                    if (this.isAvatarVisible && !isWidthAdaptive()) {
                        this.timeX += AndroidUtilities.dp(48.0f);
                    }
                    MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                    if (groupedMessagePosition != null && (i6 = groupedMessagePosition.leftSpanOffset) != 0) {
                        this.timeX += (int) Math.ceil((i6 / 1000.0f) * getGroupPhotosWidth());
                    }
                    if (this.captionLayout != null && this.currentPosition != null) {
                        dp2 = this.timeX + AndroidUtilities.dp(4.0f);
                    }
                    if (SharedConfig.bubbleRadius >= 10 && this.captionLayout == null && (i7 = this.documentAttachType) != 7 && i7 != 6) {
                        i5 = this.timeX;
                        dp = AndroidUtilities.dp(2.0f);
                        this.timeX = i5 - dp;
                    }
                    int extraTimeX = this.timeX - getExtraTimeX();
                    this.timeX = extraTimeX;
                    if (this.effectId != 0) {
                        this.timeX = extraTimeX + AndroidUtilities.dp(18.0f);
                    }
                    if ((this.currentMessageObject.messageOwner.flags & 1024) == 0) {
                        String str = this.currentViewsString;
                        if (str == null) {
                            str = "";
                        }
                        this.viewsLayout = new StaticLayout(str, Theme.chat_timePaint, this.viewsTextWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                    } else {
                        this.viewsLayout = null;
                    }
                    if (this.currentRepliesString != null || this.currentMessageObject.scheduled) {
                        this.repliesLayout = null;
                    } else {
                        this.repliesLayout = new StaticLayout(this.currentRepliesString, Theme.chat_timePaint, this.repliesTextWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                    }
                    if (this.isAvatarVisible) {
                        this.avatarImage.setImageCoords(AndroidUtilities.dp(this.currentMessageObject.isRepostPreview ? 15.0f : 6.0f), this.avatarImage.getImageY(), AndroidUtilities.dp(this.currentMessageObject.isRepostPreview ? 36.0f : 42.0f), AndroidUtilities.dp(this.currentMessageObject.isRepostPreview ? 36.0f : 42.0f));
                    }
                    if (this.currentMessageObject.type == 20 || this.currentUnlockString == null) {
                        this.unlockLayout = null;
                    } else {
                        this.unlockLayout = new StaticLayout(this.currentUnlockString, Theme.chat_unlockExtendedMediaTextPaint, this.unlockTextWidth, Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
                        int i10 = ((TLRPC.TL_messageExtendedMediaPreview) this.currentMessageObject.messageOwner.media.extended_media.get(0)).video_duration;
                        if (i10 != 0) {
                            String formatDuration = AndroidUtilities.formatDuration(i10, false);
                            this.durationWidth = (int) Math.ceil(Theme.chat_durationPaint.measureText(formatDuration));
                            this.videoInfoLayout = new StaticLayout(formatDuration, Theme.chat_durationPaint, this.durationWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                        } else {
                            this.videoInfoLayout = null;
                        }
                    }
                    this.wasLayout = true;
                }
                this.timeX = dp2;
                if (SharedConfig.bubbleRadius >= 10) {
                    i5 = this.timeX;
                    dp = AndroidUtilities.dp(2.0f);
                    this.timeX = i5 - dp;
                }
                int extraTimeX2 = this.timeX - getExtraTimeX();
                this.timeX = extraTimeX2;
                if (this.effectId != 0) {
                }
                if ((this.currentMessageObject.messageOwner.flags & 1024) == 0) {
                }
                if (this.currentRepliesString != null) {
                }
                this.repliesLayout = null;
                if (this.isAvatarVisible) {
                }
                if (this.currentMessageObject.type == 20) {
                }
                this.unlockLayout = null;
                this.wasLayout = true;
            } else {
                if (this.currentMessageObject.isOutOwner()) {
                    i5 = this.layoutWidth - this.timeWidth;
                    f = 38.5f;
                } else {
                    this.timeX = (this.backgroundWidth - AndroidUtilities.dp(9.0f)) - this.timeWidth;
                    if (this.currentMessageObject.isAnyKindOfSticker()) {
                        this.timeX = Math.max(0, this.timeX);
                    }
                    if (this.isAvatarVisible && !isWidthAdaptive()) {
                        this.timeX += AndroidUtilities.dp(48.0f);
                    }
                    if (shouldDrawTimeOnMedia()) {
                        i5 = this.timeX;
                        f = 7.0f;
                    }
                    int extraTimeX22 = this.timeX - getExtraTimeX();
                    this.timeX = extraTimeX22;
                    if (this.effectId != 0) {
                    }
                    if ((this.currentMessageObject.messageOwner.flags & 1024) == 0) {
                    }
                    if (this.currentRepliesString != null) {
                    }
                    this.repliesLayout = null;
                    if (this.isAvatarVisible) {
                    }
                    if (this.currentMessageObject.type == 20) {
                    }
                    this.unlockLayout = null;
                    this.wasLayout = true;
                }
                dp = AndroidUtilities.dp(f);
                this.timeX = i5 - dp;
                int extraTimeX222 = this.timeX - getExtraTimeX();
                this.timeX = extraTimeX222;
                if (this.effectId != 0) {
                }
                if ((this.currentMessageObject.messageOwner.flags & 1024) == 0) {
                }
                if (this.currentRepliesString != null) {
                }
                this.repliesLayout = null;
                if (this.isAvatarVisible) {
                }
                if (this.currentMessageObject.type == 20) {
                }
                this.unlockLayout = null;
                this.wasLayout = true;
            }
        }
        this.lastSize = measuredHeight;
        if (this.currentMessageObject.type == 0) {
            this.textY = AndroidUtilities.dp(10.0f) + this.namesOffset;
            if (this.currentMessageObject.isSponsored()) {
                textHeight = this.textY + AndroidUtilities.dp(14.0f);
            } else if (this.linkPreviewAbove) {
                this.linkPreviewY = this.textY + AndroidUtilities.dp(10.0f);
                this.textY += this.linkPreviewHeight + AndroidUtilities.dp(13.0f);
                if (this.drawInstantView && !this.hasInvoicePreview && !this.currentMessageObject.isGiveawayOrGiveawayResults()) {
                    this.textY += AndroidUtilities.dp(44.0f);
                }
                if (this.linkPreviewAbove) {
                    dp12 = this.linkPreviewY + this.linkPreviewHeight + AndroidUtilities.dp(this.drawInstantView ? 46.0f : 0.0f);
                    dp13 = AndroidUtilities.dp(this.linkPreviewHeight > 0 ? 4.0f : -8.0f);
                } else {
                    dp12 = this.textY + this.currentMessageObject.textHeight(this.transitionParams);
                    dp13 = AndroidUtilities.dp(10.0f);
                }
                this.factCheckY = dp12 + dp13;
            } else {
                textHeight = this.textY + this.currentMessageObject.textHeight(this.transitionParams) + AndroidUtilities.dp(10.0f);
            }
            this.linkPreviewY = textHeight;
            if (this.linkPreviewAbove) {
            }
            this.factCheckY = dp12 + dp13;
        }
        if (this.groupMedia != null) {
            this.groupMedia.x = (this.currentMessageObject.isOutOwner() ? this.mediaBackground ? (this.layoutWidth - this.backgroundWidth) - AndroidUtilities.dp(3.0f) : (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(6.0f) : ((this.isChat || this.currentMessageObject.isRepostPreview) && this.isAvatarVisible && !this.isPlayingRound) ? AndroidUtilities.dp(63.0f) : AndroidUtilities.dp(15.0f)) - AndroidUtilities.dp(2.0f);
        }
        if (this.isRoundVideo) {
            updatePlayingMessageProgress();
        }
        int i11 = this.documentAttachType;
        if (i11 == 3 || i11 == 7) {
            if (this.currentMessageObject.isOutOwner()) {
                this.seekBarX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(57.0f);
                this.buttonX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(14.0f);
                dp3 = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(67.0f);
            } else {
                if (needDrawAvatar()) {
                    this.seekBarX = AndroidUtilities.dp(114.0f);
                    this.buttonX = AndroidUtilities.dp(71.0f);
                    f2 = 124.0f;
                } else {
                    this.seekBarX = AndroidUtilities.dp(66.0f);
                    this.buttonX = AndroidUtilities.dp(23.0f);
                    f2 = 76.0f;
                }
                dp3 = AndroidUtilities.dp(f2);
            }
            this.timeAudioX = dp3;
            if (this.hasLinkPreview) {
                this.seekBarX += AndroidUtilities.dp(10.0f);
                this.buttonX += AndroidUtilities.dp(10.0f);
                this.timeAudioX += AndroidUtilities.dp(10.0f);
            }
            updateSeekBarWaveformWidth(null);
            this.seekBarY = AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY + ((!this.captionAbove || (textLayoutBlocks2 = this.captionLayout) == null) ? 0 : textLayoutBlocks2.textHeight(this.transitionParams));
            int dp14 = AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY + ((!this.captionAbove || (textLayoutBlocks = this.captionLayout) == null) ? 0 : textLayoutBlocks.textHeight(this.transitionParams));
            this.buttonY = dp14;
            RadialProgress2 radialProgress2 = this.radialProgress;
            int i12 = this.buttonX;
            radialProgress2.setProgressRect(i12, dp14, AndroidUtilities.dp(44.0f) + i12, this.buttonY + AndroidUtilities.dp(44.0f));
            updatePlayingMessageProgress();
            if (this.documentAttachType == 7) {
                MessageObject messageObject2 = this.currentMessageObject;
                if (messageObject2.type == 0 && (this.hasLinkPreview || this.hasGamePreview || this.hasInvoicePreview)) {
                    i8 = this.hasGamePreview ? this.unmovedTextX - AndroidUtilities.dp(10.0f) : this.unmovedTextX + AndroidUtilities.dp(1.0f);
                    if (this.isSmallImage) {
                        dp4 = i8 + this.backgroundWidth;
                        dp5 = AndroidUtilities.dp(81.0f);
                        dp4 -= dp5;
                    } else {
                        dp6 = this.hasInvoicePreview ? -AndroidUtilities.dp(6.3f) : AndroidUtilities.dp(10.0f);
                        dp4 = i8 + dp6;
                    }
                } else {
                    if (!messageObject2.isOutOwner()) {
                        dp4 = ((this.isChat || (((messageObject = this.currentMessageObject) != null && messageObject.forceAvatar) || messageObject.getDialogId() == UserObject.VERIFY)) && this.isAvatarVisible && (!this.isPlayingRound || this.currentMessageObject.isVoiceTranscriptionOpen())) ? AndroidUtilities.dp(63.0f) : AndroidUtilities.dp(15.0f);
                        MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
                        if (groupedMessagePosition2 != null && !groupedMessagePosition2.edge) {
                            dp5 = AndroidUtilities.dp(10.0f);
                        }
                    } else if (this.mediaBackground) {
                        dp4 = this.layoutWidth - this.backgroundWidth;
                        dp5 = AndroidUtilities.dp(3.0f);
                    } else {
                        i8 = this.layoutWidth - this.backgroundWidth;
                        dp6 = AndroidUtilities.dp(6.0f);
                        dp4 = i8 + dp6;
                    }
                    dp4 -= dp5;
                }
                MessageObject.GroupedMessagePosition groupedMessagePosition3 = this.currentPosition;
                if (groupedMessagePosition3 != null) {
                    if ((groupedMessagePosition3.flags & 1) == 0) {
                        dp4 -= AndroidUtilities.dp(2.0f);
                    }
                    if (this.currentPosition.leftSpanOffset != 0) {
                        dp4 += (int) Math.ceil((r2 / 1000.0f) * getGroupPhotosWidth());
                    }
                }
                if (this.currentMessageObject.type != 0) {
                    dp4 -= AndroidUtilities.dp(2.0f);
                }
                if (this.currentMessageObject.isVoiceTranscriptionOpen()) {
                    dp4 += AndroidUtilities.dp(10.0f);
                }
                TransitionParams transitionParams = this.transitionParams;
                if (!transitionParams.imageChangeBoundsTransition || transitionParams.updatePhotoImageX) {
                    transitionParams.updatePhotoImageX = false;
                    ImageReceiver imageReceiver = this.photoImage;
                    imageReceiver.setImageCoords(dp4, this.currentMessageObject.type != 5 ? this.linkPreviewY : imageReceiver.getImageY(), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
                    return;
                }
                return;
            }
            return;
        }
        if (i11 == 5) {
            if (this.currentMessageObject.isOutOwner()) {
                this.seekBarX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(56.0f);
                this.buttonX = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(14.0f);
                dp11 = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(67.0f);
            } else {
                if (needDrawAvatar()) {
                    this.seekBarX = AndroidUtilities.dp(113.0f);
                    this.buttonX = AndroidUtilities.dp(71.0f);
                    f3 = 124.0f;
                } else {
                    this.seekBarX = AndroidUtilities.dp(65.0f);
                    this.buttonX = AndroidUtilities.dp(23.0f);
                    f3 = 76.0f;
                }
                dp11 = AndroidUtilities.dp(f3);
            }
            this.timeAudioX = dp11;
            if (this.hasLinkPreview) {
                this.seekBarX += AndroidUtilities.dp(10.0f);
                this.buttonX += AndroidUtilities.dp(10.0f);
                this.timeAudioX += AndroidUtilities.dp(10.0f);
            }
            updateSeekBarWaveformWidth(null);
            this.seekBarY = AndroidUtilities.dp(29.0f) + this.namesOffset + this.mediaOffsetY + ((!this.captionAbove || (textLayoutBlocks5 = this.captionLayout) == null) ? 0 : textLayoutBlocks5.textHeight(this.transitionParams));
            int dp15 = AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY + ((!this.captionAbove || (textLayoutBlocks4 = this.captionLayout) == null) ? 0 : textLayoutBlocks4.textHeight(this.transitionParams));
            this.buttonY = dp15;
            RadialProgress2 radialProgress22 = this.radialProgress;
            int i13 = this.buttonX;
            radialProgress22.setProgressRect(i13, dp15, AndroidUtilities.dp(44.0f) + i13, this.buttonY + AndroidUtilities.dp(44.0f));
            updatePlayingMessageProgress();
            return;
        }
        if (i11 == 1 && !this.drawPhotoImage) {
            this.buttonX = this.currentMessageObject.isOutOwner() ? (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(14.0f) : needDrawAvatar() ? AndroidUtilities.dp(71.0f) : AndroidUtilities.dp(23.0f);
            if (this.hasLinkPreview) {
                this.buttonX += AndroidUtilities.dp(10.0f);
            }
            int dp16 = AndroidUtilities.dp(13.0f) + this.namesOffset + this.mediaOffsetY + ((!this.captionAbove || (textLayoutBlocks3 = this.captionLayout) == null) ? 0 : textLayoutBlocks3.textHeight(this.transitionParams));
            this.buttonY = dp16;
            RadialProgress2 radialProgress23 = this.radialProgress;
            int i14 = this.buttonX;
            radialProgress23.setProgressRect(i14, dp16, AndroidUtilities.dp(44.0f) + i14, this.buttonY + AndroidUtilities.dp(44.0f));
            this.photoImage.setImageCoords(this.buttonX - AndroidUtilities.dp(10.0f), this.buttonY - AndroidUtilities.dp(10.0f), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
            return;
        }
        MessageObject messageObject3 = this.currentMessageObject;
        int i15 = messageObject3.type;
        if (i15 == 12) {
            if (messageObject3.isOutOwner()) {
                dp10 = (this.layoutWidth - this.backgroundWidth) + AndroidUtilities.dp(26.0f);
            } else {
                dp10 = AndroidUtilities.dp(needDrawAvatar() ? 84.0f : 35.0f);
            }
            this.photoImage.setImageCoords(dp10, AndroidUtilities.dp(24.0f) + this.namesOffset, AndroidUtilities.dp(46.0f), AndroidUtilities.dp(46.0f));
            return;
        }
        if (i15 == 0 && (this.hasLinkPreview || this.hasGamePreview || this.hasInvoicePreview)) {
            i9 = this.hasGamePreview ? this.unmovedTextX - AndroidUtilities.dp(10.0f) : this.unmovedTextX + AndroidUtilities.dp(1.0f);
            if (this.isSmallImage) {
                dp7 = i9 + this.backgroundWidth;
                dp8 = AndroidUtilities.dp(81.0f);
                dp7 -= dp8;
            } else {
                dp9 = this.hasInvoicePreview ? -AndroidUtilities.dp(6.3f) : AndroidUtilities.dp(10.0f);
                dp7 = i9 + dp9;
            }
        } else {
            if (!messageObject3.isOutOwner()) {
                dp7 = ((this.isChat || this.currentMessageObject.isRepostPreview) && this.isAvatarVisible && !this.isPlayingRound) ? AndroidUtilities.dp(63.0f) : AndroidUtilities.dp(15.0f);
                MessageObject.GroupedMessagePosition groupedMessagePosition4 = this.currentPosition;
                if (groupedMessagePosition4 != null && !groupedMessagePosition4.edge) {
                    dp8 = AndroidUtilities.dp(10.0f);
                }
            } else if (this.mediaBackground) {
                dp7 = this.layoutWidth - this.backgroundWidth;
                dp8 = AndroidUtilities.dp(3.0f);
            } else {
                i9 = this.layoutWidth - this.backgroundWidth;
                dp9 = AndroidUtilities.dp(6.0f);
                dp7 = i9 + dp9;
            }
            dp7 -= dp8;
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition5 = this.currentPosition;
        if (groupedMessagePosition5 != null) {
            if ((groupedMessagePosition5.flags & 1) == 0) {
                dp7 -= AndroidUtilities.dp(2.0f);
            }
            if (this.currentPosition.leftSpanOffset != 0) {
                dp7 += (int) Math.ceil((r2 / 1000.0f) * getGroupPhotosWidth());
            }
        }
        if (this.currentMessageObject.type != 0) {
            dp7 -= AndroidUtilities.dp(2.0f);
        }
        if (this.drawInstantViewType == 17) {
            dp7 = (int) (dp7 + AndroidUtilities.dp(10.0f) + ((this.instantWidth - this.photoImage.getImageWidth()) / 2.0f));
        }
        TransitionParams transitionParams2 = this.transitionParams;
        if (!transitionParams2.imageChangeBoundsTransition || transitionParams2.updatePhotoImageX) {
            transitionParams2.updatePhotoImageX = false;
            ImageReceiver imageReceiver2 = this.photoImage;
            imageReceiver2.setImageCoords(dp7, imageReceiver2.getImageY(), this.photoImage.getImageWidth(), this.photoImage.getImageHeight());
        }
        this.buttonX = (int) (dp7 + ((this.photoImage.getImageWidth() - AndroidUtilities.dp(48.0f)) / 2.0f));
        int imageY = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - AndroidUtilities.dp(48.0f)) / 2.0f));
        this.buttonY = imageY;
        RadialProgress2 radialProgress24 = this.radialProgress;
        int i16 = this.buttonX;
        radialProgress24.setProgressRect(i16, imageY, AndroidUtilities.dp(48.0f) + i16, this.buttonY + AndroidUtilities.dp(48.0f));
        this.deleteProgressRect.set(this.buttonX + AndroidUtilities.dp(5.0f), this.buttonY + AndroidUtilities.dp(5.0f), this.buttonX + AndroidUtilities.dp(43.0f), this.buttonY + AndroidUtilities.dp(43.0f));
        int i17 = this.documentAttachType;
        if (i17 == 4 || i17 == 2) {
            this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
            int imageY2 = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
            this.videoButtonY = imageY2;
            RadialProgress2 radialProgress25 = this.videoRadialProgress;
            int i18 = this.videoButtonX;
            radialProgress25.setProgressRect(i18, imageY2, AndroidUtilities.dp(24.0f) + i18, this.videoButtonY + AndroidUtilities.dp(24.0f));
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:68:0x015e, code lost:
    
        if (r0.getURL().startsWith("/") == false) goto L73;
     */
    /* JADX WARN: Code restructure failed: missing block: B:70:0x0169, code lost:
    
        if ((r9.pressedFactCheckLink.getSpan() instanceof android.text.style.URLSpan) != false) goto L60;
     */
    /* JADX WARN: Code restructure failed: missing block: B:83:0x01af, code lost:
    
        if (r0.getURL().startsWith("tel:") == false) goto L90;
     */
    /* JADX WARN: Code restructure failed: missing block: B:85:0x01ba, code lost:
    
        if ((r9.pressedLink.getSpan() instanceof android.text.style.URLSpan) != false) goto L77;
     */
    @Override // org.telegram.ui.Cells.BaseCell
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    protected boolean onLongPress() {
        int i;
        TLRPC.Message message;
        TLRPC.MessageReplyHeader messageReplyHeader;
        ChatMessageCellDelegate chatMessageCellDelegate;
        LinkSpanDrawable linkSpanDrawable;
        boolean z = false;
        if (this.isRoundVideo && this.isPlayingRound && MediaController.getInstance().isPlayingMessage(this.currentMessageObject) && ((this.lastTouchX - this.photoImage.getCenterX()) * (this.lastTouchX - this.photoImage.getCenterX())) + ((this.lastTouchY - this.photoImage.getCenterY()) * (this.lastTouchY - this.photoImage.getCenterY())) < (this.photoImage.getImageWidth() / 2.0f) * (this.photoImage.getImageWidth() / 2.0f) && (this.lastTouchX > this.photoImage.getCenterX() + (this.photoImage.getImageWidth() / 4.0f) || this.lastTouchX < this.photoImage.getCenterX() - (this.photoImage.getImageWidth() / 4.0f))) {
            boolean z2 = this.lastTouchX > this.photoImage.getCenterX();
            if (this.videoPlayerRewinder == null) {
                this.videoForwardDrawable = new VideoForwardDrawable(true);
                this.videoPlayerRewinder = new OldVideoPlayerRewinder() { // from class: org.telegram.ui.Cells.ChatMessageCell.5
                    @Override // org.telegram.messenger.video.OldVideoPlayerRewinder
                    protected void onRewindCanceled() {
                        ChatMessageCell.this.onTouchEvent(MotionEvent.obtain(0L, 0L, 3, 0.0f, 0.0f, 0));
                        ChatMessageCell.this.videoForwardDrawable.setShowing(false);
                    }

                    @Override // org.telegram.messenger.video.OldVideoPlayerRewinder
                    protected void onRewindStart(boolean z3) {
                        ChatMessageCell.this.videoForwardDrawable.setDelegate(new VideoForwardDrawable.VideoForwardDrawableDelegate() { // from class: org.telegram.ui.Cells.ChatMessageCell.5.1
                            @Override // org.telegram.ui.Components.VideoForwardDrawable.VideoForwardDrawableDelegate
                            public void invalidate() {
                                ChatMessageCell.this.invalidate();
                            }

                            @Override // org.telegram.ui.Components.VideoForwardDrawable.VideoForwardDrawableDelegate
                            public void onAnimationEnd() {
                            }
                        });
                        ChatMessageCell.this.videoForwardDrawable.setOneShootAnimation(false);
                        ChatMessageCell.this.videoForwardDrawable.setLeftSide(!z3);
                        ChatMessageCell.this.videoForwardDrawable.setShowing(true);
                        ChatMessageCell.this.invalidate();
                    }

                    @Override // org.telegram.messenger.video.OldVideoPlayerRewinder
                    protected void updateRewindProgressUi(long j, float f, boolean z3) {
                        ChatMessageCell.this.videoForwardDrawable.setTime(Math.abs(j));
                        if (z3) {
                            ChatMessageCell.this.currentMessageObject.audioProgress = f;
                            ChatMessageCell.this.updatePlayingMessageProgress();
                        }
                    }
                };
                getParent().requestDisallowInterceptTouchEvent(true);
            }
            this.videoPlayerRewinder.startRewind(MediaController.getInstance().getVideoPlayer(), z2, MediaController.getInstance().getPlaybackSpeed(false));
            return false;
        }
        Drawable drawable = this.replySelector;
        if (drawable != null) {
            this.replySelectorPressed = false;
            drawable.setState(StateSet.NOTHING);
            invalidate();
        }
        Drawable drawable2 = this.nameStatusSelector;
        if (drawable2 != null) {
            drawable2.setState(StateSet.NOTHING);
        }
        Drawable drawable3 = this.nameLayoutSelector;
        if (drawable3 != null) {
            drawable3.setState(StateSet.NOTHING);
        }
        Drawable drawable4 = this.boostCounterLayoutSelector;
        if (drawable4 != null) {
            drawable4.setState(StateSet.NOTHING);
        }
        resetCodeSelectors();
        ButtonBounce buttonBounce = this.replyBounce;
        if (buttonBounce != null) {
            buttonBounce.setPressed(false);
        }
        ButtonBounce buttonBounce2 = this.titleLabelBounce;
        if (buttonBounce2 != null) {
            buttonBounce2.setPressed(false);
        }
        ButtonBounce buttonBounce3 = this.factCheckWhatBounce;
        if (buttonBounce3 != null) {
            buttonBounce3.setPressed(false);
        }
        MessageTopicButton messageTopicButton = this.topicButton;
        if (messageTopicButton != null) {
            messageTopicButton.resetClick();
        }
        this.forwardNamePressed = false;
        ForwardBackground forwardBackground = this.forwardBg;
        if (forwardBackground != null) {
            forwardBackground.setPressed(false);
        }
        this.pressedEffect = false;
        ButtonBounce buttonBounce4 = this.effectDrawableBounce;
        if (buttonBounce4 != null) {
            buttonBounce4.setPressed(false);
        }
        if (this.pressedEmoji != null) {
            this.pressedEmoji = null;
        }
        LinkSpanDrawable linkSpanDrawable2 = this.pressedFactCheckLink;
        if (linkSpanDrawable2 != null) {
            if (!(linkSpanDrawable2.getSpan() instanceof URLSpanMono)) {
                if (this.pressedFactCheckLink.getSpan() instanceof URLSpanNoUnderline) {
                    URLSpanNoUnderline uRLSpanNoUnderline = (URLSpanNoUnderline) this.pressedFactCheckLink.getSpan();
                    if (!ChatActivity.isClickableLink(uRLSpanNoUnderline.getURL())) {
                    }
                }
                chatMessageCellDelegate.didPressUrl(this, linkSpanDrawable.getSpan(), true);
                return true;
            }
            this.hadLongPress = true;
            chatMessageCellDelegate = this.delegate;
            linkSpanDrawable = this.pressedFactCheckLink;
            chatMessageCellDelegate.didPressUrl(this, linkSpanDrawable.getSpan(), true);
            return true;
        }
        LinkSpanDrawable linkSpanDrawable3 = this.pressedLink;
        if (linkSpanDrawable3 != null) {
            if (!(linkSpanDrawable3.getSpan() instanceof URLSpanMono)) {
                if (this.pressedLink.getSpan() instanceof URLSpanNoUnderline) {
                    URLSpanNoUnderline uRLSpanNoUnderline2 = (URLSpanNoUnderline) this.pressedLink.getSpan();
                    if (!ChatActivity.isClickableLink(uRLSpanNoUnderline2.getURL())) {
                        if (!uRLSpanNoUnderline2.getURL().startsWith("/")) {
                        }
                    }
                }
                chatMessageCellDelegate.didPressUrl(this, linkSpanDrawable.getSpan(), true);
                return true;
            }
            this.hadLongPress = true;
            chatMessageCellDelegate = this.delegate;
            linkSpanDrawable = this.pressedLink;
            chatMessageCellDelegate.didPressUrl(this, linkSpanDrawable.getSpan(), true);
            return true;
        }
        resetPressedLink(-1);
        if (this.buttonPressed != 0 || this.miniButtonPressed != 0 || this.videoButtonPressed != 0 || this.pressedBotButton != -1) {
            this.buttonPressed = 0;
            this.miniButtonPressed = 0;
            this.videoButtonPressed = 0;
            this.pressedBotButton = -1;
            invalidate();
        }
        if (this.replyPressed && !this.replyPanelIsForward) {
            this.hadLongPress = true;
            this.replyPressed = false;
            Drawable drawable5 = this.replySelector;
            if (drawable5 != null) {
                if (this.replySelectorPressed) {
                    drawable5.setState(new int[0]);
                } else {
                    drawable5.setState(new int[]{android.R.attr.state_pressed, android.R.attr.state_enabled});
                    post(new Runnable() { // from class: org.telegram.ui.Cells.ChatMessageCell$$ExternalSyntheticLambda13
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatMessageCell.this.lambda$onLongPress$10();
                        }
                    });
                }
                this.replySelectorPressed = false;
                this.replySelectorCanBePressed = false;
                invalidate();
            }
            ButtonBounce buttonBounce5 = this.replyBounce;
            if (buttonBounce5 != null) {
                buttonBounce5.setPressed(false);
            }
            playSoundEffect(0);
            if (this.delegate != null && (this.currentMessageObject.hasValidReplyMessageObject() || this.currentMessageObject.isReplyToStory() || this.hasReplyQuote || ((message = this.currentMessageObject.messageOwner) != null && (messageReplyHeader = message.reply_to) != null && messageReplyHeader.reply_from != null))) {
                this.delegate.didPressReplyMessage(this, this.currentMessageObject.getReplyMsgId(), this.replyBounceX, this.replyBounceY, true);
            }
            return true;
        }
        this.linkPreviewPressed = false;
        this.sideButtonPressed = false;
        this.pressedSideButton = 0;
        this.imagePressed = false;
        this.timePressed = false;
        this.gamePreviewPressed = false;
        this.giveawayMessageCell.setButtonPressed(false);
        this.giveawayResultsMessageCell.setButtonPressed(false);
        resetContactButtonsPressedState();
        if (this.pressedVoteButton != -1 || this.pollHintPressed || this.psaHintPressed || this.instantPressed || this.otherPressed || this.commentButtonPressed) {
            this.commentButtonPressed = false;
            this.instantPressed = false;
            setInstantButtonPressed(false);
            this.pressedVoteButton = -1;
            this.pollHintPressed = false;
            this.psaHintPressed = false;
            this.otherPressed = false;
            if (Build.VERSION.SDK_INT >= 21) {
                int i2 = 0;
                while (true) {
                    Drawable[] drawableArr = this.selectorDrawable;
                    if (i2 >= drawableArr.length) {
                        break;
                    }
                    Drawable drawable6 = drawableArr[i2];
                    if (drawable6 != null) {
                        drawable6.setState(StateSet.NOTHING);
                    }
                    i2++;
                }
                Drawable drawable7 = this.linkPreviewSelector;
                if (drawable7 != null) {
                    drawable7.setState(StateSet.NOTHING);
                }
            }
            ButtonBounce buttonBounce6 = this.linkPreviewBounce;
            if (buttonBounce6 != null) {
                buttonBounce6.setPressed(false);
            }
            invalidate();
        }
        ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
        if (chatMessageCellDelegate2 != null) {
            if (this.avatarPressed) {
                TLRPC.User user = this.currentUser;
                if (user == null) {
                    TLRPC.Chat chat = this.currentChat;
                    if (chat != null) {
                        TLRPC.MessageFwdHeader messageFwdHeader = this.currentMessageObject.messageOwner.fwd_from;
                        if (messageFwdHeader != null) {
                            i = (messageFwdHeader.flags & 16) != 0 ? messageFwdHeader.saved_from_msg_id : messageFwdHeader.channel_post;
                        } else {
                            i = 0;
                        }
                        z = chatMessageCellDelegate2.didLongPressChannelAvatar(this, chat, i, this.lastTouchX, this.lastTouchY);
                    }
                } else if (user.id != 0) {
                    z = chatMessageCellDelegate2.didLongPressUserAvatar(this, user, this.lastTouchX, this.lastTouchY);
                }
            }
            if (!z) {
                this.delegate.didLongPress(this, this.lastTouchX, this.lastTouchY);
            }
        }
        return true;
    }

    @Override // android.view.View
    protected void onMeasure(int i, int i2) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject != null && (messageObject.checkLayout() || this.lastHeight != AndroidUtilities.displaySize.y)) {
            this.inLayout = true;
            MessageObject messageObject2 = this.currentMessageObject;
            this.currentMessageObject = null;
            setMessageObject(messageObject2, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
            this.inLayout = false;
        }
        updateSelectionTextPosition();
        setMeasuredDimension(isWidthAdaptive() ? getBoundsRight() - getBoundsLeft() : View.MeasureSpec.getSize(i), this.totalHeight + this.keyboardHeight);
    }

    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    public void onProgressDownload(String str, long j, long j2) {
        float min = j2 == 0 ? 0.0f : Math.min(1.0f, j / j2);
        this.currentMessageObject.loadedFileSize = j;
        createLoadingProgressLayout(j, j2);
        (this.drawVideoImageButton ? this.videoRadialProgress : this.radialProgress).setProgress(min, true);
        int i = this.documentAttachType;
        if (i == 3 || i == 5) {
            if (this.hasMiniProgress != 0) {
                if (this.miniButtonState == 1) {
                    return;
                }
            } else if (this.buttonState == 4) {
                return;
            }
        } else if (this.hasMiniProgress != 0) {
            if (this.miniButtonState == 1) {
                return;
            }
        } else if (this.buttonState == 1) {
            return;
        }
        updateButtonState(false, false, false);
    }

    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    public void onProgressUpload(String str, long j, long j2, boolean z) {
        int i;
        float min = j2 == 0 ? 0.0f : Math.min(1.0f, j / j2);
        this.currentMessageObject.loadedFileSize = j;
        this.radialProgress.setProgress(min, true);
        if (j == j2 && this.currentPosition != null && SendMessagesHelper.getInstance(this.currentAccount).isSendingMessage(this.currentMessageObject.getId()) && ((i = this.buttonState) == 1 || (i == 4 && this.documentAttachType == 5))) {
            this.drawRadialCheckBackground = true;
            getIconForCurrentState();
            this.radialProgress.setIcon(6, false, true);
        }
        long j3 = this.lastLoadingSizeTotal;
        if (j3 > 0 && Math.abs(j3 - j2) > 1048576) {
            this.lastLoadingSizeTotal = j2;
        }
        createLoadingProgressLayout(j, j2);
    }

    @Override // android.view.View
    public void onProvideStructure(ViewStructure viewStructure) {
        CharSequence charSequence;
        CharSequence charSequence2;
        CharSequence charSequence3;
        super.onProvideStructure(viewStructure);
        if (!this.allowAssistant || Build.VERSION.SDK_INT < 23) {
            return;
        }
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null || (charSequence3 = messageObject.messageText) == null || charSequence3.length() <= 0) {
            MessageObject messageObject2 = this.currentMessageObject;
            if (messageObject2 == null || (charSequence = messageObject2.caption) == null || charSequence.length() <= 0) {
                return;
            } else {
                charSequence2 = this.currentMessageObject.caption;
            }
        } else {
            charSequence2 = this.currentMessageObject.messageText;
        }
        viewStructure.setText(charSequence2);
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public void onSeekBarContinuousDrag(float f) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        messageObject.audioProgress = f;
        double duration = messageObject.getDuration();
        double d = f;
        Double.isNaN(d);
        messageObject.audioProgressSec = (int) (duration * d);
        updatePlayingMessageProgress();
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public void onSeekBarDrag(float f) {
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        messageObject.audioProgress = f;
        MediaController.getInstance().seekToProgress(this.currentMessageObject, f);
        updatePlayingMessageProgress();
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public void onSeekBarPressed() {
        requestDisallowInterceptTouchEvent(true);
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public void onSeekBarReleased() {
        requestDisallowInterceptTouchEvent(false);
    }

    /* JADX WARN: Code restructure failed: missing block: B:52:0x00da, code lost:
    
        if ((r6 & 2) != 0) goto L55;
     */
    /* JADX WARN: Code restructure failed: missing block: B:59:0x0104, code lost:
    
        if ("s".equals(r9.type) == false) goto L69;
     */
    /* JADX WARN: Code restructure failed: missing block: B:70:0x0123, code lost:
    
        if ("s".equals(r9.type) == false) goto L69;
     */
    /* JADX WARN: Code restructure failed: missing block: B:79:0x018e, code lost:
    
        if ("s".equals(r9.type) == false) goto L92;
     */
    /* JADX WARN: Code restructure failed: missing block: B:94:0x01ad, code lost:
    
        if ("s".equals(r9.type) == false) goto L92;
     */
    @Override // org.telegram.messenger.DownloadController.FileDownloadProgressListener
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void onSuccessDownload(String str) {
        TLRPC.Document document;
        ImageLocation forDocument;
        ImageLocation forObject;
        String str2;
        ImageLocation forDocument2;
        ImageLocation forObject2;
        String str3;
        if (this.documentAttachType == 6 && this.currentMessageObject.isDice()) {
            DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
            setCurrentDiceValue(true);
            return;
        }
        int i = this.documentAttachType;
        if (i == 3 || i == 5) {
            updateButtonState(false, true, false);
            updateWaveform();
            return;
        }
        this.currentMessageObject.updateQualitiesCached(true);
        (this.drawVideoImageButton ? this.videoRadialProgress : this.radialProgress).setProgress(1.0f, true);
        if (!this.currentMessageObject.needDrawBluredPreview() && !this.autoPlayingMedia && (document = this.documentAttach) != null) {
            if (this.documentAttachType == 7) {
                ImageReceiver imageReceiver = this.photoImage;
                ImageLocation forDocument3 = ImageLocation.getForDocument(document);
                ImageLocation forObject3 = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                TLRPC.PhotoSize photoSize = this.currentPhotoObject;
                imageReceiver.setImage(forDocument3, ImageLoader.AUTOPLAY_FILTER, forObject3, ((photoSize instanceof TLRPC.TL_photoStrippedSize) || (photoSize != null && "s".equals(photoSize.type))) ? this.currentPhotoFilterThumb : this.currentPhotoFilter, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.documentAttach.size, null, this.currentMessageObject, 0);
            } else {
                if (!this.isSmallImage && !this.currentMessageObject.isHiddenSensitive() && !this.currentMessageObject.hasVideoCover() && SharedConfig.isAutoplayVideo()) {
                    MessageObject messageObject = this.currentMessageObject;
                    if (!messageObject.isRepostPreview && this.documentAttachType == 4) {
                        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
                        if (groupedMessagePosition != null) {
                            int i2 = groupedMessagePosition.flags;
                            if ((i2 & 1) != 0) {
                            }
                        }
                        this.animatingNoSound = 2;
                        VideoPlayer.VideoUri videoUri = messageObject.cachedQuality;
                        ImageReceiver imageReceiver2 = this.photoImage;
                        if (videoUri != null) {
                            forDocument2 = ImageLocation.getForPath(videoUri.uri.getPath());
                            forObject2 = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                            TLRPC.PhotoSize photoSize2 = this.currentPhotoObject;
                            if (!(photoSize2 instanceof TLRPC.TL_photoStrippedSize)) {
                                if (photoSize2 != null) {
                                }
                                str3 = this.currentPhotoFilter;
                            }
                            str3 = this.currentPhotoFilterThumb;
                        } else {
                            forDocument2 = ImageLocation.getForDocument(this.documentAttach);
                            forObject2 = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                            TLRPC.PhotoSize photoSize3 = this.currentPhotoObject;
                            if (!(photoSize3 instanceof TLRPC.TL_photoStrippedSize)) {
                                if (photoSize3 != null) {
                                }
                                str3 = this.currentPhotoFilter;
                            }
                            str3 = this.currentPhotoFilterThumb;
                        }
                        imageReceiver2.setImage(forDocument2, ImageLoader.AUTOPLAY_FILTER, forObject2, str3, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.documentAttach.size, null, this.currentMessageObject, 0);
                        if (PhotoViewer.isPlayingMessage(this.currentMessageObject)) {
                            this.photoImage.setAllowStartAnimation(false);
                            this.autoPlayingMedia = true;
                        }
                    }
                }
                if (this.documentAttachType == 2) {
                    VideoPlayer.VideoUri videoUri2 = this.currentMessageObject.cachedQuality;
                    ImageReceiver imageReceiver3 = this.photoImage;
                    if (videoUri2 != null) {
                        forDocument = ImageLocation.getForPath(videoUri2.uri.getPath());
                        forObject = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                        TLRPC.PhotoSize photoSize4 = this.currentPhotoObject;
                        if (!(photoSize4 instanceof TLRPC.TL_photoStrippedSize)) {
                            if (photoSize4 != null) {
                            }
                            str2 = this.currentPhotoFilter;
                        }
                        str2 = this.currentPhotoFilterThumb;
                    } else {
                        forDocument = ImageLocation.getForDocument(this.documentAttach);
                        forObject = ImageLocation.getForObject(this.currentPhotoObject, this.photoParentObject);
                        TLRPC.PhotoSize photoSize5 = this.currentPhotoObject;
                        if (!(photoSize5 instanceof TLRPC.TL_photoStrippedSize)) {
                            if (photoSize5 != null) {
                            }
                            str2 = this.currentPhotoFilter;
                        }
                        str2 = this.currentPhotoFilterThumb;
                    }
                    imageReceiver3.setImage(forDocument, ImageLoader.AUTOPLAY_FILTER, forObject, str2, ImageLocation.getForObject(this.currentPhotoObjectThumb, this.photoParentObject), this.currentPhotoFilterThumb, this.currentPhotoObjectThumbStripped, this.documentAttach.size, null, this.currentMessageObject, 0);
                    if (this.currentMessageObject.isHiddenSensitive() || !SharedConfig.isAutoplayGifs() || this.currentMessageObject.isRepostPreview) {
                        this.photoImage.setAllowStartAnimation(false);
                        this.photoImage.stopAnimation();
                        this.autoPlayingMedia = true;
                    }
                }
            }
            this.photoImage.setAllowStartAnimation(true);
            this.photoImage.startAnimation();
            this.autoPlayingMedia = true;
        }
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2.type != 0) {
            if (!this.photoNotSet) {
                updateButtonState(false, true, false);
            }
            if (!this.photoNotSet) {
                return;
            } else {
                messageObject2 = this.currentMessageObject;
            }
        } else if (!this.autoPlayingMedia && this.documentAttachType == 2 && messageObject2.gifState != 1.0f) {
            this.buttonState = 2;
            didPressButton(true, false);
            return;
        } else if (!this.photoNotSet) {
            updateButtonState(false, true, false);
            return;
        }
        setMessageObject(messageObject2, this.currentMessagesGroup, this.pinnedBottom, this.pinnedTop);
    }

    /* JADX WARN: Code restructure failed: missing block: B:217:0x030a, code lost:
    
        if (r5 <= (r19.nameY + org.telegram.messenger.AndroidUtilities.dp(20.0f))) goto L213;
     */
    /* JADX WARN: Code restructure failed: missing block: B:444:0x05ec, code lost:
    
        if (r5 > (r19.sideStartY + org.telegram.messenger.AndroidUtilities.dp((38 + ((r19.drawSideButton != 3 || r19.commentLayout == null) ? 0 : 18)) + (r19.drawSideButton2 != 5 ? 0 : 38)))) goto L425;
     */
    @Override // android.view.View
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean onTouchEvent(MotionEvent motionEvent) {
        ChatMessageCellDelegate chatMessageCellDelegate;
        boolean z;
        ForwardBackground forwardBackground;
        ChatMessageCellDelegate chatMessageCellDelegate2;
        TLRPC.Chat chat;
        TLRPC.User user;
        float f;
        float f2;
        boolean z2;
        int i;
        float f3;
        float f4;
        boolean z3;
        ChatMessageCell chatMessageCell;
        Drawable drawable;
        TLRPC.Chat chat2;
        int i2;
        int i3;
        int i4;
        Drawable drawable2;
        GroupMedia groupMedia;
        MessageTopicButton messageTopicButton;
        ChannelRecommendationsCell channelRecommendationsCell;
        MessageObject messageObject;
        boolean z4 = true;
        if (this.currentMessageObject == null || (!((chatMessageCellDelegate = this.delegate) == null || chatMessageCellDelegate.canPerformActions()) || this.animationRunning)) {
            MessageObject messageObject2 = this.currentMessageObject;
            if (messageObject2 != null && messageObject2.preview) {
                return checkTextSelection(motionEvent);
            }
            boolean checkReplyTouchEvent = checkReplyTouchEvent(motionEvent);
            if (!checkReplyTouchEvent) {
                checkTextSelection(motionEvent);
            }
            return checkReplyTouchEvent || super.onTouchEvent(motionEvent);
        }
        if (checkTextSelection(motionEvent) || checkRoundSeekbar(motionEvent) || checkReactionsTouchEvent(motionEvent)) {
            return true;
        }
        OldVideoPlayerRewinder oldVideoPlayerRewinder = this.videoPlayerRewinder;
        if (oldVideoPlayerRewinder != null && oldVideoPlayerRewinder.rewindCount > 0) {
            if (motionEvent.getAction() != 1 && motionEvent.getAction() != 3) {
                return true;
            }
            getParent().requestDisallowInterceptTouchEvent(false);
            this.videoPlayerRewinder.cancelRewind();
            return false;
        }
        this.disallowLongPress = false;
        this.lastTouchX = motionEvent.getX();
        float y = motionEvent.getY();
        this.lastTouchY = y;
        this.backgroundDrawable.setTouchCoords(this.lastTouchX, y);
        boolean checkSpoilersMotionEvent = checkSpoilersMotionEvent(motionEvent, 0);
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkTextBlockMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent && (channelRecommendationsCell = this.channelRecommendationsCell) != null && (messageObject = this.currentMessageObject) != null && messageObject.type == 27 && (checkSpoilersMotionEvent = channelRecommendationsCell.checkTouchEvent(motionEvent))) {
            this.disallowLongPress = true;
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkAdminMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkNameMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkNameStatusMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkPinchToZoom(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkDateMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkTextSelection(motionEvent);
        }
        if (!checkSpoilersMotionEvent && (messageTopicButton = this.topicButton) != null) {
            checkSpoilersMotionEvent = messageTopicButton.checkTouchEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkOtherButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkSponsoredCloseMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkCaptionMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkTranscribeButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkAudioMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkTitleLabelMotion(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkContactMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkLinkPreviewMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkInstantButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkCommentButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkGameMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkEffectMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkPhotoImageMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkBotButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkPollButtonMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = this.giveawayMessageCell.checkMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = this.giveawayResultsMessageCell.checkMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkFactCheckMotionEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent && (groupMedia = this.groupMedia) != null) {
            checkSpoilersMotionEvent = groupMedia.onTouchEvent(motionEvent);
        }
        if (!checkSpoilersMotionEvent) {
            checkSpoilersMotionEvent = checkReplyTouchEvent(motionEvent);
        }
        if (motionEvent.getAction() == 3) {
            this.spoilerPressed = null;
            this.buttonPressed = 0;
            this.miniButtonPressed = 0;
            this.pressedBotButton = -1;
            this.pressedVoteButton = -1;
            this.pollHintPressed = false;
            this.psaHintPressed = false;
            this.linkPreviewPressed = false;
            this.otherPressed = false;
            this.sideButtonPressed = false;
            this.pressedSideButton = 0;
            this.imagePressed = false;
            this.timePressed = false;
            this.gamePreviewPressed = false;
            this.commentButtonPressed = false;
            this.instantPressed = false;
            setInstantButtonPressed(false);
            resetContactButtonsPressedState();
            ButtonBounce buttonBounce = this.titleLabelBounce;
            if (buttonBounce != null) {
                buttonBounce.setPressed(false);
            }
            if (Build.VERSION.SDK_INT >= 21) {
                int i5 = 0;
                while (true) {
                    Drawable[] drawableArr = this.selectorDrawable;
                    if (i5 >= drawableArr.length) {
                        break;
                    }
                    Drawable drawable3 = drawableArr[i5];
                    if (drawable3 != null) {
                        drawable3.setState(StateSet.NOTHING);
                    }
                    i5++;
                }
                Drawable drawable4 = this.linkPreviewSelector;
                if (drawable4 != null) {
                    drawable4.setState(StateSet.NOTHING);
                }
            }
            Drawable drawable5 = this.nameStatusSelector;
            if (drawable5 != null) {
                drawable5.setState(StateSet.NOTHING);
            }
            Drawable drawable6 = this.nameLayoutSelector;
            if (drawable6 != null) {
                drawable6.setState(StateSet.NOTHING);
            }
            resetCodeSelectors();
            ButtonBounce buttonBounce2 = this.linkPreviewBounce;
            if (buttonBounce2 != null) {
                buttonBounce2.setPressed(false);
            }
            if (this.hadLongPress) {
                if (this.pressedLinkType != 2) {
                    this.hadLongPress = false;
                }
                this.pressedLink = null;
                this.pressedFactCheckLink = null;
                this.pressedEmoji = null;
                this.pressedLinkType = -1;
            } else {
                resetPressedLink(-1);
            }
            z = false;
        } else {
            z = checkSpoilersMotionEvent;
        }
        updateRadialProgressBackground();
        if (!this.disallowLongPress && z && motionEvent.getAction() == 0) {
            startCheckLongPress();
        }
        if (motionEvent.getAction() != 0 && motionEvent.getAction() != 2) {
            cancelCheckLongPress();
        }
        if (z) {
            return z;
        }
        float x = motionEvent.getX();
        float y2 = motionEvent.getY();
        if (motionEvent.getAction() == 0) {
            ChatMessageCellDelegate chatMessageCellDelegate3 = this.delegate;
            if (chatMessageCellDelegate3 != null && !chatMessageCellDelegate3.canPerformActions()) {
                return z;
            }
            if (this.isAvatarVisible && this.avatarImage.isInsideImage(x, getTop() + y2)) {
                this.avatarPressed = true;
            } else {
                if (this.psaButtonVisible && this.hasPsaHint) {
                    if (x >= this.psaHelpX && x <= r0 + AndroidUtilities.dp(40.0f)) {
                        if (y2 >= this.psaHelpY && y2 <= r0 + AndroidUtilities.dp(40.0f)) {
                            this.psaHintPressed = true;
                            createSelectorDrawable(0);
                            this.selectorDrawableMaskType[0] = 3;
                            if (Build.VERSION.SDK_INT >= 21 && (drawable2 = this.selectorDrawable[0]) != null) {
                                drawable2.setBounds(this.psaHelpX - AndroidUtilities.dp(8.0f), this.psaHelpY - AndroidUtilities.dp(8.0f), this.psaHelpX + AndroidUtilities.dp(32.0f), this.psaHelpY + AndroidUtilities.dp(32.0f));
                                this.selectorDrawable[0].setHotspot(x, y2);
                                this.selectorDrawable[0].setState(this.pressedState);
                            }
                            invalidate();
                        }
                    }
                }
                if (this.drawForwardedName && this.forwardedNameLayout[0] != null) {
                    float f5 = this.forwardNameX;
                    if (x >= f5 && x <= this.forwardedNameWidth + f5) {
                        if (y2 >= this.forwardNameY && y2 <= r6 + this.forwardHeight) {
                            if (this.viaWidth == 0 || x < f5 + this.viaNameWidth + AndroidUtilities.dp(4.0f)) {
                                ForwardBackground forwardBackground2 = this.forwardBg;
                                if (forwardBackground2 != null) {
                                    forwardBackground2.setPressed(true);
                                }
                                this.forwardNamePressed = true;
                            }
                            this.forwardBotPressed = true;
                        }
                    }
                }
                if (this.drawNameLayout && this.nameLayout != null && (i4 = this.viaWidth) != 0) {
                    float f6 = this.nameX + this.viaNameWidth;
                    if (x >= f6) {
                        if (x <= f6 + i4) {
                            if (y2 >= this.nameY - AndroidUtilities.dp(4.0f)) {
                            }
                        }
                    }
                }
                if (this.sideButtonVisible && this.drawSideButton != 0 && x >= this.sideStartX - AndroidUtilities.dp(24.0f) && x <= this.sideStartX + AndroidUtilities.dp(40.0f) && y2 >= this.sideStartY - AndroidUtilities.dp(24.0f)) {
                    if (y2 <= this.sideStartY + AndroidUtilities.dp(38 + ((this.drawSideButton != 3 || this.commentLayout == null) ? 0 : 18) + (this.drawSideButton2 == 5 ? 38 : 0))) {
                        if (this.currentMessageObject.isSent()) {
                            if (!this.currentMessageObject.isSponsored()) {
                                this.pressedSideButton = this.drawSideButton;
                            } else if (y2 <= this.sideStartY + AndroidUtilities.dp(32.0f) || this.drawSideButton2 != 5) {
                                this.pressedSideButton = 4;
                            } else {
                                this.pressedSideButton = 5;
                            }
                            this.sideButtonPressed = true;
                        }
                        invalidate();
                    }
                }
                z4 = z;
            }
            if (z4) {
                startCheckLongPress();
            }
            return z4;
        }
        if (motionEvent.getAction() != 2) {
            cancelCheckLongPress();
        }
        if (this.avatarPressed) {
            if (motionEvent.getAction() != 1) {
                if (motionEvent.getAction() != 3 && (motionEvent.getAction() != 2 || !this.isAvatarVisible || this.avatarImage.isInsideImage(x, y2 + getTop()))) {
                    return z;
                }
                this.avatarPressed = false;
                return z;
            }
            this.avatarPressed = false;
            playSoundEffect(0);
            chatMessageCellDelegate2 = this.delegate;
            if (chatMessageCellDelegate2 == null) {
                return z;
            }
            user = this.currentUser;
            if (user != null) {
                if (user.id != 0) {
                    f = this.lastTouchX;
                    f2 = this.lastTouchY;
                    z2 = false;
                    chatMessageCellDelegate2.didPressUserAvatar(this, user, f, f2, z2);
                    return z;
                }
                chatMessageCellDelegate2.didPressHiddenForward(this);
                return z;
            }
            TLRPC.Chat chat3 = this.currentChat;
            if (chat3 == null) {
                if (this.currentMessageObject == null) {
                    return z;
                }
                chatMessageCellDelegate2.didPressInstantButton(this, this.drawInstantViewType);
                return z;
            }
            TLRPC.MessageFwdHeader messageFwdHeader = this.currentMessageObject.messageOwner.fwd_from;
            if (messageFwdHeader != null) {
                if ((messageFwdHeader.flags & 16) != 0) {
                    i3 = messageFwdHeader.saved_from_msg_id;
                    chat2 = chat3;
                } else {
                    i3 = messageFwdHeader.channel_post;
                    chat2 = this.currentForwardChannel;
                }
                i2 = i3;
            } else {
                chat2 = chat3;
                i2 = 0;
            }
            chat = chat2 != null ? chat2 : chat3;
            chatMessageCell = this;
            i = i2;
            f3 = this.lastTouchX;
            f4 = this.lastTouchY;
            z3 = false;
            chatMessageCellDelegate2.didPressChannelAvatar(chatMessageCell, chat, i, f3, f4, z3);
            return z;
        }
        if (this.psaHintPressed) {
            if (motionEvent.getAction() != 1) {
                return z;
            }
            playSoundEffect(0);
            this.delegate.didPressHint(this, 1);
            this.psaHintPressed = false;
            if (Build.VERSION.SDK_INT >= 21 && (drawable = this.selectorDrawable[0]) != null) {
                drawable.setState(StateSet.NOTHING);
            }
        } else {
            if (this.forwardNamePressed) {
                if (motionEvent.getAction() != 1) {
                    if (motionEvent.getAction() == 3) {
                        this.forwardNamePressed = false;
                        forwardBackground = this.forwardBg;
                        if (forwardBackground == null) {
                            return z;
                        }
                    } else {
                        if (motionEvent.getAction() != 2) {
                            return z;
                        }
                        float f7 = this.forwardNameX;
                        if (x >= f7 && x <= f7 + this.forwardedNameWidth) {
                            if (y2 >= this.forwardNameY && y2 <= r0 + this.forwardHeight) {
                                return z;
                            }
                        }
                        this.forwardNamePressed = false;
                        forwardBackground = this.forwardBg;
                        if (forwardBackground == null) {
                            return z;
                        }
                    }
                    forwardBackground.setPressed(false);
                    return z;
                }
                this.forwardNamePressed = false;
                ForwardBackground forwardBackground3 = this.forwardBg;
                if (forwardBackground3 != null) {
                    forwardBackground3.setPressed(false);
                }
                playSoundEffect(0);
                chatMessageCellDelegate2 = this.delegate;
                if (chatMessageCellDelegate2 == null) {
                    return z;
                }
                chat = this.currentForwardChannel;
                if (chat != null) {
                    TLRPC.MessageFwdHeader messageFwdHeader2 = this.currentMessageObject.messageOwner.fwd_from;
                    i = messageFwdHeader2 != null ? messageFwdHeader2.channel_post : 0;
                    f3 = this.lastTouchX;
                    f4 = this.lastTouchY;
                    z3 = true;
                    chatMessageCell = this;
                    chatMessageCellDelegate2.didPressChannelAvatar(chatMessageCell, chat, i, f3, f4, z3);
                    return z;
                }
                user = this.currentForwardUser;
                if (user == null) {
                    if (this.currentForwardName == null) {
                        return z;
                    }
                    chatMessageCellDelegate2.didPressHiddenForward(this);
                    return z;
                }
                f = this.lastTouchX;
                f2 = this.lastTouchY;
                z2 = true;
                chatMessageCellDelegate2.didPressUserAvatar(this, user, f, f2, z2);
                return z;
            }
            if (this.forwardBotPressed) {
                if (motionEvent.getAction() == 1) {
                    this.forwardBotPressed = false;
                    playSoundEffect(0);
                    ChatMessageCellDelegate chatMessageCellDelegate4 = this.delegate;
                    if (chatMessageCellDelegate4 == null) {
                        return z;
                    }
                    TLRPC.User user2 = this.currentViaBotUser;
                    if (user2 == null || user2.bot_inline_placeholder != null) {
                        chatMessageCellDelegate4.didPressViaBot(this, user2 != null ? user2.username : this.currentMessageObject.messageOwner.via_bot_name);
                        return z;
                    }
                    chatMessageCellDelegate4.didPressViaBotNotInline(this, user2.id);
                    return z;
                }
                if (motionEvent.getAction() != 3) {
                    if (motionEvent.getAction() != 2) {
                        return z;
                    }
                    if (!this.drawForwardedName || this.forwardedNameLayout[0] == null) {
                        float f8 = this.nameX + this.viaNameWidth;
                        if (x >= f8 && x <= f8 + this.viaWidth && y2 >= this.nameY - AndroidUtilities.dp(4.0f) && y2 <= this.nameY + AndroidUtilities.dp(20.0f)) {
                            return z;
                        }
                    } else {
                        float f9 = this.forwardNameX;
                        if (x >= f9 && x <= f9 + this.forwardedNameWidth) {
                            if (y2 >= this.forwardNameY && y2 <= r0 + this.forwardHeight) {
                                return z;
                            }
                        }
                    }
                }
                this.forwardBotPressed = false;
                return z;
            }
            if (!this.sideButtonPressed) {
                return z;
            }
            if (motionEvent.getAction() == 1) {
                playSoundEffect(0);
                ChatMessageCellDelegate chatMessageCellDelegate5 = this.delegate;
                if (chatMessageCellDelegate5 != null) {
                    int i6 = this.pressedSideButton;
                    if (i6 == 4) {
                        chatMessageCellDelegate5.didPressSponsoredClose(this);
                    } else if (i6 == 5) {
                        chatMessageCellDelegate5.didPressSponsoredInfo(this, x, y2);
                    } else if (i6 == 3) {
                        chatMessageCellDelegate5.didPressCommentButton(this);
                    } else {
                        chatMessageCellDelegate5.didPressSideButton(this);
                    }
                }
            } else if (motionEvent.getAction() != 3) {
                if (motionEvent.getAction() == 2) {
                    if (this.sideButtonVisible && x >= this.sideStartX - AndroidUtilities.dp(24.0f) && x <= this.sideStartX + AndroidUtilities.dp(40.0f) && y2 >= this.sideStartY - AndroidUtilities.dp(24.0f)) {
                    }
                }
            }
            this.sideButtonPressed = false;
            this.pressedSideButton = 0;
        }
        invalidate();
        return z;
    }

    public void overrideAudioVisualizer(AudioVisualizerDrawable audioVisualizerDrawable) {
        this.overridenAudioVisualizer = audioVisualizerDrawable;
    }

    public void overrideDuration(long j) {
        this.overridenDuration = j;
    }

    @Override // android.view.View
    public boolean performAccessibilityAction(int i, Bundle bundle) {
        ChatMessageCellDelegate chatMessageCellDelegate;
        ChatMessageCellDelegate chatMessageCellDelegate2 = this.delegate;
        if (chatMessageCellDelegate2 != null && chatMessageCellDelegate2.onAccessibilityAction(i, bundle)) {
            return false;
        }
        if (i == 16) {
            int iconForCurrentState = getIconForCurrentState();
            if (iconForCurrentState != 4 && iconForCurrentState != 5) {
                didPressButton(true, false);
            } else if (this.currentMessageObject.type == 16) {
                this.delegate.didPressOther(this, this.otherX, this.otherY);
            } else {
                didClickedImage();
            }
            return true;
        }
        if (i == R.id.acc_action_small_button) {
            didPressMiniButton(true);
        } else if (i == R.id.acc_action_msg_options) {
            ChatMessageCellDelegate chatMessageCellDelegate3 = this.delegate;
            if (chatMessageCellDelegate3 != null) {
                if (this.currentMessageObject.type == 16) {
                    chatMessageCellDelegate3.didLongPress(this, 0.0f, 0.0f);
                } else {
                    chatMessageCellDelegate3.didPressOther(this, this.otherX, this.otherY);
                }
            }
        } else if (i == R.id.acc_action_open_forwarded_origin && (chatMessageCellDelegate = this.delegate) != null) {
            TLRPC.Chat chat = this.currentForwardChannel;
            if (chat != null) {
                chatMessageCellDelegate.didPressChannelAvatar(this, chat, this.currentMessageObject.messageOwner.fwd_from.channel_post, this.lastTouchX, this.lastTouchY, false);
            } else {
                TLRPC.User user = this.currentForwardUser;
                if (user != null) {
                    chatMessageCellDelegate.didPressUserAvatar(this, user, this.lastTouchX, this.lastTouchY, false);
                } else if (this.currentForwardName != null) {
                    chatMessageCellDelegate.didPressHiddenForward(this);
                }
            }
        }
        if ((this.currentMessageObject.isVoice() || this.currentMessageObject.isRoundVideo() || (this.currentMessageObject.isMusic() && MediaController.getInstance().isPlayingMessage(this.currentMessageObject))) && this.seekBarAccessibilityDelegate.performAccessibilityActionInternal(i, bundle)) {
            return true;
        }
        return super.performAccessibilityAction(i, bundle);
    }

    @Override // android.view.View, android.view.ViewParent
    public void requestLayout() {
        if (this.inLayout) {
            return;
        }
        super.requestLayout();
    }

    public void resetPressedLink(int i) {
        LinkSpanDrawable.LinkCollector linkCollector = this.links;
        if (i != -1) {
            linkCollector.removeLinks(Integer.valueOf(i));
        } else {
            linkCollector.clear();
        }
        LinkSpanDrawable.LinkCollector linkCollector2 = this.factCheckLinks;
        if (linkCollector2 != null) {
            linkCollector2.clear();
        }
        this.pressedEmoji = null;
        this.pressedFactCheckLink = null;
        if (this.pressedLink != null) {
            if (this.pressedLinkType == i || i == -1) {
                this.pressedLink = null;
                this.pressedLinkType = -1;
                invalidate();
            }
        }
    }

    @Override // org.telegram.ui.Components.SeekBar.SeekBarDelegate
    public boolean reverseWaveform() {
        MessageObject messageObject = this.currentMessageObject;
        return messageObject != null && messageObject.isVoiceOnce();
    }

    public void setAllowAssistant(boolean z) {
        this.allowAssistant = z;
    }

    @Override // android.view.View
    public void setAlpha(float f) {
        if ((f == 1.0f) != (getAlpha() == 1.0f)) {
            invalidate();
        }
        if (this.ALPHA_PROPERTY_WORKAROUND) {
            this.alphaInternal = f;
            invalidate();
        } else {
            super.setAlpha(f);
        }
        MessageObject.GroupedMessagePosition groupedMessagePosition = this.currentPosition;
        if ((groupedMessagePosition != null && (groupedMessagePosition.minY != 0 || groupedMessagePosition.minX != 0)) || ((this.enterTransitionInProgress && !this.currentMessageObject.isVoice()) || this.replyNameLayout == null || this.replyTextLayout == null)) {
            MessageObject.GroupedMessagePosition groupedMessagePosition2 = this.currentPosition;
            if (groupedMessagePosition2 != null) {
                int i = groupedMessagePosition2.flags;
                if ((i & 8) == 0 || (i & 1) == 0) {
                    return;
                }
            }
            if (this.reactionsLayoutInBubble.isSmall) {
                return;
            }
        }
        invalidate();
    }

    public void setAnimationOffsetX(float f) {
        if (this.animationOffsetX != f) {
            this.animationOffsetX = f;
            updateTranslation();
        }
    }

    public void setAnimationRunning(boolean z, boolean z2) {
        this.animationRunning = z;
        if (z) {
            this.willRemoved = z2;
        } else {
            this.willRemoved = false;
        }
    }

    public void setAvatar(MessageObject messageObject) {
        TLRPC.Chat chat;
        if (messageObject == null) {
            return;
        }
        if (!this.isAvatarVisible) {
            this.currentPhoto = null;
            return;
        }
        Drawable drawable = messageObject.customAvatarDrawable;
        if (drawable != null) {
            this.avatarImage.setImageBitmap(drawable);
            return;
        }
        TLRPC.User user = this.currentUser;
        if (user != null) {
            TLRPC.UserProfilePhoto userProfilePhoto = user.photo;
            if (userProfilePhoto != null) {
                this.currentPhoto = userProfilePhoto.photo_small;
            } else {
                this.currentPhoto = null;
            }
            this.avatarDrawable.setInfo(this.currentAccount, user);
            this.avatarImage.setForUserOrChat(this.currentUser, this.avatarDrawable, null, LiteMode.isEnabled(LiteMode.FLAGS_CHAT), 1, false);
            return;
        }
        TLRPC.Chat chat2 = this.currentChat;
        if (chat2 == null) {
            if (!messageObject.isSponsored()) {
                this.currentPhoto = null;
                this.avatarDrawable.setInfo(messageObject.getFromChatId(), null, null);
                this.avatarImage.setImage(null, null, this.avatarDrawable, null, null, 0);
                return;
            } else {
                TLRPC.Photo photo = messageObject.sponsoredPhoto;
                if (photo != null) {
                    this.avatarImage.setImage(ImageLocation.getForPhoto(FileLoader.getClosestPhotoSizeWithSize(photo.sizes, AndroidUtilities.dp(50.0f), false, null, true), messageObject.sponsoredPhoto), "50_50", this.avatarDrawable, null, null, 0);
                    return;
                }
                return;
            }
        }
        TLRPC.ChatPhoto chatPhoto = chat2.photo;
        this.currentPhoto = chatPhoto != null ? chatPhoto.photo_small : null;
        if (!chat2.signature_profiles || messageObject.getDialogId() == UserObject.REPLY_BOT) {
            this.avatarDrawable.setInfo(this.currentAccount, this.currentChat);
            this.avatarImage.setForUserOrChat(this.currentChat, this.avatarDrawable);
            return;
        }
        long peerDialogId = DialogObject.getPeerDialogId(messageObject.messageOwner.from_id);
        MessagesController messagesController = MessagesController.getInstance(messageObject.currentAccount);
        if (peerDialogId >= 0) {
            TLRPC.User user2 = messagesController.getUser(Long.valueOf(peerDialogId));
            this.avatarDrawable.setInfo(this.currentAccount, user2);
            chat = user2;
        } else {
            TLRPC.Chat chat3 = messagesController.getChat(Long.valueOf(-peerDialogId));
            this.avatarDrawable.setInfo(this.currentAccount, chat3);
            chat = chat3;
        }
        this.avatarImage.setForUserOrChat(chat, this.avatarDrawable);
    }

    public void setBackgroundTopY(int i) {
        int i2;
        int i3;
        Theme.MessageDrawable messageDrawable = this.currentBackgroundDrawable;
        int i4 = this.parentWidth;
        int i5 = this.parentHeight;
        if (i5 == 0) {
            i4 = getParentWidth();
            i5 = AndroidUtilities.displaySize.y;
            if (getParent() instanceof View) {
                View view = (View) getParent();
                int measuredWidth = view.getMeasuredWidth();
                i3 = view.getMeasuredHeight();
                i2 = measuredWidth;
                float f = this.parentViewTopOffset;
                messageDrawable.setTop((int) (i + f), i2, i3, (int) f, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, (this.pinnedBottom && this.transitionParams.changePinnedBottomProgress == 1.0f) ? false : true);
                MessageObject messageObject = this.currentMessageObject;
                messageDrawable.setBotButtonsBottom(messageObject == null && messageObject.hasInlineBotButtons());
            }
        }
        i2 = i4;
        i3 = i5;
        float f2 = this.parentViewTopOffset;
        messageDrawable.setTop((int) (i + f2), i2, i3, (int) f2, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, (this.pinnedBottom && this.transitionParams.changePinnedBottomProgress == 1.0f) ? false : true);
        MessageObject messageObject2 = this.currentMessageObject;
        messageDrawable.setBotButtonsBottom(messageObject2 == null && messageObject2.hasInlineBotButtons());
    }

    /* JADX WARN: Removed duplicated region for block: B:19:0x0041  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0046  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void setBackgroundTopY(boolean z) {
        int i;
        int i2;
        int i3 = 0;
        while (i3 < 2) {
            if (i3 == 1 && !z) {
                return;
            }
            Theme.MessageDrawable messageDrawable = i3 == 0 ? this.currentBackgroundDrawable : this.currentBackgroundSelectedDrawable;
            if (messageDrawable != null) {
                int i4 = this.parentWidth;
                int i5 = this.parentHeight;
                if (i5 == 0) {
                    i4 = getParentWidth();
                    i5 = AndroidUtilities.displaySize.y;
                    if (getParent() instanceof View) {
                        View view = (View) getParent();
                        int measuredWidth = view.getMeasuredWidth();
                        i2 = view.getMeasuredHeight();
                        i = measuredWidth;
                        float y = !z ? getY() : getTop();
                        float f = this.parentViewTopOffset;
                        messageDrawable.setTop((int) (y + f), i, i2, (int) f, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, (this.pinnedBottom && this.transitionParams.changePinnedBottomProgress == 1.0f) ? false : true);
                        MessageObject messageObject = this.currentMessageObject;
                        messageDrawable.setBotButtonsBottom(messageObject == null && messageObject.hasInlineBotButtons());
                    }
                }
                i = i4;
                i2 = i5;
                if (!z) {
                }
                float f2 = this.parentViewTopOffset;
                messageDrawable.setTop((int) (y + f2), i, i2, (int) f2, this.blurredViewTopOffset, this.blurredViewBottomOffset, this.pinnedTop, (this.pinnedBottom && this.transitionParams.changePinnedBottomProgress == 1.0f) ? false : true);
                MessageObject messageObject2 = this.currentMessageObject;
                messageDrawable.setBotButtonsBottom(messageObject2 == null && messageObject2.hasInlineBotButtons());
            }
            i3++;
        }
    }

    public void setCheckBoxVisible(boolean z, boolean z2) {
        MessageObject.GroupedMessages groupedMessages;
        MessageObject.GroupedMessages groupedMessages2;
        MessageObject messageObject;
        if (z2 && (messageObject = this.currentMessageObject) != null && messageObject.deletedByThanos) {
            return;
        }
        if (z) {
            this.quoteHighlight = null;
            CheckBoxBase checkBoxBase = this.checkBox;
            if (checkBoxBase == null) {
                CheckBoxBase checkBoxBase2 = new CheckBoxBase(this, 21, this.resourcesProvider);
                this.checkBox = checkBoxBase2;
                if (this.attachedToWindow) {
                    checkBoxBase2.onAttachedToWindow();
                }
            } else {
                checkBoxBase.setResourcesProvider(this.resourcesProvider);
            }
        }
        if (z && (((groupedMessages = this.currentMessagesGroup) != null && groupedMessages.messages.size() > 1) || ((groupedMessages2 = this.groupedMessagesToSet) != null && groupedMessages2.messages.size() > 1))) {
            CheckBoxBase checkBoxBase3 = this.mediaCheckBox;
            if (checkBoxBase3 == null) {
                CheckBoxBase checkBoxBase4 = new CheckBoxBase(this, 21, this.resourcesProvider);
                this.mediaCheckBox = checkBoxBase4;
                checkBoxBase4.setUseDefaultCheck(true);
                if (this.attachedToWindow) {
                    this.mediaCheckBox.onAttachedToWindow();
                }
            } else {
                checkBoxBase3.setResourcesProvider(this.resourcesProvider);
            }
        }
        if (this.checkBoxVisible == z) {
            if (z2 == this.checkBoxAnimationInProgress || z2) {
                return;
            }
            this.checkBoxAnimationProgress = z ? 1.0f : 0.0f;
            invalidate();
            return;
        }
        this.checkBoxAnimationInProgress = z2;
        this.checkBoxVisible = z;
        if (z2) {
            this.lastCheckBoxAnimationTime = SystemClock.elapsedRealtime();
        } else {
            this.checkBoxAnimationProgress = z ? 1.0f : 0.0f;
        }
        invalidate();
    }

    public void setCheckPressed(boolean z, boolean z2) {
        this.isCheckPressed = z;
        this.isPressed = z2;
        updateRadialProgressBackground();
        if (this.useSeekBarWaveform) {
            this.seekBarWaveform.setSelected(isDrawSelectionBackground());
        } else {
            this.seekBar.setSelected(isDrawSelectionBackground());
        }
        invalidate();
    }

    public void setChecked(boolean z, boolean z2, boolean z3) {
        MessageObject messageObject;
        if (z || !z3 || (messageObject = this.currentMessageObject) == null || !messageObject.deletedByThanos) {
            CheckBoxBase checkBoxBase = this.checkBox;
            if (checkBoxBase != null) {
                checkBoxBase.setChecked(z2, z3);
            }
            CheckBoxBase checkBoxBase2 = this.mediaCheckBox;
            if (checkBoxBase2 != null) {
                checkBoxBase2.setChecked(z, z3);
            }
            this.backgroundDrawable.setSelected(z2, z3);
        }
    }

    public boolean setCurrentDiceValue(boolean z) {
        MessagesController.DiceFrameSuccess diceFrameSuccess;
        if (!this.currentMessageObject.isDice()) {
            return false;
        }
        Drawable drawable = this.photoImage.getDrawable();
        if (drawable instanceof RLottieDrawable) {
            RLottieDrawable rLottieDrawable = (RLottieDrawable) drawable;
            String diceEmoji = this.currentMessageObject.getDiceEmoji();
            TLRPC.TL_messages_stickerSet stickerSetByEmojiOrName = MediaDataController.getInstance(this.currentAccount).getStickerSetByEmojiOrName(diceEmoji);
            if (stickerSetByEmojiOrName != null) {
                int diceValue = this.currentMessageObject.getDiceValue();
                if ("🎰".equals(this.currentMessageObject.getDiceEmoji())) {
                    if (diceValue >= 0 && diceValue <= 64) {
                        ((SlotsDrawable) rLottieDrawable).setDiceNumber(this, diceValue, stickerSetByEmojiOrName, z);
                        if (this.currentMessageObject.isOut()) {
                            rLottieDrawable.setOnFinishCallback(this.diceFinishCallback, ConnectionsManager.DEFAULT_DATACENTER_ID);
                        }
                        this.currentMessageObject.wasUnread = false;
                    }
                    if (!rLottieDrawable.hasBaseDice() && stickerSetByEmojiOrName.documents.size() > 0) {
                        ((SlotsDrawable) rLottieDrawable).setBaseDice(this, stickerSetByEmojiOrName);
                    }
                } else {
                    if (!rLottieDrawable.hasBaseDice() && stickerSetByEmojiOrName.documents.size() > 0) {
                        TLRPC.Document document = stickerSetByEmojiOrName.documents.get(0);
                        if (rLottieDrawable.setBaseDice(FileLoader.getInstance(this.currentAccount).getPathToAttach(document, true))) {
                            DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                        } else {
                            DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(FileLoader.getAttachFileName(document), this.currentMessageObject, this);
                            FileLoader.getInstance(this.currentAccount).loadFile(document, stickerSetByEmojiOrName, 1, 1);
                        }
                    }
                    if (diceValue >= 0 && diceValue < stickerSetByEmojiOrName.documents.size()) {
                        if (!z && this.currentMessageObject.isOut() && (diceFrameSuccess = MessagesController.getInstance(this.currentAccount).diceSuccess.get(diceEmoji)) != null && diceFrameSuccess.num == diceValue) {
                            rLottieDrawable.setOnFinishCallback(this.diceFinishCallback, diceFrameSuccess.frame);
                        }
                        TLRPC.Document document2 = stickerSetByEmojiOrName.documents.get(Math.max(diceValue, 0));
                        if (rLottieDrawable.setDiceNumber(FileLoader.getInstance(this.currentAccount).getPathToAttach(document2, true), z)) {
                            DownloadController.getInstance(this.currentAccount).removeLoadingFileObserver(this);
                        } else {
                            DownloadController.getInstance(this.currentAccount).addLoadingFileObserver(FileLoader.getAttachFileName(document2), this.currentMessageObject, this);
                            FileLoader.getInstance(this.currentAccount).loadFile(document2, stickerSetByEmojiOrName, 1, 1);
                        }
                        this.currentMessageObject.wasUnread = false;
                    }
                }
            } else {
                MediaDataController.getInstance(this.currentAccount).loadStickersByEmojiOrName(diceEmoji, true, true);
            }
        }
        return true;
    }

    public void setDelegate(ChatMessageCellDelegate chatMessageCellDelegate) {
        this.delegate = chatMessageCellDelegate;
    }

    public void setDrawSelectionBackground(boolean z) {
        if (this.drawSelectionBackground != z) {
            this.drawSelectionBackground = z;
            invalidate();
        }
    }

    public void setDrawableBoundsInner(Drawable drawable, int i, int i2, int i3, int i4) {
        if (drawable != null) {
            TransitionParams transitionParams = this.transitionParams;
            float f = i4 + i2 + transitionParams.deltaBottom;
            int i5 = (int) f;
            this.transitionYOffsetForDrawables = f - i5;
            drawable.setBounds((int) (i + transitionParams.deltaLeft), (int) (i2 + transitionParams.deltaTop), (int) (i + i3 + transitionParams.deltaRight), i5);
        }
    }

    public void setEnterTransitionInProgress(boolean z) {
        this.enterTransitionInProgress = z;
        invalidate();
    }

    public void setFullyDraw(boolean z) {
        this.fullyDraw = z;
    }

    public void setHighlighted(boolean z) {
        int i;
        if (this.isHighlighted == z) {
            return;
        }
        this.isHighlighted = z;
        if (z) {
            this.quoteHighlight = null;
        }
        if (z) {
            i = 0;
            this.isHighlightedAnimated = false;
        } else {
            this.lastHighlightProgressTime = System.currentTimeMillis();
            this.isHighlightedAnimated = true;
            i = NotificationCenter.uploadStoryProgress;
        }
        this.highlightProgress = i;
        updateRadialProgressBackground();
        if (this.useSeekBarWaveform) {
            this.seekBarWaveform.setSelected(isDrawSelectionBackground());
        } else {
            this.seekBar.setSelected(isDrawSelectionBackground());
        }
        invalidate();
        if (getParent() != null) {
            ((View) getParent()).invalidate();
        }
    }

    public void setHighlightedAnimated() {
        this.isHighlightedAnimated = true;
        this.highlightProgress = MediaDataController.MAX_STYLE_RUNS_COUNT;
        this.lastHighlightProgressTime = System.currentTimeMillis();
        invalidate();
        if (getParent() != null) {
            ((View) getParent()).invalidate();
        }
    }

    public boolean setHighlightedSpan(CharacterStyle characterStyle) {
        int i;
        int i2;
        int i3;
        int i4;
        MessageObject messageObject = this.messageObjectToSet;
        if (messageObject == null) {
            messageObject = this.currentMessageObject;
        }
        this.highlightedQuote = false;
        if (messageObject == null || messageObject.messageOwner.message == null || characterStyle == null) {
            if (!this.urlPathSelection.isEmpty()) {
                this.linkSelectionBlockNum = -1;
                this.highlightedQuote = false;
                resetUrlPaths();
                invalidate();
            }
            return false;
        }
        if (this.captionLayout != null && !TextUtils.isEmpty(messageObject.caption)) {
            CharSequence charSequence = messageObject.caption;
            if (charSequence instanceof Spannable) {
                Spanned spanned = (Spanned) charSequence;
                CharacterStyle[] characterStyleArr = (CharacterStyle[]) spanned.getSpans(0, spanned.length(), CharacterStyle.class);
                if (characterStyleArr != null && characterStyleArr.length > 0) {
                    for (CharacterStyle characterStyle2 : characterStyleArr) {
                        if (characterStyle2 == characterStyle) {
                            i4 = spanned.getSpanStart(characterStyle);
                            i3 = spanned.getSpanEnd(characterStyle);
                            break;
                        }
                    }
                }
                i3 = -1;
                i4 = -1;
                if (i4 >= 0 && i3 >= 0) {
                    int i5 = i3 - i4;
                    for (int i6 = 0; i6 < this.captionLayout.textLayoutBlocks.size(); i6++) {
                        MessageObject.TextLayoutBlock textLayoutBlock = this.captionLayout.textLayoutBlocks.get(i6);
                        if (i4 >= textLayoutBlock.charactersOffset && i4 < textLayoutBlock.charactersEnd) {
                            this.linkSelectionBlockNum = i6;
                            this.highlightedQuote = false;
                            resetUrlPaths();
                            try {
                                LinkPath obtainNewUrlPath = obtainNewUrlPath();
                                obtainNewUrlPath.setCurrentLayout(textLayoutBlock.textLayout, i4, 0.0f);
                                textLayoutBlock.textLayout.getSelectionPath(i4, i3, obtainNewUrlPath);
                                if (i3 >= textLayoutBlock.charactersOffset + i5) {
                                    for (int i7 = i6 + 1; i7 < this.captionLayout.textLayoutBlocks.size(); i7++) {
                                        MessageObject.TextLayoutBlock textLayoutBlock2 = this.captionLayout.textLayoutBlocks.get(i7);
                                        int i8 = textLayoutBlock2.charactersEnd - textLayoutBlock2.charactersOffset;
                                        LinkPath obtainNewUrlPath2 = obtainNewUrlPath();
                                        obtainNewUrlPath2.setCurrentLayout(textLayoutBlock2.textLayout, 0, textLayoutBlock2.height);
                                        textLayoutBlock2.textLayout.getSelectionPath(0, i3 - textLayoutBlock2.charactersOffset, obtainNewUrlPath2);
                                        if (i3 < (textLayoutBlock.charactersOffset + i8) - 1) {
                                            break;
                                        }
                                    }
                                }
                            } catch (Exception e) {
                                FileLog.e(e);
                            }
                            invalidate();
                            return true;
                        }
                    }
                }
            }
        }
        CharSequence charSequence2 = messageObject.messageText;
        if ((charSequence2 instanceof Spanned) && messageObject.textLayoutBlocks != null) {
            Spanned spanned2 = (Spanned) charSequence2;
            CharacterStyle[] characterStyleArr2 = (CharacterStyle[]) spanned2.getSpans(0, spanned2.length(), CharacterStyle.class);
            if (characterStyleArr2 != null && characterStyleArr2.length > 0) {
                for (CharacterStyle characterStyle3 : characterStyleArr2) {
                    if (characterStyle3 == characterStyle) {
                        i2 = spanned2.getSpanStart(characterStyle);
                        i = spanned2.getSpanEnd(characterStyle);
                        break;
                    }
                }
            }
            i = -1;
            i2 = -1;
            if (i2 >= 0 && i >= 0) {
                int i9 = i - i2;
                for (int i10 = 0; i10 < messageObject.textLayoutBlocks.size(); i10++) {
                    MessageObject.TextLayoutBlock textLayoutBlock3 = messageObject.textLayoutBlocks.get(i10);
                    if (i2 >= textLayoutBlock3.charactersOffset && i2 < textLayoutBlock3.charactersEnd) {
                        this.linkSelectionBlockNum = i10;
                        this.highlightedQuote = false;
                        resetUrlPaths();
                        try {
                            LinkPath obtainNewUrlPath3 = obtainNewUrlPath();
                            obtainNewUrlPath3.setCurrentLayout(textLayoutBlock3.textLayout, i2, 0.0f);
                            textLayoutBlock3.textLayout.getSelectionPath(i2, i, obtainNewUrlPath3);
                            if (i >= textLayoutBlock3.charactersOffset + i9) {
                                for (int i11 = i10 + 1; i11 < messageObject.textLayoutBlocks.size(); i11++) {
                                    MessageObject.TextLayoutBlock textLayoutBlock4 = messageObject.textLayoutBlocks.get(i11);
                                    int i12 = textLayoutBlock4.charactersEnd - textLayoutBlock4.charactersOffset;
                                    LinkPath obtainNewUrlPath4 = obtainNewUrlPath();
                                    obtainNewUrlPath4.setCurrentLayout(textLayoutBlock4.textLayout, 0, textLayoutBlock4.height);
                                    textLayoutBlock4.textLayout.getSelectionPath(0, i - textLayoutBlock4.charactersOffset, obtainNewUrlPath4);
                                    if (i < (textLayoutBlock3.charactersOffset + i12) - 1) {
                                        break;
                                    }
                                }
                            }
                        } catch (Exception e2) {
                            FileLog.e(e2);
                        }
                        invalidate();
                        return true;
                    }
                }
            }
        }
        if (!this.urlPathSelection.isEmpty()) {
            this.linkSelectionBlockNum = -1;
            this.highlightedQuote = false;
            resetUrlPaths();
            invalidate();
        }
        return false;
    }

    public boolean setHighlightedText(String str) {
        return setHighlightedText(str, false, -1, false);
    }

    /* JADX WARN: Code restructure failed: missing block: B:60:0x011a, code lost:
    
        if (r0.end == r6) goto L98;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean setHighlightedText(String str, boolean z, int i, boolean z2) {
        String str2;
        int i2;
        int i3;
        int i4;
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        QuoteHighlight quoteHighlight;
        if (this.highlightedQuote && !z && TextUtils.isEmpty(str)) {
            return false;
        }
        MessageObject messageObject = this.messageObjectToSet;
        if (messageObject == null) {
            messageObject = this.currentMessageObject;
        }
        MessageObject messageObject2 = messageObject;
        this.highlightedQuote = z;
        if (messageObject2 == null || TextUtils.isEmpty(str)) {
            if (!this.urlPathSelection.isEmpty()) {
                this.linkSelectionBlockNum = -1;
                this.highlightedQuote = false;
                resetUrlPaths();
                invalidate();
            }
            return false;
        }
        if (!z) {
            this.quoteHighlight = null;
        }
        CharSequence charSequence = this.currentCaption;
        String charSequence2 = charSequence != null ? charSequence.toString() : messageObject2.messageOwner.message;
        if (charSequence2 == null || TextUtils.isEmpty(charSequence2)) {
            if (!this.urlPathSelection.isEmpty()) {
                this.linkSelectionBlockNum = -1;
                this.highlightedQuote = false;
                resetUrlPaths();
                invalidate();
            }
            return false;
        }
        if (z) {
            str2 = str;
        } else {
            str2 = str.toLowerCase();
            charSequence2 = charSequence2.toLowerCase();
        }
        if (z) {
            i3 = MessageObject.findQuoteStart(charSequence2, str2, i);
            i2 = str2.length();
        } else {
            int length = charSequence2.length();
            int i5 = -1;
            int i6 = -1;
            for (int i7 = 0; i7 < length; i7++) {
                int min = Math.min(str2.length(), length - i7);
                int i8 = 0;
                int i9 = 0;
                while (i8 < min) {
                    boolean z3 = charSequence2.charAt(i7 + i8) == str2.charAt(i8);
                    if (z3) {
                        if (i9 != 0 || i7 == 0 || " !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n".indexOf(charSequence2.charAt(i7 - 1)) >= 0) {
                            i9++;
                        } else {
                            i4 = i9;
                            z3 = false;
                            if (z3 || i8 == min - 1) {
                                if (i4 > 0 && i4 > i5) {
                                    i6 = i7;
                                    i5 = i4;
                                }
                            } else {
                                i8++;
                                i9 = i4;
                            }
                        }
                    }
                    i4 = i9;
                    if (z3) {
                    }
                    if (i4 > 0) {
                        i6 = i7;
                        i5 = i4;
                    }
                }
            }
            i2 = i5;
            i3 = i6;
        }
        if (i3 == -1) {
            if (!this.urlPathSelection.isEmpty()) {
                this.linkSelectionBlockNum = -1;
                this.highlightedQuote = false;
                resetUrlPaths();
                invalidate();
            }
            return false;
        }
        if (!z) {
            int length2 = charSequence2.length();
            for (int i10 = i3 + i2; i10 < length2 && " !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n".indexOf(charSequence2.charAt(i10)) < 0; i10++) {
                i2++;
            }
        }
        this.highlightedQuote = z;
        int i11 = i3 + i2;
        if (!z || this.currentMessagesGroup != null || this.groupedMessagesToSet != null) {
            if (TextUtils.isEmpty(this.currentCaption)) {
                arrayList = messageObject2.textLayoutBlocks;
                if (arrayList == null) {
                    return true;
                }
            } else {
                MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
                if (textLayoutBlocks == null) {
                    this.highlightCaptionToSetStart = i3;
                    this.highlightCaptionToSetEnd = i11;
                    return true;
                }
                arrayList = textLayoutBlocks.textLayoutBlocks;
            }
            highlight(i3, i11, arrayList);
            return true;
        }
        QuoteHighlight quoteHighlight2 = this.quoteHighlight;
        boolean z4 = quoteHighlight2 == null || !quoteHighlight2.done();
        QuoteHighlight quoteHighlight3 = this.quoteHighlight;
        if (quoteHighlight3 != null && quoteHighlight3.id == messageObject2.getId()) {
            QuoteHighlight quoteHighlight4 = this.quoteHighlight;
            if (quoteHighlight4.start == i3) {
            }
        }
        MessageObject.TextLayoutBlocks textLayoutBlocks2 = this.captionLayout;
        ViewParent parent = getParent();
        int id = messageObject2.getId();
        if (textLayoutBlocks2 != null) {
            MessageObject.TextLayoutBlocks textLayoutBlocks3 = this.captionLayout;
            quoteHighlight = new QuoteHighlight(this, parent, id, textLayoutBlocks3.textLayoutBlocks, i3, i11, textLayoutBlocks3.textXOffset);
        } else {
            quoteHighlight = new QuoteHighlight(this, parent, id, messageObject2.textLayoutBlocks, i3, i11, messageObject2.textXOffset);
        }
        this.quoteHighlight = quoteHighlight;
        QuoteHighlight quoteHighlight5 = this.quoteHighlight;
        if (quoteHighlight5 == null || quoteHighlight5.quotesToExpand.isEmpty()) {
            return true;
        }
        if (!z2) {
            if (z4) {
                return true;
            }
            this.quoteHighlight = null;
            return true;
        }
        MessageObject primaryMessageObject = getPrimaryMessageObject();
        if (primaryMessageObject != null) {
            messageObject2 = primaryMessageObject;
        }
        HashSet<Integer> hashSet = messageObject2.expandedQuotes == null ? new HashSet<>() : new HashSet<>(messageObject2.expandedQuotes);
        messageObject2.expandedQuotes = hashSet;
        hashSet.addAll(this.quoteHighlight.quotesToExpand);
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        if (chatMessageCellDelegate == null) {
            return true;
        }
        chatMessageCellDelegate.forceUpdate(this, false);
        return true;
    }

    public void setImageCoords(float f, float f2, float f3, float f4) {
        this.photoImage.setImageCoords(f, f2, f3, f4);
        int i = this.documentAttachType;
        if (i == 4 || i == 2) {
            this.videoButtonX = (int) (this.photoImage.getImageX() + AndroidUtilities.dp(8.0f));
            int imageY = (int) (this.photoImage.getImageY() + AndroidUtilities.dp(8.0f));
            this.videoButtonY = imageY;
            RadialProgress2 radialProgress2 = this.videoRadialProgress;
            int i2 = this.videoButtonX;
            radialProgress2.setProgressRect(i2, imageY, AndroidUtilities.dp(24.0f) + i2, this.videoButtonY + AndroidUtilities.dp(24.0f));
            this.buttonX = (int) (f + ((this.photoImage.getImageWidth() - AndroidUtilities.dp(48.0f)) / 2.0f));
            int imageY2 = (int) (this.photoImage.getImageY() + ((this.photoImage.getImageHeight() - AndroidUtilities.dp(48.0f)) / 2.0f));
            this.buttonY = imageY2;
            RadialProgress2 radialProgress22 = this.radialProgress;
            int i3 = this.buttonX;
            radialProgress22.setProgressRect(i3, imageY2, AndroidUtilities.dp(48.0f) + i3, this.buttonY + AndroidUtilities.dp(48.0f));
        }
    }

    public void setImageCoords(RectF rectF) {
        setImageCoords(rectF.left, rectF.top, rectF.width(), rectF.height());
    }

    public void setInvalidateListener(Runnable runnable) {
        this.invalidateListener = runnable;
    }

    public void setInvalidateSpoilersParent(boolean z) {
        this.invalidateSpoilersParent = z;
    }

    public void setInvalidatesParent(boolean z) {
        this.invalidatesParent = z;
    }

    public void setIsUpdating(boolean z) {
        this.isUpdating = true;
    }

    public void setLastTouchCoords(float f, float f2) {
        this.lastTouchX = f;
        this.lastTouchY = f2;
        this.backgroundDrawable.setTouchCoords(f + getTranslationX(), this.lastTouchY);
    }

    public void setMessageObject(MessageObject messageObject, MessageObject.GroupedMessages groupedMessages, boolean z, boolean z2) {
        if (this.attachedToWindow && !this.frozen) {
            setMessageContent(messageObject, groupedMessages, z, z2);
            return;
        }
        this.messageObjectToSet = messageObject;
        this.groupedMessagesToSet = groupedMessages;
        this.bottomNearToSet = z;
        this.topNearToSet = z2;
    }

    public void setOverrideInvalidate(Runnable runnable) {
        this.overrideInvalidate = runnable;
    }

    public void setParentBounds(float f, int i) {
        this.parentBoundsTop = f;
        this.parentBoundsBottom = i;
        if (this.photoImageOutOfBounds) {
            float y = getY() + this.photoImage.getImageY();
            if (this.photoImage.getImageHeight() + y < this.parentBoundsTop || y > this.parentBoundsBottom) {
                return;
            }
            invalidate();
        }
    }

    public void setParentViewSize(int i, int i2) {
        Theme.MessageDrawable messageDrawable;
        this.parentWidth = i;
        this.parentHeight = i2;
        this.backgroundHeight = i2;
        if (!(this.currentMessageObject != null && hasGradientService() && this.currentMessageObject.shouldDrawWithoutBackground()) && ((messageDrawable = this.currentBackgroundDrawable) == null || messageDrawable.getGradientShader() == null)) {
            return;
        }
        invalidate();
    }

    @Override // android.view.View
    public void setPressed(boolean z) {
        super.setPressed(z);
        updateRadialProgressBackground();
        if (this.useSeekBarWaveform) {
            this.seekBarWaveform.setSelected(isDrawSelectionBackground());
        } else {
            this.seekBar.setSelected(isDrawSelectionBackground());
        }
        invalidate();
    }

    public void setResourcesProvider(Theme.ResourcesProvider resourcesProvider) {
        this.resourcesProvider = resourcesProvider;
        RadialProgress2 radialProgress2 = this.radialProgress;
        if (radialProgress2 != null) {
            radialProgress2.setResourcesProvider(resourcesProvider);
        }
        RadialProgress2 radialProgress22 = this.videoRadialProgress;
        if (radialProgress22 != null) {
            radialProgress22.setResourcesProvider(resourcesProvider);
        }
        RoundVideoPlayingDrawable roundVideoPlayingDrawable = this.roundVideoPlayingDrawable;
        if (roundVideoPlayingDrawable != null) {
            roundVideoPlayingDrawable.setResourcesProvider(resourcesProvider);
        }
    }

    public void setScrimReaction(Integer num) {
        this.reactionsLayoutInBubble.setScrimReaction(num);
    }

    public void setSelectedBackgroundProgress(float f) {
        this.selectedBackgroundProgress = f;
        invalidate();
    }

    public void setSlidingOffset(float f) {
        if (this.slidingOffsetX != f) {
            this.slidingOffsetX = f;
            updateTranslation();
        }
    }

    public void setSpoilersSuppressed(boolean z) {
        for (int i = 0; i < this.replySpoilers.size(); i++) {
            ((SpoilerEffect) this.replySpoilers.get(i)).setSuppressUpdates(z);
        }
        MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
        if (textLayoutBlocks != null && textLayoutBlocks.textLayoutBlocks != null) {
            for (int i2 = 0; i2 < this.captionLayout.textLayoutBlocks.size(); i2++) {
                MessageObject.TextLayoutBlock textLayoutBlock = this.captionLayout.textLayoutBlocks.get(i2);
                for (int i3 = 0; i3 < textLayoutBlock.spoilers.size(); i3++) {
                    textLayoutBlock.spoilers.get(i3).setSuppressUpdates(z);
                }
            }
        }
        if (getMessageObject() == null || getMessageObject().textLayoutBlocks == null) {
            return;
        }
        for (int i4 = 0; i4 < getMessageObject().textLayoutBlocks.size(); i4++) {
            MessageObject.TextLayoutBlock textLayoutBlock2 = getMessageObject().textLayoutBlocks.get(i4);
            for (int i5 = 0; i5 < textLayoutBlock2.spoilers.size(); i5++) {
                textLayoutBlock2.spoilers.get(i5).setSuppressUpdates(z);
            }
        }
    }

    public void setTimeAlpha(float f) {
        this.timeAlpha = f;
    }

    @Override // android.view.View
    public void setTranslationX(float f) {
        super.setTranslationX(f);
    }

    public void setVisibleOnScreen(boolean z, float f, float f2) {
        if (this.visibleOnScreen != z) {
            this.visibleOnScreen = z;
            checkImageReceiversAttachState();
            if (z) {
                invalidate();
            }
        }
        float imageY = f - this.photoImage.getImageY();
        float measuredHeight = f2 - (getMeasuredHeight() - this.photoImage.getImageY2());
        float imageHeight = this.photoImage.getImageHeight();
        if (imageY > 0.0f) {
            imageHeight -= imageY;
        }
        if (measuredHeight > 0.0f) {
            imageHeight -= measuredHeight;
        }
        ImageReceiver imageReceiver = this.photoImage;
        boolean z2 = imageHeight / imageReceiver.getImageHeight() < 0.25f;
        this.skipFrameUpdate = z2;
        imageReceiver.setSkipUpdateFrame(z2);
    }

    public void setVisiblePart(int i, int i2, int i3, float f, float f2, int i4, int i5, int i6, int i7) {
        MessageObject messageObject;
        this.childPosition = i;
        this.visibleHeight = i2;
        this.visibleParent = i3;
        this.parentWidth = i4;
        this.parentHeight = i5;
        this.visibleTop = f2;
        this.visibleParentOffset = f;
        this.backgroundHeight = i5;
        this.blurredViewTopOffset = i6;
        this.blurredViewBottomOffset = i7;
        if ((!this.botButtons.isEmpty() || (this.channelRecommendationsCell != null && (messageObject = this.currentMessageObject) != null && messageObject.type == 27)) && this.viewTop != f2) {
            invalidate();
        }
        this.viewTop = f2;
        if (i3 != this.parentHeight || f != this.parentViewTopOffset) {
            this.parentViewTopOffset = f;
            this.parentHeight = i3;
        }
        if (this.currentMessageObject != null && hasGradientService() && this.currentMessageObject.shouldDrawWithoutBackground()) {
            invalidate();
        }
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2 == null || messageObject2.textLayoutBlocks == null) {
            return;
        }
        int i8 = i - this.textY;
        int i9 = 0;
        for (int i10 = 0; i10 < this.currentMessageObject.textLayoutBlocks.size() && this.currentMessageObject.textLayoutBlocks.get(i10).textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams) <= i8; i10++) {
            i9 = i10;
        }
        int i11 = -1;
        int i12 = -1;
        int i13 = 0;
        while (i9 < this.currentMessageObject.textLayoutBlocks.size()) {
            float textYOffset = this.currentMessageObject.textLayoutBlocks.get(i9).textYOffset(this.currentMessageObject.textLayoutBlocks, this.transitionParams);
            float height = r13.padTop + textYOffset + r13.height(this.transitionParams) + r13.padBottom;
            float f3 = i8;
            if (!intersect(textYOffset, height, f3, i8 + i2)) {
                if (textYOffset > f3) {
                    break;
                }
            } else {
                if (i11 == -1) {
                    i11 = i9;
                }
                i13++;
                i12 = i9;
            }
            i9++;
        }
        if (this.lastVisibleBlockNum == i12 && this.firstVisibleBlockNum == i11 && this.totalVisibleBlocksCount == i13) {
            if (this.animatedEmojiStack != null) {
                for (int i14 = 0; i14 < this.animatedEmojiStack.holders.size(); i14++) {
                    AnimatedEmojiSpan.AnimatedEmojiHolder animatedEmojiHolder = (AnimatedEmojiSpan.AnimatedEmojiHolder) this.animatedEmojiStack.holders.get(i14);
                    if (animatedEmojiHolder == null || !animatedEmojiHolder.skipDraw || animatedEmojiHolder.outOfBounds((this.parentBoundsTop - getY()) - animatedEmojiHolder.drawingYOffset, (this.parentBoundsBottom - getY()) - animatedEmojiHolder.drawingYOffset)) {
                    }
                }
                return;
            }
            return;
        }
        this.lastVisibleBlockNum = i12;
        this.firstVisibleBlockNum = i11;
        this.totalVisibleBlocksCount = i13;
        invalidate();
    }

    public void setupTextColors() {
        TextPaint textPaint;
        TextPaint textPaint2;
        TextPaint textPaint3;
        TextPaint textPaint4;
        TextPaint textPaint5;
        TextPaint textPaint6;
        TextPaint textPaint7;
        int i;
        if (this.currentMessageObject.isOutOwner()) {
            TextPaint textPaint8 = Theme.chat_msgTextPaint;
            int i2 = Theme.key_chat_messageTextOut;
            textPaint8.setColor(getThemedColor(i2));
            Theme.chat_msgGameTextPaint.setColor(getThemedColor(i2));
            Theme.chat_msgTextCodePaint.setColor(getThemedColor(i2));
            Theme.chat_msgTextCode2Paint.setColor(getThemedColor(i2));
            Theme.chat_msgTextCode3Paint.setColor(getThemedColor(i2));
            textPaint = Theme.chat_msgGameTextPaint;
            textPaint2 = Theme.chat_replyTextPaint;
            textPaint3 = Theme.chat_quoteTextPaint;
            textPaint4 = Theme.chat_msgTextPaint;
            textPaint5 = Theme.chat_msgTextCodePaint;
            textPaint6 = Theme.chat_msgTextCode2Paint;
            textPaint7 = Theme.chat_msgTextCode3Paint;
            i = Theme.key_chat_messageLinkOut;
        } else {
            TextPaint textPaint9 = Theme.chat_msgTextPaint;
            int i3 = Theme.key_chat_messageTextIn;
            textPaint9.setColor(getThemedColor(i3));
            Theme.chat_msgGameTextPaint.setColor(getThemedColor(i3));
            Theme.chat_msgTextCodePaint.setColor(getThemedColor(i3));
            Theme.chat_msgTextCode2Paint.setColor(getThemedColor(i3));
            Theme.chat_msgTextCode3Paint.setColor(getThemedColor(i3));
            textPaint = Theme.chat_msgGameTextPaint;
            textPaint2 = Theme.chat_replyTextPaint;
            textPaint3 = Theme.chat_quoteTextPaint;
            textPaint4 = Theme.chat_msgTextPaint;
            textPaint5 = Theme.chat_msgTextCodePaint;
            textPaint6 = Theme.chat_msgTextCode2Paint;
            textPaint7 = Theme.chat_msgTextCode3Paint;
            i = Theme.key_chat_messageLinkIn;
        }
        int themedColor = getThemedColor(i);
        textPaint7.linkColor = themedColor;
        textPaint6.linkColor = themedColor;
        textPaint5.linkColor = themedColor;
        textPaint4.linkColor = themedColor;
        textPaint3.linkColor = themedColor;
        textPaint2.linkColor = themedColor;
        textPaint.linkColor = themedColor;
    }

    public void shakeView() {
        PropertyValuesHolder ofKeyframe = PropertyValuesHolder.ofKeyframe(View.ROTATION, Keyframe.ofFloat(0.0f, 0.0f), Keyframe.ofFloat(0.2f, 3.0f), Keyframe.ofFloat(0.4f, -3.0f), Keyframe.ofFloat(0.6f, 3.0f), Keyframe.ofFloat(0.8f, -3.0f), Keyframe.ofFloat(1.0f, 0.0f));
        Keyframe ofFloat = Keyframe.ofFloat(0.0f, 1.0f);
        Keyframe ofFloat2 = Keyframe.ofFloat(0.5f, 0.97f);
        Keyframe ofFloat3 = Keyframe.ofFloat(1.0f, 1.0f);
        PropertyValuesHolder ofKeyframe2 = PropertyValuesHolder.ofKeyframe(View.SCALE_X, ofFloat, ofFloat2, ofFloat3);
        PropertyValuesHolder ofKeyframe3 = PropertyValuesHolder.ofKeyframe(View.SCALE_Y, ofFloat, ofFloat2, ofFloat3);
        AnimatorSet animatorSet = new AnimatorSet();
        this.shakeAnimation = animatorSet;
        animatorSet.playTogether(ObjectAnimator.ofPropertyValuesHolder(this, ofKeyframe), ObjectAnimator.ofPropertyValuesHolder(this, ofKeyframe2), ObjectAnimator.ofPropertyValuesHolder(this, ofKeyframe3));
        this.shakeAnimation.setDuration(500L);
        this.shakeAnimation.start();
    }

    public boolean shouldDrawAlphaLayer() {
        MessageObject.GroupedMessages groupedMessages = this.currentMessagesGroup;
        return (groupedMessages == null || !groupedMessages.transitionParams.backgroundChangeBounds) && getAlpha() != 1.0f;
    }

    /* JADX WARN: Code restructure failed: missing block: B:22:0x0030, code lost:
    
        if (r4.currentMessageObject.isRoundVideo() == false) goto L23;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean shouldDrawTimeOnMedia() {
        int i = this.overideShouldDrawTimeOnMedia;
        if (i != 0) {
            return i == 1;
        }
        if (this.mediaBackground && (this.captionLayout == null || this.captionAbove)) {
            ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
            if (!reactionsLayoutInBubble.isEmpty) {
                if (!reactionsLayoutInBubble.isSmall) {
                    MessageObject messageObject = this.currentMessageObject;
                    if (messageObject != null) {
                        if (!messageObject.isAnyKindOfSticker()) {
                        }
                    }
                }
            }
        }
        MessageObject messageObject2 = this.currentMessageObject;
        return messageObject2 != null && messageObject2.type == 29;
    }

    public void showHintButton(boolean z, boolean z2, int i) {
        if (i == -1 || i == 0) {
            if (this.hintButtonVisible == z) {
                return;
            }
            this.hintButtonVisible = z;
            if (z2) {
                invalidate();
            } else {
                this.hintButtonProgress = z ? 1.0f : 0.0f;
            }
        }
        if ((i == -1 || i == 1) && this.psaButtonVisible != z) {
            this.psaButtonVisible = z;
            if (!z2) {
                this.psaButtonProgress = z ? 1.0f : 0.0f;
            } else {
                setInvalidatesParent(true);
                invalidate();
            }
        }
    }

    public void startRevealMedia() {
        startRevealMedia(this.photoImage.getImageX() + (this.photoImage.getImageWidth() / 2.0f), this.photoImage.getImageY() + (this.photoImage.getImageHeight() / 2.0f));
    }

    public void startRevealMedia(float f, float f2) {
        float sqrt = (float) Math.sqrt(Math.pow(this.photoImage.getImageWidth(), 2.0d) + Math.pow(this.photoImage.getImageHeight(), 2.0d));
        this.mediaSpoilerRevealMaxRadius = sqrt;
        startRevealMedia(f, f2, sqrt);
    }

    public void updateAnimatedEmojis() {
        MessageObject messageObject;
        AnimatedEmojiSpan.EmojiGroupedSpans update;
        ArrayList<MessageObject.TextLayoutBlock> arrayList;
        if (!this.imageReceiversAttachState || (messageObject = this.currentMessageObject) == null) {
            return;
        }
        int cacheTypeForEnterView = messageObject.wasJustSent ? AnimatedEmojiDrawable.getCacheTypeForEnterView() : 0;
        MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
        if (textLayoutBlocks == null || (arrayList = textLayoutBlocks.textLayoutBlocks) == null) {
            ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
            update = AnimatedEmojiSpan.update(cacheTypeForEnterView, this, chatMessageCellDelegate == null || !chatMessageCellDelegate.canDrawOutboundsContent(), this.animatedEmojiStack, this.currentMessageObject.textLayoutBlocks);
        } else {
            update = AnimatedEmojiSpan.update(cacheTypeForEnterView, (View) this, false, this.animatedEmojiStack, arrayList);
        }
        this.animatedEmojiStack = update;
    }

    /*  JADX ERROR: JadxRuntimeException in pass: IfRegionVisitor
        jadx.core.utils.exceptions.JadxRuntimeException: Can't remove SSA var: r4v15 org.telegram.tgnet.TLObject, still in use, count: 2, list:
          (r4v15 org.telegram.tgnet.TLObject) from 0x006d: IF  (r4v15 org.telegram.tgnet.TLObject) != (null org.telegram.tgnet.TLObject)  -> B:24:0x004a A[HIDDEN]
          (r4v15 org.telegram.tgnet.TLObject) from 0x004a: PHI (r4v68 org.telegram.tgnet.TLObject) = (r4v15 org.telegram.tgnet.TLObject), (r4v16 org.telegram.tgnet.TLObject), (r4v70 org.telegram.tgnet.TLObject) binds: [B:518:0x006d, B:516:0x0068, B:21:0x0042] A[DONT_GENERATE, DONT_INLINE]
        	at jadx.core.utils.InsnRemover.removeSsaVar(InsnRemover.java:162)
        	at jadx.core.utils.InsnRemover.unbindResult(InsnRemover.java:127)
        	at jadx.core.dex.visitors.regions.TernaryMod.makeTernaryInsn(TernaryMod.java:125)
        	at jadx.core.dex.visitors.regions.TernaryMod.processRegion(TernaryMod.java:62)
        	at jadx.core.dex.visitors.regions.TernaryMod.enterRegion(TernaryMod.java:45)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseInternal(DepthRegionTraversal.java:67)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.lambda$traverseInternal$0(DepthRegionTraversal.java:68)
        	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseInternal(DepthRegionTraversal.java:68)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.lambda$traverseInternal$0(DepthRegionTraversal.java:68)
        	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
        	at java.base/java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1092)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseInternal(DepthRegionTraversal.java:68)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.lambda$traverseInternal$0(DepthRegionTraversal.java:68)
        	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseInternal(DepthRegionTraversal.java:68)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.lambda$traverseInternal$0(DepthRegionTraversal.java:68)
        	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
        	at java.base/java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1092)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseInternal(DepthRegionTraversal.java:68)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.lambda$traverseInternal$0(DepthRegionTraversal.java:68)
        	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseInternal(DepthRegionTraversal.java:68)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.lambda$traverseInternal$0(DepthRegionTraversal.java:68)
        	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
        	at java.base/java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1092)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseInternal(DepthRegionTraversal.java:68)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.lambda$traverseInternal$0(DepthRegionTraversal.java:68)
        	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseInternal(DepthRegionTraversal.java:68)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.lambda$traverseInternal$0(DepthRegionTraversal.java:68)
        	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
        	at java.base/java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1092)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseInternal(DepthRegionTraversal.java:68)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.lambda$traverseInternal$0(DepthRegionTraversal.java:68)
        	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseInternal(DepthRegionTraversal.java:68)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverse(DepthRegionTraversal.java:19)
        	at jadx.core.dex.visitors.regions.TernaryMod.process(TernaryMod.java:35)
        	at jadx.core.dex.visitors.regions.IfRegionVisitor.process(IfRegionVisitor.java:34)
        	at jadx.core.dex.visitors.regions.IfRegionVisitor.visit(IfRegionVisitor.java:30)
        */
    /* JADX WARN: Removed duplicated region for block: B:28:0x00b3  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x00cf  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x00d8  */
    /* JADX WARN: Removed duplicated region for block: B:374:0x0665  */
    /* JADX WARN: Removed duplicated region for block: B:377:0x0674  */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0103  */
    /* JADX WARN: Removed duplicated region for block: B:495:0x0134  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x013e  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void updateButtonState(boolean r18, boolean r19, boolean r20) {
        /*
            Method dump skipped, instructions count: 2178
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.Cells.ChatMessageCell.updateButtonState(boolean, boolean, boolean):void");
    }

    public void updateCaptionLayout() {
        float imageX;
        float imageY;
        float imageHeight;
        float f;
        int i;
        float dp;
        int dp2;
        int i2;
        MessageObject messageObject = this.currentMessageObject;
        int i3 = messageObject.type;
        boolean z = true;
        if (i3 == 1 || i3 == 20 || this.documentAttachType == 4 || i3 == 8 || i3 == 23) {
            TransitionParams transitionParams = this.transitionParams;
            if (transitionParams.imageChangeBoundsTransition) {
                imageX = transitionParams.animateToImageX;
                imageY = transitionParams.animateToImageY;
                imageHeight = transitionParams.animateToImageH;
            } else {
                imageX = this.photoImage.getImageX();
                imageY = this.photoImage.getImageY();
                imageHeight = this.photoImage.getImageHeight();
            }
            this.captionX = imageX + AndroidUtilities.dp(5.0f) + this.captionOffsetX;
            float dp3 = imageY + imageHeight + AndroidUtilities.dp(6.0f);
            this.captionY = imageY + AndroidUtilities.lerp(imageHeight + AndroidUtilities.dp(6.0f), (this.captionLayout == null ? 0 : -r6.textHeight()) - AndroidUtilities.dp(4.0f), mediaAbove());
            f = dp3;
            z = false;
        } else {
            float f2 = 43.0f;
            float f3 = 0.0f;
            if (this.hasOldCaptionPreview) {
                this.captionX = this.backgroundDrawableLeft + AndroidUtilities.dp(messageObject.isOutOwner() ? 11.0f : 17.0f) + this.captionOffsetX;
                dp2 = (((this.totalHeight - this.captionHeight) - AndroidUtilities.dp(this.drawPinnedTop ? 9.0f : 10.0f)) - this.linkPreviewHeight) - AndroidUtilities.dp(17.0f);
                if (!this.drawCommentButton || this.drawSideButton == 3) {
                    f2 = 0.0f;
                } else if (shouldDrawTimeOnMedia()) {
                    f2 = 41.3f;
                }
                i2 = AndroidUtilities.dp(f2);
            } else {
                if (this.isRoundVideo) {
                    dp = getBackgroundDrawableLeft() + AndroidUtilities.dp((this.currentMessageObject.isOutOwner() ? 0 : 6) + 11);
                } else {
                    int i4 = this.backgroundDrawableLeft;
                    if (!messageObject.isOutOwner() && !this.mediaBackground && !this.drawPinnedBottom) {
                        r9 = 17.0f;
                    }
                    dp = i4 + AndroidUtilities.dp(r9) + this.captionOffsetX;
                }
                this.captionX = dp;
                int dp4 = (this.totalHeight - this.captionHeight) - AndroidUtilities.dp(this.drawPinnedTop ? 9.0f : 10.0f);
                if (!this.drawCommentButton || this.drawSideButton == 3) {
                    f2 = 0.0f;
                } else if (shouldDrawTimeOnMedia()) {
                    f2 = 41.3f;
                }
                dp2 = dp4 - AndroidUtilities.dp(f2);
                ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
                if (reactionsLayoutInBubble.isEmpty || reactionsLayoutInBubble.isSmall) {
                    i2 = 0;
                } else {
                    if (this.currentMessageObject.type == 9 && this.currentPosition == null) {
                        f3 = 10.0f;
                    }
                    i2 = AndroidUtilities.dp(f3) + this.reactionsLayoutInBubble.totalHeight;
                }
            }
            f = dp2 - i2;
            this.captionY = AndroidUtilities.lerp(f, AndroidUtilities.dp(9.0f) + this.namesOffset, mediaAbove());
        }
        this.captionX += getExtraTextX();
        MessageObject messageObject2 = this.currentMessageObject;
        if (messageObject2 == null || (i = messageObject2.type) == 0 || i == 24 || messageObject2.isGiveawayOrGiveawayResults() || this.currentMessageObject.isSponsored()) {
            return;
        }
        if (z && this.hasFactCheck) {
            this.captionY -= (this.factCheckHeight + AndroidUtilities.dp(16.0f)) * (1.0f - mediaAbove());
        }
        this.factCheckY = (int) (((f - (z ? this.factCheckHeight + AndroidUtilities.dp(14.0f) : 0)) + AndroidUtilities.lerp(this.captionLayout != null ? r1.textHeight(this.transitionParams) + AndroidUtilities.dp(4.0f) : 0, AndroidUtilities.dp(6.0f), mediaAbove())) - this.transitionParams.deltaTop);
    }

    public void updatePlayingMessageProgress() {
        StaticLayout staticLayout;
        double d;
        double d2;
        MessageObject messageObject = this.currentMessageObject;
        if (messageObject == null) {
            return;
        }
        OldVideoPlayerRewinder oldVideoPlayerRewinder = this.videoPlayerRewinder;
        if (oldVideoPlayerRewinder != null && oldVideoPlayerRewinder.rewindCount != 0 && oldVideoPlayerRewinder.rewindByBackSeek) {
            messageObject.audioProgress = oldVideoPlayerRewinder.getVideoProgress();
        }
        double d3 = 0.0d;
        if (this.documentAttachType == 4) {
            SeekBar seekBar = this.seekBar;
            if (seekBar != null) {
                seekBar.clearTimestamps();
            }
            if (this.infoLayout == null || !(PhotoViewer.isPlayingMessage(this.currentMessageObject) || MediaController.getInstance().isGoingToShowMessageObject(this.currentMessageObject))) {
                AnimatedFileDrawable animation = this.photoImage.getAnimation();
                if (animation != null) {
                    MessageObject messageObject2 = this.currentMessageObject;
                    int durationMs = animation.getDurationMs() / MediaDataController.MAX_STYLE_RUNS_COUNT;
                    messageObject2.audioPlayerDuration = durationMs;
                    d2 = durationMs;
                    MessageObject messageObject3 = this.currentMessageObject;
                    TLRPC.Message message = messageObject3.messageOwner;
                    if (message.ttl > 0 && message.destroyTime == 0 && !messageObject3.needDrawBluredPreview() && this.currentMessageObject.isVideo() && animation.hasBitmap()) {
                        this.delegate.didStartVideoStream(this.currentMessageObject);
                    }
                } else {
                    d2 = 0.0d;
                }
                if (d2 == 0.0d) {
                    d2 = this.currentMessageObject.getDuration();
                }
                if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                    double d4 = this.currentMessageObject.audioProgress;
                    Double.isNaN(d4);
                    d2 -= d4 * d2;
                } else if (animation != null) {
                    if (d2 != 0.0d) {
                        double currentProgressMs = animation.getCurrentProgressMs() / MediaDataController.MAX_STYLE_RUNS_COUNT;
                        Double.isNaN(currentProgressMs);
                        d2 -= currentProgressMs;
                    }
                    if (this.delegate != null && animation.getCurrentProgressMs() >= 3000) {
                        this.delegate.videoTimerReached();
                    }
                }
                if (this.lastTime != d2) {
                    String formatShortDuration = AndroidUtilities.formatShortDuration((int) d2);
                    this.infoWidth = (int) Math.ceil(Theme.chat_infoPaint.measureText(formatShortDuration));
                    this.infoLayout = new StaticLayout(formatShortDuration, Theme.chat_infoPaint, this.infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                    this.lastTime = d2;
                    return;
                }
                return;
            }
            return;
        }
        if (this.isRoundVideo) {
            if (!this.useSeekBarWaveform) {
                if (!this.seekBar.isDragging()) {
                    this.seekBar.setProgress(this.currentMessageObject.audioProgress);
                    this.seekBar.setBufferedProgress(this.currentMessageObject.bufferedProgress);
                }
                this.seekBar.clearTimestamps();
            } else if (!this.seekBarWaveform.isDragging()) {
                this.seekBarWaveform.setProgress(this.currentMessageObject.audioProgress, true);
            }
            TLRPC.Document document = this.currentMessageObject.getDocument();
            if (document != null) {
                while (r1 < document.attributes.size()) {
                    TLRPC.DocumentAttribute documentAttribute = document.attributes.get(r1);
                    if (documentAttribute instanceof TLRPC.TL_documentAttributeVideo) {
                        d = documentAttribute.duration;
                        break;
                    }
                    r1++;
                }
            }
            d = 0.0d;
            long j = this.overridenDuration;
            if (j >= 0) {
                d = j;
            } else if (MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                double d5 = this.currentMessageObject.audioProgressSec;
                Double.isNaN(d5);
                d = Math.max(0.0d, d - d5);
            }
            if (this.lastTime != d) {
                this.lastTime = d;
                String formatLongDuration = AndroidUtilities.formatLongDuration((int) d);
                this.timeWidthAudio = (int) Math.ceil(Theme.chat_timePaint.measureText(formatLongDuration));
                this.durationLayout = new StaticLayout(formatLongDuration, Theme.chat_timePaint, this.timeWidthAudio, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
            }
            float f = this.currentMessageObject.audioProgress;
            if (f != 0.0f) {
                this.lastDrawingAudioProgress = f;
                if (f > 0.9f) {
                    this.lastDrawingAudioProgress = 1.0f;
                }
            }
        } else {
            if (this.documentAttach == null) {
                return;
            }
            if (!this.useSeekBarWaveform) {
                if (!this.seekBar.isDragging()) {
                    this.seekBar.setProgress(this.currentMessageObject.audioProgress);
                    this.seekBar.setBufferedProgress(this.currentMessageObject.bufferedProgress);
                }
                this.seekBar.updateTimestamps(this.currentMessageObject, null);
            } else if (!this.seekBarWaveform.isDragging()) {
                this.seekBarWaveform.setProgress(this.currentMessageObject.audioProgress, true);
            }
            if (this.documentAttachType == 3) {
                long j2 = this.overridenDuration;
                if (j2 >= 0) {
                    d3 = j2;
                } else if (!MediaController.getInstance().isPlayingMessage(this.currentMessageObject)) {
                    while (true) {
                        if (r1 >= this.documentAttach.attributes.size()) {
                            break;
                        }
                        TLRPC.DocumentAttribute documentAttribute2 = this.documentAttach.attributes.get(r1);
                        if (documentAttribute2 instanceof TLRPC.TL_documentAttributeAudio) {
                            d3 = documentAttribute2.duration;
                            break;
                        }
                        r1++;
                    }
                } else {
                    d3 = this.currentMessageObject.audioProgressSec;
                }
                if (this.lastTime != d3) {
                    this.lastTime = d3;
                    String formatLongDuration2 = AndroidUtilities.formatLongDuration((int) d3);
                    this.timeWidthAudio = (int) Math.ceil(Theme.chat_audioTimePaint.measureText(formatLongDuration2));
                    staticLayout = new StaticLayout(formatLongDuration2, Theme.chat_audioTimePaint, this.timeWidthAudio, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                    this.durationLayout = staticLayout;
                }
            } else {
                double duration = this.currentMessageObject.getDuration();
                r1 = MediaController.getInstance().isPlayingMessage(this.currentMessageObject) ? this.currentMessageObject.audioProgressSec : 0;
                double d6 = r1;
                if (this.lastTime != d6) {
                    this.lastTime = d6;
                    staticLayout = new StaticLayout(AndroidUtilities.formatShortDuration(r1, (int) duration), Theme.chat_audioTimePaint, (int) Math.ceil(Theme.chat_audioTimePaint.measureText(r3)), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
                    this.durationLayout = staticLayout;
                }
            }
        }
        invalidate();
    }

    public void updateProgressLoadingLink() {
        MessageObject messageObject;
        ChatMessageCellDelegate chatMessageCellDelegate = this.delegate;
        if (chatMessageCellDelegate == null) {
            return;
        }
        if (!chatMessageCellDelegate.isProgressLoading(this, 1)) {
            this.progressLoadingLink = null;
            ArrayList arrayList = this.progressLoadingLinkDrawables;
            if (arrayList == null || arrayList.isEmpty()) {
                return;
            }
            for (int i = 0; i < this.progressLoadingLinkDrawables.size(); i++) {
                LoadingDrawableLocation loadingDrawableLocation = (LoadingDrawableLocation) this.progressLoadingLinkDrawables.get(i);
                if (!loadingDrawableLocation.drawable.isDisappearing()) {
                    loadingDrawableLocation.drawable.disappear();
                }
            }
            return;
        }
        CharacterStyle progressLoadingLink = this.delegate.getProgressLoadingLink(this);
        if (progressLoadingLink == this.progressLoadingLink) {
            return;
        }
        this.progressLoadingLink = progressLoadingLink;
        LoadingDrawable loadingDrawable = this.progressLoadingLinkCurrentDrawable;
        if (loadingDrawable != null) {
            loadingDrawable.disappear();
            this.progressLoadingLinkCurrentDrawable = null;
        }
        LoadingDrawable loadingDrawable2 = new LoadingDrawable();
        this.progressLoadingLinkCurrentDrawable = loadingDrawable2;
        loadingDrawable2.setAppearByGradient(true);
        LinkPath linkPath = new LinkPath(true);
        this.progressLoadingLinkCurrentDrawable.usePath(linkPath);
        this.progressLoadingLinkCurrentDrawable.setRadiiDp(5.0f);
        LoadingDrawableLocation loadingDrawableLocation2 = new LoadingDrawableLocation();
        loadingDrawableLocation2.drawable = this.progressLoadingLinkCurrentDrawable;
        loadingDrawableLocation2.blockNum = -3;
        if (this.progressLoadingLinkDrawables == null) {
            this.progressLoadingLinkDrawables = new ArrayList();
        }
        this.progressLoadingLinkDrawables.add(loadingDrawableLocation2);
        if (this.progressLoadingLink == null || findProgressLoadingLink(loadingDrawableLocation2, linkPath, this.descriptionLayout, 0.0f, -2)) {
            return;
        }
        MessageObject.TextLayoutBlocks textLayoutBlocks = this.captionLayout;
        if ((textLayoutBlocks == null || !findProgressLoadingLink(loadingDrawableLocation2, linkPath, textLayoutBlocks.textLayoutBlocks)) && (messageObject = this.currentMessageObject) != null) {
            findProgressLoadingLink(loadingDrawableLocation2, linkPath, messageObject.textLayoutBlocks);
        }
    }

    @Override // android.view.View
    protected boolean verifyDrawable(Drawable drawable) {
        if (super.verifyDrawable(drawable)) {
            return true;
        }
        Drawable[] drawableArr = this.selectorDrawable;
        if (drawable == drawableArr[0] || drawable == drawableArr[1] || drawable == this.linkPreviewSelector || drawable == this.nameLayoutSelector || drawable == this.replySelector) {
            return true;
        }
        ReactionsLayoutInBubble reactionsLayoutInBubble = this.reactionsLayoutInBubble;
        return (reactionsLayoutInBubble != null && reactionsLayoutInBubble.verifyDrawable(drawable)) || (drawable instanceof LoadingDrawable);
    }

    public boolean willRemovedAfterAnimation() {
        return this.willRemoved;
    }
}
